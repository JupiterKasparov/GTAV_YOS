unit Natives;

{$mode objfpc}{$H+}
{$PACKRECORDS C}

interface

uses
  ScriptHookV, Windows, ctypes;


type
  Any = DWORD;
  PAny = ^Any;
  Hash = DWORD;
  PHash = ^Hash;
  Entity = cint;
  PEntity = ^Entity;
  Player = cint;
  PPlayer = ^Player;
  FireId = cint;
  PFireId = ^FireId;
  Ped = cint;
  PPed = ^Ped;
  Vehicle = cint;
  PVehicle = ^Vehicle;
  Cam = cint;
  PCam = ^Cam;
  CarGenerator = cint;
  PCarGenerator = ^CarGenerator;
  Group = cint;
  PGroup = ^Group;
  Train = cint;
  PTrain = ^Train;
  Pickup = cint;
  PPickup = ^Pickup;
  GTAObject = cint;
  PGTAObject = ^GTAObject;
  Weapon = cint;
  PWeapon = ^Weapon;
  Interior = cint;
  PInterior = ^Interior;
  Blip = cint;
  PBlip = ^Blip;
  Texture = cint;
  PTexture = ^Texture;
  TextureDict = cint;
  PTextureDict = ^TextureDict;
  CoverPoint = cint;
  PCoverPoint = ^CoverPoint;
  Camera = cint;
  PCamera = ^Camera;
  TaskSequence = cint;
  PTaskSequence = ^TaskSequence;
  ColourIndex = cint;
  PColourIndex = ^ColourIndex;
  Sphere = cint;
  PSphere = ^Sphere;
  ScrHandle = cint;
  PScrHandle = ^ScrHandle;

  Vector3 = packed record
    x: cfloat;
    _paddingx: DWORD;
    y: cfloat;
    _paddingy: DWORD;
    z: cfloat;
    _paddingz: DWORD;
  end;
  PVector3 = ^Vector3;


procedure WAIT(ms: cint);
function START_NEW_SCRIPT(scriptName: PChar; stackSize: cint): cint;
function START_NEW_SCRIPT_WITH_ARGS(scriptName: PChar; args: PAny; argCount, stackSize: cint): cint;
function START_NEW_SCRIPT_WITH_NAME_HASH(scriptHash: Hash; stackSize: cint): cint;
function START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(scriptHash: Hash; args: PAny; argCount, stackSize: cint): cint;
function TIMERA: cint;
function TIMERB: cint;
procedure SETTIMERA(value: cint);
procedure SETTIMERB(value: cint);
function TIMESTEP: cfloat;
function SIN(value: cfloat): cfloat;
function COS(value: cfloat): cfloat;
function SQRT(value: cfloat): cfloat;
function POW(base, exponent: cfloat): cfloat;
function LOG10(value: cfloat): cfloat;
function VMAG(x, y, z: cfloat): cfloat;
function VMAG2(x, y, z: cfloat): cfloat;
function VDIST(x1, y1, z1, x2, y2, z2: cfloat): cfloat;
function VDIST2(x1, y1, z1, x2, y2, z2: cfloat): cfloat;
function SHIFT_LEFT(value, bitShift: cint): cint;
function SHIFT_RIGHT(value, bitShift: cint): cint;
function FLOOR(value: cfloat): cint;
function CEIL(value: cfloat): cint;
function ROUND(value: cfloat): cint;
function TO_FLOAT(value: cint): cfloat;
procedure SET_THIS_THREAD_PRIORITY(priority: cint);
function APP_DATA_VALID: BOOL;
function APP_GET_INT(prop: PChar): cint;
function APP_GET_FLOAT(prop: PChar): cfloat;
function APP_GET_STRING(prop: PChar): PChar;
procedure APP_SET_INT(prop: PChar; value: cint);
procedure APP_SET_FLOAT(prop: PChar; value: cfloat);
procedure APP_SET_STRING(prop, value: PChar);
procedure APP_SET_APP(appName: PChar);
procedure APP_SET_BLOCK(blockName: PChar);
procedure APP_CLEAR_BLOCK;
procedure APP_CLOSE_APP;
procedure APP_CLOSE_BLOCK;
function APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT: BOOL;
function APP_HAS_SYNCED_DATA(appName: PChar): BOOL;
procedure APP_SAVE_DATA;
function APP_GET_DELETED_FILE_STATUS: cint;
function APP_DELETE_APP_DATA(appName: PChar): BOOL;
procedure PLAY_PED_RINGTONE(ringtoneName: PChar; _ped: Ped; p2: BOOL);
function IS_PED_RINGTONE_PLAYING(_ped: Ped): BOOL;
procedure STOP_PED_RINGTONE(_ped: Ped);
function IS_MOBILE_PHONE_CALL_ONGOING: BOOL;
function IS_MOBILE_INTERFERENCE_ACTIVE: BOOL;
function GET_CURRENT_TV_SHOW_PLAY_TIME: cint;
procedure CREATE_NEW_SCRIPTED_CONVERSATION;
procedure ADD_LINE_TO_CONVERSATION(index: cint; p1, p2: PChar; p3, p4: cint; p5, p6, p7, p8: BOOL; p9: cint; p10, p11, p12: BOOL);
procedure ADD_PED_TO_CONVERSATION(index: cint; _ped: Ped; p2: PChar);
procedure SET_POSITION_FOR_NULL_CONV_PED(p0: Any; p1, p2, p3: cfloat);
procedure SET_ENTITY_FOR_NULL_CONV_PED(p0: cint; para_entity: Entity);
procedure SET_MICROPHONE_POSITION(toggle: BOOL; x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat);
procedure SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(p0: BOOL);
procedure SET_CONVERSATION_AUDIO_PLACEHOLDER(p0: BOOL);
procedure START_SCRIPT_PHONE_CONVERSATION(p0, p1: BOOL);
procedure PRELOAD_SCRIPT_PHONE_CONVERSATION(p0, p1: BOOL);
procedure START_SCRIPT_CONVERSATION(p0, p1, p2, p3: BOOL);
procedure PRELOAD_SCRIPT_CONVERSATION(p0, p1, p2, p3: BOOL);
procedure START_PRELOADED_CONVERSATION;
function GET_IS_PRELOADED_CONVERSATION_READY: BOOL;
function IS_SCRIPTED_CONVERSATION_ONGOING: BOOL;
function IS_SCRIPTED_CONVERSATION_LOADED: BOOL;
function GET_CURRENT_SCRIPTED_CONVERSATION_LINE: cint;
procedure PAUSE_SCRIPTED_CONVERSATION(p0: BOOL);
procedure RESTART_SCRIPTED_CONVERSATION;
function STOP_SCRIPTED_CONVERSATION(p0: BOOL): cint;
procedure SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE;
procedure INTERRUPT_CONVERSATION(_ped: Ped; voiceline, speaker: PChar);
procedure INTERRUPT_CONVERSATION_AND_PAUSE(_ped: Ped; p1, speaker: PChar);
function GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(p0: PAny): cint;
procedure SET_NO_DUCKING_FOR_CONVERSATION(p0: BOOL);
procedure REGISTER_SCRIPT_WITH_AUDIO(p0: cint);
procedure UNREGISTER_SCRIPT_WITH_AUDIO;
function REQUEST_MISSION_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
function REQUEST_AMBIENT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
function REQUEST_SCRIPT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
function HINT_MISSION_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
function HINT_AMBIENT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
function HINT_SCRIPT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
procedure RELEASE_MISSION_AUDIO_BANK;
procedure RELEASE_AMBIENT_AUDIO_BANK;
procedure RELEASE_NAMED_SCRIPT_AUDIO_BANK(audioBank: PChar);
procedure RELEASE_SCRIPT_AUDIO_BANK;
procedure UNHINT_AMBIENT_AUDIO_BANK;
procedure UNHINT_SCRIPT_AUDIO_BANK;
procedure UNHINT_NAMED_SCRIPT_AUDIO_BANK(audioBank: PChar);
function GET_SOUND_ID: cint;
procedure RELEASE_SOUND_ID(soundId: cint);
procedure PLAY_SOUND(soundId: cint; audioName, audioRef: PChar; p3: BOOL; p4: Any; p5: BOOL);
procedure PLAY_SOUND_FRONTEND(soundId: cint; audioName, audioRef: PChar; p3: BOOL);
procedure PLAY_DEFERRED_SOUND_FRONTEND(soundName, soundsetName: PChar);
procedure PLAY_SOUND_FROM_ENTITY(soundId: cint; audioName: PChar; para_entity: Entity; audioRef: PChar; isNetwork: BOOL; p5: Any);
procedure PLAY_SOUND_FROM_ENTITY_HASH(soundId: cint; model: Hash; para_entity: Entity; soundSetHash: Hash; p4, p5: Any);
procedure PLAY_SOUND_FROM_COORD(soundId: cint; audioName: PChar; x, y, z: cfloat; audioRef: PChar; isNetwork: BOOL; range: cint; p8: BOOL);
procedure UPDATE_SOUND_COORD(soundId: cint; x, y, z: cfloat);
procedure STOP_SOUND(soundId: cint);
function GET_NETWORK_ID_FROM_SOUND_ID(soundId: cint): cint;
function GET_SOUND_ID_FROM_NETWORK_ID(netId: cint): cint;
procedure SET_VARIABLE_ON_SOUND(soundId: cint; variable: PChar; p2: cfloat);
procedure SET_VARIABLE_ON_STREAM(variable: PChar; p1: cfloat);
procedure OVERRIDE_UNDERWATER_STREAM(p0: PChar; p1: BOOL);
procedure SET_VARIABLE_ON_UNDER_WATER_STREAM(variableName: PChar; value: cfloat);
function HAS_SOUND_FINISHED(soundId: cint): BOOL;
procedure PLAY_PED_AMBIENT_SPEECH_NATIVE(_ped: Ped; speechName, speechParam: PChar; p3: Any);
procedure PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(_ped: Ped; speechName, speechParam: PChar; p3: Any);
procedure PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(_ped: Ped; speechName, voiceName, speechParam: PChar; p4: BOOL);
procedure PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(speechName, voiceName: PChar; x, y, z: cfloat; speechParam: PChar);
procedure OVERRIDE_TREVOR_RAGE(voiceEffect: PChar);
procedure RESET_TREVOR_RAGE;
procedure SET_PLAYER_ANGRY(_ped: Ped; toggle: BOOL);
procedure PLAY_PAIN(_ped: Ped; painID, p1: cint; p3: Any);
procedure RELEASE_WEAPON_AUDIO;
procedure ACTIVATE_AUDIO_SLOWMO_MODE(mode: PChar);
procedure DEACTIVATE_AUDIO_SLOWMO_MODE(mode: PChar);
procedure SET_AMBIENT_VOICE_NAME(_ped: Ped; name: PChar);
procedure SET_AMBIENT_VOICE_NAME_HASH(_ped: Ped; para_hash: Hash);
function GET_AMBIENT_VOICE_NAME_HASH(_ped: Ped): Hash;
procedure SET_PED_VOICE_FULL(_ped: Ped);
procedure SET_PED_RACE_AND_VOICE_GROUP(_ped: Ped; p1: cint; voiceGroup: Hash);
procedure SET_PED_VOICE_GROUP(_ped: Ped; voiceGroupHash: Hash);
procedure SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(_ped: Ped; voiceGroupHash: Hash);
procedure SET_PED_GENDER(_ped: Ped; p1: BOOL);
procedure STOP_CURRENT_PLAYING_SPEECH(_ped: Ped);
procedure STOP_CURRENT_PLAYING_AMBIENT_SPEECH(_ped: Ped);
function IS_AMBIENT_SPEECH_PLAYING(_ped: Ped): BOOL;
function IS_SCRIPTED_SPEECH_PLAYING(p0: Ped): BOOL;
function IS_ANY_SPEECH_PLAYING(_ped: Ped): BOOL;
function IS_ANY_POSITIONAL_SPEECH_PLAYING: BOOL;
function DOES_CONTEXT_EXIST_FOR_THIS_PED(_ped: Ped; speechName: PChar; p2: BOOL): BOOL;
function IS_PED_IN_CURRENT_CONVERSATION(_ped: Ped): BOOL;
procedure SET_PED_IS_DRUNK(_ped: Ped; toggle: BOOL);
procedure PLAY_ANIMAL_VOCALIZATION(pedHandle: Ped; p1: cint; speechName: PChar);
function IS_ANIMAL_VOCALIZATION_PLAYING(pedHandle: Ped): BOOL;
procedure SET_ANIMAL_MOOD(animal: Ped; mood: cint);
function IS_MOBILE_PHONE_RADIO_ACTIVE: BOOL;
procedure SET_MOBILE_PHONE_RADIO_STATE(state: BOOL);
function GET_PLAYER_RADIO_STATION_INDEX: cint;
function GET_PLAYER_RADIO_STATION_NAME: PChar;
function GET_RADIO_STATION_NAME(radioStation: cint): PChar;
function GET_PLAYER_RADIO_STATION_GENRE: cint;
function IS_RADIO_RETUNING: BOOL;
function IS_RADIO_FADED_OUT: BOOL;
procedure SET_RADIO_RETUNE_UP;
procedure SET_RADIO_RETUNE_DOWN;
procedure SET_RADIO_TO_STATION_NAME(stationName: PChar);
procedure SET_VEH_RADIO_STATION(veh: Vehicle; radioStation: PChar);
procedure SET_VEH_HAS_NORMAL_RADIO(veh: Vehicle);
function IS_VEHICLE_RADIO_ON(veh: Vehicle): BOOL;
procedure SET_VEH_FORCED_RADIO_THIS_FRAME(veh: Vehicle);
procedure SET_EMITTER_RADIO_STATION(emitterName, radioStation: PChar; p2: Any);
procedure SET_STATIC_EMITTER_ENABLED(emitterName: PChar; toggle: BOOL);
procedure LINK_STATIC_EMITTER_TO_ENTITY(emitterName: PChar; para_entity: Entity);
procedure SET_RADIO_TO_STATION_INDEX(radioStation: cint);
procedure SET_FRONTEND_RADIO_ACTIVE(active: BOOL);
procedure UNLOCK_MISSION_NEWS_STORY(newsStory: cint);
function IS_MISSION_NEWS_STORY_UNLOCKED(newsStory: cint): BOOL;
function GET_AUDIBLE_MUSIC_TRACK_TEXT_ID: cint;
procedure PLAY_END_CREDITS_MUSIC(play: BOOL);
procedure SKIP_RADIO_FORWARD;
procedure FREEZE_RADIO_STATION(radioStation: PChar);
procedure UNFREEZE_RADIO_STATION(radioStation: PChar);
procedure SET_RADIO_AUTO_UNFREEZE(toggle: BOOL);
procedure SET_INITIAL_PLAYER_STATION(radioStation: PChar);
procedure SET_USER_RADIO_CONTROL_ENABLED(toggle: BOOL);
procedure SET_RADIO_TRACK(radioStation, radioTrack: PChar);
procedure SET_RADIO_TRACK_WITH_START_OFFSET(radioStationName, mixName: PChar; p2: cint);
procedure SET_NEXT_RADIO_TRACK(radioName, radioTrack, p2, p3: PChar);
procedure SET_VEHICLE_RADIO_LOUD(veh: Vehicle; toggle: BOOL);
function CAN_VEHICLE_RECEIVE_CB_RADIO(veh: Vehicle): BOOL;
procedure SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(toggle: BOOL);
function DOES_PLAYER_VEH_HAVE_RADIO: BOOL;
function IS_PLAYER_VEH_RADIO_ENABLE: BOOL;
procedure SET_VEHICLE_RADIO_ENABLED(veh: Vehicle; toggle: BOOL);
procedure SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(p0: Any);
procedure SET_CUSTOM_RADIO_TRACK_LIST(radioStation, trackListName: PChar; p2: BOOL);
procedure CLEAR_CUSTOM_RADIO_TRACK_LIST(radioStation: PChar);
function GET_NUM_UNLOCKED_RADIO_STATIONS: cint;
function FIND_RADIO_STATION_INDEX(stationNameHash: Hash): cint;
procedure SET_RADIO_STATION_MUSIC_ONLY(radioStation: PChar; toggle: BOOL);
procedure SET_RADIO_FRONTEND_FADE_TIME(fadeTime: cfloat);
procedure UNLOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName: PChar);
procedure LOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName: PChar);
procedure UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(enableMixes: BOOL);
procedure LOCK_RADIO_STATION(radioStationName: PChar; toggle: BOOL);
procedure SET_RADIO_STATION_AS_FAVOURITE(radioStation: PChar; toggle: BOOL);
function IS_RADIO_STATION_FAVOURITED(radioStation: PChar): BOOL;
function GET_NEXT_AUDIBLE_BEAT(out1, out2: pcfloat; out3: pcint): BOOL;
procedure FORCE_MUSIC_TRACK_LIST(radioStation, trackListName: PChar; milliseconds: cint);
function GET_CURRENT_TRACK_PLAY_TIME(radioStationName: PChar): cint;
function GET_CURRENT_TRACK_SOUND_NAME(radioStationName: PChar): Hash;
procedure SET_VEHICLE_MISSILE_WARNING_ENABLED(veh: Vehicle; toggle: BOOL);
procedure SET_AMBIENT_ZONE_STATE(zoneName: PChar; p1, p2: BOOL);
procedure CLEAR_AMBIENT_ZONE_STATE(zoneName: PChar; p1: BOOL);
procedure SET_AMBIENT_ZONE_LIST_STATE(ambientZone: PChar; p1, p2: BOOL);
procedure CLEAR_AMBIENT_ZONE_LIST_STATE(ambientZone: PChar; p1: BOOL);
procedure SET_AMBIENT_ZONE_STATE_PERSISTENT(ambientZone: PChar; p1, p2: BOOL);
procedure SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(ambientZone: PChar; p1, p2: BOOL);
function IS_AMBIENT_ZONE_ENABLED(ambientZone: PChar): BOOL;
procedure REFRESH_CLOSEST_OCEAN_SHORELINE;
procedure SET_CUTSCENE_AUDIO_OVERRIDE(name: PChar);
procedure SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(variableName: PChar; value: cfloat);
function PLAY_POLICE_REPORT(name: PChar; p1: cfloat): cint;
procedure CANCEL_ALL_POLICE_REPORTS;
procedure BLIP_SIREN(veh: Vehicle);
procedure OVERRIDE_VEH_HORN(veh: Vehicle; override: BOOL; hornHash: cint);
function IS_HORN_ACTIVE(veh: Vehicle): BOOL;
procedure SET_AGGRESSIVE_HORNS(toggle: BOOL);
procedure SET_RADIO_POSITION_AUDIO_MUTE(p0: BOOL);
procedure SET_VEHICLE_CONVERSATIONS_PERSIST(p0, p1: BOOL);
procedure SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(p0, p1, p2: BOOL);
function IS_STREAM_PLAYING: BOOL;
function GET_STREAM_PLAY_TIME: cint;
function LOAD_STREAM(streamName, soundSet: PChar): BOOL;
function LOAD_STREAM_WITH_START_OFFSET(streamName: PChar; startOffset: cint; soundSet: PChar): BOOL;
procedure PLAY_STREAM_FROM_PED(_ped: Ped);
procedure PLAY_STREAM_FROM_VEHICLE(veh: Vehicle);
procedure PLAY_STREAM_FROM_OBJECT(obj: GTAObject);
procedure PLAY_STREAM_FRONTEND;
procedure PLAY_STREAM_FROM_POSITION(x, y, z: cfloat);
procedure STOP_STREAM;
procedure STOP_PED_SPEAKING(_ped: Ped; shaking: BOOL);
procedure BLOCK_ALL_SPEECH_FROM_PED(_ped: Ped; p1, p2: BOOL);
procedure STOP_PED_SPEAKING_SYNCED(_ped: Ped; p1: BOOL);
procedure DISABLE_PED_PAIN_AUDIO(_ped: Ped; toggle: BOOL);
function IS_AMBIENT_SPEECH_DISABLED(_ped: Ped): BOOL;
procedure BLOCK_SPEECH_CONTEXT_GROUP(p0: PChar; p1: cint);
procedure UNBLOCK_SPEECH_CONTEXT_GROUP(p0: PChar);
procedure SET_SIREN_WITH_NO_DRIVER(veh: Vehicle; toggle: BOOL);
procedure SET_SIREN_BYPASS_MP_DRIVER_CHECK(veh: Vehicle; toggle: BOOL);
procedure TRIGGER_SIREN_AUDIO(veh: Vehicle);
procedure SET_HORN_PERMANENTLY_ON(veh: Vehicle);
procedure SET_HORN_ENABLED(veh: Vehicle; toggle: BOOL);
procedure SET_AUDIO_VEHICLE_PRIORITY(veh: Vehicle; p1: Any);
procedure SET_HORN_PERMANENTLY_ON_TIME(veh: Vehicle; time: cfloat);
procedure USE_SIREN_AS_HORN(veh: Vehicle; toggle: BOOL);
procedure FORCE_USE_AUDIO_GAME_OBJECT(veh: Vehicle; audioName: PChar);
procedure PRELOAD_VEHICLE_AUDIO_BANK(vehicleModel: Hash);
procedure SET_VEHICLE_STARTUP_REV_SOUND(veh: Vehicle; p1, p2: PChar);
procedure RESET_VEHICLE_STARTUP_REV_SOUND(veh: Vehicle);
procedure SET_VEHICLE_FORCE_REVERSE_WARNING(p0, p1: Any);
function IS_VEHICLE_AUDIBLY_DAMAGED(veh: Vehicle): BOOL;
procedure SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(veh: Vehicle; damageFactor: cfloat);
procedure SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(veh: Vehicle; intensity: cfloat);
procedure ENABLE_VEHICLE_FANBELT_DAMAGE(veh: Vehicle; toggle: BOOL);
procedure ENABLE_VEHICLE_EXHAUST_POPS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_BOOST_ACTIVE(veh: Vehicle; toggle: BOOL);
procedure SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(veh: Vehicle; toggle: BOOL);
procedure SET_SCRIPT_UPDATE_DOOR_AUDIO(doorHash: Hash; toggle: BOOL);
procedure PLAY_VEHICLE_DOOR_OPEN_SOUND(veh: Vehicle; doorId: cint);
procedure PLAY_VEHICLE_DOOR_CLOSE_SOUND(veh: Vehicle; doorId: cint);
procedure ENABLE_STALL_WARNING_SOUNDS(veh: Vehicle; toggle: BOOL);
procedure _ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS(veh: Vehicle; enable: BOOL);
function IS_GAME_IN_CONTROL_OF_MUSIC: BOOL;
procedure SET_GPS_ACTIVE(active: BOOL);
procedure PLAY_MISSION_COMPLETE_AUDIO(audioName: PChar);
function IS_MISSION_COMPLETE_PLAYING: BOOL;
function IS_MISSION_COMPLETE_READY_FOR_UI: BOOL;
procedure BLOCK_DEATH_JINGLE(toggle: BOOL);
function START_AUDIO_SCENE(scene: PChar): BOOL;
procedure STOP_AUDIO_SCENE(scene: PChar);
procedure STOP_AUDIO_SCENES;
function IS_AUDIO_SCENE_ACTIVE(scene: PChar): BOOL;
procedure SET_AUDIO_SCENE_VARIABLE(scene, variable: PChar; value: cfloat);
procedure SET_AUDIO_SCRIPT_CLEANUP_TIME(time: cint);
procedure ADD_ENTITY_TO_AUDIO_MIX_GROUP(para_entity: Entity; groupName: PChar; p2: cfloat);
procedure REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(para_entity: Entity; p1: cfloat);
function AUDIO_IS_MUSIC_PLAYING: BOOL;
function AUDIO_IS_SCRIPTED_MUSIC_PLAYING: BOOL;
function PREPARE_MUSIC_EVENT(eventName: PChar): BOOL;
function CANCEL_MUSIC_EVENT(eventName: PChar): BOOL;
function TRIGGER_MUSIC_EVENT(eventName: PChar): BOOL;
function IS_MUSIC_ONESHOT_PLAYING: BOOL;
function GET_MUSIC_PLAYTIME: cint;
procedure SET_GLOBAL_RADIO_SIGNAL_LEVEL(p0: Any);
procedure RECORD_BROKEN_GLASS(x, y, z, radius: cfloat);
procedure CLEAR_ALL_BROKEN_GLASS;
procedure SCRIPT_OVERRIDES_WIND_ELEVATION(p0: BOOL; p1: Any);
procedure SET_PED_WALLA_DENSITY(p0, p1: cfloat);
procedure SET_PED_INTERIOR_WALLA_DENSITY(p0, p1: cfloat);
procedure FORCE_PED_PANIC_WALLA;
function PREPARE_ALARM(alarmName: PChar): BOOL;
procedure START_ALARM(alarmName: PChar; p2: BOOL);
procedure STOP_ALARM(alarmName: PChar; toggle: BOOL);
procedure STOP_ALL_ALARMS(stop: BOOL);
function IS_ALARM_PLAYING(alarmName: PChar): BOOL;
function GET_VEHICLE_DEFAULT_HORN(veh: Vehicle): Hash;
function GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(veh: Vehicle): Hash;
procedure RESET_PED_AUDIO_FLAGS(_ped: Ped);
procedure SET_PED_FOOTSTEPS_EVENTS_ENABLED(_ped: Ped; toggle: BOOL);
procedure SET_PED_CLOTH_EVENTS_ENABLED(_ped: Ped; toggle: BOOL);
procedure OVERRIDE_PLAYER_GROUND_MATERIAL(para_hash: Hash; toggle: BOOL);
procedure USE_FOOTSTEP_SCRIPT_SWEETENERS(_ped: Ped; p1: BOOL; para_hash: Hash);
procedure OVERRIDE_MICROPHONE_SETTINGS(para_hash: Hash; toggle: BOOL);
procedure FREEZE_MICROPHONE;
procedure DISTANT_COP_CAR_SIRENS(value: BOOL);
procedure SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(veh: Vehicle; p1: BOOL);
procedure ENABLE_STUNT_JUMP_AUDIO;
procedure SET_AUDIO_FLAG(flagName: PChar; toggle: BOOL);
function PREPARE_SYNCHRONIZED_AUDIO_EVENT(audioEvent: PChar; p1: Any): BOOL;
function PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(sceneID: cint; audioEvent: PChar): BOOL;
function PLAY_SYNCHRONIZED_AUDIO_EVENT(sceneID: cint): BOOL;
function STOP_SYNCHRONIZED_AUDIO_EVENT(sceneID: cint): BOOL;
procedure INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(audioEvent: PChar; x, y, z: cfloat);
procedure INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(audioEvent: PChar; para_entity: Entity);
procedure SET_AUDIO_SPECIAL_EFFECT_MODE(mode: cint);
procedure SET_PORTAL_SETTINGS_OVERRIDE(p0, p1: PChar);
procedure REMOVE_PORTAL_SETTINGS_OVERRIDE(p0: PChar);
procedure STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS;
function GET_MUSIC_VOL_SLIDER: cint;
procedure REQUEST_TENNIS_BANKS(_ped: Ped);
procedure UNREQUEST_TENNIS_BANKS;
procedure SET_SKIP_MINIGUN_SPIN_UP_AUDIO(p0: BOOL);
procedure STOP_CUTSCENE_AUDIO;
function HAS_LOADED_MP_DATA_SET: BOOL;
function HAS_LOADED_SP_DATA_SET: BOOL;
function GET_VEHICLE_HORN_SOUND_INDEX(veh: Vehicle): cint;
procedure SET_VEHICLE_HORN_SOUND_INDEX(veh: Vehicle; value: cint);
procedure ADD_SCRIPT_TO_RANDOM_PED(name: PChar; model: Hash; p2, p3: cfloat);
procedure REGISTER_OBJECT_SCRIPT_BRAIN(scriptName: PChar; modelHash: Hash; p2: cint; activationRange: cfloat; p4, p5: cint);
function IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(obj: GTAObject): BOOL;
procedure REGISTER_WORLD_POINT_SCRIPT_BRAIN(scriptName: PChar; activationRange: cfloat; p2: cint);
function IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE: BOOL;
procedure ENABLE_SCRIPT_BRAIN_SET(brainSet: cint);
procedure DISABLE_SCRIPT_BRAIN_SET(brainSet: cint);
procedure REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE;
procedure REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE;
procedure REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName: PChar);
procedure REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName: PChar);
procedure RENDER_SCRIPT_CAMS(render, ease: BOOL; easeTime: cint; p3, p4: BOOL; p5: Any);
procedure STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(render: BOOL; p1: cfloat; p2: cint; p3: Any);
function CREATE_CAM(camName: PChar; p1: BOOL): Cam;
function CREATE_CAM_WITH_PARAMS(camName: PChar; posX, posY, posZ, rotX, rotY, rotZ, fov: cfloat; p8: BOOL; p9: cint): Cam;
function CREATE_CAMERA(camHash: Hash; p1: BOOL): Cam;
function CREATE_CAMERA_WITH_PARAMS(camHash: Hash; posX, posY, posZ, rotX, rotY, rotZ, fov: cfloat; p8: BOOL; p9: Any): Cam;
procedure DESTROY_CAM(para_cam: Cam; bScriptHostCam: BOOL);
procedure DESTROY_ALL_CAMS(bScriptHostCam: BOOL);
function DOES_CAM_EXIST(para_cam: Cam): BOOL;
procedure SET_CAM_ACTIVE(para_cam: Cam; active: BOOL);
function IS_CAM_ACTIVE(para_cam: Cam): BOOL;
function IS_CAM_RENDERING(para_cam: Cam): BOOL;
function GET_RENDERING_CAM: Cam;
function GET_CAM_COORD(para_cam: Cam): Vector3;
function GET_CAM_ROT(para_cam: Cam; rotationOrder: cint): Vector3;
function GET_CAM_FOV(para_cam: Cam): cfloat;
function GET_CAM_NEAR_CLIP(para_cam: Cam): cfloat;
function GET_CAM_FAR_CLIP(para_cam: Cam): cfloat;
function GET_CAM_NEAR_DOF(para_cam: Cam): cfloat;
function GET_CAM_FAR_DOF(para_cam: Cam): cfloat;
function GET_CAM_DOF_STRENGTH(para_cam: Cam): cfloat;
procedure SET_CAM_PARAMS(para_cam: Cam; posX, posY, posZ, rotX, rotY, rotZ, fieldOfView: cfloat; p8: Any; p9, p10, p11: cint);
procedure SET_CAM_COORD(para_cam: Cam; posX, posY, posZ: cfloat);
procedure SET_CAM_ROT(para_cam: Cam; rotX, rotY, rotZ: cfloat; rotationOrder: cint);
procedure SET_CAM_FOV(para_cam: Cam; fieldOfView: cfloat);
procedure SET_CAM_NEAR_CLIP(para_cam: Cam; nearClip: cfloat);
procedure SET_CAM_FAR_CLIP(para_cam: Cam; farClip: cfloat);
procedure FORCE_CAM_FAR_CLIP(para_cam: Cam; p1: cfloat);
procedure SET_CAM_MOTION_BLUR_STRENGTH(para_cam: Cam; strength: cfloat);
procedure SET_CAM_NEAR_DOF(para_cam: Cam; nearDOF: cfloat);
procedure SET_CAM_FAR_DOF(para_cam: Cam; farDOF: cfloat);
procedure SET_CAM_DOF_STRENGTH(para_cam: Cam; dofStrength: cfloat);
procedure SET_CAM_DOF_PLANES(para_cam: Cam; p1, p2, p3, p4: cfloat);
procedure SET_CAM_USE_SHALLOW_DOF_MODE(para_cam: Cam; toggle: BOOL);
procedure SET_USE_HI_DOF;
procedure SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE;
procedure SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(camera: Cam; p1: cfloat);
procedure SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(p0: Any; p1: cfloat);
procedure SET_CAM_DOF_FNUMBER_OF_LENS(camera: Cam; p1: cfloat);
procedure SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(camera: Cam; multiplier: cfloat);
procedure SET_CAM_DOF_FOCUS_DISTANCE_BIAS(camera: Cam; p1: cfloat);
procedure SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(camera: Cam; p1: cfloat);
procedure SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(camera: Cam; p1: cfloat);
procedure SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS(camera: Cam; state: BOOL);
procedure ATTACH_CAM_TO_ENTITY(para_cam: Cam; para_entity: Entity; xOffset, yOffset, zOffset: cfloat; isRelative: BOOL);
procedure ATTACH_CAM_TO_PED_BONE(para_cam: Cam; _ped: Ped; boneIndex: cint; x, y, z: cfloat; heading: BOOL);
procedure HARD_ATTACH_CAM_TO_PED_BONE(para_cam: Cam; _ped: Ped; boneIndex: cint; p3, p4, p5, p6, p7, p8: cfloat; p9: BOOL);
procedure HARD_ATTACH_CAM_TO_ENTITY(para_cam: Cam; para_entity: Entity; xRot, yRot, zRot, xOffset, yOffset, zOffset: cfloat; isRelative: BOOL);
procedure ATTACH_CAM_TO_VEHICLE_BONE(para_cam: Cam; veh: Vehicle; boneIndex: cint; relativeRotation: BOOL; rotX, rotY, rotZ, offsetX, offsetY, offsetZ: cfloat; fixedDirection: BOOL);
procedure DETACH_CAM(para_cam: Cam);
procedure SET_CAM_INHERIT_ROLL_VEHICLE(para_cam: Cam; p1: BOOL);
procedure POINT_CAM_AT_COORD(para_cam: Cam; x, y, z: cfloat);
procedure POINT_CAM_AT_ENTITY(para_cam: Cam; para_entity: Entity; p2, p3, p4: cfloat; p5: BOOL);
procedure POINT_CAM_AT_PED_BONE(para_cam: Cam; _ped: Ped; boneIndex: cint; x, y, z: cfloat; p6: BOOL);
procedure STOP_CAM_POINTING(para_cam: Cam);
procedure SET_CAM_AFFECTS_AIMING(para_cam: Cam; toggle: BOOL);
procedure SET_CAM_CONTROLS_MINI_MAP_HEADING(para_cam: Cam; toggle: BOOL);
procedure SET_CAM_IS_INSIDE_VEHICLE(para_cam: Cam; toggle: BOOL);
procedure ALLOW_MOTION_BLUR_DECAY(p0: Any; p1: BOOL);
procedure SET_CAM_DEBUG_NAME(camera: Cam; name: PChar);
function GET_DEBUG_CAM: Cam;
procedure ADD_CAM_SPLINE_NODE(camera: Cam; x, y, z, xRot, yRot, zRot: cfloat; length, smoothingStyle, rotationOrder: cint);
procedure ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(para_cam, cam2: Cam; length, p3: cint);
procedure ADD_CAM_SPLINE_NODE_USING_CAMERA(para_cam, cam2: Cam; length, p3: cint);
procedure ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(para_cam: Cam; length, p2: cint);
procedure SET_CAM_SPLINE_PHASE(para_cam: Cam; p1: cfloat);
function GET_CAM_SPLINE_PHASE(para_cam: Cam): cfloat;
function GET_CAM_SPLINE_NODE_PHASE(para_cam: Cam): cfloat;
procedure SET_CAM_SPLINE_DURATION(para_cam: Cam; timeDuration: cint);
procedure SET_CAM_SPLINE_SMOOTHING_STYLE(para_cam: Cam; smoothingStyle: cint);
function GET_CAM_SPLINE_NODE_INDEX(para_cam: Cam): cint;
procedure SET_CAM_SPLINE_NODE_EASE(para_cam: Cam; easingFunction, p2: cint; p3: cfloat);
procedure SET_CAM_SPLINE_NODE_VELOCITY_SCALE(para_cam: Cam; p1: cint; scale: cfloat);
procedure OVERRIDE_CAM_SPLINE_VELOCITY(para_cam: Cam; p1: cint; p2, p3: cfloat);
procedure OVERRIDE_CAM_SPLINE_MOTION_BLUR(para_cam: Cam; p1: cint; p2, p3: cfloat);
procedure SET_CAM_SPLINE_NODE_EXTRA_FLAGS(para_cam: Cam; p1, flags: cint);
function IS_CAM_SPLINE_PAUSED(para_cam: Cam): BOOL;
procedure SET_CAM_ACTIVE_WITH_INTERP(camTo, camFrom: Cam; duration, easeLocation, easeRotation: cint);
function IS_CAM_INTERPOLATING(para_cam: Cam): BOOL;
procedure SHAKE_CAM(para_cam: Cam; _type: PChar; amplitude: cfloat);
procedure ANIMATED_SHAKE_CAM(para_cam: Cam; p1, p2, p3: PChar; amplitude: cfloat);
function IS_CAM_SHAKING(para_cam: Cam): BOOL;
procedure SET_CAM_SHAKE_AMPLITUDE(para_cam: Cam; amplitude: cfloat);
procedure STOP_CAM_SHAKING(para_cam: Cam; p1: BOOL);
procedure SHAKE_SCRIPT_GLOBAL(p0: PChar; p1: cfloat);
procedure ANIMATED_SHAKE_SCRIPT_GLOBAL(p0, p1, p2: PChar; p3: cfloat);
function IS_SCRIPT_GLOBAL_SHAKING: BOOL;
procedure STOP_SCRIPT_GLOBAL_SHAKING(p0: BOOL);
procedure TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(veh: Vehicle; p1: cint; p2: cfloat);
function PLAY_CAM_ANIM(para_cam: Cam; animName, animDictionary: PChar; x, y, z, xRot, yRot, zRot: cfloat; p9: BOOL; p10: cint): BOOL;
function IS_CAM_PLAYING_ANIM(para_cam: Cam; animName, animDictionary: PChar): BOOL;
procedure SET_CAM_ANIM_CURRENT_PHASE(para_cam: Cam; phase: cfloat);
function GET_CAM_ANIM_CURRENT_PHASE(para_cam: Cam): cfloat;
function PLAY_SYNCHRONIZED_CAM_ANIM(p0, p1: Any; animName, animDictionary: PChar): BOOL;
procedure SET_FLY_CAM_HORIZONTAL_RESPONSE(para_cam: Cam; p1, p2, p3: cfloat);
procedure SET_FLY_CAM_VERTICAL_RESPONSE(para_cam: Cam; p1, p2, p3: cfloat);
procedure SET_FLY_CAM_MAX_HEIGHT(para_cam: Cam; height: cfloat);
procedure SET_FLY_CAM_COORD_AND_CONSTRAIN(para_cam: Cam; x, y, z: cfloat);
procedure SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(para_cam: Cam);
function WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(para_cam: Cam): BOOL;
function IS_SCREEN_FADED_OUT: BOOL;
function IS_SCREEN_FADED_IN: BOOL;
function IS_SCREEN_FADING_OUT: BOOL;
function IS_SCREEN_FADING_IN: BOOL;
procedure DO_SCREEN_FADE_IN(duration: cint);
procedure DO_SCREEN_FADE_OUT(duration: cint);
procedure SET_WIDESCREEN_BORDERS(p0: BOOL; p1: cint);
function ARE_WIDESCREEN_BORDERS_ACTIVE: BOOL;
function GET_GAMEPLAY_CAM_COORD: Vector3;
function GET_GAMEPLAY_CAM_ROT(rotationOrder: cint): Vector3;
function GET_GAMEPLAY_CAM_FOV: cfloat;
procedure SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(p0: cfloat);
procedure SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(p0: cfloat);
function GET_GAMEPLAY_CAM_RELATIVE_HEADING: cfloat;
procedure SET_GAMEPLAY_CAM_RELATIVE_HEADING(heading: cfloat);
function GET_GAMEPLAY_CAM_RELATIVE_PITCH: cfloat;
procedure SET_GAMEPLAY_CAM_RELATIVE_PITCH(angle, scalingFactor: cfloat);
procedure RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER;
procedure FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(roll, pitch, yaw: cfloat);
procedure FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(p0, p1: cfloat);
procedure SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(yaw: cfloat);
procedure SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(pitch: cfloat);
procedure SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(p0: BOOL);
procedure SHAKE_GAMEPLAY_CAM(shakeName: PChar; intensity: cfloat);
function IS_GAMEPLAY_CAM_SHAKING: BOOL;
procedure SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(amplitude: cfloat);
procedure STOP_GAMEPLAY_CAM_SHAKING(p0: BOOL);
procedure SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(_ped: Ped);
function IS_GAMEPLAY_CAM_RENDERING: BOOL;
function IS_INTERPOLATING_FROM_SCRIPT_CAMS: BOOL;
function IS_INTERPOLATING_TO_SCRIPT_CAMS: BOOL;
procedure SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(p0: BOOL);
procedure DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE;
function IS_GAMEPLAY_CAM_LOOKING_BEHIND: BOOL;
procedure SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(para_entity: Entity);
procedure DISABLE_CAM_COLLISION_FOR_OBJECT(para_entity: Entity);
procedure BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE;
procedure SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(para_entity: Entity);
procedure DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE;
procedure SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE;
function IS_SPHERE_VISIBLE(x, y, z, radius: cfloat): BOOL;
function IS_FOLLOW_PED_CAM_ACTIVE: BOOL;
function SET_FOLLOW_PED_CAM_THIS_UPDATE(camName: PChar; p1: cint): BOOL;
procedure USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(p0, p1: BOOL);
procedure SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE;
procedure SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(minimum, maximum: cfloat);
procedure SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(minimum, maximum: cfloat);
procedure SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(p0, distance: cfloat);
function _GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING: cfloat;
function _GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING: cfloat;
procedure SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(p0: Vehicle; p1: cint);
procedure DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE;
procedure DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE;
procedure BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE;
function GET_FOLLOW_PED_CAM_ZOOM_LEVEL: cint;
function GET_FOLLOW_PED_CAM_VIEW_MODE: cint;
procedure SET_FOLLOW_PED_CAM_VIEW_MODE(viewMode: cint);
function IS_FOLLOW_VEHICLE_CAM_ACTIVE: BOOL;
procedure SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(p0: BOOL);
procedure SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(p0, p1: BOOL);
function SET_TABLE_GAMES_CAMERA_THIS_UPDATE(para_hash: Hash): BOOL;
function GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL: cint;
procedure SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(zoomLevel: cint);
function GET_FOLLOW_VEHICLE_CAM_VIEW_MODE: cint;
procedure SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(viewMode: cint);
function GET_CAM_VIEW_MODE_FOR_CONTEXT(context: cint): cint;
procedure SET_CAM_VIEW_MODE_FOR_CONTEXT(context, viewMode: cint);
function GET_CAM_ACTIVE_VIEW_MODE_CONTEXT: cint;
procedure USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE;
procedure USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(camName: PChar);
procedure FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE;
procedure SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(seatIndex: cint);
function IS_AIM_CAM_ACTIVE: BOOL;
function IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE: BOOL;
function IS_FIRST_PERSON_AIM_CAM_ACTIVE: BOOL;
procedure DISABLE_AIM_CAM_THIS_UPDATE;
function GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR: cfloat;
procedure SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(zoomFactor: cfloat);
procedure SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(p0, p1: cfloat);
procedure SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(p0, p1: cfloat);
procedure SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(p0, p1: cfloat);
procedure SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0: cfloat);
procedure SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0: cfloat);
procedure SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(p0: BOOL);
procedure FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE;
function GET_FINAL_RENDERED_CAM_COORD: Vector3;
function GET_FINAL_RENDERED_CAM_ROT(rotationOrder: cint): Vector3;
function GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(plyr: Player; rotationOrder: cint): Vector3;
function GET_FINAL_RENDERED_CAM_FOV: cfloat;
function GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(plyr: Player): cfloat;
function GET_FINAL_RENDERED_CAM_NEAR_CLIP: cfloat;
function GET_FINAL_RENDERED_CAM_FAR_CLIP: cfloat;
function GET_FINAL_RENDERED_CAM_NEAR_DOF: cfloat;
function GET_FINAL_RENDERED_CAM_FAR_DOF: cfloat;
function GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH: cfloat;
procedure SET_GAMEPLAY_COORD_HINT(x, y, z: cfloat; duration, blendOutDuration, blendInDuration, p6: cint);
procedure SET_GAMEPLAY_PED_HINT(_ped: Ped; x1, y1, z1: cfloat; p4: BOOL; duration, blendOutDuration, blendInDuration: cint);
procedure SET_GAMEPLAY_VEHICLE_HINT(veh: Vehicle; offsetX, offsetY, offsetZ: cfloat; p4: BOOL; time, easeInTime, easeOutTime: cint);
procedure SET_GAMEPLAY_OBJECT_HINT(obj: GTAObject; xOffset, yOffset, zOffset: cfloat; p4: BOOL; time, easeInTime, easeOutTime: cint);
procedure SET_GAMEPLAY_ENTITY_HINT(para_entity: Entity; xOffset, yOffset, zOffset: cfloat; p4: BOOL; time, easeInTime, easeOutTime, p8: cint);
function IS_GAMEPLAY_HINT_ACTIVE: BOOL;
procedure STOP_GAMEPLAY_HINT(p0: BOOL);
procedure STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(p0: BOOL);
procedure STOP_CODE_GAMEPLAY_HINT(p0: BOOL);
function IS_CODE_GAMEPLAY_HINT_ACTIVE: BOOL;
procedure SET_GAMEPLAY_HINT_FOV(FOV: cfloat);
procedure SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(value: cfloat);
procedure SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(value: cfloat);
procedure SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(xOffset: cfloat);
procedure SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(yOffset: cfloat);
procedure SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(toggle: BOOL);
procedure SET_CINEMATIC_BUTTON_ACTIVE(p0: BOOL);
function IS_CINEMATIC_CAM_RENDERING: BOOL;
procedure SHAKE_CINEMATIC_CAM(shakeType: PChar; amount: cfloat);
function IS_CINEMATIC_CAM_SHAKING: BOOL;
procedure SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(p0: cfloat);
procedure STOP_CINEMATIC_CAM_SHAKING(p0: BOOL);
procedure DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE;
procedure DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE;
procedure INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE;
procedure INVALIDATE_IDLE_CAM;
function IS_CINEMATIC_IDLE_CAM_RENDERING: BOOL;
function IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING: BOOL;
procedure CREATE_CINEMATIC_SHOT(p0: Hash; time: cint; p2: BOOL; para_entity: Entity);
function IS_CINEMATIC_SHOT_ACTIVE(p0: Hash): BOOL;
procedure STOP_CINEMATIC_SHOT(p0: Hash);
procedure FORCE_CINEMATIC_RENDERING_THIS_UPDATE(toggle: BOOL);
procedure SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE;
procedure SET_CINEMATIC_MODE_ACTIVE(toggle: BOOL);
function IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING: BOOL;
function DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE: BOOL;
function IS_BONNET_CINEMATIC_CAM_RENDERING: BOOL;
function IS_CINEMATIC_CAM_INPUT_ACTIVE: BOOL;
procedure IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE;
procedure BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE;
procedure STOP_CUTSCENE_CAM_SHAKING(p0: Any);
procedure SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(p0: cfloat);
function GET_FOCUS_PED_ON_SCREEN(p0: cfloat; p1: cint; p2, p3, p4, p5, p6: cfloat; p7, p8: cint): Ped;
procedure DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE;
procedure SET_CAM_DEATH_FAIL_EFFECT_STATE(p0: cint);
procedure SET_FIRST_PERSON_FLASH_EFFECT_TYPE(p0: Any);
procedure SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(vehicleName: PChar);
procedure SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(vehicleModel: Hash);
function IS_ALLOWED_INDEPENDENT_CAMERA_MODES: BOOL;
procedure CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE;
function REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER: cfloat;
procedure SET_CLOCK_TIME(hour, minute, second: cint);
procedure PAUSE_CLOCK(toggle: BOOL);
procedure ADVANCE_CLOCK_TIME_TO(hour, minute, second: cint);
procedure ADD_TO_CLOCK_TIME(hours, minutes, seconds: cint);
function GET_CLOCK_HOURS: cint;
function GET_CLOCK_MINUTES: cint;
function GET_CLOCK_SECONDS: cint;
procedure SET_CLOCK_DATE(day, month, year: cint);
function GET_CLOCK_DAY_OF_WEEK: cint;
function GET_CLOCK_DAY_OF_MONTH: cint;
function GET_CLOCK_MONTH: cint;
function GET_CLOCK_YEAR: cint;
function GET_MILLISECONDS_PER_GAME_MINUTE: cint;
procedure GET_POSIX_TIME(year, month, day, hour, minute, second: pcint);
procedure GET_UTC_TIME(year, month, day, hour, minute, second: pcint);
procedure GET_LOCAL_TIME(year, month, day, hour, minute, second: pcint);
procedure REQUEST_CUTSCENE(cutsceneName: PChar; flags: cint);
procedure REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(cutsceneName: PChar; playbackFlags, flags: cint);
procedure REMOVE_CUTSCENE;
function HAS_CUTSCENE_LOADED: BOOL;
function HAS_THIS_CUTSCENE_LOADED(cutsceneName: PChar): BOOL;
procedure SET_SCRIPT_CAN_START_CUTSCENE(threadId: cint);
function CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY: BOOL;
function IS_CUTSCENE_PLAYBACK_FLAG_SET(flag: cint): BOOL;
procedure SET_CUTSCENE_ENTITY_STREAMING_FLAGS(cutsceneEntName: PChar; p1, p2: cint);
procedure REQUEST_CUT_FILE(cutsceneName: PChar);
function HAS_CUT_FILE_LOADED(cutsceneName: PChar): BOOL;
procedure REMOVE_CUT_FILE(cutsceneName: PChar);
function GET_CUT_FILE_CONCAT_COUNT(cutsceneName: PChar): cint;
procedure START_CUTSCENE(flags: cint);
procedure START_CUTSCENE_AT_COORDS(x, y, z: cfloat; flags: cint);
procedure STOP_CUTSCENE(p0: BOOL);
procedure STOP_CUTSCENE_IMMEDIATELY;
procedure SET_CUTSCENE_ORIGIN(x, y, z, p3: cfloat; p4: cint);
procedure SET_CUTSCENE_ORIGIN_AND_ORIENTATION(x1, y1, z1, x2, y2, z2: cfloat; p6: cint);
function GET_CUTSCENE_TIME: cint;
function GET_CUTSCENE_TOTAL_DURATION: cint;
function GET_CUTSCENE_END_TIME: cint;
function GET_CUTSCENE_PLAY_DURATION: cint;
function WAS_CUTSCENE_SKIPPED: BOOL;
function HAS_CUTSCENE_FINISHED: BOOL;
function IS_CUTSCENE_ACTIVE: BOOL;
function IS_CUTSCENE_PLAYING: BOOL;
function GET_CUTSCENE_SECTION_PLAYING: cint;
function GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(cutsceneEntName: PChar; modelHash: Hash): Entity;
function GET_CUTSCENE_CONCAT_SECTION_PLAYING: cint;
function IS_CUTSCENE_AUTHORIZED(cutsceneName: PChar): BOOL;
function DOES_CUTSCENE_HANDLE_EXIST(cutsceneHandle: cint): cint;
procedure REGISTER_ENTITY_FOR_CUTSCENE(cutscenePed: Ped; cutsceneEntName: PChar; p2: cint; modelHash: Hash; p4: cint);
function GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(cutsceneEntName: PChar; modelHash: Hash): Entity;
procedure SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(modelHash: Hash);
procedure SET_CUTSCENE_TRIGGER_AREA(x1, y1, z1, x2, y2, z2: cfloat);
function CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName: PChar; modelHash: Hash): BOOL;
function CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName: PChar; modelHash: Hash): BOOL;
function CAN_SET_EXIT_STATE_FOR_CAMERA(p0: BOOL): BOOL;
procedure SET_PAD_CAN_SHAKE_DURING_CUTSCENE(toggle: BOOL);
procedure SET_CUTSCENE_FADE_VALUES(p0, p1, p2, p3: BOOL);
procedure SET_CUTSCENE_MULTIHEAD_FADE(p0, p1, p2, p3: BOOL);
procedure SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(p0: BOOL);
function IS_MULTIHEAD_FADE_UP: BOOL;
procedure NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(p0: BOOL);
procedure SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(p0: BOOL);
function CAN_USE_MOBILE_PHONE_DURING_CUTSCENE: BOOL;
procedure SET_CUTSCENE_CAN_BE_SKIPPED(p0: BOOL);
procedure SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE;
procedure SET_CUTSCENE_PED_COMPONENT_VARIATION(cutsceneEntName: PChar; componentId, drawableId, textureId: cint; modelHash: Hash);
procedure SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(cutsceneEntName: PChar; _ped: Ped; modelHash: Hash);
function DOES_CUTSCENE_ENTITY_EXIST(cutsceneEntName: PChar; modelHash: Hash): BOOL;
procedure SET_CUTSCENE_PED_PROP_VARIATION(cutsceneEntName: PChar; componentId, drawableId, textureId: cint; modelHash: Hash);
function HAS_CUTSCENE_CUT_THIS_FRAME: BOOL;
procedure DATAFILE_WATCH_REQUEST_ID(requestId: cint);
procedure DATAFILE_CLEAR_WATCH_LIST;
function DATAFILE_IS_VALID_REQUEST_ID(index: cint): BOOL;
function DATAFILE_HAS_LOADED_FILE_DATA(requestId: cint): BOOL;
function DATAFILE_HAS_VALID_FILE_DATA(requestId: cint): BOOL;
function DATAFILE_SELECT_ACTIVE_FILE(requestId: cint; p1: Any): BOOL;
function DATAFILE_DELETE_REQUESTED_FILE(requestId: cint): BOOL;
function UGC_CREATE_CONTENT(data: PAny; dataCount: cint; contentName, description, tagsCsv, contentTypeName: PChar; publish: BOOL; p7: Any): BOOL;
function UGC_CREATE_MISSION(contentName, description, tagsCsv, contentTypeName: PChar; publish: BOOL; p5: Any): BOOL;
function UGC_UPDATE_CONTENT(contentId: PChar; data: PAny; dataCount: cint; contentName, description, tagsCsv, contentTypeName: PChar; p7: Any): BOOL;
function UGC_UPDATE_MISSION(contentId, contentName, description, tagsCsv, contentTypeName: PChar; p5: Any): BOOL;
function UGC_SET_PLAYER_DATA(contentId: PChar; rating: cfloat; contentTypeName: PChar; p3: Any): BOOL;
function DATAFILE_SELECT_UGC_DATA(p0: cint; p1: Any): BOOL;
function DATAFILE_SELECT_UGC_STATS(p0: cint; p1: BOOL; p2: Any): BOOL;
function DATAFILE_SELECT_UGC_PLAYER_DATA(p0: cint; p1: Any): BOOL;
function DATAFILE_SELECT_CREATOR_STATS(p0: cint; p1: Any): BOOL;
function DATAFILE_LOAD_OFFLINE_UGC(filename: PChar; p1: Any): BOOL;
procedure DATAFILE_CREATE(p0: cint);
procedure DATAFILE_DELETE(p0: cint);
procedure DATAFILE_STORE_MISSION_HEADER(p0: cint);
procedure DATAFILE_FLUSH_MISSION_HEADER;
function DATAFILE_GET_FILE_DICT(p0: cint): PAny;
function DATAFILE_START_SAVE_TO_CLOUD(filename: PChar; p1: Any): BOOL;
function DATAFILE_UPDATE_SAVE_TO_CLOUD(p0: PBOOL): BOOL;
function DATAFILE_IS_SAVE_PENDING: BOOL;
function DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(p0, p1: Any): BOOL;
procedure DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(p0: Any);
function DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(p0: Any): PAny;
procedure DATADICT_SET_BOOL(objectData: PAny; key: PChar; value: BOOL);
procedure DATADICT_SET_INT(objectData: PAny; key: PChar; value: cint);
procedure DATADICT_SET_FLOAT(objectData: PAny; key: PChar; value: cfloat);
procedure DATADICT_SET_STRING(objectData: PAny; key, value: PChar);
procedure DATADICT_SET_VECTOR(objectData: PAny; key: PChar; valueX, valueY, valueZ: cfloat);
function DATADICT_CREATE_DICT(objectData: PAny; key: PChar): PAny;
function DATADICT_CREATE_ARRAY(objectData: PAny; key: PChar): PAny;
function DATADICT_GET_BOOL(objectData: PAny; key: PChar): BOOL;
function DATADICT_GET_INT(objectData: PAny; key: PChar): cint;
function DATADICT_GET_FLOAT(objectData: PAny; key: PChar): cfloat;
function DATADICT_GET_STRING(objectData: PAny; key: PChar): PChar;
function DATADICT_GET_VECTOR(objectData: PAny; key: PChar): Vector3;
function DATADICT_GET_DICT(objectData: PAny; key: PChar): PAny;
function DATADICT_GET_ARRAY(objectData: PAny; key: PChar): PAny;
function DATADICT_GET_TYPE(objectData: PAny; key: PChar): cint;
procedure DATAARRAY_ADD_BOOL(arrayData: PAny; value: BOOL);
procedure DATAARRAY_ADD_INT(arrayData: PAny; value: cint);
procedure DATAARRAY_ADD_FLOAT(arrayData: PAny; value: cfloat);
procedure DATAARRAY_ADD_STRING(arrayData: PAny; value: PChar);
procedure DATAARRAY_ADD_VECTOR(arrayData: PAny; valueX, valueY, valueZ: cfloat);
function DATAARRAY_ADD_DICT(arrayData: PAny): PAny;
function DATAARRAY_GET_BOOL(arrayData: PAny; arrayIndex: cint): BOOL;
function DATAARRAY_GET_INT(arrayData: PAny; arrayIndex: cint): cint;
function DATAARRAY_GET_FLOAT(arrayData: PAny; arrayIndex: cint): cfloat;
function DATAARRAY_GET_STRING(arrayData: PAny; arrayIndex: cint): PChar;
function DATAARRAY_GET_VECTOR(arrayData: PAny; arrayIndex: cint): Vector3;
function DATAARRAY_GET_DICT(arrayData: PAny; arrayIndex: cint): PAny;
function DATAARRAY_GET_COUNT(arrayData: PAny): cint;
function DATAARRAY_GET_TYPE(arrayData: PAny; arrayIndex: cint): cint;
function DECOR_SET_TIME(para_entity: Entity; propertyName: PChar; timestamp: cint): BOOL;
function DECOR_SET_BOOL(para_entity: Entity; propertyName: PChar; value: BOOL): BOOL;
function DECOR_SET_FLOAT(para_entity: Entity; propertyName: PChar; value: cfloat): BOOL;
function DECOR_SET_INT(para_entity: Entity; propertyName: PChar; value: cint): BOOL;
function DECOR_GET_BOOL(para_entity: Entity; propertyName: PChar): BOOL;
function DECOR_GET_FLOAT(para_entity: Entity; propertyName: PChar): cfloat;
function DECOR_GET_INT(para_entity: Entity; propertyName: PChar): cint;
function DECOR_EXIST_ON(para_entity: Entity; propertyName: PChar): BOOL;
function DECOR_REMOVE(para_entity: Entity; propertyName: PChar): BOOL;
procedure DECOR_REGISTER(propertyName: PChar; _type: cint);
function DECOR_IS_REGISTERED_AS_TYPE(propertyName: PChar; _type: cint): BOOL;
procedure DECOR_REGISTER_LOCK;
function ARE_ANY_CCS_PENDING: BOOL;
function IS_DLC_PRESENT(dlcHash: Hash): BOOL;
function DLC_CHECK_CLOUD_DATA_CORRECT: BOOL;
function GET_EXTRACONTENT_CLOUD_RESULT: cint;
function DLC_CHECK_COMPAT_PACK_CONFIGURATION: BOOL;
function GET_EVER_HAD_BAD_PACK_ORDER: BOOL;
function GET_IS_LOADING_SCREEN_ACTIVE: BOOL;
function GET_IS_INITIAL_LOADING_SCREEN_ACTIVE: BOOL;
function HAS_CLOUD_REQUESTS_FINISHED(p0: PBOOL; unused: cint): BOOL;
procedure ON_ENTER_SP;
procedure ON_ENTER_MP;
function DOES_ENTITY_EXIST(para_entity: Entity): BOOL;
function DOES_ENTITY_BELONG_TO_THIS_SCRIPT(para_entity: Entity; p1: BOOL): BOOL;
function DOES_ENTITY_HAVE_DRAWABLE(para_entity: Entity): BOOL;
function DOES_ENTITY_HAVE_PHYSICS(para_entity: Entity): BOOL;
function DOES_ENTITY_HAVE_SKELETON(para_entity: Entity): BOOL;
function DOES_ENTITY_HAVE_ANIM_DIRECTOR(para_entity: Entity): BOOL;
function HAS_ENTITY_ANIM_FINISHED(para_entity: Entity; animDict, animName: PChar; p3: cint): BOOL;
function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(para_entity: Entity): BOOL;
function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(para_entity: Entity): BOOL;
function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(para_entity: Entity): BOOL;
function HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(entity1, entity2: Entity; p2: BOOL): BOOL;
function HAS_ENTITY_CLEAR_LOS_TO_ENTITY(entity1, entity2: Entity; traceType: cint): BOOL;
function HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(entity1, entity2: Entity; traceType: cint): BOOL;
function HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(entity1, entity2: Entity): BOOL;
function HAS_ENTITY_COLLIDED_WITH_ANYTHING(para_entity: Entity): BOOL;
function _GET_LAST_ENTITY_HIT_BY_ENTITY(para_entity: Entity): Entity;
function GET_LAST_MATERIAL_HIT_BY_ENTITY(para_entity: Entity): Hash;
function GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(para_entity: Entity): Vector3;
procedure FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(para_entity: Entity);
function GET_ENTITY_ANIM_CURRENT_TIME(para_entity: Entity; animDict, animName: PChar): cfloat;
function GET_ENTITY_ANIM_TOTAL_TIME(para_entity: Entity; animDict, animName: PChar): cfloat;
function GET_ANIM_DURATION(animDict, animName: PChar): cfloat;
function GET_ENTITY_ATTACHED_TO(para_entity: Entity): Entity;
function GET_ENTITY_COORDS(para_entity: Entity; alive: BOOL): Vector3;
function GET_ENTITY_FORWARD_VECTOR(para_entity: Entity): Vector3;
function GET_ENTITY_FORWARD_X(para_entity: Entity): cfloat;
function GET_ENTITY_FORWARD_Y(para_entity: Entity): cfloat;
function GET_ENTITY_HEADING(para_entity: Entity): cfloat;
function GET_ENTITY_HEADING_FROM_EULERS(para_entity: Entity): cfloat;
function GET_ENTITY_HEALTH(para_entity: Entity): cint;
function GET_ENTITY_MAX_HEALTH(para_entity: Entity): cint;
procedure SET_ENTITY_MAX_HEALTH(para_entity: Entity; value: cint);
function GET_ENTITY_HEIGHT(para_entity: Entity; X, Y, Z: cfloat; atTop, inWorldCoords: BOOL): cfloat;
function GET_ENTITY_HEIGHT_ABOVE_GROUND(para_entity: Entity): cfloat;
procedure GET_ENTITY_MATRIX(para_entity: Entity; forwardVector, rightVector, upVector, position: PVector3);
function GET_ENTITY_MODEL(para_entity: Entity): Hash;
function GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(para_entity: Entity; posX, posY, posZ: cfloat): Vector3;
function GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(para_entity: Entity; offsetX, offsetY, offsetZ: cfloat): Vector3;
function GET_ENTITY_PITCH(para_entity: Entity): cfloat;
procedure GET_ENTITY_QUATERNION(para_entity: Entity; x, y, z, w: pcfloat);
function GET_ENTITY_ROLL(para_entity: Entity): cfloat;
function GET_ENTITY_ROTATION(para_entity: Entity; rotationOrder: cint): Vector3;
function GET_ENTITY_ROTATION_VELOCITY(para_entity: Entity): Vector3;
function GET_ENTITY_SCRIPT(para_entity: Entity; script: PScrHandle): PChar;
function GET_ENTITY_SPEED(para_entity: Entity): cfloat;
function GET_ENTITY_SPEED_VECTOR(para_entity: Entity; relative: BOOL): Vector3;
function GET_ENTITY_UPRIGHT_VALUE(para_entity: Entity): cfloat;
function GET_ENTITY_VELOCITY(para_entity: Entity): Vector3;
function GET_OBJECT_INDEX_FROM_ENTITY_INDEX(para_entity: Entity): GTAObject;
function GET_PED_INDEX_FROM_ENTITY_INDEX(para_entity: Entity): Ped;
function GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(para_entity: Entity): Vehicle;
function GET_WORLD_POSITION_OF_ENTITY_BONE(para_entity: Entity; boneIndex: cint): Vector3;
function GET_NEAREST_PLAYER_TO_ENTITY(para_entity: Entity): Player;
function GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(para_entity: Entity; team: cint): Player;
function GET_NEAREST_PARTICIPANT_TO_ENTITY(para_entity: Entity): cint;
function GET_ENTITY_TYPE(para_entity: Entity): cint;
function GET_ENTITY_POPULATION_TYPE(para_entity: Entity): cint;
function IS_AN_ENTITY(handle: ScrHandle): BOOL;
function IS_ENTITY_A_PED(para_entity: Entity): BOOL;
function IS_ENTITY_A_MISSION_ENTITY(para_entity: Entity): BOOL;
function IS_ENTITY_A_VEHICLE(para_entity: Entity): BOOL;
function IS_ENTITY_AN_OBJECT(para_entity: Entity): BOOL;
function IS_ENTITY_AT_COORD(para_entity: Entity; xPos, yPos, zPos, xSize, ySize, zSize: cfloat; p7, p8: BOOL; p9: cint): BOOL;
function IS_ENTITY_AT_ENTITY(entity1, entity2: Entity; xSize, ySize, zSize: cfloat; p5, p6: BOOL; p7: cint): BOOL;
function IS_ENTITY_ATTACHED(para_entity: Entity): BOOL;
function IS_ENTITY_ATTACHED_TO_ANY_OBJECT(para_entity: Entity): BOOL;
function IS_ENTITY_ATTACHED_TO_ANY_PED(para_entity: Entity): BOOL;
function IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(para_entity: Entity): BOOL;
function IS_ENTITY_ATTACHED_TO_ENTITY(from, _to: Entity): BOOL;
function IS_ENTITY_DEAD(para_entity: Entity; p1: BOOL): BOOL;
function IS_ENTITY_IN_AIR(para_entity: Entity): BOOL;
function IS_ENTITY_IN_ANGLED_AREA(para_entity: Entity; x1, y1, z1, x2, y2, z2, width: cfloat; debug, includeZ: BOOL; p10: Any): BOOL;
function IS_ENTITY_IN_AREA(para_entity: Entity; x1, y1, z1, x2, y2, z2: cfloat; p7, p8: BOOL; p9: Any): BOOL;
function IS_ENTITY_IN_ZONE(para_entity: Entity; zone: PChar): BOOL;
function IS_ENTITY_IN_WATER(para_entity: Entity): BOOL;
function GET_ENTITY_SUBMERGED_LEVEL(para_entity: Entity): cfloat;
procedure SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(para_entity: Entity; toggle: BOOL);
function IS_ENTITY_ON_SCREEN(para_entity: Entity): BOOL;
function IS_ENTITY_PLAYING_ANIM(para_entity: Entity; animDict, animName: PChar; taskFlag: cint): BOOL;
function IS_ENTITY_STATIC(para_entity: Entity): BOOL;
function IS_ENTITY_TOUCHING_ENTITY(para_entity, targetEntity: Entity): BOOL;
function IS_ENTITY_TOUCHING_MODEL(para_entity: Entity; modelHash: Hash): BOOL;
function IS_ENTITY_UPRIGHT(para_entity: Entity; angle: cfloat): BOOL;
function IS_ENTITY_UPSIDEDOWN(para_entity: Entity): BOOL;
function IS_ENTITY_VISIBLE(para_entity: Entity): BOOL;
function IS_ENTITY_VISIBLE_TO_SCRIPT(para_entity: Entity): BOOL;
function IS_ENTITY_OCCLUDED(para_entity: Entity): BOOL;
function WOULD_ENTITY_BE_OCCLUDED(entityModelHash: Hash; x, y, z: cfloat; p4: BOOL): BOOL;
function IS_ENTITY_WAITING_FOR_WORLD_COLLISION(para_entity: Entity): BOOL;
procedure APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(para_entity: Entity; forceType: cint; x, y, z: cfloat; p5, isDirectionRel, isForceRel, p8: BOOL);
procedure APPLY_FORCE_TO_ENTITY(para_entity: Entity; forceFlags: cint; x, y, z, offX, offY, offZ: cfloat; boneIndex: cint; isDirectionRel, ignoreUpVec, isForceRel, p12, p13: BOOL);
procedure ATTACH_ENTITY_TO_ENTITY(entity1, entity2: Entity; boneIndex: cint; xPos, yPos, zPos, xRot, yRot, zRot: cfloat; p9, useSoftPinning, collision, isPed: BOOL; vertexIndex: cint; fixedRot: BOOL; p15: Any);
procedure ATTACH_ENTITY_BONE_TO_ENTITY_BONE(entity1, entity2: Entity; boneIndex1, boneIndex2: cint; p4, p5: BOOL);
procedure ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(entity1, entity2: Entity; boneIndex1, boneIndex2: cint; p4, p5: BOOL);
procedure ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(entity1, entity2: Entity; boneIndex1, boneIndex2: cint; xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce: cfloat; fixedRot, p15, collision, p17: BOOL; p18: cint);
procedure ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS(firstEntityIndex, secondEntityIndex: Entity; firstEntityBoneIndex, secondEntityBoneIndex: cint; secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength: cfloat; constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation: BOOL; rotOrder: cint; invMassScaleA, invMassScaleB: cfloat);
procedure PROCESS_ENTITY_ATTACHMENTS(para_entity: Entity);
function GET_ENTITY_BONE_INDEX_BY_NAME(para_entity: Entity; boneName: PChar): cint;
procedure CLEAR_ENTITY_LAST_DAMAGE_ENTITY(para_entity: Entity);
procedure DELETE_ENTITY(entity: PEntity);
procedure DETACH_ENTITY(para_entity: Entity; dynamic, collision: BOOL);
procedure FREEZE_ENTITY_POSITION(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(para_entity: Entity; toggle: BOOL);
function PLAY_ENTITY_ANIM(para_entity: Entity; animName, animDict: PChar; p3: cfloat; loop, stayInAnim, p6: BOOL; delta: cfloat; bitset: Any): BOOL;
function PLAY_SYNCHRONIZED_ENTITY_ANIM(para_entity: Entity; syncedScene: cint; animation, propName: PChar; p4, p5: cfloat; p6: Any; p7: cfloat): BOOL;
function PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2: cfloat; y2: Any; z2: cfloat; p6, p7: PChar; p8, p9: cfloat; p10: Any; p11: cfloat): BOOL;
function STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2: cfloat; y2: Any; z2: cfloat): BOOL;
function STOP_ENTITY_ANIM(para_entity: Entity; animation, animGroup: PChar; p3: cfloat): BOOL;
function STOP_SYNCHRONIZED_ENTITY_ANIM(para_entity: Entity; p1: cfloat; p2: BOOL): BOOL;
function HAS_ANIM_EVENT_FIRED(para_entity: Entity; actionHash: Hash): BOOL;
function FIND_ANIM_EVENT_PHASE(animDictionary, animName, p2: PChar; p3, p4: PAny): BOOL;
procedure SET_ENTITY_ANIM_CURRENT_TIME(para_entity: Entity; animDictionary, animName: PChar; time: cfloat);
procedure SET_ENTITY_ANIM_SPEED(para_entity: Entity; animDictionary, animName: PChar; speedMultiplier: cfloat);
procedure SET_ENTITY_AS_MISSION_ENTITY(para_entity: Entity; p1, p2: BOOL);
procedure SET_ENTITY_AS_NO_LONGER_NEEDED(entity: PEntity);
procedure SET_PED_AS_NO_LONGER_NEEDED(_ped: PPed);
procedure SET_VEHICLE_AS_NO_LONGER_NEEDED(veh: PVehicle);
procedure SET_OBJECT_AS_NO_LONGER_NEEDED(obj: PGTAObject);
procedure SET_ENTITY_CAN_BE_DAMAGED(para_entity: Entity; toggle: BOOL);
function GET_ENTITY_CAN_BE_DAMAGED(para_entity: Entity): BOOL;
procedure SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(para_entity: Entity; bCanBeDamaged: BOOL; relGroup: cint);
procedure SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_COLLISION(para_entity: Entity; toggle, keepPhysics: BOOL);
function GET_ENTITY_COLLISION_DISABLED(para_entity: Entity): BOOL;
procedure SET_ENTITY_COMPLETELY_DISABLE_COLLISION(para_entity: Entity; toggle, keepPhysics: BOOL);
procedure SET_ENTITY_COORDS(para_entity: Entity; xPos, yPos, zPos: cfloat; xAxis, yAxis, zAxis, clearArea: BOOL);
procedure SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(para_entity: Entity; xPos, yPos, zPos: cfloat; alive, deadFlag, ragdollFlag, clearArea: BOOL);
procedure SET_ENTITY_COORDS_NO_OFFSET(para_entity: Entity; xPos, yPos, zPos: cfloat; xAxis, yAxis, zAxis: BOOL);
procedure SET_ENTITY_DYNAMIC(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_HEADING(para_entity: Entity; heading: cfloat);
procedure SET_ENTITY_HEALTH(para_entity: Entity; health: cint; instigator: Entity; weaponType: Hash);
procedure SET_ENTITY_INVINCIBLE(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_IS_TARGET_PRIORITY(para_entity: Entity; p1: BOOL; p2: cfloat);
procedure SET_ENTITY_LIGHTS(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_LOAD_COLLISION_FLAG(para_entity: Entity; toggle: BOOL; p2: Any);
function HAS_COLLISION_LOADED_AROUND_ENTITY(para_entity: Entity): BOOL;
procedure SET_ENTITY_MAX_SPEED(para_entity: Entity; speed: cfloat);
procedure SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(para_entity: Entity; p1: BOOL; p2: Any);
procedure SET_ENTITY_PROOFS(para_entity: Entity; bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof: BOOL);
function GET_ENTITY_PROOFS(para_entity: Entity; bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof: PBOOL): BOOL;
procedure SET_ENTITY_QUATERNION(para_entity: Entity; x, y, z, w: cfloat);
procedure SET_ENTITY_RECORDS_COLLISIONS(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_ROTATION(para_entity: Entity; pitch, roll, yaw: cfloat; rotationOrder: cint; p5: BOOL);
procedure SET_ENTITY_VISIBLE(para_entity: Entity; toggle, p2: BOOL);
procedure SET_ENTITY_WATER_REFLECTION_FLAG(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_MIRROR_REFLECTION_FLAG(para_entity: Entity; p1: BOOL);
procedure SET_ENTITY_VELOCITY(para_entity: Entity; x, y, z: cfloat);
procedure SET_ENTITY_ANGULAR_VELOCITY(para_entity: Entity; x, y, z: cfloat);
procedure SET_ENTITY_HAS_GRAVITY(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_LOD_DIST(para_entity: Entity; value: cint);
function GET_ENTITY_LOD_DIST(para_entity: Entity): cint;
procedure SET_ENTITY_ALPHA(para_entity: Entity; alphaLevel: cint; skin: BOOL);
function GET_ENTITY_ALPHA(para_entity: Entity): cint;
procedure RESET_ENTITY_ALPHA(para_entity: Entity);
procedure RESET_PICKUP_ENTITY_GLOW(para_entity: Entity);
procedure SET_PICKUP_COLLIDES_WITH_PROJECTILES(p0, p1: Any);
procedure SET_ENTITY_SORT_BIAS(para_entity: Entity; p1: cfloat);
procedure SET_ENTITY_ALWAYS_PRERENDER(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_RENDER_SCORCHED(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_TRAFFICLIGHT_OVERRIDE(para_entity: Entity; state: cint);
procedure SET_ENTITY_IS_IN_VEHICLE(para_entity: Entity);
procedure CREATE_MODEL_SWAP(x, y, z, radius: cfloat; originalModel, newModel: Hash; p6: BOOL);
procedure REMOVE_MODEL_SWAP(x, y, z, radius: cfloat; originalModel, newModel: Hash; p6: BOOL);
procedure CREATE_MODEL_HIDE(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL);
procedure CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL);
procedure REMOVE_MODEL_HIDE(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL);
procedure CREATE_FORCED_OBJECT(x, y, z: cfloat; p3: Any; modelHash: Hash; p5: BOOL);
procedure REMOVE_FORCED_OBJECT(x, y, z, p3: cfloat; modelHash: Hash);
procedure SET_ENTITY_NO_COLLISION_ENTITY(entity1, entity2: Entity; thisFrameOnly: BOOL);
procedure SET_ENTITY_MOTION_BLUR(para_entity: Entity; toggle: BOOL);
procedure SET_CAN_AUTO_VAULT_ON_ENTITY(para_entity: Entity; toggle: BOOL);
procedure SET_CAN_CLIMB_ON_ENTITY(para_entity: Entity; toggle: BOOL);
procedure SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_NOWEAPONDECALS(para_entity: Entity; p1: BOOL);
procedure SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(para_entity: Entity; p1: BOOL);
function GET_ENTITY_BONE_ROTATION(para_entity: Entity; boneIndex: cint): Vector3;
function GET_ENTITY_BONE_POSTION(para_entity: Entity; boneIndex: cint): Vector3;
function GET_ENTITY_BONE_OBJECT_ROTATION(para_entity: Entity; boneIndex: cint): Vector3;
function GET_ENTITY_BONE_OBJECT_POSTION(para_entity: Entity; boneIndex: cint): Vector3;
function GET_ENTITY_BONE_COUNT(para_entity: Entity): cint;
procedure ENABLE_ENTITY_BULLET_COLLISION(para_entity: Entity);
procedure SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(entity1, entity2: Entity);
procedure SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(entity1, entity2: Entity);
procedure SET_ALLOW_MIGRATE_TO_SPECTATOR(para_entity: Entity; p1: Any);
function GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(para_entity: Entity; modelHash: Hash): Entity;
procedure SET_PICK_UP_BY_CARGOBOB_DISABLED(para_entity: Entity; toggle: BOOL);
procedure SET_DECISION_MAKER(_ped: Ped; name: Hash);
procedure CLEAR_DECISION_MAKER_EVENT_RESPONSE(name: Hash; eventType: cint);
procedure BLOCK_DECISION_MAKER_EVENT(name: Hash; eventType: cint);
procedure UNBLOCK_DECISION_MAKER_EVENT(name: Hash; eventType: cint);
function ADD_SHOCKING_EVENT_AT_POSITION(eventType: cint; x, y, z, duration: cfloat): cint;
function ADD_SHOCKING_EVENT_FOR_ENTITY(eventType: cint; para_entity: Entity; duration: cfloat): cint;
function IS_SHOCKING_EVENT_IN_SPHERE(eventType: cint; x, y, z, radius: cfloat): BOOL;
function REMOVE_SHOCKING_EVENT(event: ScrHandle): BOOL;
procedure REMOVE_ALL_SHOCKING_EVENTS(p0: BOOL);
procedure REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS;
procedure SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME;
procedure SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(eventType: cint);
procedure SUPPRESS_AGITATION_EVENTS_NEXT_FRAME;
function GET_NUM_TATTOO_SHOP_DLC_ITEMS(character: cint): cint;
function GET_TATTOO_SHOP_DLC_ITEM_DATA(characterType, decorationIndex: cint; outComponent: PAny): BOOL;
function GET_TATTOO_SHOP_DLC_ITEM_INDEX(overlayHash: Hash; p1: Any; character: cint): cint;
procedure INIT_SHOP_PED_COMPONENT(outComponent: PAny);
procedure INIT_SHOP_PED_PROP(outProp: PAny);
function SETUP_SHOP_PED_APPAREL_QUERY(p0, p1, p2, p3: cint): cint;
function SETUP_SHOP_PED_APPAREL_QUERY_TU(character, p1, p2: cint; p3: BOOL; p4, componentId: cint): cint;
procedure GET_SHOP_PED_QUERY_COMPONENT(componentId: cint; outComponent: PAny);
function GET_SHOP_PED_QUERY_COMPONENT_INDEX(componentHash: Hash): cint;
procedure GET_SHOP_PED_COMPONENT(componentHash: Hash; outComponent: PAny);
procedure GET_SHOP_PED_QUERY_PROP(componentId: cint; outProp: PAny);
function GET_SHOP_PED_QUERY_PROP_INDEX(componentHash: Hash): cint;
procedure GET_SHOP_PED_PROP(componentHash: Hash; outProp: PAny);
function GET_HASH_NAME_FOR_COMPONENT(para_entity: Entity; componentId, drawableVariant, textureVariant: cint): Hash;
function GET_HASH_NAME_FOR_PROP(para_entity: Entity; componentId, propIndex, propTextureIndex: cint): Hash;
function GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(componentHash: Hash): cint;
function GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(propHash: Hash): cint;
procedure GET_VARIANT_COMPONENT(componentHash: Hash; variantComponentIndex: cint; nameHash: PHash; enumValue, componentType: pcint);
procedure GET_VARIANT_PROP(componentHash: Hash; variantPropIndex: cint; nameHash: PHash; enumValue, anchorPoint: pcint);
function GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(componentHash: Hash): cint;
function GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(componentHash: Hash): cint;
procedure GET_FORCED_COMPONENT(componentHash: Hash; forcedComponentIndex: cint; nameHash: PHash; enumValue, componentType: pcint);
procedure GET_FORCED_PROP(componentHash: Hash; forcedPropIndex: cint; nameHash: PHash; enumValue, anchorPoint: pcint);
function DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(componentHash, restrictionTagHash: Hash; componentId: cint): BOOL;
function DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(_ped: Ped; componentId: cint; restrictionTagHash: Hash): BOOL;
function DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(_ped: Ped; componentId: cint; restrictionTagHash: Hash): BOOL;
function SETUP_SHOP_PED_OUTFIT_QUERY(character: cint; p1: BOOL): cint;
procedure GET_SHOP_PED_QUERY_OUTFIT(outfitIndex: cint; outfit: PAny);
procedure GET_SHOP_PED_OUTFIT(p0: Any; p1: PAny);
function GET_SHOP_PED_OUTFIT_LOCATE(p0: Any): cint;
function GET_SHOP_PED_OUTFIT_PROP_VARIANT(outfitHash: Hash; variantIndex: cint; outPropVariant: PAny): BOOL;
function GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(outfitHash: Hash; variantIndex: cint; outComponentVariant: PAny): BOOL;
function GET_NUM_DLC_VEHICLES: cint;
function GET_DLC_VEHICLE_MODEL(dlcVehicleIndex: cint): Hash;
function GET_DLC_VEHICLE_DATA(dlcVehicleIndex: cint; outData: PAny): BOOL;
function GET_DLC_VEHICLE_FLAGS(dlcVehicleIndex: cint): cint;
function GET_NUM_DLC_WEAPONS: cint;
function GET_NUM_DLC_WEAPONS_SP: cint;
function GET_DLC_WEAPON_DATA(dlcWeaponIndex: cint; outData: PAny): BOOL;
function GET_DLC_WEAPON_DATA_SP(dlcWeaponIndex: cint; outData: PAny): BOOL;
function GET_NUM_DLC_WEAPON_COMPONENTS(dlcWeaponIndex: cint): cint;
function GET_NUM_DLC_WEAPON_COMPONENTS_SP(dlcWeaponIndex: cint): cint;
function GET_DLC_WEAPON_COMPONENT_DATA(dlcWeaponIndex, dlcWeapCompIndex: cint; ComponentDataPtr: PAny): BOOL;
function GET_DLC_WEAPON_COMPONENT_DATA_SP(dlcWeaponIndex, dlcWeapCompIndex: cint; ComponentDataPtr: PAny): BOOL;
function IS_CONTENT_ITEM_LOCKED(itemHash: Hash): BOOL;
function IS_DLC_VEHICLE_MOD(para_hash: Hash): BOOL;
function GET_DLC_VEHICLE_MOD_LOCK_HASH(para_hash: Hash): Hash;
procedure EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(para_hash: Hash);
procedure REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(para_hash: Hash);
function START_SCRIPT_FIRE(X, Y, Z: cfloat; maxChildren: cint; isGasFire: BOOL): FireId;
procedure REMOVE_SCRIPT_FIRE(fireHandle: FireId);
function START_ENTITY_FIRE(para_entity: Entity): FireId;
procedure STOP_ENTITY_FIRE(para_entity: Entity);
function IS_ENTITY_ON_FIRE(para_entity: Entity): BOOL;
function GET_NUMBER_OF_FIRES_IN_RANGE(x, y, z, radius: cfloat): cint;
procedure SET_FLAMMABILITY_MULTIPLIER(p0: cfloat);
procedure STOP_FIRE_IN_RANGE(x, y, z, radius: cfloat);
function GET_CLOSEST_FIRE_POS(outPosition: PVector3; x, y, z: cfloat): BOOL;
procedure ADD_EXPLOSION(x, y, z: cfloat; explosionType: cint; damageScale: cfloat; isAudible, isInvisible: BOOL; cameraShake: cfloat; noDamage: BOOL);
procedure ADD_OWNED_EXPLOSION(_ped: Ped; x, y, z: cfloat; explosionType: cint; damageScale: cfloat; isAudible, isInvisible: BOOL; cameraShake: cfloat);
procedure ADD_EXPLOSION_WITH_USER_VFX(x, y, z: cfloat; explosionType: cint; explosionFx: Hash; damageScale: cfloat; isAudible, isInvisible: BOOL; cameraShake: cfloat);
function IS_EXPLOSION_IN_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2: cfloat): BOOL;
function IS_EXPLOSION_ACTIVE_IN_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2: cfloat): BOOL;
function IS_EXPLOSION_IN_SPHERE(explosionType: cint; x, y, z, radius: cfloat): BOOL;
function GET_OWNER_OF_EXPLOSION_IN_SPHERE(explosionType: cint; x, y, z, radius: cfloat): Entity;
function IS_EXPLOSION_IN_ANGLED_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2, width: cfloat): BOOL;
function GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2, radius: cfloat): Entity;
procedure SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(enabled: BOOL);
procedure DRAW_DEBUG_LINE(x1, y1, z1, x2, y2, z2: cfloat; r, g, b, alpha: cint);
procedure DRAW_DEBUG_LINE_WITH_TWO_COLOURS(x1, y1, z1, x2, y2, z2: cfloat; r1, g1, b1, r2, g2, b2, alpha1, alpha2: cint);
procedure DRAW_DEBUG_SPHERE(x, y, z, radius: cfloat; red, green, blue, alpha: cint);
procedure DRAW_DEBUG_BOX(x1, y1, z1, x2, y2, z2: cfloat; r, g, b, alpha: cint);
procedure DRAW_DEBUG_CROSS(x, y, z, size: cfloat; red, green, blue, alpha: cint);
procedure DRAW_DEBUG_TEXT(text: PChar; x, y, z: cfloat; red, green, blue, alpha: cint);
procedure DRAW_DEBUG_TEXT_2D(text: PChar; x, y, z: cfloat; red, green, blue, alpha: cint);
procedure DRAW_LINE(x1, y1, z1, x2, y2, z2: cfloat; red, green, blue, alpha: cint);
procedure DRAW_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; red, green, blue, alpha: cint);
procedure DRAW_TEXTURED_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; red, green, blue, alpha: cint; textureDict, textureName: PChar; u1, v1, w1, u2, v2, w2, u3, v3, w3: cfloat);
procedure DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1: cfloat; alpha1: cint; red2, green2, blue2: cfloat; alpha2: cint; red3, green3, blue3: cfloat; alpha3: cint; textureDict, textureName: PChar; u1, v1, w1, u2, v2, w2, u3, v3, w3: cfloat);
procedure DRAW_BOX(x1, y1, z1, x2, y2, z2: cfloat; red, green, blue, alpha: cint);
procedure SET_BACKFACECULLING(toggle: BOOL);
procedure SET_DEPTHWRITING(toggle: BOOL);
function BEGIN_TAKE_MISSION_CREATOR_PHOTO: BOOL;
function GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO: cint;
procedure FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO;
function LOAD_MISSION_CREATOR_PHOTO(p0: PAny; p1, p2, p3: Any): BOOL;
function GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(p0: PAny): cint;
function BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW: BOOL;
function GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW: cint;
procedure FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW;
function BEGIN_TAKE_HIGH_QUALITY_PHOTO: BOOL;
function GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO: cint;
procedure FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO;
procedure SET_TAKEN_PHOTO_IS_MUGSHOT(toggle: BOOL);
procedure SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(p0: Any; p1: cint);
procedure SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(p0: Any);
function SAVE_HIGH_QUALITY_PHOTO(unused: cint): BOOL;
function GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO: cint;
function BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0: Any): BOOL;
function GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0: cint): cint;
procedure FREE_MEMORY_FOR_LOW_QUALITY_PHOTO;
procedure DRAW_LOW_QUALITY_PHOTO_TO_PHONE(p0, p1: BOOL);
function GET_MAXIMUM_NUMBER_OF_PHOTOS: cint;
function GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS: cint;
function GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS: cint;
function QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(p0: Any): BOOL;
function GET_STATUS_OF_SORTED_LIST_OPERATION(p0: Any): cint;
procedure CLEAR_STATUS_OF_SORTED_LIST_OPERATION;
function DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(p0: Any): BOOL;
function LOAD_HIGH_QUALITY_PHOTO(p0: Any): BOOL;
function GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(p0: cint): cint;
procedure DRAW_LIGHT_WITH_RANGEEX(x, y, z: cfloat; r, g, b: cint; range, intensity, shadow: cfloat);
procedure DRAW_LIGHT_WITH_RANGE(posX, posY, posZ: cfloat; colorR, colorG, colorB: cint; range, intensity: cfloat);
procedure DRAW_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ: cfloat; colorR, colorG, colorB: cint; distance, brightness, hardness, radius, falloff: cfloat);
procedure DRAW_SHADOWED_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ: cfloat; colorR, colorG, colorB: cint; distance, brightness, roundness, radius, falloff: cfloat; shadowId: cint);
procedure FADE_UP_PED_LIGHT(p0: cfloat);
procedure UPDATE_LIGHTS_ON_ENTITY(para_entity: Entity);
procedure SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(p0: Any);
function GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE: cfloat;
procedure DRAW_MARKER(_type: cint; posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ: cfloat; red, green, blue, alpha: cint; bobUpAndDown, faceCamera: BOOL; p19: cint; rotate: BOOL; textureDict, textureName: PChar; drawOnEnts: BOOL);
procedure DRAW_MARKER_EX(_type: cint; posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ: cfloat; red, green, blue, alpha: cint; bobUpAndDown, faceCamera: BOOL; p19: Any; rotate: BOOL; textureDict, textureName: PChar; drawOnEnts, p24, p25: BOOL);
procedure DRAW_MARKER_SPHERE(x, y, z, radius: cfloat; red, green, blue: cint; alpha: cfloat);
function CREATE_CHECKPOINT(_type: cint; posX1, posY1, posZ1, posX2, posY2, posZ2, diameter: cfloat; red, green, blue, alpha, reserved: cint): cint;
procedure SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(checkpoint: cint; scale: cfloat);
procedure SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(checkpoint: cint; scale: cfloat);
procedure SET_CHECKPOINT_CYLINDER_HEIGHT(checkpoint: cint; nearHeight, farHeight, radius: cfloat);
procedure SET_CHECKPOINT_RGBA(checkpoint, red, green, blue, alpha: cint);
procedure SET_CHECKPOINT_RGBA2(checkpoint, red, green, blue, alpha: cint);
procedure SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(checkpoint: cint; posX, posY, posZ, unkX, unkY, unkZ: cfloat);
procedure SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(checkpoint: cint);
procedure SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(checkpoint: cint);
procedure SET_CHECKPOINT_FORCE_DIRECTION(checkpoint: cint);
procedure SET_CHECKPOINT_DIRECTION(checkpoint: cint; posX, posY, posZ: cfloat);
procedure DELETE_CHECKPOINT(checkpoint: cint);
procedure DONT_RENDER_IN_GAME_UI(p0: BOOL);
procedure FORCE_RENDER_IN_GAME_UI(toggle: BOOL);
procedure REQUEST_STREAMED_TEXTURE_DICT(textureDict: PChar; p1: BOOL);
function HAS_STREAMED_TEXTURE_DICT_LOADED(textureDict: PChar): BOOL;
procedure SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(textureDict: PChar);
procedure DRAW_RECT(x, y, width, height: cfloat; r, g, b, a: cint; p8: BOOL);
procedure SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(toggle: BOOL);
procedure SET_SCRIPT_GFX_DRAW_ORDER(drawOrder: cint);
procedure SET_SCRIPT_GFX_ALIGN(horizontalAlign, verticalAlign: cint);
procedure RESET_SCRIPT_GFX_ALIGN;
procedure SET_SCRIPT_GFX_ALIGN_PARAMS(x, y, w, h: cfloat);
procedure GET_SCRIPT_GFX_ALIGN_POSITION(x, y: cfloat; calculatedX, calculatedY: pcfloat);
function GET_SAFE_ZONE_SIZE: cfloat;
procedure DRAW_SPRITE(textureDict, textureName: PChar; screenX, screenY, width, height, heading: cfloat; red, green, blue, alpha: cint; p11: BOOL; p12: Any);
procedure DRAW_SPRITE_ARX(textureDict, textureName: PChar; x, y, width, height, p6: cfloat; red, green, blue, alpha: cint; p11, p12: Any);
procedure DRAW_SPRITE_NAMED_RENDERTARGET(textureDict, textureName: PChar; screenX, screenY, width, height, heading: cfloat; red, green, blue, alpha: cint; p11: Any);
procedure DRAW_SPRITE_ARX_WITH_UV(textureDict, textureName: PChar; x, y, width, height, u1, v1, u2, v2, heading: cfloat; red, green, blue, alpha: cint; p15: Any);
function ADD_ENTITY_ICON(para_entity: Entity; icon: PChar): cint;
procedure SET_ENTITY_ICON_VISIBILITY(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_ICON_COLOR(para_entity: Entity; red, green, blue, alpha: cint);
procedure SET_DRAW_ORIGIN(x, y, z: cfloat; p3: BOOL);
procedure CLEAR_DRAW_ORIGIN;
function SET_BINK_MOVIE(name: PChar): cint;
procedure PLAY_BINK_MOVIE(binkMovie: cint);
procedure STOP_BINK_MOVIE(binkMovie: cint);
procedure RELEASE_BINK_MOVIE(binkMovie: cint);
procedure DRAW_BINK_MOVIE(binkMovie: cint; p1, p2, p3, p4, p5: cfloat; r, g, b, a: cint);
procedure SET_BINK_MOVIE_TIME(binkMovie: cint; progress: cfloat);
function GET_BINK_MOVIE_TIME(binkMovie: cint): cfloat;
procedure SET_BINK_MOVIE_VOLUME(binkMovie: cint; value: cfloat);
procedure ATTACH_TV_AUDIO_TO_ENTITY(para_entity: Entity);
procedure SET_BINK_MOVIE_AUDIO_FRONTEND(binkMovie: cint; p1: BOOL);
procedure SET_TV_AUDIO_FRONTEND(toggle: BOOL);
procedure SET_BINK_SHOULD_SKIP(binkMovie: cint; bShouldSkip: BOOL);
function LOAD_MOVIE_MESH_SET(movieMeshSetName: PChar): cint;
procedure RELEASE_MOVIE_MESH_SET(movieMeshSet: cint);
function QUERY_MOVIE_MESH_SET_STATE(p0: Any): cint;
procedure GET_SCREEN_RESOLUTION(x, y: pcint);
procedure GET_ACTUAL_SCREEN_RESOLUTION(x, y: pcint);
function GET_ASPECT_RATIO(b: BOOL): cfloat;
function GET_SCREEN_ASPECT_RATIO: cfloat;
function GET_IS_WIDESCREEN: BOOL;
function GET_IS_HIDEF: BOOL;
procedure ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9;
procedure SET_NIGHTVISION(toggle: BOOL);
function GET_REQUESTINGNIGHTVISION: BOOL;
function GET_USINGNIGHTVISION: BOOL;
procedure SET_EXPOSURETWEAK(toggle: BOOL);
procedure FORCE_EXPOSURE_READBACK(toggle: BOOL);
procedure OVERRIDE_NIGHTVISION_LIGHT_RANGE(p0: cfloat);
procedure SET_NOISEOVERIDE(toggle: BOOL);
procedure SET_NOISINESSOVERIDE(value: cfloat);
function GET_SCREEN_COORD_FROM_WORLD_COORD(worldX, worldY, worldZ: cfloat; screenX, screenY: pcfloat): BOOL;
function GET_TEXTURE_RESOLUTION(textureDict, textureName: PChar): Vector3;
function OVERRIDE_PED_CREW_LOGO_TEXTURE(_ped: Ped; txd, txn: PChar): BOOL;
procedure SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(p0: cfloat);
procedure SET_FLASH(p0, p1, fadeIn, duration, fadeOut: cfloat);
procedure DISABLE_OCCLUSION_THIS_FRAME;
procedure SET_ARTIFICIAL_LIGHTS_STATE(state: BOOL);
procedure SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(toggle: BOOL);
procedure DISABLE_HDTEX_THIS_FRAME;
function CREATE_TRACKED_POINT: cint;
procedure SET_TRACKED_POINT_INFO(point: cint; x, y, z, radius: cfloat);
function IS_TRACKED_POINT_VISIBLE(point: cint): BOOL;
procedure DESTROY_TRACKED_POINT(point: cint);
function SET_GRASS_CULL_SPHERE(p0, p1, p2, p3: cfloat): cint;
procedure REMOVE_GRASS_CULL_SPHERE(handle: cint);
procedure PROCGRASS_ENABLE_CULLSPHERE(handle: cint; x, y, z, scale: cfloat);
procedure PROCGRASS_DISABLE_CULLSPHERE(handle: cint);
function PROCGRASS_IS_CULLSPHERE_ENABLED(handle: cint): BOOL;
procedure PROCGRASS_ENABLE_AMBSCALESCAN;
procedure PROCGRASS_DISABLE_AMBSCALESCAN;
procedure DISABLE_PROCOBJ_CREATION;
procedure ENABLE_PROCOBJ_CREATION;
procedure GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(x, y, z: cfloat; p3: Any; p4, p5, p6, scale: cfloat);
procedure GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(x, y, z, radius, p4, p5, p6: cfloat);
procedure GRASSBATCH_DISABLE_FLATTENING;
procedure CASCADE_SHADOWS_INIT_SESSION;
procedure CASCADE_SHADOWS_SET_CASCADE_BOUNDS(p0: Any; p1: BOOL; p2, p3, p4, p5: cfloat; p6: BOOL; p7: cfloat);
procedure CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(p0: cfloat);
procedure CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(p0: cfloat);
procedure CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(p0: cfloat);
procedure CASCADE_SHADOWS_SET_BOUND_POSITION(p0: Any);
procedure CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(toggle: BOOL);
procedure CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(p0: BOOL);
procedure CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(_type: PChar);
procedure CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE;
procedure CASCADE_SHADOWS_SET_AIRCRAFT_MODE(p0: BOOL);
procedure CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(p0: BOOL);
procedure CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(p0: cfloat);
procedure CASCADE_SHADOWS_ENABLE_FREEZER(p0: BOOL);
procedure WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(p0: Any);
procedure GOLF_TRAIL_SET_ENABLED(toggle: BOOL);
procedure GOLF_TRAIL_SET_PATH(p0, p1, p2, p3, p4, p5, p6, p7: cfloat; p8: BOOL);
procedure GOLF_TRAIL_SET_RADIUS(p0, p1, p2: cfloat);
procedure GOLF_TRAIL_SET_COLOUR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11: cint);
procedure GOLF_TRAIL_SET_TESSELLATION(p0, p1: cint);
procedure GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(p0: BOOL);
procedure GOLF_TRAIL_SET_FIXED_CONTROL_POINT(_type: cint; xPos, yPos, zPos, p4: cfloat; red, green, blue, alpha: cint);
procedure GOLF_TRAIL_SET_SHADER_PARAMS(p0, p1, p2, p3, p4: cfloat);
procedure GOLF_TRAIL_SET_FACING(p0: BOOL);
function GOLF_TRAIL_GET_MAX_HEIGHT: cfloat;
function GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(p0: cint): Vector3;
procedure SET_SEETHROUGH(toggle: BOOL);
function GET_USINGSEETHROUGH: BOOL;
procedure SEETHROUGH_RESET;
procedure SEETHROUGH_SET_FADE_STARTDISTANCE(distance: cfloat);
procedure SEETHROUGH_SET_FADE_ENDDISTANCE(distance: cfloat);
function SEETHROUGH_GET_MAX_THICKNESS: cfloat;
procedure SEETHROUGH_SET_MAX_THICKNESS(thickness: cfloat);
procedure SEETHROUGH_SET_NOISE_MIN(amount: cfloat);
procedure SEETHROUGH_SET_NOISE_MAX(amount: cfloat);
procedure SEETHROUGH_SET_HILIGHT_INTENSITY(intensity: cfloat);
procedure SEETHROUGH_SET_HIGHLIGHT_NOISE(noise: cfloat);
procedure SEETHROUGH_SET_HEATSCALE(index: cint; heatScale: cfloat);
procedure SEETHROUGH_SET_COLOR_NEAR(red, green, blue: cint);
procedure SET_MOTIONBLUR_MAX_VEL_SCALER(p0: cfloat);
function GET_MOTIONBLUR_MAX_VEL_SCALER: cfloat;
procedure SET_FORCE_MOTIONBLUR(toggle: BOOL);
procedure TOGGLE_PLAYER_DAMAGE_OVERLAY(toggle: BOOL);
procedure RESET_ADAPTATION(p0: cint);
function TRIGGER_SCREENBLUR_FADE_IN(transitionTime: cfloat): BOOL;
function TRIGGER_SCREENBLUR_FADE_OUT(transitionTime: cfloat): BOOL;
procedure DISABLE_SCREENBLUR_FADE;
function GET_SCREENBLUR_FADE_CURRENT_TIME: cfloat;
function IS_SCREENBLUR_FADE_RUNNING: BOOL;
procedure TOGGLE_PAUSED_RENDERPHASES(toggle: BOOL);
function GET_TOGGLE_PAUSED_RENDERPHASES_STATUS: BOOL;
procedure RESET_PAUSED_RENDERPHASES;
procedure GRAB_PAUSEMENU_OWNERSHIP;
procedure SET_HIDOF_OVERRIDE(p0, p1: BOOL; nearplaneOut, nearplaneIn, farplaneOut, farplaneIn: cfloat);
procedure SET_LOCK_ADAPTIVE_DOF_DISTANCE(p0: BOOL);
function PHONEPHOTOEDITOR_TOGGLE(p0: BOOL): BOOL;
function PHONEPHOTOEDITOR_IS_ACTIVE: BOOL;
function PHONEPHOTOEDITOR_SET_FRAME_TXD(textureDict: PChar; p1: BOOL): BOOL;
function START_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName: PChar; xPos, yPos, zPos, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis: BOOL): BOOL;
function START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName: PChar; xPos, yPos, zPos, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis, p11: BOOL): BOOL;
function START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName: PChar; _ped: Ped; offsetX, offsetY, offsetZ, rotX, rotY, rotZ: cfloat; boneIndex: cint; scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
function START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName: PChar; _ped: Ped; offsetX, offsetY, offsetZ, rotX, rotY, rotZ: cfloat; boneIndex: cint; scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
function START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
function START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
function START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(effectName: PChar; para_entity: Entity; offsetX, offsetY, offsetZ, rotX, rotY, rotZ: cfloat; boneIndex: cint; scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
procedure SET_PARTICLE_FX_NON_LOOPED_COLOUR(r, g, b: cfloat);
procedure SET_PARTICLE_FX_NON_LOOPED_ALPHA(alpha: cfloat);
procedure SET_PARTICLE_FX_NON_LOOPED_SCALE(scale: cfloat);
procedure SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(p0, p1, scale: cfloat);
procedure SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(toggle: BOOL);
function START_PARTICLE_FX_LOOPED_AT_COORD(effectName: PChar; x, y, z, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis, p11: BOOL): cint;
function START_PARTICLE_FX_LOOPED_ON_PED_BONE(effectName: PChar; _ped: Ped; xOffset, yOffset, zOffset, xRot, yRot, zRot: cfloat; boneIndex: cint; scale: cfloat; xAxis, yAxis, zAxis: BOOL): cint;
function START_PARTICLE_FX_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis: BOOL): cint;
function START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot: cfloat; boneIndex: cint; scale: cfloat; xAxis, yAxis, zAxis: BOOL): cint;
function START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis: BOOL; r, g, b, a: cfloat): cint;
function START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot: cfloat; boneIndex: cint; scale: cfloat; xAxis, yAxis, zAxis: BOOL; r, g, b, a: cfloat): cint;
procedure STOP_PARTICLE_FX_LOOPED(ptfxHandle: cint; p1: BOOL);
procedure REMOVE_PARTICLE_FX(ptfxHandle: cint; p1: BOOL);
procedure REMOVE_PARTICLE_FX_FROM_ENTITY(para_entity: Entity);
procedure REMOVE_PARTICLE_FX_IN_RANGE(X, Y, Z, radius: cfloat);
procedure FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(p0, p1: Any);
function DOES_PARTICLE_FX_LOOPED_EXIST(ptfxHandle: cint): BOOL;
procedure SET_PARTICLE_FX_LOOPED_OFFSETS(ptfxHandle: cint; x, y, z, rotX, rotY, rotZ: cfloat);
procedure SET_PARTICLE_FX_LOOPED_EVOLUTION(ptfxHandle: cint; propertyName: PChar; amount: cfloat; noNetwork: BOOL);
procedure SET_PARTICLE_FX_LOOPED_COLOUR(ptfxHandle: cint; r, g, b: cfloat; p4: BOOL);
procedure SET_PARTICLE_FX_LOOPED_ALPHA(ptfxHandle: cint; alpha: cfloat);
procedure SET_PARTICLE_FX_LOOPED_SCALE(ptfxHandle: cint; scale: cfloat);
procedure SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(ptfxHandle: cint; range: cfloat);
procedure _SET_PARTICLE_FX_LOOPED_CAMERA_BIAS(ptfxHandle: cint; p1: cfloat);
procedure SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(p0: BOOL);
procedure SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(veh: Vehicle; p1: BOOL);
procedure SET_PARTICLE_FX_SHOOTOUT_BOAT(p0: Any);
procedure CLEAR_PARTICLE_FX_SHOOTOUT_BOAT;
procedure SET_PARTICLE_FX_BLOOD_SCALE(p0: Any);
procedure DISABLE_IN_WATER_PTFX(toggle: BOOL);
procedure DISABLE_DOWNWASH_PTFX(toggle: BOOL);
procedure SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(scale: cfloat);
procedure ENABLE_CLOWN_BLOOD_VFX(toggle: BOOL);
procedure ENABLE_ALIEN_BLOOD_VFX(toggle: BOOL);
procedure SET_PARTICLE_FX_BULLET_IMPACT_SCALE(scale: cfloat);
procedure SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(p0: cfloat);
procedure SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(p0: BOOL);
procedure SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(p0: cfloat);
procedure SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(p0: cfloat);
procedure SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(p0: PChar);
procedure SET_SKIDMARK_RANGE_SCALE(scale: cfloat);
procedure SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(p0: Any);
procedure REGISTER_POSTFX_BULLET_IMPACT(weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity: cfloat);
procedure FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(p0: BOOL);
procedure USE_PARTICLE_FX_ASSET(name: PChar);
procedure SET_PARTICLE_FX_OVERRIDE(oldAsset, newAsset: PChar);
procedure RESET_PARTICLE_FX_OVERRIDE(name: PChar);
function _START_VEHICLE_PARTICLE_FX_LOOPED(veh: Vehicle; effectName: PChar; frontBack, leftRight, localOnly: BOOL): cint;
procedure SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(p0: BOOL);
procedure SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(p0: cfloat);
procedure WASH_DECALS_IN_RANGE(x, y, z, range, p4: cfloat);
procedure WASH_DECALS_FROM_VEHICLE(veh: Vehicle; p1: cfloat);
procedure FADE_DECALS_IN_RANGE(x, y, z, p3, p4: cfloat);
procedure REMOVE_DECALS_IN_RANGE(x, y, z, range: cfloat);
procedure REMOVE_DECALS_FROM_OBJECT(obj: GTAObject);
procedure REMOVE_DECALS_FROM_OBJECT_FACING(obj: GTAObject; x, y, z: cfloat);
procedure REMOVE_DECALS_FROM_VEHICLE(veh: Vehicle);
function ADD_DECAL(decalType: cint; posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout: cfloat; p17, p18, p19: BOOL): cint;
function ADD_PETROL_DECAL(x, y, z, groundLvl, width, transparency: cfloat): cint;
function ADD_OIL_DECAL(x, y, z, groundLvl, width, transparency: cfloat): cint;
procedure START_PETROL_TRAIL_DECALS(p0: cfloat);
procedure ADD_PETROL_TRAIL_DECAL_INFO(x, y, z, p3: cfloat);
procedure END_PETROL_TRAIL_DECALS;
procedure REMOVE_DECAL(decal: cint);
function IS_DECAL_ALIVE(decal: cint): BOOL;
function GET_DECAL_WASH_LEVEL(decal: cint): cfloat;
procedure SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME;
procedure SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME;
procedure SET_DISABLE_DECAL_RENDERING_THIS_FRAME;
function GET_IS_PETROL_DECAL_IN_RANGE(xCoord, yCoord, zCoord, radius: cfloat): BOOL;
procedure PATCH_DECAL_DIFFUSE_MAP(decalType: cint; textureDict, textureName: PChar);
procedure UNPATCH_DECAL_DIFFUSE_MAP(decalType: cint);
procedure MOVE_VEHICLE_DECALS(p0, p1: Any);
function ADD_VEHICLE_CREW_EMBLEM(veh: Vehicle; _ped: Ped; boneIndex: cint; x1, x2, x3, y1, y2, y3, z1, z2, z3, scale: cfloat; p13: Any; alpha: cint): BOOL;
function ABORT_VEHICLE_CREW_EMBLEM_REQUEST(p0: pcint): BOOL;
procedure REMOVE_VEHICLE_CREW_EMBLEM(veh: Vehicle; p1: cint);
function GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(veh: Vehicle; p1: cint): cint;
function DOES_VEHICLE_HAVE_CREW_EMBLEM(veh: Vehicle; p1: cint): BOOL;
procedure DISABLE_COMPOSITE_SHOTGUN_DECALS(toggle: BOOL);
procedure DISABLE_SCUFF_DECALS(toggle: BOOL);
procedure SET_DECAL_BULLET_IMPACT_RANGE_SCALE(p0: cfloat);
procedure OVERRIDE_INTERIOR_SMOKE_NAME(name: PChar);
procedure OVERRIDE_INTERIOR_SMOKE_LEVEL(level: cfloat);
procedure OVERRIDE_INTERIOR_SMOKE_END;
procedure REGISTER_NOIR_LENS_EFFECT;
procedure DISABLE_VEHICLE_DISTANTLIGHTS(toggle: BOOL);
procedure RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(p0: BOOL);
procedure REQUEST_EARLY_LIGHT_CHECK;
procedure USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(toggle: BOOL);
procedure _FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE(toggle: BOOL);
procedure USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(toggle: BOOL);
procedure DISABLE_REGION_VFX(p0: Any);
procedure _FORCE_GROUND_SNOW_PASS(toggle: BOOL);
procedure PRESET_INTERIOR_AMBIENT_CACHE(timecycleModifierName: PChar);
procedure SET_TIMECYCLE_MODIFIER(modifierName: PChar);
procedure SET_TIMECYCLE_MODIFIER_STRENGTH(strength: cfloat);
procedure SET_TRANSITION_TIMECYCLE_MODIFIER(modifierName: PChar; transition: cfloat);
procedure SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(strength: cfloat);
procedure CLEAR_TIMECYCLE_MODIFIER;
function GET_TIMECYCLE_MODIFIER_INDEX: cint;
function GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX: cint;
function GET_IS_TIMECYCLE_TRANSITIONING_OUT: BOOL;
procedure PUSH_TIMECYCLE_MODIFIER;
procedure POP_TIMECYCLE_MODIFIER;
procedure SET_CURRENT_PLAYER_TCMODIFIER(modifierName: PChar);
procedure SET_PLAYER_TCMODIFIER_TRANSITION(value: cfloat);
procedure SET_NEXT_PLAYER_TCMODIFIER(modifierName: PChar);
procedure ADD_TCMODIFIER_OVERRIDE(modifierName1, modifierName2: PChar);
procedure CLEAR_ALL_TCMODIFIER_OVERRIDES(p0: PChar);
procedure SET_EXTRA_TCMODIFIER(modifierName: PChar);
procedure CLEAR_EXTRA_TCMODIFIER;
function GET_EXTRA_TCMODIFIER: cint;
procedure ENABLE_MOON_CYCLE_OVERRIDE(strength: cfloat);
procedure DISABLE_MOON_CYCLE_OVERRIDE;
function REQUEST_SCALEFORM_MOVIE(scaleformName: PChar): cint;
function REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(scaleformName: PChar): cint;
function REQUEST_SCALEFORM_MOVIE_INSTANCE(scaleformName: PChar): cint;
function REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(scaleformName: PChar): cint;
function HAS_SCALEFORM_MOVIE_LOADED(scaleformHandle: cint): BOOL;
function IS_ACTIVE_SCALEFORM_MOVIE_DELETING(val: cint): BOOL;
function IS_SCALEFORM_MOVIE_DELETING(val: cint): BOOL;
function HAS_SCALEFORM_MOVIE_FILENAME_LOADED(scaleformName: PChar): BOOL;
function HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(scaleformHandle: cint): BOOL;
procedure SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(scaleformHandle: pcint);
procedure SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(scaleform: cint; toggle: BOOL);
procedure SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(scaleformHandle: cint; toggle: BOOL);
procedure SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(scaleformHandle: cint; toggle: BOOL);
procedure DRAW_SCALEFORM_MOVIE(scaleformHandle: cint; x, y, width, height: cfloat; red, green, blue, alpha, p9: cint);
procedure DRAW_SCALEFORM_MOVIE_FULLSCREEN(scaleform, red, green, blue, alpha, p5: cint);
procedure DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(scaleform1, scaleform2, red, green, blue, alpha: cint);
procedure DRAW_SCALEFORM_MOVIE_3D(scaleform: cint; posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ: cfloat; rotationOrder: cint);
procedure DRAW_SCALEFORM_MOVIE_3D_SOLID(scaleform: cint; posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ: cfloat; rotationOrder: cint);
procedure CALL_SCALEFORM_MOVIE_METHOD(scaleform: cint; method: PChar);
procedure CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(scaleform: cint; methodName: PChar; param1, param2, param3, param4, param5: cfloat);
procedure CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(scaleform: cint; methodName, param1, param2, param3, param4, param5: PChar);
procedure CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform: cint; methodName: PChar; floatParam1, floatParam2, floatParam3, floatParam4, floatParam5: cfloat; stringParam1, stringParam2, stringParam3, stringParam4, stringParam5: PChar);
function BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(hudComponent: cint; methodName: PChar): BOOL;
function BEGIN_SCALEFORM_MOVIE_METHOD(scaleform: cint; methodName: PChar): BOOL;
function BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(methodName: PChar): BOOL;
function BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(methodName: PChar): BOOL;
procedure END_SCALEFORM_MOVIE_METHOD;
function END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE: cint;
function IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(methodReturn: cint): BOOL;
function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(methodReturn: cint): cint;
function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(methodReturn: cint): BOOL;
function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(methodReturn: cint): PChar;
procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(value: cint);
procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(value: cfloat);
procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(value: BOOL);
procedure BEGIN_TEXT_COMMAND_SCALEFORM_STRING(componentType: PChar);
procedure END_TEXT_COMMAND_SCALEFORM_STRING;
procedure END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING;
procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(str: PChar);
procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(str: PChar);
procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(str: PChar);
function DOES_LATEST_BRIEF_STRING_EXIST(p0: cint): BOOL;
procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(value: cint);
procedure REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent: cint);
function HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(hudComponent: cint): BOOL;
procedure REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent: cint);
function PASS_KEYBOARD_INPUT_TO_SCALEFORM(scaleformHandle: cint): BOOL;
procedure SET_TV_CHANNEL(channel: cint);
function GET_TV_CHANNEL: cint;
procedure SET_TV_VOLUME(volume: cfloat);
function GET_TV_VOLUME: cfloat;
procedure DRAW_TV_CHANNEL(xPos, yPos, xScale, yScale, rotation: cfloat; red, green, blue, alpha: cint);
procedure SET_TV_CHANNEL_PLAYLIST(tvChannel: cint; playlistName: PChar; restart: BOOL);
procedure SET_TV_CHANNEL_PLAYLIST_AT_HOUR(tvChannel: cint; playlistName: PChar; hour: cint);
procedure _SET_TV_CHANNEL_PLAYLIST_DIRTY(tvChannel: cint; p1: BOOL);
procedure CLEAR_TV_CHANNEL_PLAYLIST(tvChannel: cint);
function IS_PLAYLIST_ON_CHANNEL(tvChannel: cint; p1: Any): BOOL;
function IS_TVSHOW_CURRENTLY_PLAYING(videoCliphash: Hash): BOOL;
procedure ENABLE_MOVIE_KEYFRAME_WAIT(toggle: BOOL);
procedure SET_TV_PLAYER_WATCHING_THIS_FRAME(p0: Any);
function GET_CURRENT_TV_CLIP_NAMEHASH: Hash;
procedure ENABLE_MOVIE_SUBTITLES(toggle: BOOL);
function UI3DSCENE_IS_AVAILABLE: BOOL;
function UI3DSCENE_PUSH_PRESET(presetName: PChar): BOOL;
function UI3DSCENE_ASSIGN_PED_TO_SLOT(presetName: PChar; _ped: Ped; slot: cint; posX, posY, posZ: cfloat): BOOL;
procedure UI3DSCENE_CLEAR_PATCHED_DATA;
procedure UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(toggle: BOOL);
procedure TERRAINGRID_ACTIVATE(toggle: BOOL);
procedure TERRAINGRID_SET_PARAMS(x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff: cfloat);
procedure TERRAINGRID_SET_COLOURS(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha: cint);
procedure ANIMPOSTFX_PLAY(effectName: PChar; duration: cint; looped: BOOL);
procedure ANIMPOSTFX_STOP(effectName: PChar);
function ANIMPOSTFX_GET_CURRENT_TIME(effectName: PChar): cfloat;
function ANIMPOSTFX_IS_RUNNING(effectName: PChar): BOOL;
procedure ANIMPOSTFX_STOP_ALL;
procedure ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(effectName: PChar);
procedure BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(str: PChar);
procedure END_TEXT_COMMAND_BUSYSPINNER_ON(busySpinnerType: cint);
procedure BUSYSPINNER_OFF;
procedure PRELOAD_BUSYSPINNER;
function BUSYSPINNER_IS_ON: BOOL;
function BUSYSPINNER_IS_DISPLAYING: BOOL;
procedure DISABLE_PAUSEMENU_SPINNER(p0: BOOL);
procedure SET_MOUSE_CURSOR_THIS_FRAME;
procedure SET_MOUSE_CURSOR_STYLE(spriteId: cint);
procedure SET_MOUSE_CURSOR_VISIBLE(toggle: BOOL);
function IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS: BOOL;
function GET_MOUSE_EVENT(scaleformHandle: cint; p1, p2, p3: PAny): BOOL;
procedure THEFEED_ONLY_SHOW_TOOLTIPS(toggle: BOOL);
procedure THEFEED_SET_SCRIPTED_MENU_HEIGHT(pos: cfloat);
procedure THEFEED_HIDE;
procedure THEFEED_HIDE_THIS_FRAME;
procedure THEFEED_SHOW;
procedure THEFEED_FLUSH_QUEUE;
procedure THEFEED_REMOVE_ITEM(notificationId: cint);
procedure THEFEED_FORCE_RENDER_ON;
procedure THEFEED_FORCE_RENDER_OFF;
procedure THEFEED_PAUSE;
procedure THEFEED_RESUME;
function THEFEED_IS_PAUSED: BOOL;
procedure THEFEED_REPORT_LOGO_ON;
procedure THEFEED_REPORT_LOGO_OFF;
function THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID: cint;
procedure THEFEED_AUTO_POST_GAMETIPS_ON;
procedure THEFEED_AUTO_POST_GAMETIPS_OFF;
procedure THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(hudColorIndex: cint);
procedure THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(red, green, blue, alpha: cint);
procedure THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(count: cint);
procedure THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(toggle: BOOL);
procedure THEFEED_RESET_ALL_PARAMETERS;
procedure THEFEED_FREEZE_NEXT_POST;
procedure THEFEED_CLEAR_FROZEN_POST;
procedure THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(p0: BOOL);
procedure THEFEED_UPDATE_ITEM_TEXTURE(txdString1, txnString1, txdString2, txnString2: PChar);
procedure BEGIN_TEXT_COMMAND_THEFEED_POST(text: PChar);
function END_TEXT_COMMAND_THEFEED_POST_STATS(statTitle: PChar; iconEnum: cint; stepVal: BOOL; barValue: cint; isImportant: BOOL; pictureTextureDict, pictureTextureName: PChar): cint;
function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar): cint;
function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar): cint;
function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar; duration: cfloat): cint;
function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar; duration: cfloat; clanTag: PChar): cint;
function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(txdName, textureName: PChar; flash: BOOL; iconType1: cint; sender, subject: PChar; duration: cfloat; clanTag: PChar; iconType2, p9: cint): cint;
function END_TEXT_COMMAND_THEFEED_POST_TICKER(blink, p1: BOOL): cint;
function END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(blink, p1: BOOL): cint;
function END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(blink, p1: BOOL): cint;
function END_TEXT_COMMAND_THEFEED_POST_AWARD(textureDict, textureName: PChar; rpBonus, colorOverlay: cint; titleLabel: PChar): cint;
function END_TEXT_COMMAND_THEFEED_POST_CREWTAG(p0, p1: BOOL; p2: pcint; p3: cint; isLeader, unk0: BOOL; clanDesc, R, G, B: cint): cint;
function END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(p0, p1: BOOL; p2: pcint; p3: cint; isLeader, unk0: BOOL; clanDesc: cint; playerName: PChar; R, G, B: cint): cint;
function END_TEXT_COMMAND_THEFEED_POST_UNLOCK(gxtLabel1: PChar; p1: cint; gxtLabel2: PChar): cint;
function END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(gxtLabel1: PChar; p1: cint; gxtLabel2: PChar; p3: cint): cint;
function END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(p0, p1, p2, p3, p4, p5: Any): cint;
function END_TEXT_COMMAND_THEFEED_POST_MPTICKER(blink, p1: BOOL): cint;
function END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(p0, p1, p2: PChar; p3, p4: BOOL): cint;
function END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(txdName1, textureName1: PChar; count1: cint; txdName2, textureName2: PChar; count2, hudColor1, hudColor2: cint): cint;
function END_TEXT_COMMAND_THEFEED_POST_REPLAY(_type, image: cint; text: PChar): cint;
function END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(_type: cint; button, text: PChar): cint;
procedure BEGIN_TEXT_COMMAND_PRINT(GxtEntry: PChar);
procedure END_TEXT_COMMAND_PRINT(duration: cint; drawImmediately: BOOL);
procedure BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(text: PChar);
function END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED: BOOL;
procedure BEGIN_TEXT_COMMAND_DISPLAY_TEXT(text: PChar);
procedure END_TEXT_COMMAND_DISPLAY_TEXT(x, y: cfloat; p2: cint);
procedure BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(text: PChar);
function END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(p0: BOOL): cfloat;
procedure BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(entry: PChar);
function END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y: cfloat): cint;
procedure BEGIN_TEXT_COMMAND_DISPLAY_HELP(inputType: PChar);
procedure END_TEXT_COMMAND_DISPLAY_HELP(p0: cint; loop, beep: BOOL; shape: cint);
procedure BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(labelName: PChar);
function END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(p0: cint): BOOL;
procedure BEGIN_TEXT_COMMAND_SET_BLIP_NAME(textLabel: PChar);
procedure END_TEXT_COMMAND_SET_BLIP_NAME(para_blip: Blip);
procedure BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0: PChar);
procedure END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0: BOOL);
procedure BEGIN_TEXT_COMMAND_CLEAR_PRINT(text: PChar);
procedure END_TEXT_COMMAND_CLEAR_PRINT;
procedure BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(gxtEntry: PChar);
procedure END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(p0: cint);
procedure ADD_TEXT_COMPONENT_INTEGER(value: cint);
procedure ADD_TEXT_COMPONENT_FLOAT(value: cfloat; decimalPlaces: cint);
procedure ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(labelName: PChar);
procedure ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(gxtEntryHash: Hash);
procedure ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(para_blip: Blip);
procedure ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text: PChar);
procedure ADD_TEXT_COMPONENT_SUBSTRING_TIME(timestamp, flags: cint);
procedure ADD_TEXT_COMPONENT_FORMATTED_INTEGER(value: cint; commaSeparated: BOOL);
procedure ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(p0: PChar; p1: cint);
procedure ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(website: PChar);
procedure ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(str: PChar);
procedure SET_COLOUR_OF_NEXT_TEXT_COMPONENT(hudColor: cint);
function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(text: PChar; position, length: cint): PChar;
function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text: PChar; position, length, maxLength: cint): PChar;
function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(text: PChar; startPosition, endPosition: cint): PChar;
function GET_FILENAME_FOR_AUDIO_CONVERSATION(labelName: PChar): PChar;
procedure CLEAR_PRINTS;
procedure CLEAR_BRIEF;
procedure CLEAR_ALL_HELP_MESSAGES;
procedure CLEAR_THIS_PRINT(p0: PChar);
procedure CLEAR_SMALL_PRINTS;
function DOES_TEXT_BLOCK_EXIST(gxt: PChar): BOOL;
procedure REQUEST_ADDITIONAL_TEXT(gxt: PChar; slot: cint);
procedure REQUEST_ADDITIONAL_TEXT_FOR_DLC(gxt: PChar; slot: cint);
function HAS_ADDITIONAL_TEXT_LOADED(slot: cint): BOOL;
procedure CLEAR_ADDITIONAL_TEXT(p0: cint; p1: BOOL);
function IS_STREAMING_ADDITIONAL_TEXT(p0: cint): BOOL;
function HAS_THIS_ADDITIONAL_TEXT_LOADED(gxt: PChar; slot: cint): BOOL;
function IS_MESSAGE_BEING_DISPLAYED: BOOL;
function DOES_TEXT_LABEL_EXIST(gxt: PChar): BOOL;
function GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(str: PChar; length: cint): PChar;
function GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(gxt: PChar): cint;
function GET_LENGTH_OF_LITERAL_STRING(str: PChar): cint;
function GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(str: PChar): cint;
function GET_STREET_NAME_FROM_HASH_KEY(para_hash: Hash): PChar;
function IS_HUD_PREFERENCE_SWITCHED_ON: BOOL;
function IS_RADAR_PREFERENCE_SWITCHED_ON: BOOL;
function IS_SUBTITLE_PREFERENCE_SWITCHED_ON: BOOL;
procedure DISPLAY_HUD(toggle: BOOL);
procedure DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME;
procedure DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME;
procedure DISPLAY_RADAR(toggle: BOOL);
procedure SET_FAKE_SPECTATOR_MODE(toggle: BOOL);
function GET_FAKE_SPECTATOR_MODE: BOOL;
function IS_HUD_HIDDEN: BOOL;
function IS_RADAR_HIDDEN: BOOL;
function IS_MINIMAP_RENDERING: BOOL;
procedure USE_VEHICLE_TARGETING_RETICULE(p0: Any);
procedure _USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES(enable: BOOL);
procedure ADD_VALID_VEHICLE_HIT_HASH(p0: Any);
procedure CLEAR_VALID_VEHICLE_HIT_HASHES;
procedure SET_BLIP_ROUTE(para_blip: Blip; enabled: BOOL);
procedure CLEAR_ALL_BLIP_ROUTES;
procedure SET_BLIP_ROUTE_COLOUR(para_blip: Blip; colour: cint);
procedure SET_FORCE_SHOW_GPS(toggle: BOOL);
procedure SET_USE_SET_DESTINATION_IN_PAUSE_MAP(toggle: BOOL);
procedure SET_BLOCK_WANTED_FLASH(disabled: BOOL);
procedure ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(p0: BOOL);
procedure FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(p0: cint);
procedure SET_RADAR_ZOOM_PRECISE(zoom: cfloat);
procedure SET_RADAR_ZOOM(zoomLevel: cint);
procedure SET_RADAR_ZOOM_TO_BLIP(para_blip: Blip; zoom: cfloat);
procedure SET_RADAR_ZOOM_TO_DISTANCE(zoom: cfloat);
procedure UPDATE_RADAR_ZOOM_TO_BLIP;
procedure GET_HUD_COLOUR(hudColorIndex: cint; r, g, b, a: pcint);
procedure SET_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a: cint);
procedure SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a: cint);
procedure REPLACE_HUD_COLOUR(hudColorIndex, hudColorIndex2: cint);
procedure REPLACE_HUD_COLOUR_WITH_RGBA(hudColorIndex, r, g, b, a: cint);
procedure SET_ABILITY_BAR_VISIBILITY(visible: BOOL);
procedure SET_ALLOW_ABILITY_BAR(toggle: BOOL);
procedure FLASH_ABILITY_BAR(millisecondsToFlash: cint);
procedure SET_ABILITY_BAR_VALUE(p0, p1: cfloat);
procedure FLASH_WANTED_DISPLAY(p0: BOOL);
procedure FORCE_OFF_WANTED_STAR_FLASH(toggle: BOOL);
procedure SET_CUSTOM_MP_HUD_COLOR(hudColorId: cint);
function GET_RENDERED_CHARACTER_HEIGHT(size: cfloat; font: cint): cfloat;
procedure SET_TEXT_SCALE(scale, size: cfloat);
procedure SET_TEXT_COLOUR(red, green, blue, alpha: cint);
procedure SET_TEXT_CENTRE(align: BOOL);
procedure SET_TEXT_RIGHT_JUSTIFY(toggle: BOOL);
procedure SET_TEXT_JUSTIFICATION(justifyType: cint);
procedure SET_TEXT_LINE_HEIGHT_MULT(lineHeightMult: cfloat);
procedure SET_TEXT_WRAP(start, _end: cfloat);
procedure SET_TEXT_LEADING(p0: cint);
procedure SET_TEXT_PROPORTIONAL(p0: BOOL);
procedure SET_TEXT_FONT(fontType: cint);
procedure SET_TEXT_DROP_SHADOW;
procedure SET_TEXT_DROPSHADOW(distance, r, g, b, a: cint);
procedure SET_TEXT_OUTLINE;
procedure SET_TEXT_EDGE(p0, r, g, b, a: cint);
procedure SET_TEXT_RENDER_ID(renderId: cint);
function GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID: cint;
function REGISTER_NAMED_RENDERTARGET(name: PChar; p1: BOOL): BOOL;
function IS_NAMED_RENDERTARGET_REGISTERED(name: PChar): BOOL;
function RELEASE_NAMED_RENDERTARGET(name: PChar): BOOL;
procedure LINK_NAMED_RENDERTARGET(modelHash: Hash);
function GET_NAMED_RENDERTARGET_RENDER_ID(name: PChar): cint;
function IS_NAMED_RENDERTARGET_LINKED(modelHash: Hash): BOOL;
procedure CLEAR_HELP(toggle: BOOL);
function IS_HELP_MESSAGE_ON_SCREEN: BOOL;
function HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME: BOOL;
function IS_HELP_MESSAGE_BEING_DISPLAYED: BOOL;
function IS_HELP_MESSAGE_FADING_OUT: BOOL;
procedure SET_HELP_MESSAGE_STYLE(style, hudColor, alpha, p3, p4: cint);
function GET_STANDARD_BLIP_ENUM_ID: cint;
function GET_WAYPOINT_BLIP_ENUM_ID: cint;
function GET_NUMBER_OF_ACTIVE_BLIPS: cint;
function GET_NEXT_BLIP_INFO_ID(blipSprite: cint): Blip;
function GET_FIRST_BLIP_INFO_ID(blipSprite: cint): Blip;
function GET_CLOSEST_BLIP_INFO_ID(blipSprite: cint): Blip;
function GET_BLIP_INFO_ID_COORD(para_blip: Blip): Vector3;
function GET_BLIP_INFO_ID_DISPLAY(para_blip: Blip): cint;
function GET_BLIP_INFO_ID_TYPE(para_blip: Blip): cint;
function GET_BLIP_INFO_ID_ENTITY_INDEX(para_blip: Blip): Entity;
function GET_BLIP_INFO_ID_PICKUP_INDEX(para_blip: Blip): Pickup;
function GET_BLIP_FROM_ENTITY(para_entity: Entity): Blip;
function ADD_BLIP_FOR_RADIUS(posX, posY, posZ, radius: cfloat): Blip;
function ADD_BLIP_FOR_AREA(x, y, z, width, height: cfloat): Blip;
function ADD_BLIP_FOR_ENTITY(para_entity: Entity): Blip;
function ADD_BLIP_FOR_PICKUP(para_pickup: Pickup): Blip;
function ADD_BLIP_FOR_COORD(x, y, z: cfloat): Blip;
procedure TRIGGER_SONAR_BLIP(posX, posY, posZ, radius: cfloat; p4: cint);
procedure ALLOW_SONAR_BLIPS(toggle: BOOL);
procedure SET_BLIP_COORDS(para_blip: Blip; posX, posY, posZ: cfloat);
function GET_BLIP_COORDS(para_blip: Blip): Vector3;
procedure SET_BLIP_SPRITE(para_blip: Blip; spriteId: cint);
function GET_BLIP_SPRITE(para_blip: Blip): cint;
procedure SET_COP_BLIP_SPRITE(p0: cint; p1: cfloat);
procedure SET_COP_BLIP_SPRITE_AS_STANDARD;
procedure SET_BLIP_NAME_FROM_TEXT_FILE(para_blip: Blip; gxtEntry: PChar);
procedure SET_BLIP_NAME_TO_PLAYER_NAME(para_blip: Blip; plyr: Player);
procedure SET_BLIP_ALPHA(para_blip: Blip; alpha: cint);
function GET_BLIP_ALPHA(para_blip: Blip): cint;
procedure SET_BLIP_FADE(para_blip: Blip; opacity, duration: cint);
function GET_BLIP_FADE_DIRECTION(para_blip: Blip): cint;
procedure SET_BLIP_ROTATION(para_blip: Blip; rotation: cint);
procedure SET_BLIP_ROTATION_WITH_FLOAT(para_blip: Blip; heading: cfloat);
function GET_BLIP_ROTATION(para_blip: Blip): cint;
procedure SET_BLIP_FLASH_TIMER(para_blip: Blip; duration: cint);
procedure SET_BLIP_FLASH_INTERVAL(para_blip: Blip; p1: Any);
procedure SET_BLIP_COLOUR(para_blip: Blip; color: cint);
procedure SET_BLIP_SECONDARY_COLOUR(para_blip: Blip; r, g, b: cint);
function GET_BLIP_COLOUR(para_blip: Blip): cint;
function GET_BLIP_HUD_COLOUR(para_blip: Blip): cint;
function IS_BLIP_SHORT_RANGE(para_blip: Blip): BOOL;
function IS_BLIP_ON_MINIMAP(para_blip: Blip): BOOL;
function DOES_BLIP_HAVE_GPS_ROUTE(para_blip: Blip): BOOL;
procedure SET_BLIP_HIDDEN_ON_LEGEND(para_blip: Blip; toggle: BOOL);
procedure SET_BLIP_HIGH_DETAIL(para_blip: Blip; toggle: BOOL);
procedure SET_BLIP_AS_MISSION_CREATOR_BLIP(para_blip: Blip; toggle: BOOL);
function IS_MISSION_CREATOR_BLIP(para_blip: Blip): BOOL;
function GET_NEW_SELECTED_MISSION_CREATOR_BLIP: Blip;
function IS_HOVERING_OVER_MISSION_CREATOR_BLIP: BOOL;
procedure SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(toggle: BOOL);
procedure SHOW_CONTACT_INSTRUCTIONAL_BUTTON(toggle: BOOL);
procedure RELOAD_MAP_MENU;
procedure SET_BLIP_MARKER_LONG_DISTANCE(p0, p1: Any);
procedure SET_BLIP_FLASHES(para_blip: Blip; toggle: BOOL);
procedure SET_BLIP_FLASHES_ALTERNATE(para_blip: Blip; toggle: BOOL);
function IS_BLIP_FLASHING(para_blip: Blip): BOOL;
procedure SET_BLIP_AS_SHORT_RANGE(para_blip: Blip; toggle: BOOL);
procedure SET_BLIP_SCALE(para_blip: Blip; scale: cfloat);
procedure SET_BLIP_SCALE_2D(para_blip: Blip; xScale, yScale: cfloat);
procedure SET_BLIP_PRIORITY(para_blip: Blip; priority: cint);
procedure SET_BLIP_DISPLAY(para_blip: Blip; displayId: cint);
procedure SET_BLIP_CATEGORY(para_blip: Blip; index: cint);
procedure REMOVE_BLIP(blip: PBlip);
procedure SET_BLIP_AS_FRIENDLY(para_blip: Blip; toggle: BOOL);
procedure PULSE_BLIP(para_blip: Blip);
procedure SHOW_NUMBER_ON_BLIP(para_blip: Blip; number: cint);
procedure HIDE_NUMBER_ON_BLIP(para_blip: Blip);
procedure SHOW_HEIGHT_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SHOW_TICK_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SHOW_GOLD_TICK_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SHOW_FOR_SALE_ICON_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SHOW_HEADING_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SHOW_OUTLINE_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SHOW_FRIEND_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SHOW_CREW_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
procedure SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(para_blip: Blip; toggle: BOOL);
procedure SET_BLIP_SHORT_HEIGHT_THRESHOLD(p0, p1: Any);
procedure SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(para_blip: Blip; p1: Any);
procedure SET_BLIP_AS_MINIMAL_ON_EDGE(para_blip: Blip; toggle: BOOL);
procedure SET_RADIUS_BLIP_EDGE(para_blip: Blip; toggle: BOOL);
function DOES_BLIP_EXIST(para_blip: Blip): BOOL;
procedure SET_WAYPOINT_OFF;
procedure DELETE_WAYPOINTS_FROM_THIS_PLAYER;
procedure REFRESH_WAYPOINT;
function IS_WAYPOINT_ACTIVE: BOOL;
procedure SET_NEW_WAYPOINT(x, y: cfloat);
procedure SET_BLIP_BRIGHT(para_blip: Blip; toggle: BOOL);
procedure SET_BLIP_SHOW_CONE(para_blip: Blip; toggle: BOOL; hudColorIndex: cint);
procedure REMOVE_COP_BLIP_FROM_PED(_ped: Ped);
procedure SETUP_FAKE_CONE_DATA(para_blip: Blip; p1, p2, p3, p4, p5, p6: cfloat; p7: Any; p8: cint);
procedure REMOVE_FAKE_CONE_DATA(para_blip: Blip);
procedure CLEAR_FAKE_CONE_ARRAY;
procedure _SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE(para_blip: Blip; blipChangeParam46: cint; blipChangeParam47: BOOL);
function SET_MINIMAP_COMPONENT(componentId: cint; toggle: BOOL; overrideColor: cint): BOOL;
procedure SET_MINIMAP_SONAR_SWEEP(toggle: BOOL);
procedure SHOW_ACCOUNT_PICKER;
function GET_MAIN_PLAYER_BLIP_ID: Blip;
procedure SET_PM_WARNINGSCREEN_ACTIVE(p0: BOOL);
procedure HIDE_LOADING_ON_FADE_THIS_FRAME;
procedure SET_RADAR_AS_INTERIOR_THIS_FRAME(interior: Hash; x, y: cfloat; z, zoom: cint);
procedure SET_INSIDE_VERY_SMALL_INTERIOR(toggle: BOOL);
procedure SET_INSIDE_VERY_LARGE_INTERIOR(toggle: BOOL);
procedure SET_RADAR_AS_EXTERIOR_THIS_FRAME;
procedure SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(x, y: cfloat);
procedure SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(x, y: cfloat; p2: Any);
function IS_PAUSEMAP_IN_INTERIOR_MODE: BOOL;
procedure HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME;
procedure HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME;
procedure SET_USE_ISLAND_MAP(toggle: BOOL);
procedure _SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR;
procedure DONT_TILT_MINIMAP_THIS_FRAME;
procedure DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME;
procedure DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME;
procedure SET_WIDESCREEN_FORMAT(p0: Any);
procedure DISPLAY_AREA_NAME(toggle: BOOL);
procedure DISPLAY_CASH(toggle: BOOL);
procedure USE_FAKE_MP_CASH(toggle: BOOL);
procedure CHANGE_FAKE_MP_CASH(cash, bank: cint);
procedure DISPLAY_AMMO_THIS_FRAME(display: BOOL);
procedure DISPLAY_SNIPER_SCOPE_THIS_FRAME;
procedure HIDE_HUD_AND_RADAR_THIS_FRAME;
procedure ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(allow: BOOL);
procedure SET_MULTIPLAYER_WALLET_CASH;
procedure REMOVE_MULTIPLAYER_WALLET_CASH;
procedure SET_MULTIPLAYER_BANK_CASH;
procedure REMOVE_MULTIPLAYER_BANK_CASH;
procedure SET_MULTIPLAYER_HUD_CASH(p0: cint; p1: BOOL);
procedure REMOVE_MULTIPLAYER_HUD_CASH;
procedure HIDE_HELP_TEXT_THIS_FRAME;
function IS_IME_IN_PROGRESS: BOOL;
procedure DISPLAY_HELP_TEXT_THIS_FRAME(message: PChar; p1: BOOL);
procedure HUD_FORCE_WEAPON_WHEEL(show: BOOL);
procedure HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL;
procedure HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME;
function HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED: Hash;
procedure HUD_SET_WEAPON_WHEEL_TOP_SLOT(weaponHash: Hash);
function HUD_GET_WEAPON_WHEEL_TOP_SLOT(weaponTypeIndex: cint): Hash;
procedure HUD_SHOWING_CHARACTER_SWITCH_SELECTION(toggle: BOOL);
procedure SET_GPS_FLAGS(p0: cint; p1: cfloat);
procedure CLEAR_GPS_FLAGS;
procedure SET_RACE_TRACK_RENDER(toggle: BOOL);
procedure CLEAR_GPS_RACE_TRACK;
procedure START_GPS_CUSTOM_ROUTE(hudColor: cint; displayOnFoot, followPlayer: BOOL);
procedure ADD_POINT_TO_GPS_CUSTOM_ROUTE(x, y, z: cfloat);
procedure SET_GPS_CUSTOM_ROUTE_RENDER(toggle: BOOL; radarThickness, mapThickness: cint);
procedure CLEAR_GPS_CUSTOM_ROUTE;
procedure START_GPS_MULTI_ROUTE(hudColor: cint; routeFromPlayer, displayOnFoot: BOOL);
procedure ADD_POINT_TO_GPS_MULTI_ROUTE(x, y, z: cfloat);
procedure SET_GPS_MULTI_ROUTE_RENDER(toggle: BOOL);
procedure CLEAR_GPS_MULTI_ROUTE;
procedure CLEAR_GPS_PLAYER_WAYPOINT;
procedure SET_GPS_FLASHES(toggle: BOOL);
procedure SET_PLAYER_ICON_COLOUR(color: cint);
procedure FLASH_MINIMAP_DISPLAY;
procedure FLASH_MINIMAP_DISPLAY_WITH_COLOR(hudColorIndex: cint);
procedure TOGGLE_STEALTH_RADAR(toggle: BOOL);
procedure SET_MINIMAP_IN_SPECTATOR_MODE(toggle: BOOL; _ped: Ped);
procedure SET_MISSION_NAME(p0: BOOL; name: PChar);
procedure SET_MISSION_NAME_FOR_UGC_MISSION(p0: BOOL; name: PChar);
procedure SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(p0: BOOL; p1, p2, p3, p4, p5, p6, p7, p8: PChar);
procedure SET_MINIMAP_BLOCK_WAYPOINT(toggle: BOOL);
procedure SET_MINIMAP_IN_PROLOGUE(toggle: BOOL);
procedure SET_MINIMAP_HIDE_FOW(toggle: BOOL);
function GET_MINIMAP_FOW_DISCOVERY_RATIO: cfloat;
function GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(x, y, z: cfloat): BOOL;
procedure SET_MINIMAP_FOW_DO_NOT_UPDATE(p0: BOOL);
procedure SET_MINIMAP_FOW_REVEAL_COORDINATE(x, y, z: cfloat);
procedure SET_MINIMAP_GOLF_COURSE(hole: cint);
procedure SET_MINIMAP_GOLF_COURSE_OFF;
procedure LOCK_MINIMAP_ANGLE(angle: cint);
procedure UNLOCK_MINIMAP_ANGLE;
procedure LOCK_MINIMAP_POSITION(x, y: cfloat);
procedure UNLOCK_MINIMAP_POSITION;
procedure SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(altitude: cfloat; p1: BOOL; p2: Any);
procedure SET_HEALTH_HUD_DISPLAY_VALUES(health, capacity: cint; wasAdded: BOOL);
procedure SET_MAX_HEALTH_HUD_DISPLAY(maximumValue: cint);
procedure SET_MAX_ARMOUR_HUD_DISPLAY(maximumValue: cint);
procedure SET_BIGMAP_ACTIVE(toggleBigMap, showFullMap: BOOL);
function IS_HUD_COMPONENT_ACTIVE(id: cint): BOOL;
function IS_SCRIPTED_HUD_COMPONENT_ACTIVE(id: cint): BOOL;
procedure HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id: cint);
procedure SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id: cint);
function IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(id: cint): BOOL;
procedure HIDE_HUD_COMPONENT_THIS_FRAME(id: cint);
procedure SHOW_HUD_COMPONENT_THIS_FRAME(id: cint);
procedure HIDE_STREET_AND_CAR_NAMES_THIS_FRAME;
procedure RESET_RETICULE_VALUES;
procedure RESET_HUD_COMPONENT_VALUES(id: cint);
procedure SET_HUD_COMPONENT_POSITION(id: cint; x, y: cfloat);
function GET_HUD_COMPONENT_POSITION(id: cint): Vector3;
procedure CLEAR_REMINDER_MESSAGE;
function GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(worldX, worldY, worldZ: cfloat; screenX, screenY: pcfloat): cint;
procedure OPEN_REPORTUGC_MENU;
procedure FORCE_CLOSE_REPORTUGC_MENU;
function IS_REPORTUGC_MENU_OPEN: BOOL;
function IS_FLOATING_HELP_TEXT_ON_SCREEN(hudIndex: cint): BOOL;
procedure SET_FLOATING_HELP_TEXT_SCREEN_POSITION(hudIndex: cint; x, y: cfloat);
procedure SET_FLOATING_HELP_TEXT_WORLD_POSITION(hudIndex: cint; x, y, z: cfloat);
procedure SET_FLOATING_HELP_TEXT_TO_ENTITY(hudIndex: cint; para_entity: Entity; offsetX, offsetY: cfloat);
procedure SET_FLOATING_HELP_TEXT_STYLE(hudIndex, p1, p2, p3, p4, p5: cint);
procedure CLEAR_FLOATING_HELP(hudIndex: cint; p1: BOOL);
procedure CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(plyr: Player; username: PChar; pointedClanTag, isRockstarClan: BOOL; clanTag: PChar; clanFlag, r, g, b: cint);
function IS_MP_GAMER_TAG_MOVIE_ACTIVE: BOOL;
function CREATE_FAKE_MP_GAMER_TAG(_ped: Ped; username: PChar; pointedClanTag, isRockstarClan: BOOL; clanTag: PChar; clanFlag: cint): cint;
procedure REMOVE_MP_GAMER_TAG(gamerTagId: cint);
function IS_MP_GAMER_TAG_ACTIVE(gamerTagId: cint): BOOL;
function IS_MP_GAMER_TAG_FREE(gamerTagId: cint): BOOL;
procedure SET_MP_GAMER_TAG_VISIBILITY(gamerTagId, component: cint; toggle: BOOL; p3: Any);
procedure SET_ALL_MP_GAMER_TAGS_VISIBILITY(gamerTagId: cint; toggle: BOOL);
procedure SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(gamerTagId: cint; toggle: BOOL);
procedure SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(gamerTagId: cint; toggle: BOOL);
procedure SET_MP_GAMER_TAGS_POINT_HEALTH(gamerTagId, value, maximumValue: cint);
procedure SET_MP_GAMER_TAG_COLOUR(gamerTagId, component, hudColorIndex: cint);
procedure SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(gamerTagId, hudColorIndex: cint);
procedure SET_MP_GAMER_TAG_ALPHA(gamerTagId, component, alpha: cint);
procedure SET_MP_GAMER_TAG_WANTED_LEVEL(gamerTagId, wantedlvl: cint);
procedure SET_MP_GAMER_TAG_NUM_PACKAGES(gamerTagId, p1: cint);
procedure SET_MP_GAMER_TAG_NAME(gamerTagId: cint; str: PChar);
function IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(gamerTagId: cint): BOOL;
procedure SET_MP_GAMER_TAG_BIG_TEXT(gamerTagId: cint; str: PChar);
function GET_CURRENT_WEBPAGE_ID: cint;
function GET_CURRENT_WEBSITE_ID: cint;
function GET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex: cint): cint;
procedure RESET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex: cint);
function IS_WARNING_MESSAGE_READY_FOR_CONTROL: BOOL;
procedure SET_WARNING_MESSAGE(titleMsg: PChar; flags: cint; promptMsg: PChar; p3: BOOL; p4: cint; p5, p6: PChar; showBackground: BOOL; errorCode: cint);
procedure SET_WARNING_MESSAGE_WITH_HEADER(entryHeader, entryLine1: PChar; instructionalKey: cint; entryLine2: PChar; p4: BOOL; p5: Any; showBackground, p7: PAny; p8: BOOL; p9: Any);
procedure SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(entryHeader, entryLine1: PChar; instructionalKey: cint; entryLine2: PChar; p4: BOOL; p5, additionalIntInfo: Any; additionalTextInfoLine1, additionalTextInfoLine2: PChar; showBackground: BOOL; errorCode: cint);
procedure SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(entryHeader, entryLine1: PChar; flags: cint; entryLine2: PChar; p4: BOOL; p5: Any; p6, p7: PAny; showBg: BOOL; p9, p10: Any);
procedure SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(labelTitle, labelMessage: PChar; p2, p3: cint; labelMessage2: PChar; p5: BOOL; p6, p7: cint; p8, p9: PChar; background: BOOL; errorCode: cint);
function GET_WARNING_SCREEN_MESSAGE_HASH: Hash;
function SET_WARNING_MESSAGE_OPTION_ITEMS(index: cint; name: PChar; cash, rp, lvl, colour: cint): BOOL;
function SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(p0: Any): BOOL;
procedure REMOVE_WARNING_MESSAGE_OPTION_ITEMS;
function IS_WARNING_MESSAGE_ACTIVE: BOOL;
procedure CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE;
procedure CUSTOM_MINIMAP_SET_ACTIVE(toggle: BOOL);
procedure CUSTOM_MINIMAP_SET_BLIP_OBJECT(spriteId: cint);
function CUSTOM_MINIMAP_CREATE_BLIP(x, y, z: cfloat): cint;
procedure CUSTOM_MINIMAP_CLEAR_BLIPS;
function FORCE_SONAR_BLIPS_THIS_FRAME: BOOL;
function GET_NORTH_BLID_INDEX: Blip;
procedure DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(toggle: BOOL);
procedure DRAW_FRONTEND_BACKGROUND_THIS_FRAME;
procedure DRAW_HUD_OVER_FADE_THIS_FRAME;
procedure ACTIVATE_FRONTEND_MENU(menuhash: Hash; togglePause: BOOL; component: cint);
procedure RESTART_FRONTEND_MENU(menuHash: Hash; p1: cint);
function GET_CURRENT_FRONTEND_MENU_VERSION: Hash;
procedure SET_PAUSE_MENU_ACTIVE(toggle: BOOL);
procedure DISABLE_FRONTEND_THIS_FRAME;
procedure SUPPRESS_FRONTEND_RENDERING_THIS_FRAME;
procedure ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME;
procedure SET_FRONTEND_ACTIVE(active: BOOL);
function IS_PAUSE_MENU_ACTIVE: BOOL;
function IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN: BOOL;
function GET_PAUSE_MENU_STATE: cint;
function GET_PAUSE_MENU_POSITION: Vector3;
function IS_PAUSE_MENU_RESTARTING: BOOL;
procedure FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(p0: PChar);
procedure PAUSE_MENUCEPTION_GO_DEEPER(page: cint);
procedure PAUSE_MENUCEPTION_THE_KICK;
procedure PAUSE_TOGGLE_FULLSCREEN_MAP(p0: Any);
procedure PAUSE_MENU_ACTIVATE_CONTEXT(contextHash: Hash);
procedure PAUSE_MENU_DEACTIVATE_CONTEXT(contextHash: Hash);
function PAUSE_MENU_IS_CONTEXT_ACTIVE(contextHash: Hash): BOOL;
function PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE: BOOL;
function PAUSE_MENU_GET_HAIR_COLOUR_INDEX: cint;
function PAUSE_MENU_GET_MOUSE_HOVER_INDEX: cint;
function PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID: cint;
function PAUSE_MENU_GET_MOUSE_CLICK_EVENT(p0, p1, p2: PAny): BOOL;
procedure PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(p0: cint);
procedure PAUSE_MENU_SET_BUSY_SPINNER(p0: BOOL; position, spinnerIndex: cint);
procedure PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(p0: BOOL);
function IS_FRONTEND_READY_FOR_CONTROL: BOOL;
procedure TAKE_CONTROL_OF_FRONTEND;
procedure RELEASE_CONTROL_OF_FRONTEND;
function CODE_WANTS_SCRIPT_TO_TAKE_CONTROL: BOOL;
function GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL: cint;
function IS_NAVIGATING_MENU_CONTENT: BOOL;
function HAS_MENU_TRIGGER_EVENT_OCCURRED: BOOL;
function HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED: BOOL;
procedure SET_SAVEGAME_LIST_UNIQUE_ID(p0: Any);
procedure GET_MENU_TRIGGER_EVENT_DETAILS(lastItemMenuId, selectedItemUniqueId: pcint);
procedure GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(lastItemMenuId, selectedItemMenuId, selectedItemUniqueId: pcint);
function GET_PM_PLAYER_CREW_COLOR(r, g, b: pcint): BOOL;
function GET_MENU_PED_INT_STAT(p0: Any; p1: PAny): BOOL;
function GET_CHARACTER_MENU_PED_INT_STAT(p0: Any; p1: PAny; p2: Any): BOOL;
function GET_MENU_PED_MASKED_INT_STAT(statHash: Hash; outValue: pcint; mask: cint; p3: BOOL): BOOL;
function GET_CHARACTER_MENU_PED_MASKED_INT_STAT(statHash: Hash; outValue: PAny; p2, mask: cint; p4: BOOL): BOOL;
function GET_MENU_PED_FLOAT_STAT(statHash: Hash; outValue: pcfloat): BOOL;
function GET_CHARACTER_MENU_PED_FLOAT_STAT(statHash: cfloat; outValue: pcfloat; p2: BOOL): BOOL;
function GET_MENU_PED_BOOL_STAT(statHash: Hash; outValue: PBOOL): BOOL;
procedure CLEAR_PED_IN_PAUSE_MENU;
procedure GIVE_PED_TO_PAUSE_MENU(_ped: Ped; p1: cint);
procedure SET_PAUSE_MENU_PED_LIGHTING(state: BOOL);
procedure SET_PAUSE_MENU_PED_SLEEP_STATE(state: BOOL);
procedure OPEN_ONLINE_POLICIES_MENU;
function ARE_ONLINE_POLICIES_UP_TO_DATE: BOOL;
function IS_ONLINE_POLICIES_MENU_ACTIVE: BOOL;
procedure OPEN_SOCIAL_CLUB_MENU(menu: Hash);
procedure CLOSE_SOCIAL_CLUB_MENU;
procedure SET_SOCIAL_CLUB_TOUR(name: PChar);
function IS_SOCIAL_CLUB_ACTIVE: BOOL;
procedure SET_TEXT_INPUT_BOX_ENABLED(p0: BOOL);
procedure FORCE_CLOSE_TEXT_INPUT_BOX;
procedure SET_ALLOW_COMMA_ON_TEXT_INPUT(p0: Any);
procedure OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(gxtEntryHash: Hash);
function IS_MP_TEXT_CHAT_TYPING: BOOL;
procedure CLOSE_MP_TEXT_CHAT;
procedure MP_TEXT_CHAT_IS_TEAM_JOB(p0: Any);
procedure OVERRIDE_MP_TEXT_CHAT_COLOR(p0, hudColor: cint);
procedure MP_TEXT_CHAT_DISABLE(toggle: BOOL);
procedure FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(toggle: BOOL);
procedure SET_PED_HAS_AI_BLIP(_ped: Ped; hasCone: BOOL);
procedure SET_PED_HAS_AI_BLIP_WITH_COLOUR(_ped: Ped; hasCone: BOOL; color: cint);
function DOES_PED_HAVE_AI_BLIP(_ped: Ped): BOOL;
procedure SET_PED_AI_BLIP_GANG_ID(_ped: Ped; gangId: cint);
procedure SET_PED_AI_BLIP_HAS_CONE(_ped: Ped; toggle: BOOL);
procedure SET_PED_AI_BLIP_FORCED_ON(_ped: Ped; toggle: BOOL);
procedure SET_PED_AI_BLIP_NOTICE_RANGE(_ped: Ped; range: cfloat);
procedure SET_PED_AI_BLIP_SPRITE(_ped: Ped; spriteId: cint);
function GET_AI_PED_PED_BLIP_INDEX(_ped: Ped): Blip;
function GET_AI_PED_VEHICLE_BLIP_INDEX(_ped: Ped): Blip;
function HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE: BOOL;
procedure SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT;
procedure SET_PLAYER_IS_IN_DIRECTOR_MODE(toggle: BOOL);
procedure SET_DIRECTOR_MODE_AVAILABLE(toggle: BOOL);
procedure HIDE_HUDMARKERS_THIS_FRAME;
function GET_INTERIOR_HEADING(para_interior: Interior): cfloat;
procedure GET_INTERIOR_LOCATION_AND_NAMEHASH(para_interior: Interior; position: PVector3; nameHash: PHash);
function GET_INTERIOR_GROUP_ID(para_interior: Interior): cint;
function GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(para_interior: Interior; x, y, z: cfloat): Vector3;
function IS_INTERIOR_SCENE: BOOL;
function IS_VALID_INTERIOR(para_interior: Interior): BOOL;
procedure CLEAR_ROOM_FOR_ENTITY(para_entity: Entity);
procedure FORCE_ROOM_FOR_ENTITY(para_entity: Entity; para_interior: Interior; roomHashKey: Hash);
function GET_ROOM_KEY_FROM_ENTITY(para_entity: Entity): Hash;
function GET_KEY_FOR_ENTITY_IN_ROOM(para_entity: Entity): Hash;
function GET_INTERIOR_FROM_ENTITY(para_entity: Entity): Interior;
procedure RETAIN_ENTITY_IN_INTERIOR(para_entity: Entity; para_interior: Interior);
procedure CLEAR_INTERIOR_STATE_OF_ENTITY(para_entity: Entity);
procedure FORCE_ACTIVATING_TRACKING_ON_ENTITY(p0, p1: Any);
procedure FORCE_ROOM_FOR_GAME_VIEWPORT(interiorID: cint; roomHashKey: Hash);
procedure SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(roomName: PChar);
procedure SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(roomHashKey: Hash);
function GET_ROOM_KEY_FOR_GAME_VIEWPORT: Hash;
procedure CLEAR_ROOM_FOR_GAME_VIEWPORT;
function GET_INTERIOR_FROM_PRIMARY_VIEW: Interior;
function GET_INTERIOR_AT_COORDS(x, y, z: cfloat): Interior;
procedure ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(para_pickup: Pickup; roomName: PChar);
procedure PIN_INTERIOR_IN_MEMORY(para_interior: Interior);
procedure UNPIN_INTERIOR(para_interior: Interior);
function IS_INTERIOR_READY(para_interior: Interior): BOOL;
function SET_INTERIOR_IN_USE(para_interior: Interior): BOOL;
function GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z: cfloat; interiorType: PChar): Interior;
function GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(x, y, z: cfloat; typeHash: Hash): Interior;
procedure ACTIVATE_INTERIOR_GROUPS_USING_CAMERA;
function IS_COLLISION_MARKED_OUTSIDE(x, y, z: cfloat): BOOL;
function GET_INTERIOR_FROM_COLLISION(x, y, z: cfloat): Interior;
procedure ENABLE_STADIUM_PROBES_THIS_FRAME(toggle: BOOL);
procedure ACTIVATE_INTERIOR_ENTITY_SET(para_interior: Interior; entitySetName: PChar);
procedure DEACTIVATE_INTERIOR_ENTITY_SET(para_interior: Interior; entitySetName: PChar);
function IS_INTERIOR_ENTITY_SET_ACTIVE(para_interior: Interior; entitySetName: PChar): BOOL;
procedure SET_INTERIOR_ENTITY_SET_TINT_INDEX(para_interior: Interior; entitySetName: PChar; color: cint);
procedure REFRESH_INTERIOR(para_interior: Interior);
procedure ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(mapObjectHash: Hash);
procedure ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(mapObjectHash: Hash);
procedure DISABLE_INTERIOR(para_interior: Interior; toggle: BOOL);
function IS_INTERIOR_DISABLED(para_interior: Interior): BOOL;
procedure CAP_INTERIOR(para_interior: Interior; toggle: BOOL);
function IS_INTERIOR_CAPPED(para_interior: Interior): BOOL;
procedure DISABLE_METRO_SYSTEM(toggle: BOOL);
procedure SET_IS_EXTERIOR_ONLY(para_entity: Entity; toggle: BOOL);
function CREATE_ITEMSET(p0: BOOL): ScrHandle;
procedure DESTROY_ITEMSET(itemset: ScrHandle);
function IS_ITEMSET_VALID(itemset: ScrHandle): BOOL;
function ADD_TO_ITEMSET(item, itemset: ScrHandle): BOOL;
procedure REMOVE_FROM_ITEMSET(item, itemset: ScrHandle);
function GET_ITEMSET_SIZE(itemset: ScrHandle): cint;
function GET_INDEXED_ITEM_IN_ITEMSET(index: cint; itemset: ScrHandle): ScrHandle;
function IS_IN_ITEMSET(item, itemset: ScrHandle): BOOL;
procedure CLEAN_ITEMSET(itemset: ScrHandle);
function LOBBY_AUTO_MULTIPLAYER_MENU: BOOL;
function LOBBY_AUTO_MULTIPLAYER_FREEMODE: BOOL;
procedure LOBBY_SET_AUTO_MULTIPLAYER(toggle: BOOL);
function LOBBY_AUTO_MULTIPLAYER_EVENT: BOOL;
procedure LOBBY_SET_AUTO_MULTIPLAYER_EVENT(toggle: BOOL);
function LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB: BOOL;
procedure LOBBY_SET_AUTO_MP_RANDOM_JOB(toggle: BOOL);
procedure SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(toggle: BOOL);
function LOCALIZATION_GET_SYSTEM_LANGUAGE: cint;
function GET_CURRENT_LANGUAGE: cint;
function LOCALIZATION_GET_SYSTEM_DATE_TYPE: cint;
function GET_ALLOCATED_STACK_SIZE: cint;
function GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(stackSize: cint): cint;
procedure SET_RANDOM_SEED(seed: cint);
procedure SET_TIME_SCALE(timeScale: cfloat);
procedure SET_MISSION_FLAG(toggle: BOOL);
function GET_MISSION_FLAG: BOOL;
procedure SET_RANDOM_EVENT_FLAG(toggle: BOOL);
function GET_RANDOM_EVENT_FLAG: BOOL;
function GET_CONTENT_TO_LOAD: PChar;
procedure ACTIVITY_FEED_CREATE(p0, p1: PChar);
procedure ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(p0: PChar);
procedure ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(p0: PChar);
procedure ACTIVITY_FEED_ADD_INT_TO_CAPTION(p0: Any);
procedure ACTIVITY_FEED_LARGE_IMAGE_URL(p0: PChar);
procedure ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(p0, p1: PChar);
procedure ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(p0: PChar);
procedure ACTIVITY_FEED_POST;
procedure ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(p0: PChar);
function HAS_RESUMED_FROM_SUSPEND: BOOL;
procedure SET_SCRIPT_HIGH_PRIO(toggle: BOOL);
procedure SET_THIS_IS_A_TRIGGER_SCRIPT(toggle: BOOL);
procedure INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(p0: PChar);
function GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(p0, p1: PAny; p2: Any; p3: BOOL): BOOL;
function GET_PREV_WEATHER_TYPE_HASH_NAME: Hash;
function GET_NEXT_WEATHER_TYPE_HASH_NAME: Hash;
function IS_PREV_WEATHER_TYPE(weatherType: PChar): BOOL;
function IS_NEXT_WEATHER_TYPE(weatherType: PChar): BOOL;
procedure SET_WEATHER_TYPE_PERSIST(weatherType: PChar);
procedure SET_WEATHER_TYPE_NOW_PERSIST(weatherType: PChar);
procedure SET_WEATHER_TYPE_NOW(weatherType: PChar);
procedure SET_WEATHER_TYPE_OVERTIME_PERSIST(weatherType: PChar; time: cfloat);
procedure SET_RANDOM_WEATHER_TYPE;
procedure CLEAR_WEATHER_TYPE_PERSIST;
procedure CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(milliseconds: cint);
procedure GET_CURR_WEATHER_STATE(weatherType1, weatherType2: PHash; percentWeather2: pcfloat);
procedure SET_CURR_WEATHER_STATE(weatherType1, weatherType2: Hash; percentWeather2: cfloat);
procedure SET_OVERRIDE_WEATHER(weatherType: PChar);
procedure SET_OVERRIDE_WEATHEREX(weatherType: PChar; p1: BOOL);
procedure CLEAR_OVERRIDE_WEATHER;
procedure WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(amplitude: cfloat);
procedure WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(minAmplitude: cfloat);
procedure WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(maxAmplitude: cfloat);
procedure WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(minAmplitude: cfloat);
procedure WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(amplitude: cfloat);
procedure WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(minAmplitude: cfloat);
procedure WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(maxAmplitude: cfloat);
procedure WATER_OVERRIDE_SET_RIPPLEBUMPINESS(bumpiness: cfloat);
procedure WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(minBumpiness: cfloat);
procedure WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(maxBumpiness: cfloat);
procedure WATER_OVERRIDE_SET_RIPPLEDISTURB(disturb: cfloat);
procedure WATER_OVERRIDE_SET_STRENGTH(strength: cfloat);
procedure WATER_OVERRIDE_FADE_IN(p0: cfloat);
procedure WATER_OVERRIDE_FADE_OUT(p0: cfloat);
procedure SET_WIND(speed: cfloat);
procedure SET_WIND_SPEED(speed: cfloat);
function GET_WIND_SPEED: cfloat;
procedure SET_WIND_DIRECTION(direction: cfloat);
function GET_WIND_DIRECTION: Vector3;
procedure SET_RAIN(intensity: cfloat);
function GET_RAIN_LEVEL: cfloat;
procedure SET_SNOW(level: cfloat);
function GET_SNOW_LEVEL: cfloat;
procedure FORCE_LIGHTNING_FLASH;
procedure SET_CLOUD_SETTINGS_OVERRIDE(p0: PChar);
procedure PRELOAD_CLOUD_HAT(name: PChar);
procedure LOAD_CLOUD_HAT(name: PChar; transitionTime: cfloat);
procedure UNLOAD_CLOUD_HAT(name: PChar; p1: cfloat);
procedure UNLOAD_ALL_CLOUD_HATS;
procedure SET_CLOUDS_ALPHA(opacity: cfloat);
function GET_CLOUDS_ALPHA: cfloat;
function GET_GAME_TIMER: cint;
function GET_FRAME_TIME: cfloat;
function GET_SYSTEM_TIME_STEP: cfloat;
function GET_FRAME_COUNT: cint;
function GET_RANDOM_FLOAT_IN_RANGE(startRange, endRange: cfloat): cfloat;
function GET_RANDOM_INT_IN_RANGE(startRange, endRange: cint): cint;
function GET_RANDOM_MWC_INT_IN_RANGE(startRange, endRange: cint): cint;
function GET_GROUND_Z_FOR_3D_COORD(x, y, z: cfloat; groundZ: pcfloat; ignoreWater, p5: BOOL): BOOL;
function GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(x, y, z: cfloat; groundZ: pcfloat; normal: PVector3): BOOL;
function GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(x, y, z: cfloat; groundZ: pcfloat; p4, p5: BOOL): BOOL;
function ASIN(p0: cfloat): cfloat;
function ACOS(p0: cfloat): cfloat;
function TAN(p0: cfloat): cfloat;
function ATAN(p0: cfloat): cfloat;
function ATAN2(p0, p1: cfloat): cfloat;
function GET_DISTANCE_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2: cfloat; useZ: BOOL): cfloat;
function GET_ANGLE_BETWEEN_2D_VECTORS(x1, y1, x2, y2: cfloat): cfloat;
function GET_HEADING_FROM_VECTOR_2D(dx, dy: cfloat): cfloat;
function GET_RATIO_OF_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; clamp: BOOL): cfloat;
function GET_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; clamp: BOOL): Vector3;
function GET_LINE_PLANE_INTERSECTION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11: cfloat; p12: pcfloat): BOOL;
function GET_POINT_AREA_OVERLAP(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13: Any): BOOL;
procedure SET_BIT(address: pcint; offset: cint);
procedure CLEAR_BIT(address: pcint; offset: cint);
function GET_HASH_KEY(str: PChar): Hash;
procedure SLERP_NEAR_QUATERNION(t, x, y, z, w, x1, y1, z1, w1: cfloat; outX, outY, outZ, outW: pcfloat);
function IS_AREA_OCCUPIED(p0, p1, p2, p3, p4, p5: cfloat; p6, p7, p8, p9, p10: BOOL; p11: Any; p12: BOOL): BOOL;
function IS_AREA_OCCUPIED_SLOW(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12: Any): BOOL;
function IS_POSITION_OCCUPIED(x, y, z, range: cfloat; p4, checkVehicles, checkPeds, p7, p8: BOOL; ignoreEntity: Entity; p10: BOOL): BOOL;
function IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(p0, p1, p2, p3, p4, p5: cfloat; p6: Any): BOOL;
procedure CLEAR_AREA(X, Y, Z, radius: cfloat; p4, ignoreCopCars, ignoreObjects, p7: BOOL);
procedure CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius: cfloat; p4, p5, p6, p7: BOOL);
procedure CLEAR_AREA_OF_VEHICLES(x, y, z, radius: cfloat; p4, p5, p6, p7, p8, p9: BOOL; p10: Any);
procedure CLEAR_ANGLED_AREA_OF_VEHICLES(x1, y1, z1, x2, y2, z2, width: cfloat; p7, p8, p9, p10, p11: BOOL; p12, p13: Any);
procedure CLEAR_AREA_OF_OBJECTS(x, y, z, radius: cfloat; flags: cint);
procedure CLEAR_AREA_OF_PEDS(x, y, z, radius: cfloat; flags: cint);
procedure CLEAR_AREA_OF_COPS(x, y, z, radius: cfloat; flags: cint);
procedure CLEAR_AREA_OF_PROJECTILES(x, y, z, radius: cfloat; flags: cint);
procedure CLEAR_SCENARIO_SPAWN_HISTORY;
procedure SET_SAVE_MENU_ACTIVE(ignoreVehicle: BOOL);
function GET_STATUS_OF_MANUAL_SAVE: cint;
procedure SET_CREDITS_ACTIVE(toggle: BOOL);
procedure SET_CREDITS_FADE_OUT_WITH_SCREEN(toggle: BOOL);
function HAVE_CREDITS_REACHED_END: BOOL;
function ARE_CREDITS_RUNNING: BOOL;
procedure TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(scriptName: PChar);
procedure NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME;
function ADD_HOSPITAL_RESTART(x, y, z, p3: cfloat; p4: Any): cint;
procedure DISABLE_HOSPITAL_RESTART(hospitalIndex: cint; toggle: BOOL);
function ADD_POLICE_RESTART(p0, p1, p2, p3: cfloat; p4: Any): cint;
procedure DISABLE_POLICE_RESTART(policeIndex: cint; toggle: BOOL);
procedure SET_RESTART_COORD_OVERRIDE(x, y, z, heading: cfloat);
procedure CLEAR_RESTART_COORD_OVERRIDE;
procedure PAUSE_DEATH_ARREST_RESTART(toggle: BOOL);
procedure IGNORE_NEXT_RESTART(toggle: BOOL);
procedure SET_FADE_OUT_AFTER_DEATH(toggle: BOOL);
procedure SET_FADE_OUT_AFTER_ARREST(toggle: BOOL);
procedure SET_FADE_IN_AFTER_DEATH_ARREST(toggle: BOOL);
procedure SET_FADE_IN_AFTER_LOAD(toggle: BOOL);
function REGISTER_SAVE_HOUSE(x, y, z, p3: cfloat; p4: PChar; p5, p6: Any): cint;
procedure SET_SAVE_HOUSE(savehouseHandle: cint; p1, p2: BOOL);
function OVERRIDE_SAVE_HOUSE(p0: BOOL; p1, p2, p3, p4: cfloat; p5: BOOL; p6, p7: cfloat): BOOL;
function GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(p0: PVector3; p1: pcfloat; fadeInAfterLoad, p3: PBOOL): BOOL;
procedure DO_AUTO_SAVE;
function GET_IS_AUTO_SAVE_OFF: BOOL;
function IS_AUTO_SAVE_IN_PROGRESS: BOOL;
function HAS_CODE_REQUESTED_AUTOSAVE: BOOL;
procedure CLEAR_CODE_REQUESTED_AUTOSAVE;
procedure BEGIN_REPLAY_STATS(p0, p1: Any);
procedure ADD_REPLAY_STAT_VALUE(value: Any);
procedure END_REPLAY_STATS;
function HAVE_REPLAY_STATS_BEEN_STORED: BOOL;
function GET_REPLAY_STAT_MISSION_ID: cint;
function GET_REPLAY_STAT_MISSION_TYPE: cint;
function GET_REPLAY_STAT_COUNT: cint;
function GET_REPLAY_STAT_AT_INDEX(index: cint): cint;
procedure CLEAR_REPLAY_STATS;
function QUEUE_MISSION_REPEAT_LOAD: BOOL;
function QUEUE_MISSION_REPEAT_SAVE: BOOL;
function QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST: BOOL;
function GET_STATUS_OF_MISSION_REPEAT_SAVE: cint;
function IS_MEMORY_CARD_IN_USE: BOOL;
procedure SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2: cfloat; damage: cint; p7: BOOL; weaponHash: Hash; ownerPed: Ped; isAudible, isInvisible: BOOL; speed: cfloat);
procedure SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(x1, y1, z1, x2, y2, z2: cfloat; damage: cint; p7: BOOL; weaponHash: Hash; ownerPed: Ped; isAudible, isInvisible: BOOL; speed: cfloat; para_entity: Entity; p14: Any);
procedure SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(x1, y1, z1, x2, y2, z2: cfloat; damage: cint; p7: BOOL; weaponHash: Hash; ownerPed: Ped; isAudible, isInvisible: BOOL; speed: cfloat; para_entity: Entity; p14, p15: BOOL; targetEntity: Entity; p17: BOOL; p18, p19, p20: Any);
procedure GET_MODEL_DIMENSIONS(modelHash: Hash; minimum, maximum: PVector3);
procedure SET_FAKE_WANTED_LEVEL(fakeWantedLevel: cint);
function GET_FAKE_WANTED_LEVEL: cint;
procedure USING_MISSION_CREATOR(toggle: BOOL);
procedure ALLOW_MISSION_CREATOR_WARP(toggle: BOOL);
procedure SET_MINIGAME_IN_PROGRESS(toggle: BOOL);
function IS_MINIGAME_IN_PROGRESS: BOOL;
function IS_THIS_A_MINIGAME_SCRIPT: BOOL;
function IS_SNIPER_INVERTED: BOOL;
function SHOULD_USE_METRIC_MEASUREMENTS: BOOL;
function GET_PROFILE_SETTING(profileSetting: cint): cint;
function ARE_STRINGS_EQUAL(string1, string2: PChar): BOOL;
function COMPARE_STRINGS(str1, str2: PChar; matchCase: BOOL; maxLength: cint): cint;
function ABSI(value: cint): cint;
function ABSF(value: cfloat): cfloat;
function IS_SNIPER_BULLET_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
function IS_PROJECTILE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; ownedByPlayer: BOOL): BOOL;
function IS_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; _type: cint; ownedByPlayer: BOOL): BOOL;
function IS_PROJECTILE_TYPE_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; p7: Any; ownedByPlayer: BOOL): BOOL;
function IS_PROJECTILE_TYPE_WITHIN_DISTANCE(x, y, z: cfloat; projectileHash: Hash; radius: cfloat; ownedByPlayer: BOOL): BOOL;
function GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; projectileHash: Hash; projectilePos: PVector3; ownedByPlayer: BOOL): BOOL;
function GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA(vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace: cfloat; weaponType: Hash; positionOut: PVector3; bIsPlayer: BOOL): BOOL;
function GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(_ped: Ped; weaponHash: Hash; distance: cfloat; outCoords: PVector3; p4: BOOL): BOOL;
function GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(_ped: Ped; weaponHash: Hash; distance: cfloat; outCoords: PVector3; outProjectile: PGTAObject; p5: BOOL): BOOL;
function IS_BULLET_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; ownedByPlayer: BOOL): BOOL;
function IS_BULLET_IN_AREA(x, y, z, radius: cfloat; ownedByPlayer: BOOL): BOOL;
function IS_BULLET_IN_BOX(x1, y1, z1, x2, y2, z2: cfloat; ownedByPlayer: BOOL): BOOL;
function HAS_BULLET_IMPACTED_IN_AREA(x, y, z, p3: cfloat; p4, p5: BOOL): BOOL;
function HAS_BULLET_IMPACTED_IN_BOX(p0, p1, p2, p3, p4, p5: cfloat; p6, p7: BOOL): BOOL;
function IS_ORBIS_VERSION: BOOL;
function IS_DURANGO_VERSION: BOOL;
function IS_XBOX360_VERSION: BOOL;
function IS_PS3_VERSION: BOOL;
function IS_PC_VERSION: BOOL;
function IS_STEAM_VERSION: BOOL;
function IS_AUSSIE_VERSION: BOOL;
function IS_JAPANESE_VERSION: BOOL;
function IS_XBOX_PLATFORM: BOOL;
function IS_SCARLETT_VERSION: BOOL;
function IS_SCE_PLATFORM: BOOL;
function IS_PROSPERO_VERSION: BOOL;
function IS_STRING_NULL(str: PChar): BOOL;
function IS_STRING_NULL_OR_EMPTY(str: PChar): BOOL;
function STRING_TO_INT(str: PChar; outInteger: pcint): BOOL;
procedure SET_BITS_IN_RANGE(_var: pcint; rangeStart, rangeEnd, p3: cint);
function GET_BITS_IN_RANGE(_var, rangeStart, rangeEnd: cint): cint;
function ADD_STUNT_JUMP(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ: cfloat; p15, p16, p17: cint): cint;
function ADD_STUNT_JUMP_ANGLED(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ: cfloat; p17, p18, p19: cint): cint;
procedure TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(toggle: BOOL);
procedure DELETE_STUNT_JUMP(p0: cint);
procedure ENABLE_STUNT_JUMP_SET(p0: cint);
procedure DISABLE_STUNT_JUMP_SET(p0: cint);
procedure SET_STUNT_JUMPS_CAN_TRIGGER(toggle: BOOL);
function IS_STUNT_JUMP_IN_PROGRESS: BOOL;
function IS_STUNT_JUMP_MESSAGE_SHOWING: BOOL;
function GET_NUM_SUCCESSFUL_STUNT_JUMPS: cint;
function GET_TOTAL_SUCCESSFUL_STUNT_JUMPS: cint;
procedure CANCEL_STUNT_JUMP;
procedure SET_GAME_PAUSED(toggle: BOOL);
procedure SET_THIS_SCRIPT_CAN_BE_PAUSED(toggle: BOOL);
procedure SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(toggle: BOOL);
function HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(para_hash: Hash; amount: cint): BOOL;
function HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(para_hash: Hash): BOOL;
procedure OVERRIDE_FREEZE_FLAGS(p0: BOOL);
procedure SET_INSTANCE_PRIORITY_MODE(p0: cint);
procedure SET_INSTANCE_PRIORITY_HINT(flag: cint);
function IS_FRONTEND_FADING: BOOL;
procedure POPULATE_NOW;
function GET_INDEX_OF_CURRENT_LEVEL: cint;
procedure SET_GRAVITY_LEVEL(level: cint);
procedure START_SAVE_DATA(p0: PAny; p1: Any; p2: BOOL);
procedure STOP_SAVE_DATA;
function GET_SIZE_OF_SAVE_DATA(p0: BOOL): cint;
procedure REGISTER_INT_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_INT64_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_ENUM_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_FLOAT_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_BOOL_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_TEXT_LABEL_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_TEXT_LABEL_15_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_TEXT_LABEL_23_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_TEXT_LABEL_31_TO_SAVE(p0: PAny; name: PChar);
procedure REGISTER_TEXT_LABEL_63_TO_SAVE(p0: PAny; name: PChar);
procedure START_SAVE_STRUCT_WITH_SIZE(p0: PAny; size: cint; structName: PChar);
procedure STOP_SAVE_STRUCT;
procedure START_SAVE_ARRAY_WITH_SIZE(p0: PAny; size: cint; arrayName: PChar);
procedure STOP_SAVE_ARRAY;
procedure COPY_SCRIPT_STRUCT(dst, src: PAny; size: cint);
procedure ENABLE_DISPATCH_SERVICE(dispatchService: cint; toggle: BOOL);
procedure BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(dispatchService: cint; toggle: BOOL);
function GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(dispatchService: cint): cint;
function CREATE_INCIDENT(dispatchService: cint; x, y, z: cfloat; numUnits: cint; radius: cfloat; outIncidentID: pcint; p7, p8: Any): BOOL;
function CREATE_INCIDENT_WITH_ENTITY(dispatchService: cint; _ped: Ped; numUnits: cint; radius: cfloat; outIncidentID: pcint; p5, p6: Any): BOOL;
procedure DELETE_INCIDENT(incidentId: cint);
function IS_INCIDENT_VALID(incidentId: cint): BOOL;
procedure SET_INCIDENT_REQUESTED_UNITS(incidentId, dispatchService, numUnits: cint);
procedure SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(incidentId: cint; p1: cfloat);
function FIND_SPAWN_POINT_IN_DIRECTION(posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance: cfloat; spawnPoint: PVector3): BOOL;
function ADD_POP_MULTIPLIER_AREA(x1, y1, z1, x2, y2, z2, p6, p7: cfloat; p8, p9: BOOL): cint;
function DOES_POP_MULTIPLIER_AREA_EXIST(id: cint): BOOL;
procedure REMOVE_POP_MULTIPLIER_AREA(id: cint; p1: BOOL);
function IS_POP_MULTIPLIER_AREA_NETWORKED(id: cint): BOOL;
function ADD_POP_MULTIPLIER_SPHERE(x, y, z, radius, pedMultiplier, vehicleMultiplier: cfloat; p6, p7: BOOL): cint;
function DOES_POP_MULTIPLIER_SPHERE_EXIST(id: cint): BOOL;
procedure REMOVE_POP_MULTIPLIER_SPHERE(id: cint; p1: BOOL);
procedure ENABLE_TENNIS_MODE(_ped: Ped; toggle, p2: BOOL);
function IS_TENNIS_MODE(_ped: Ped): BOOL;
procedure PLAY_TENNIS_SWING_ANIM(_ped: Ped; animDict, animName: PChar; p3, p4: cfloat; p5: BOOL);
function GET_TENNIS_SWING_ANIM_COMPLETE(_ped: Ped): BOOL;
function GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(_ped: Ped): BOOL;
function GET_TENNIS_SWING_ANIM_SWUNG(_ped: Ped): BOOL;
procedure PLAY_TENNIS_DIVE_ANIM(_ped: Ped; p1: cint; p2, p3, p4: cfloat; p5: BOOL);
procedure SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(_ped: Ped; p1: PChar; p2: cfloat);
procedure RESET_DISPATCH_SPAWN_LOCATION;
procedure SET_DISPATCH_SPAWN_LOCATION(x, y, z: cfloat);
procedure RESET_DISPATCH_IDEAL_SPAWN_DISTANCE;
procedure SET_DISPATCH_IDEAL_SPAWN_DISTANCE(distance: cfloat);
procedure RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0: Any);
procedure SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0: Any; p1: cfloat);
procedure SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(p0: Any; p1: cfloat);
function ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, width: cfloat): cint;
function ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(x1, y1, x2, y2: cfloat): cint;
procedure REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(p0: cint);
procedure RESET_DISPATCH_SPAWN_BLOCKING_AREAS;
procedure RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN;
procedure SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(p0, p1: cint);
procedure ADD_TACTICAL_NAV_MESH_POINT(x, y, z: cfloat);
procedure CLEAR_TACTICAL_NAV_MESH_POINTS;
procedure SET_RIOT_MODE_ENABLED(toggle: BOOL);
procedure DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(p0: cint; windowTitle: PChar; p2: PAny; defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7: PChar; maxInputLength: cint);
procedure DISPLAY_ONSCREEN_KEYBOARD(p0: cint; windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3: PChar; maxInputLength: cint);
function UPDATE_ONSCREEN_KEYBOARD: cint;
function GET_ONSCREEN_KEYBOARD_RESULT: PChar;
procedure CANCEL_ONSCREEN_KEYBOARD;
procedure NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(p0: cint);
procedure ACTION_MANAGER_ENABLE_ACTION(para_hash: Hash; enable: BOOL);
function GET_REAL_WORLD_TIME: cint;
procedure SUPRESS_RANDOM_EVENT_THIS_FRAME(eventType: cint; suppress: BOOL);
procedure SET_EXPLOSIVE_AMMO_THIS_FRAME(plyr: Player);
procedure SET_FIRE_AMMO_THIS_FRAME(plyr: Player);
procedure SET_EXPLOSIVE_MELEE_THIS_FRAME(plyr: Player);
procedure SET_SUPER_JUMP_THIS_FRAME(plyr: Player);
procedure SET_BEAST_JUMP_THIS_FRAME(plyr: Player);
procedure SET_FORCED_JUMP_THIS_FRAME(plyr: Player);
function HAS_GAME_INSTALLED_THIS_SESSION: BOOL;
procedure SET_TICKER_JOHNMARSTON_IS_DONE;
function ARE_PROFILE_SETTINGS_VALID: BOOL;
procedure PREVENT_ARREST_STATE_THIS_FRAME;
procedure FORCE_GAME_STATE_PLAYING;
procedure SCRIPT_RACE_INIT(p0, p1: cint; p2, p3: Any);
procedure SCRIPT_RACE_SHUTDOWN;
procedure SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(plyr: Player; p1, p2, p3: Any);
function SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(plyr: Player; p1, p2: pcint): BOOL;
procedure START_END_USER_BENCHMARK;
procedure STOP_END_USER_BENCHMARK;
procedure RESET_END_USER_BENCHMARK;
procedure SAVE_END_USER_BENCHMARK;
function UI_STARTED_END_USER_BENCHMARK: BOOL;
function LANDING_SCREEN_STARTED_END_USER_BENCHMARK: BOOL;
function IS_COMMANDLINE_END_USER_BENCHMARK: BOOL;
function GET_BENCHMARK_ITERATIONS: cint;
function GET_BENCHMARK_PASS: cint;
procedure RESTART_GAME;
procedure QUIT_GAME;
function HAS_ASYNC_INSTALL_FINISHED: BOOL;
procedure CLEANUP_ASYNC_INSTALL;
function PLM_IS_IN_CONSTRAINED_MODE: BOOL;
function PLM_GET_CONSTRAINED_DURATION_MS: cint;
procedure SET_PLAYER_IS_IN_ANIMAL_FORM(toggle: BOOL);
function GET_IS_PLAYER_IN_ANIMAL_FORM: BOOL;
procedure SET_PLAYER_IS_REPEATING_A_MISSION(toggle: BOOL);
procedure DISABLE_SCREEN_DIMMING_THIS_FRAME;
function GET_CITY_DENSITY: cfloat;
procedure USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE;
procedure SET_CONTENT_ID_INDEX(contentId: Hash; index: cint);
function GET_CONTENT_ID_INDEX(contentId: Hash): cint;
procedure _SET_CONTENT_PROP_TYPE(model: Hash; _type: cint);
function _GET_CONTENT_PROP_TYPE(model: Hash): cint;
procedure CREATE_MOBILE_PHONE(phoneType: cint);
procedure DESTROY_MOBILE_PHONE;
procedure SET_MOBILE_PHONE_SCALE(scale: cfloat);
procedure SET_MOBILE_PHONE_ROTATION(rotX, rotY, rotZ: cfloat; p3: Any);
procedure GET_MOBILE_PHONE_ROTATION(rotation: PVector3; p1: Vehicle);
procedure SET_MOBILE_PHONE_POSITION(posX, posY, posZ: cfloat);
procedure GET_MOBILE_PHONE_POSITION(position: PVector3);
procedure SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(toggle: BOOL);
function CAN_PHONE_BE_SEEN_ON_SCREEN: BOOL;
procedure SET_MOBILE_PHONE_DOF_STATE(toggle: BOOL);
procedure CELL_SET_INPUT(direction: cint);
procedure CELL_HORIZONTAL_MODE_TOGGLE(toggle: BOOL);
procedure CELL_CAM_ACTIVATE(p0, p1: BOOL);
procedure CELL_CAM_ACTIVATE_SELFIE_MODE(toggle: BOOL);
procedure CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(toggle: BOOL);
procedure CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(p0: cfloat);
procedure CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(horizontalPan: cfloat);
procedure CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(vertPan: cfloat);
procedure CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(roll: cfloat);
procedure CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(distanceScaling: cfloat);
procedure CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(yaw: cfloat);
procedure CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(roll: cfloat);
procedure CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(pitch: cfloat);
function CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(para_entity: Entity): BOOL;
procedure GET_MOBILE_PHONE_RENDER_ID(renderId: pcint);
procedure NETWORK_INITIALIZE_CASH(wallet, bank: cint);
procedure NETWORK_DELETE_CHARACTER(characterSlot: cint; p1, p2: BOOL);
procedure NETWORK_MANUAL_DELETE_CHARACTER(characterSlot: cint);
function NETWORK_GET_PLAYER_IS_HIGH_EARNER: BOOL;
procedure NETWORK_CLEAR_CHARACTER_WALLET(characterSlot: cint);
procedure NETWORK_GIVE_PLAYER_JOBSHARE_CASH(amount: cint; gamerHandle: PAny);
procedure NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(value: cint; gamerHandle: PAny);
function NETWORK_CAN_SHARE_JOB_CASH: BOOL;
procedure NETWORK_REFUND_CASH(index: cint; context, reason: PChar; p3: BOOL);
procedure NETWORK_DEDUCT_CASH(amount: cint; p1, p2: PChar; p3, p4, p5: BOOL);
function NETWORK_MONEY_CAN_BET(amount: cint; p1, p2: BOOL): BOOL;
function NETWORK_CAN_BET(amount: cint): BOOL;
function NETWORK_CASINO_CAN_BET(para_hash: Hash): BOOL;
function NETWORK_CASINO_CAN_BET_PVC: BOOL;
function NETWORK_CASINO_CAN_BET_AMOUNT(p0: Any): BOOL;
function NETWORK_CASINO_CAN_BUY_CHIPS_PVC: BOOL;
function NETWORK_CASINO_BUY_CHIPS(p0, p1: cint): BOOL;
function NETWORK_CASINO_SELL_CHIPS(p0, p1: cint): BOOL;
procedure NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE;
function CAN_PAY_AMOUNT_TO_BOSS(p0, p1, amount: cint; p3: pcint): BOOL;
procedure NETWORK_EARN_FROM_PICKUP(amount: cint);
procedure NETWORK_EARN_FROM_CASHING_OUT(amount: cint);
procedure NETWORK_EARN_FROM_GANGATTACK_PICKUP(amount: cint);
procedure NETWORK_EARN_ASSASSINATE_TARGET_KILLED(amount: cint);
procedure NETWORK_EARN_FROM_ROB_ARMORED_CARS(amount: cint);
procedure NETWORK_EARN_FROM_CRATE_DROP(amount: cint);
procedure NETWORK_EARN_FROM_BETTING(amount: cint; p1: PChar);
procedure NETWORK_EARN_FROM_JOB(amount: cint; p1: PChar);
procedure NETWORK_EARN_FROM_JOBX2(amount: cint; p1: PChar);
procedure NETWORK_EARN_FROM_PREMIUM_JOB(amount: cint; p1: PChar);
procedure NETWORK_EARN_FROM_BEND_JOB(amount: cint; heistHash: PChar);
procedure NETWORK_EARN_FROM_CHALLENGE_WIN(p0: Any; p1: PAny; p2: BOOL);
procedure NETWORK_EARN_FROM_BOUNTY(amount: cint; gamerHandle, p2: PAny; p3: Any);
procedure NETWORK_EARN_FROM_IMPORT_EXPORT(amount: cint; modelHash: Hash);
procedure NETWORK_EARN_FROM_HOLDUPS(amount: cint);
procedure NETWORK_EARN_FROM_PROPERTY(amount: cint; propertyName: Hash);
procedure NETWORK_EARN_FROM_AI_TARGET_KILL(p0, p1: Any);
procedure NETWORK_EARN_FROM_NOT_BADSPORT(amount: cint);
procedure NETWORK_EARN_FROM_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7: Any);
procedure NETWORK_EARN_FROM_PERSONAL_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7, p8: Any);
procedure NETWORK_EARN_FROM_DAILY_OBJECTIVES(amount: cint; _type: PChar; characterSlot: cint);
procedure NETWORK_EARN_FROM_AMBIENT_JOB(p0: cint; p1: PChar; p2: PAny);
procedure NETWORK_EARN_FROM_JOB_BONUS(p0: Any; p1, p2: PAny);
procedure NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(p0, p1, p2: Any);
procedure NETWORK_EARN_HEIST_AWARD(p0, p1, p2: Any);
procedure NETWORK_EARN_FIRST_TIME_BONUS(p0, p1, p2: Any);
procedure NETWORK_EARN_GOON(p0, p1, p2: Any);
procedure NETWORK_EARN_BOSS(p0, p1, p2: Any);
procedure NETWORK_EARN_AGENCY(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_FROM_WAREHOUSE(amount, id: cint);
procedure NETWORK_EARN_FROM_CONTRABAND(amount: cint; p1: Any);
procedure NETWORK_EARN_FROM_DESTROYING_CONTRABAND(p0, p1, p2: Any);
procedure NETWORK_EARN_FROM_SMUGGLER_WORK(p0, p1, p2, p3, p4, p5: Any);
procedure NETWORK_EARN_FROM_HANGAR_TRADE(p0, p1: Any);
procedure NETWORK_EARN_PURCHASE_CLUB_HOUSE(p0, p1: Any);
procedure NETWORK_EARN_FROM_BUSINESS_PRODUCT(amount: cint; p1, p2, p3: Any);
procedure NETWORK_EARN_FROM_VEHICLE_EXPORT(amount: cint; p1, p2: Any);
procedure NETWORK_EARN_SMUGGLER_AGENCY(amount: cint; p1, p2, p3: Any);
procedure NETWORK_EARN_BOUNTY_HUNTER_REWARD(p0: Any);
procedure NETWORK_EARN_FROM_BUSINESS_BATTLE(p0: Any);
procedure NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(p0: Any; p1: cint);
procedure NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(p0: Any);
procedure NETWORK_EARN_FROM_BUSINESS_HUB_SELL(p0, p1, p2: Any);
procedure NETWORK_EARN_FROM_FMBB_BOSS_WORK(p0: Any);
procedure NETWORK_EARN_FMBB_WAGE_BONUS(p0: Any);
function NETWORK_CAN_SPEND_MONEY(p0: Any; p1, p2, p3: BOOL; p4, p5: Any): BOOL;
function NETWORK_CAN_SPEND_MONEY2(p0: Any; p1, p2, p3: BOOL; p4: PAny; p5, p6: Any): BOOL;
procedure NETWORK_BUY_ITEM(amount: cint; item: Hash; p2, p3: Any; p4: BOOL; item_name: PChar; p6, p7, p8: Any; p9: BOOL);
procedure NETWORK_SPENT_TAXI(amount: cint; p1, p2: BOOL; p3, p4: Any);
procedure NETWORK_PAY_EMPLOYEE_WAGE(p0: Any; p1, p2: BOOL);
procedure NETWORK_PAY_MATCH_ENTRY_FEE(amount: cint; matchId: PChar; p2, p3: BOOL);
procedure NETWORK_SPENT_BETTING(amount, p1: cint; matchId: PChar; p3, p4: BOOL);
procedure NETWORK_SPENT_WAGER(p0, p1: Any; amount: cint);
procedure NETWORK_SPENT_IN_STRIPCLUB(p0: Any; p1: BOOL; p2: Any; p3: BOOL);
procedure NETWORK_BUY_HEALTHCARE(cost: cint; p1, p2: BOOL);
procedure NETWORK_BUY_AIRSTRIKE(cost: cint; p1, p2: BOOL; p3: Any);
procedure NETWORK_BUY_BACKUP_GANG(p0, p1: cint; p2, p3: BOOL; npcProvider: cint);
procedure NETWORK_BUY_HELI_STRIKE(cost: cint; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_AMMO_DROP(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_BUY_BOUNTY(amount: cint; victim: Player; p2, p3: BOOL; p4: Any);
procedure NETWORK_BUY_PROPERTY(cost: cint; propertyName: Hash; p2, p3: BOOL);
procedure NETWORK_BUY_SMOKES(p0: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_HELI_PICKUP(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_BOAT_PICKUP(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_BULL_SHARK(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_CASH_DROP(amount: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_HIRE_MUGGER(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_ROBBED_BY_MUGGER(amount: cint; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_HIRE_MERCENARY(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_BUY_WANTEDLEVEL(p0: Any; p1: PAny; p2, p3: BOOL; p4: Any);
procedure NETWORK_SPENT_BUY_OFFTHERADAR(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_BUY_REVEAL_PLAYERS(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_CARWASH(p0, p1, p2: Any; p3, p4: BOOL);
procedure NETWORK_SPENT_CINEMA(p0, p1: Any; p2, p3: BOOL);
procedure NETWORK_SPENT_TELESCOPE(p0: Any; p1, p2: BOOL);
procedure NETWORK_SPENT_HOLDUPS(p0: Any; p1, p2: BOOL);
procedure NETWORK_SPENT_BUY_PASSIVE_MODE(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_BANK_INTEREST(p0: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_PROSTITUTES(p0: Any; p1, p2: BOOL);
procedure NETWORK_SPENT_ARREST_BAIL(p0: Any; p1, p2: BOOL);
procedure NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(amount: cint; vehicleModel: Hash; gamerHandle: PAny; notBankrupt, hasTheMoney: BOOL);
procedure NETWORK_SPENT_CALL_PLAYER(p0: Any; p1: PAny; p2, p3: BOOL);
procedure NETWORK_SPENT_BOUNTY(p0: Any; p1, p2: BOOL);
procedure NETWORK_SPENT_FROM_ROCKSTAR(p0: cint; p1, p2: BOOL);
function NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(amount: cint): cint;
function PROCESS_CASH_GIFT(p0, p1: pcint; p2: PChar): PChar;
procedure NETWORK_SPENT_MOVE_SUBMARINE(p0, p1, p2: Any);
procedure NETWORK_SPENT_PLAYER_HEALTHCARE(p0, p1: cint; p2, p3: BOOL);
procedure NETWORK_SPENT_NO_COPS(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_CARGO_SOURCING(p0, p1, p2, p3, p4, p5: Any);
procedure NETWORK_SPENT_REQUEST_JOB(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPENT_REQUEST_HEIST(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_BUY_FAIRGROUND_RIDE(amount: cint; p1: Any; p2, p3: BOOL; p4: Any);
function NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS: BOOL;
procedure NETWORK_SPENT_JOB_SKIP(amount: cint; matchId: PChar; p2, p3: BOOL);
function NETWORK_SPENT_BOSS_GOON(amount: cint; p1, p2: BOOL): BOOL;
procedure NETWORK_SPEND_GOON(p0, p1, amount: cint);
procedure NETWORK_SPEND_BOSS(p0, p1, p2: Any);
procedure NETWORK_SPENT_MOVE_YACHT(amount: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_RENAME_ORGANIZATION(p0, p1, p2, p3: Any);
procedure NETWORK_BUY_CONTRABAND_MISSION(p0, p1: cint; p2: Hash; p3, p4: BOOL);
procedure NETWORK_SPENT_PA_SERVICE_HELI(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PA_SERVICE_VEHICLE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PA_SERVICE_SNACK(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PA_SERVICE_DANCER(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PA_SERVICE_IMPOUND(p0, p1, p2: Any);
procedure NETWORK_SPENT_PA_HELI_PICKUP(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(amount: cint; data: PAny; p2, p3: BOOL);
procedure NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_JUKEBOX(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PURCHASE_CLUB_HOUSE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_CLUB_HOUSE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_MC_ABILITY(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_CHANGE_APPEARANCE(p0, p1, p2: Any);
procedure NETWORK_SPENT_VEHICLE_EXPORT_MODS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9: Any);
procedure NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_IMPORT_EXPORT_REPAIR(p0, p1, p2: Any);
procedure NETWORK_SPENT_PURCHASE_HANGAR(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_HANGAR(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_HANGAR_UTILITY_CHARGES(amount: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_HANGAR_STAFF_CHARGES(amount: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_BUY_TRUCK(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_TRUCK(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_BUY_BUNKER(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPRADE_BUNKER(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_FROM_SELL_BUNKER(amount: cint; bunkerHash: Hash);
procedure NETWORK_SPENT_BALLISTIC_EQUIPMENT(amount: cint; p1, p2: BOOL);
procedure NETWORK_EARN_RDR_BONUS(amount: cint; p1: Any);
procedure NETWORK_EARN_WAGE_PAYMENT(amount: cint; p1: Any);
procedure NETWORK_EARN_WAGE_PAYMENT_BONUS(amount: cint);
procedure NETWORK_SPENT_BUY_BASE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_BASE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_BUY_TILTROTOR(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_TILTROTOR(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_EMPLOY_ASSASSINS(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_GANGOPS_CANNON(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_GANGOPS_SKIP_MISSION(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_SELL_BASE(amount: cint; baseNameHash: Hash);
procedure NETWORK_EARN_TARGET_REFUND(amount, p1: cint);
procedure NETWORK_EARN_GANGOPS_WAGES(amount, p1: cint);
procedure NETWORK_EARN_GANGOPS_WAGES_BONUS(amount, p1: cint);
procedure NETWORK_EARN_DAR_CHALLENGE(amount: cint; p1: Any);
procedure NETWORK_EARN_DOOMSDAY_FINALE_BONUS(amount: cint; vehicleHash: Hash);
procedure NETWORK_EARN_GANGOPS_AWARD(amount: cint; p1: PChar; p2: Any);
procedure NETWORK_EARN_GANGOPS_ELITE(amount: cint; p1: PChar; actIndex: cint);
procedure NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(earnedMoney: cint);
procedure NETWORK_SPEND_GANGOPS_START_STRAND(_type, amount: cint; p2, p3: BOOL);
procedure NETWORK_SPEND_GANGOPS_TRIP_SKIP(amount: cint; p1, p2: BOOL);
procedure NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(amount: cint);
procedure NETWORK_EARN_GANGOPS_SETUP(amount: cint; p1: PChar);
procedure NETWORK_EARN_GANGOPS_FINALE(amount: cint; p1: PChar);
procedure NETWORK_SPEND_GANGOPS_REPAIR_COST(p0, p1, p2: Any);
procedure NETWORK_EARN_NIGHTCLUB(p0: Any);
procedure NETWORK_EARN_NIGHTCLUB_DANCING(p0: Any);
procedure NETWORK_EARN_BB_EVENT_BONUS(amount: cint);
procedure NETWORK_SPENT_PURCHASE_HACKER_TRUCK(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_HACKER_TRUCK(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_HACKER_TRUCK(p0: Any; amount: cint; p2, p3: Any);
procedure NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3, p4, p5, p6: Any);
procedure NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3: Any);
procedure NETWORK_SPENT_RDR_HATCHET_BONUS(amount: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(plyr: Player; amount: cint; p1: Any; p2, p3: BOOL);
procedure NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(amount: cint; p1: Any; p2, p3: BOOL);
procedure NETWORK_SPEND_BOUNTY_HUNTER_MISSION(amount: cint; p1, p2: BOOL);
procedure NETWORK_SPENT_REHIRE_DJ(amount: cint; p1: Any; p2, p3: BOOL);
procedure NETWORK_SPENT_ARENA_JOIN_SPECTATOR(amount: cint; p1: Any; p2, p3: BOOL);
procedure NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(amount: cint; p1: Any);
procedure NETWORK_EARN_ARENA_CAREER_PROGRESSION(amount: cint; p1: Any);
procedure NETWORK_SPEND_MAKE_IT_RAIN(amount: cint; p1, p2: BOOL);
procedure NETWORK_SPEND_BUY_ARENA(amount: cint; p1, p2: BOOL; p3: PChar);
procedure NETWORK_SPEND_UPGRADE_ARENA(amount: cint; p1, p2: BOOL; p3: PChar);
procedure NETWORK_SPEND_ARENA_SPECTATOR_BOX(amount, _type: cint; p2, p3: BOOL);
procedure NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(amount: cint; p1: Any; p2: BOOL);
procedure NETWORK_EARN_SPIN_THE_WHEEL_CASH(amount: cint);
procedure NETWORK_SPEND_ARENA_PREMIUM(amount: cint; p1, p2: BOOL);
procedure NETWORK_EARN_ARENA_WAR(amount: cint; p1, p2, p3: Any);
procedure NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(amount: cint);
procedure NETWORK_EARN_ARENA_WAR_EVENT_CARGO(amount: cint);
procedure NETWORK_EARN_RC_TIME_TRIAL(amount: cint);
procedure NETWORK_EARN_DAILY_OBJECTIVE_EVENT(amount: cint);
procedure NETWORK_SPEND_CASINO_MEMBERSHIP(amount: cint; p1, p2: BOOL; p3: cint);
procedure NETWORK_SPEND_BUY_CASINO(amount: cint; p1, p2: BOOL; data: PAny);
procedure NETWORK_SPEND_UPGRADE_CASINO(amount: cint; p1, p2: BOOL; data: PAny);
procedure NETWORK_SPEND_CASINO_GENERIC(amount: cint; p1, p2, p3, p4: Any);
procedure NETWORK_EARN_CASINO_TIME_TRIAL_WIN(amount: cint);
procedure NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(amount: cint);
procedure NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(amount: cint);
procedure NETWORK_EARN_SELL_PRIZE_VEHICLE(amount: cint; p1, p2: Any);
procedure NETWORK_EARN_CASINO_MISSION_REWARD(amount: cint);
procedure NETWORK_EARN_CASINO_STORY_MISSION_REWARD(amount: cint);
procedure NETWORK_EARN_CASINO_MISSION_PARTICIPATION(amount: cint);
procedure NETWORK_EARN_CASINO_AWARD(amount: cint; para_hash: Hash);
procedure NETWORK_SPEND_BUY_ARCADE(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_UPGRADE_ARCADE(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10: Any);
procedure NETWORK_SPEND_ARCADE_MGMT(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPEND_PLAY_ARCADE(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPEND_ARCADE(p0, p1, p2, p3, p4: Any);
procedure NETWORK_EARN_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6: Any);
procedure NETWORK_EARN_UPGRADE_ARCADE(p0, p1, p2: Any);
procedure NETWORK_EARN_ARCADE(p0, p1, p2, p3, p4: Any);
procedure NETWORK_EARN_COLLECTABLES(p0, p1, p2: Any);
procedure NETWORK_EARN_CHALLENGE(amount: cint; p1, p2: Any);
procedure NETWORK_EARN_CASINO_HEIST_AWARDS(p0, p1, p2, p3, p4: Any);
procedure NETWORK_EARN_COLLECTABLE_ITEM(amount: cint; p1: Any);
procedure NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(amount: cint; p1: Any);
procedure NETWORK_EARN_YATCH_MISSION(amount: cint; p1: Any);
procedure NETWORK_EARN_DISPATCH_CALL(amount: cint; p1: Any);
procedure NETWORK_SPEND_BEACH_PARTY(p0: Any);
procedure NETWORK_SPEND_SUBMARINE(p0, p1, p2, p3, p4, p5: Any);
procedure NETWORK_SPEND_CASINO_CLUB(amount1: cint; p1: Any; p2: BOOL; p3: Any; p4, p5, p6, amount2: cint; p8: Any);
procedure NETWORK_SPEND_BUY_SUB(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_UPGRADE_SUB(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_ISLAND_HEIST(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_ISLAND_HEIST(amount1: cint; p1, p2, p3: Any; amount2, p5: cint);
procedure NETWORK_EARN_BEACH_PARTY_LOST_FOUND(p0, p1, p2: Any);
procedure NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(p0, p1: Any);
procedure NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(amount1: cint; p1, p2: Any; amount2: cint; p4: Any);
procedure NETWORK_SPEND_CAR_CLUB_BAR(p0: Any; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPEND_AUTOSHOP_MODIFY(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPEND_CAR_CLUB_TAKEOVER(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_BUY_AUTOSHOP(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_UPGRADE_AUTOSHOP(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_AUTOSHOP_BUSINESS(p0, p1, p2: Any);
procedure NETWORK_EARN_AUTOSHOP_INCOME(p0: Any; p1: cint);
procedure NETWORK_EARN_CARCLUB_MEMBERSHIP(p0: Any);
procedure NETWORK_EARN_DAILY_VEHICLE(p0, p1: Any);
procedure NETWORK_EARN_DAILY_VEHICLE_BONUS(p0: Any);
procedure NETWORK_EARN_TUNER_AWARD(p0, p1, p2: Any);
procedure NETWORK_EARN_TUNER_ROBBERY(p0, p1, p2, p3, p4: Any);
procedure NETWORK_EARN_UPGRADE_AUTOSHOP(p0, p1: Any);
procedure NETWORK_SPEND_INTERACTION_MENU_ABILITY(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_SET_COMMON_FIELDS(p0, p1, p2: Any; p3: BOOL);
procedure NETWORK_SPEND_SET_DISCOUNT(p0: BOOL);
procedure NETWORK_SPEND_BUY_AGENCY(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_UPGRADE_AGENCY(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_AGENCY(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPEND_HIDDEN(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_SOURCE_BIKE(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_COMP_SUV(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_SUV_FST_TRVL(p0: cint; p1, p2: BOOL; p3: Any);
procedure NETWORK_SPEND_SUPPLY(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_BIKE_SHOP(p0, p1, p2, p3: Any);
procedure NETWORK_SPEND_VEHICLE_REQUESTED(p0, p1, p2, p3, p4: Any);
procedure NETWORK_SPEND_GUNRUNNING(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_AGENCY_SAFE(p0: Any);
procedure NETWORK_EARN_AWARD_CONTRACT(p0, p1: Any);
procedure NETWORK_EARN_AGENCY_CONTRACT(p0, p1: Any);
procedure NETWORK_EARN_AWARD_PHONE(p0, p1: Any);
procedure NETWORK_EARN_AGENCY_PHONE(p0, p1, p2: Any);
procedure NETWORK_EARN_AWARD_FIXER_MISSION(p0, p1: Any);
procedure NETWORK_EARN_FIXER_PREP(p0, p1: Any);
procedure NETWORK_EARN_FIXER_FINALE(p0, p1: Any);
procedure NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(p0, p1: Any);
procedure NETWORK_EARN_AWARD_SHORT_TRIP(p0, p1: Any);
procedure NETWORK_EARN_FIXER_RIVAL_DELIVERY(p0, p1: Any);
procedure NETWORK_EARN_UPGRADE_AGENCY(p0, p1: Any);
procedure NETWORK_SPEND_APARTMENT_UTILITIES(amount: cint; p1, p2: BOOL; data: PAny);
procedure NETWORK_SPEND_BUSINESS_PROPERTY_FEES(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_SIGHTSEEING_REWARD(p0, p1, p2, p3: Any);
procedure NETWORK_EARN_BIKER_SHOP(p0, p1: Any);
procedure NETWORK_EARN_BIKER(p0: Any);
procedure NETWORK_YOHAN_SOURCE_GOODS(p0, p1, p2, p3: Any);
procedure _NETWORK_SPEND_BUY_MFGARAGE(p0, p1, p2, p3: Any);
procedure _NETWORK_SPEND_UPGRADE_MFGARAGE(p0, p1, p2, p3: Any);
procedure _NETWORK_SPEND_BUY_SUPPLIES(p0: cint; p1, p2: BOOL; p3: cint);
procedure _NETWORK_SPEND_BUY_ACID_LAB(p0, p1, p2, p3: Any);
procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT(p0, p1, p2, p3: Any);
procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR(p0: cint; p1, p2: BOOL; p3: cint);
procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP(p0: cint; p1, p2: BOOL; p3: cint);
procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_MINES(p0: cint; p1, p2: BOOL; p3: cint);
procedure _NETWORK_SPEND_RENAME_ACID_LAB(p0, p1, p2, p3: Any);
procedure _NETWORK_SPEND_RENAME_ACID_PRODUCT(p0, p1, p2, p3: Any);
procedure _NETWORK_EARN_AWARD_JUGGALO_MISSION(p0, p1: Any);
procedure _NETWORK_EARN_AWARD_ACID_LAB(p0, p1: Any);
procedure _NETWORK_EARN_AWARD_DAILY_STASH(p0, p1: Any);
procedure _NETWORK_EARN_AWARD_DEAD_DROP(p0, p1: Any);
procedure _NETWORK_EARN_AWARD_RANDOM_EVENT(p0, p1: Any);
procedure _NETWORK_EARN_AWARD_TAXI(p0, p1: Any);
procedure _NETWORK_EARN_STREET_DEALER(p0, p1: Any);
procedure _NETWORK_EARN_SELL_ACID(p0, p1: Any);
procedure _NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB(p0, p1: Any);
procedure _NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB(p0, p1: Any);
procedure _NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB(p0, p1: Any);
procedure _NETWORK_EARN_JUGGALO_STORY_MISSION(p0, p1: Any);
procedure _NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION(p0, p1: Any);
procedure _NETWORK_EARN_FOOLIGAN_JOB(p0, p1: Any);
procedure _NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION(p0, p1: Any);
procedure _NETWORK_EARN_TAXI_JOB(p0, p1: Any);
procedure _NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED(p0, p1: Any);
procedure _NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION(p0, p1: Any);
procedure _NETWORK_EARN_AVENGER(amount, p1: cint);
procedure _NETWORK_EARN_SMUGGLER_OPS(p0, p1, p2: Any);
procedure _NETWORK_EARN_BONUS_OBJECTIVE(amount: cint; p1, p2: Any);
procedure _NETWORK_EARN_PROGRESS_HUB(p0, p1: Any);
procedure _NETWORK_SPENT_AIR_FREIGHT(hangarCargoSourcingPrice: cint; fromBank, fromBankAndWallet: BOOL; cost, warehouseId, warehouseSlot: cint);
procedure _NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP(amount: cint; fromBank, fromBankAndWallet: BOOL; cost: cint);
procedure _NETWORK_SPENT_STEALTH_MODULE(amount: cint; fromBank, fromBankAndWallet: BOOL; p3: Hash);
procedure _NETWORK_SPENT_MISSILE_JAMMER(amount: cint; fromBank, fromBankAndWallet: BOOL; p3: Hash);
procedure _NETWORK_SPENT_GENERIC(price: cint; p1, p2: BOOL; stat, spent: Hash; p5, p6: PChar; data: PAny);
procedure _NETWORK_EARN_GENERIC(amount: cint; earn: Hash; p2, p3: PChar; data: PAny);
procedure _NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE;
function NETWORK_GET_VC_BANK_BALANCE: cint;
function NETWORK_GET_VC_WALLET_BALANCE(characterSlot: cint): cint;
function NETWORK_GET_VC_BALANCE: cint;
function NETWORK_GET_EVC_BALANCE: cint;
function NETWORK_GET_PVC_BALANCE: cint;
function NETWORK_GET_STRING_WALLET_BALANCE(characterSlot: cint): PChar;
function NETWORK_GET_STRING_BANK_BALANCE: PChar;
function NETWORK_GET_STRING_BANK_WALLET_BALANCE(character: cint): PChar;
function NETWORK_GET_CAN_SPEND_FROM_WALLET(amount, characterSlot: cint): BOOL;
function NETWORK_GET_CAN_SPEND_FROM_BANK(amount: cint): BOOL;
function NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(amount, characterSlot: cint): BOOL;
function NETWORK_GET_PVC_TRANSFER_BALANCE: cint;
function NETWORK_GET_CAN_TRANSFER_CASH(amount: cint): BOOL;
function NETWORK_CAN_RECEIVE_PLAYER_CASH(p0, p1, p2, p3: Any): BOOL;
function NETWORK_GET_REMAINING_TRANSFER_BALANCE: cint;
function WITHDRAW_VC(amount: cint): cint;
function DEPOSIT_VC(amount: cint): BOOL;
function HAS_VC_WITHDRAWAL_COMPLETED(p0: Any): BOOL;
function WAS_VC_WITHDRAWAL_SUCCESSFUL(p0: Any): BOOL;
function NET_GAMESERVER_USE_SERVER_TRANSACTIONS: BOOL;
function NET_GAMESERVER_CATALOG_ITEM_IS_VALID(name: PChar): BOOL;
function NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(para_hash: Hash): BOOL;
function NET_GAMESERVER_GET_PRICE(itemHash, categoryHash: Hash; p2: BOOL): cint;
function NET_GAMESERVER_CATALOG_IS_VALID: BOOL;
function NET_GAMESERVER_IS_CATALOG_CURRENT: BOOL;
function NET_GAMESERVER_GET_CATALOG_CLOUD_CRC: Hash;
function NET_GAMESERVER_REFRESH_SERVER_CATALOG: BOOL;
function NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(state: pcint): BOOL;
function NET_GAMESERVER_INIT_SESSION: BOOL;
function NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(p0: pcint): BOOL;
function NET_GAMESERVER_START_SESSION(charSlot: cint): BOOL;
function NET_GAMESERVER_START_SESSION_PENDING: BOOL;
function NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(p0: pcint): BOOL;
function NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(p0: pcint): BOOL;
function NET_GAMESERVER_IS_SESSION_VALID(charSlot: cint): BOOL;
function NET_GAMESERVER_CLEAR_SESSION(p0: cint): BOOL;
function NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(charSlot: cint): BOOL;
function NET_GAMESERVER_IS_SESSION_REFRESH_PENDING: BOOL;
function NET_GAMESERVER_START_SESSION_RESTART(inventory, playerbalance: BOOL): BOOL;
function NET_GAMESERVER_TRANSACTION_IN_PROGRESS: BOOL;
function NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(p0: pcint; p1: PBOOL): BOOL;
function NET_GAMESERVER_BASKET_START(transactionId: pcint; categoryHash, actionHash: Hash; flags: cint): BOOL;
function NET_GAMESERVER_BASKET_END: BOOL;
function NET_GAMESERVER_BASKET_IS_ACTIVE: BOOL;
function NET_GAMESERVER_BASKET_ADD_ITEM(itemData: PAny; quantity: cint): BOOL;
function NET_GAMESERVER_BASKET_IS_FULL: BOOL;
function NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(p0: Any; p1: PAny): BOOL;
function NET_GAMESERVER_CHECKOUT_START(transactionId: cint): BOOL;
function NET_GAMESERVER_BEGIN_SERVICE(transactionId: pcint; categoryHash, itemHash, actionTypeHash: Hash; value, flags: cint): BOOL;
function NET_GAMESERVER_END_SERVICE(transactionId: cint): BOOL;
function NET_GAMESERVER_DELETE_CHARACTER(slot: cint; transfer: BOOL; reason: Hash): BOOL;
function NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS: cint;
function NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED: BOOL;
function NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(charSlot, amount: cint): BOOL;
function NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(charSlot, amount: cint): BOOL;
function NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS: cint;
function NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS: cint;
function NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED: BOOL;
function NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(p0: cint): BOOL;
function GET_ONLINE_VERSION: PChar;
function NETWORK_IS_SIGNED_IN: BOOL;
function NETWORK_IS_SIGNED_ONLINE: BOOL;
function NETWORK_IS_NP_AVAILABLE: BOOL;
function NETWORK_IS_NP_PENDING: BOOL;
function NETWORK_GET_NP_UNAVAILABLE_REASON: cint;
function NETWORK_IS_CONNETED_TO_NP_PRESENCE: BOOL;
function NETWORK_IS_LOGGED_IN_TO_PSN: BOOL;
function NETWORK_HAS_VALID_ROS_CREDENTIALS: BOOL;
function NETWORK_IS_REFRESHING_ROS_CREDENTIALS: BOOL;
function NETWORK_IS_CLOUD_AVAILABLE: BOOL;
function NETWORK_HAS_SOCIAL_CLUB_ACCOUNT: BOOL;
function NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT: BOOL;
function NETWORK_IS_HOST: BOOL;
function NETWORK_GET_HOST_PLAYER_INDEX: Player;
function NETWORK_WAS_GAME_SUSPENDED: BOOL;
function NETWORK_HAVE_ONLINE_PRIVILEGES: BOOL;
function NETWORK_HAS_AGE_RESTRICTIONS: BOOL;
function NETWORK_HAVE_USER_CONTENT_PRIVILEGES(p0: cint): BOOL;
function NETWORK_HAVE_COMMUNICATION_PRIVILEGES(p0: cint; plyr: Player): BOOL;
function _NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES: BOOL;
function NETWORK_CHECK_ONLINE_PRIVILEGES(p0: Any; p1: BOOL): BOOL;
function NETWORK_CHECK_USER_CONTENT_PRIVILEGES(p0, p1: cint; p2: BOOL): BOOL;
function NETWORK_CHECK_COMMUNICATION_PRIVILEGES(p0, p1: cint; p2: BOOL): BOOL;
function NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(p0, p1, p2: Any): BOOL;
function NETWORK_IS_USING_ONLINE_PROMOTION: BOOL;
function NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN: BOOL;
function NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV: BOOL;
function NETWORK_GET_AGE_GROUP: cint;
function NETWORK_CHECK_PRIVILEGES(p0, p1, p2: Any): BOOL;
function NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS: BOOL;
procedure NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED;
function NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT: BOOL;
function NETWORK_HAVE_PLATFORM_SUBSCRIPTION: BOOL;
function NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING: BOOL;
procedure NETWORK_SHOW_ACCOUNT_UPGRADE_UI;
function NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL: BOOL;
function NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED: BOOL;
function NETWORK_CAN_BAIL: BOOL;
procedure NETWORK_BAIL(p0, p1, p2: cint);
procedure NETWORK_ON_RETURN_TO_SINGLE_PLAYER;
function NETWORK_TRANSITION_START(p0: cint; p1, p2, p3: Any): BOOL;
function NETWORK_TRANSITION_ADD_STAGE(para_hash: Hash; p1, p2, state, p4: cint): BOOL;
function NETWORK_TRANSITION_FINISH(p0, p1, p2: Any): BOOL;
function NETWORK_CAN_ACCESS_MULTIPLAYER(loadingState: pcint): BOOL;
function NETWORK_IS_MULTIPLAYER_DISABLED: BOOL;
function NETWORK_CAN_ENTER_MULTIPLAYER: BOOL;
function NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(p0, p1, p2: Any): BOOL;
function NETWORK_SESSION_DO_FRIEND_MATCHMAKING(p0, p1, p2: cint): BOOL;
function NETWORK_SESSION_DO_CREW_MATCHMAKING(crewId, p1, p2, maxPlayers: cint): BOOL;
function NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(p0, p1, p2, p3, p4: Any): BOOL;
function NETWORK_SESSION_HOST(p0, maxPlayers: cint; p2: BOOL): BOOL;
function NETWORK_SESSION_HOST_CLOSED(p0, maxPlayers: cint): BOOL;
function NETWORK_SESSION_HOST_FRIENDS_ONLY(p0, maxPlayers: cint): BOOL;
function NETWORK_SESSION_IS_CLOSED_FRIENDS: BOOL;
function NETWORK_SESSION_IS_CLOSED_CREW: BOOL;
function NETWORK_SESSION_IS_SOLO: BOOL;
function NETWORK_SESSION_IS_PRIVATE: BOOL;
function _NETWORK_SESSION_LEAVE_INCLUDING_REASON(leaveFlags, leaveReason: cint): BOOL;
function NETWORK_SESSION_END(p0, p1: BOOL): BOOL;
function NETWORK_SESSION_LEAVE(p0: Any): BOOL;
procedure NETWORK_SESSION_KICK_PLAYER(plyr: Player);
function NETWORK_SESSION_GET_KICK_VOTE(plyr: Player): BOOL;
function NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(p0, p1, p2: Any): BOOL;
function NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION: BOOL;
function NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION: BOOL;
procedure NETWORK_SESSION_SET_MATCHMAKING_GROUP(matchmakingGroup: cint);
procedure NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(playerType, playerCount: cint);
function NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(p0: cint): cint;
procedure NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(groupId: cint);
procedure NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(p0: Any);
function NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT: cint;
procedure NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(p0: Any);
procedure NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(p0: BOOL);
procedure NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(p0: Any);
procedure NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(p0: BOOL);
procedure NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(p0: cint);
procedure NETWORK_SESSION_SET_NUM_BOSSES(num: cint);
procedure NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN;
procedure NETWORK_SESSION_VALIDATE_JOIN(p0: BOOL);
procedure NETWORK_ADD_FOLLOWERS(p0: pcint; p1: cint);
procedure NETWORK_CLEAR_FOLLOWERS;
procedure NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(hours, minutes, seconds: pcint);
procedure NETWORK_SESSION_SET_GAMEMODE(p0: Any);
function NETWORK_SESSION_GET_HOST_AIM_PREFERENCE: cint;
function NETWORK_FIND_GAMERS_IN_CREW(crewId: cint): BOOL;
function NETWORK_FIND_MATCHED_GAMERS(attribute: cint; fallbackLimit, lowerLimit, upperLimit: cfloat): BOOL;
function NETWORK_IS_FINDING_GAMERS: BOOL;
function NETWORK_DID_FIND_GAMERS_SUCCEED: BOOL;
function NETWORK_GET_NUM_FOUND_GAMERS: cint;
function NETWORK_GET_FOUND_GAMER(p0: PAny; p1: Any): BOOL;
procedure NETWORK_CLEAR_FOUND_GAMERS;
function NETWORK_QUEUE_GAMER_FOR_STATUS(p0: PAny): BOOL;
function NETWORK_GET_GAMER_STATUS_FROM_QUEUE: BOOL;
function NETWORK_IS_GETTING_GAMER_STATUS: BOOL;
function NETWORK_DID_GET_GAMER_STATUS_SUCCEED: BOOL;
function NETWORK_GET_GAMER_STATUS_RESULT(p0: PAny; p1: Any): BOOL;
procedure NETWORK_CLEAR_GET_GAMER_STATUS;
procedure NETWORK_SESSION_JOIN_INVITE;
procedure NETWORK_SESSION_CANCEL_INVITE;
procedure NETWORK_SESSION_FORCE_CANCEL_INVITE;
function NETWORK_HAS_PENDING_INVITE: BOOL;
function NETWORK_HAS_CONFIRMED_INVITE: BOOL;
function NETWORK_REQUEST_INVITE_CONFIRMED_EVENT: BOOL;
function NETWORK_SESSION_WAS_INVITED: BOOL;
procedure NETWORK_SESSION_GET_INVITER(gamerHandle: PAny);
function NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE: BOOL;
function NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION: BOOL;
procedure NETWORK_SUPPRESS_INVITE(toggle: BOOL);
procedure NETWORK_BLOCK_INVITES(toggle: BOOL);
procedure NETWORK_BLOCK_JOIN_QUEUE_INVITES(toggle: BOOL);
procedure NETWORK_SET_CAN_RECEIVE_RS_INVITES(p0: BOOL);
procedure NETWORK_STORE_INVITE_THROUGH_RESTART;
procedure NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(p0: BOOL);
procedure NETWORK_SET_SCRIPT_READY_FOR_EVENTS(toggle: BOOL);
function NETWORK_IS_OFFLINE_INVITE_PENDING: BOOL;
procedure NETWORK_CLEAR_OFFLINE_INVITE_PENDING;
procedure NETWORK_SESSION_HOST_SINGLE_PLAYER(p0: cint);
procedure NETWORK_SESSION_LEAVE_SINGLE_PLAYER;
function NETWORK_IS_GAME_IN_PROGRESS: BOOL;
function NETWORK_IS_SESSION_ACTIVE: BOOL;
function NETWORK_IS_IN_SESSION: BOOL;
function _NETWORK_IS_AMERICAS_VERSION: BOOL;
function NETWORK_IS_SESSION_STARTED: BOOL;
function NETWORK_IS_SESSION_BUSY: BOOL;
function NETWORK_CAN_SESSION_END: BOOL;
function NETWORK_GET_GAME_MODE: cint;
procedure NETWORK_SESSION_MARK_VISIBLE(toggle: BOOL);
function NETWORK_SESSION_IS_VISIBLE: BOOL;
procedure NETWORK_SESSION_BLOCK_JOIN_REQUESTS(toggle: BOOL);
procedure NETWORK_SESSION_CHANGE_SLOTS(slots: cint; p1: BOOL);
function NETWORK_SESSION_GET_PRIVATE_SLOTS: cint;
function NETWORK_SESSION_VOICE_HOST: BOOL;
function NETWORK_SESSION_VOICE_LEAVE: BOOL;
procedure NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(gamerHandle: PAny);
procedure NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(p0: BOOL; p1: cint);
procedure NETWORK_SESSION_VOICE_SET_TIMEOUT(timeout: cint);
function NETWORK_SESSION_IS_IN_VOICE_SESSION: BOOL;
function NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE: BOOL;
function NETWORK_SESSION_IS_VOICE_SESSION_BUSY: BOOL;
function NETWORK_SEND_TEXT_MESSAGE(message: PChar; gamerHandle: PAny): BOOL;
procedure NETWORK_SET_ACTIVITY_SPECTATOR(toggle: BOOL);
function NETWORK_IS_ACTIVITY_SPECTATOR: BOOL;
procedure NETWORK_SET_ACTIVITY_PLAYER_MAX(p0: Any);
procedure NETWORK_SET_ACTIVITY_SPECTATOR_MAX(maxSpectators: cint);
function NETWORK_GET_ACTIVITY_PLAYER_NUM(p0: BOOL): cint;
function NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(gamerHandle: PAny): BOOL;
function NETWORK_HOST_TRANSITION(p0, p1, p2, p3: cint; p4: Any; p5, p6: BOOL; p7: cint; p8: Any; p9: cint): BOOL;
function NETWORK_DO_TRANSITION_QUICKMATCH(p0, p1, p2, p3, p4, p5: Any): BOOL;
function NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(p0, p1, p2, p3, p4, p5: Any): BOOL;
function NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(p0, p1, p2, p3: Any; p4: PAny; p5, p6, p7: Any): BOOL;
function NETWORK_JOIN_GROUP_ACTIVITY: BOOL;
procedure NETWORK_CLEAR_GROUP_ACTIVITY;
procedure NETWORK_RETAIN_ACTIVITY_GROUP;
function NETWORK_IS_TRANSITION_CLOSED_FRIENDS: BOOL;
function NETWORK_IS_TRANSITION_CLOSED_CREW: BOOL;
function NETWORK_IS_TRANSITION_SOLO: BOOL;
function NETWORK_IS_TRANSITION_PRIVATE: BOOL;
function NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS: cint;
procedure NETWORK_MARK_AS_PREFERRED_ACTIVITY(p0: BOOL);
procedure NETWORK_MARK_AS_WAITING_ASYNC(p0: BOOL);
procedure NETWORK_SET_IN_PROGRESS_FINISH_TIME(p0: Any);
procedure NETWORK_SET_TRANSITION_CREATOR_HANDLE(p0: PAny);
procedure NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE;
function NETWORK_INVITE_GAMERS_TO_TRANSITION(p0: PAny; p1: Any): BOOL;
procedure NETWORK_SET_GAMER_INVITED_TO_TRANSITION(gamerHandle: PAny);
function NETWORK_LEAVE_TRANSITION: BOOL;
function NETWORK_LAUNCH_TRANSITION: BOOL;
procedure NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(toggle: BOOL);
procedure NETWORK_CANCEL_TRANSITION_MATCHMAKING;
procedure NETWORK_BAIL_TRANSITION(p0, p1, p2: cint);
function NETWORK_DO_TRANSITION_TO_GAME(p0: BOOL; maxPlayers: cint): BOOL;
function NETWORK_DO_TRANSITION_TO_NEW_GAME(p0: BOOL; maxPlayers: cint; p2: BOOL): BOOL;
function NETWORK_DO_TRANSITION_TO_FREEMODE(p0: PAny; p1: Any; p2: BOOL; players: cint; p4: BOOL): BOOL;
function NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(p0: PAny; p1: Any; players: cint; p3, p4, p5: BOOL): BOOL;
function NETWORK_IS_TRANSITION_TO_GAME: BOOL;
function NETWORK_GET_TRANSITION_MEMBERS(data: PAny; dataCount: cint): cint;
procedure NETWORK_APPLY_TRANSITION_PARAMETER(p0, p1: cint);
procedure NETWORK_APPLY_TRANSITION_PARAMETER_STRING(p0: cint; str: PChar; p2: BOOL);
function NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(gamerHandle: PAny; p1: PChar; p2, p3: cint; p4: BOOL): BOOL;
function NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(p0: PAny): BOOL;
function NETWORK_IS_TRANSITION_HOST: BOOL;
function NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(gamerHandle: PAny): BOOL;
function NETWORK_GET_TRANSITION_HOST(gamerHandle: PAny): BOOL;
function NETWORK_IS_IN_TRANSITION: BOOL;
function NETWORK_IS_TRANSITION_STARTED: BOOL;
function NETWORK_IS_TRANSITION_BUSY: BOOL;
function NETWORK_IS_TRANSITION_MATCHMAKING: BOOL;
function NETWORK_IS_TRANSITION_LEAVE_POSTPONED: BOOL;
procedure NETWORK_TRANSITION_SET_IN_PROGRESS(p0: Any);
procedure NETWORK_TRANSITION_SET_CONTENT_CREATOR(p0: Any);
procedure NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(p0: Any);
procedure NETWORK_OPEN_TRANSITION_MATCHMAKING;
procedure NETWORK_CLOSE_TRANSITION_MATCHMAKING;
function NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING: BOOL;
procedure NETWORK_SET_TRANSITION_VISIBILITY_LOCK(p0, p1: BOOL);
function NETWORK_IS_TRANSITION_VISIBILITY_LOCKED: BOOL;
procedure NETWORK_SET_TRANSITION_ACTIVITY_ID(p0: Any);
procedure NETWORK_CHANGE_TRANSITION_SLOTS(p0: Any; p1: BOOL);
procedure NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(p0: BOOL);
function NETWORK_HAS_PLAYER_STARTED_TRANSITION(plyr: Player): BOOL;
function NETWORK_ARE_TRANSITION_DETAILS_VALID(p0: Any): BOOL;
function NETWORK_JOIN_TRANSITION(plyr: Player): BOOL;
function NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(p0: PAny): BOOL;
function NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(p0: PAny): BOOL;
function NETWORK_IS_ACTIVITY_SESSION: BOOL;
procedure NETWORK_DISABLE_REALTIME_MULTIPLAYER;
procedure NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(toggle: BOOL);
function NETWORK_SEND_INVITE_VIA_PRESENCE(gamerHandle: PAny; p1: PChar; dataCount, p3: cint): BOOL;
function NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle: PAny; p1: PChar; dataCount, p3: cint): BOOL;
function NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle: PAny; p1: PChar; dataCount, p3: cint): BOOL;
function NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(p0: cint): cint;
function NETWORK_GET_NUM_PRESENCE_INVITES: cint;
function NETWORK_ACCEPT_PRESENCE_INVITE(p0: cint): BOOL;
function NETWORK_REMOVE_PRESENCE_INVITE(p0: cint): BOOL;
function NETWORK_GET_PRESENCE_INVITE_ID(p0: cint): cint;
function NETWORK_GET_PRESENCE_INVITE_INVITER(p0: cint): PChar;
function NETWORK_GET_PRESENCE_INVITE_HANDLE(p0: Any; p1: PAny): BOOL;
function NETWORK_GET_PRESENCE_INVITE_SESSION_ID(p0: Any): cint;
function NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(p0: cint): PChar;
function NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(p0: cint): cint;
function NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(p0: cint): cint;
function NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(p0: cint): BOOL;
function NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(p0: Any): BOOL;
function NETWORK_HAS_FOLLOW_INVITE: BOOL;
function NETWORK_ACTION_FOLLOW_INVITE: BOOL;
function NETWORK_CLEAR_FOLLOW_INVITE: BOOL;
procedure NETWORK_REMOVE_AND_CANCEL_ALL_INVITES;
procedure NETWORK_REMOVE_TRANSITION_INVITE(p0: PAny);
procedure NETWORK_REMOVE_ALL_TRANSITION_INVITE;
procedure NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES;
function NETWORK_INVITE_GAMERS(p0: PAny; p1: Any; p2: PAny; p3: Any): BOOL;
function NETWORK_HAS_INVITED_GAMER(p0: PAny): BOOL;
function NETWORK_HAS_MADE_INVITE_DECISION(gamerHandle: PAny): BOOL;
function NETWORK_GET_INVITE_REPLY_STATUS(p0: Any): cint;
function NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0: PAny): BOOL;
function NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0: PAny): BOOL;
procedure NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(p0: PAny);
function NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(p0: cint; gamerHandle: PAny): BOOL;
function NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(p0: Any; gamerHandle: PAny): BOOL;
procedure NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(p0, p1: PAny);
function FILLOUT_PM_PLAYER_LIST(gamerHandle: PAny; p1, p2: Any): BOOL;
function FILLOUT_PM_PLAYER_LIST_WITH_NAMES(p0, p1: PAny; p2, p3: Any): BOOL;
function REFRESH_PLAYER_LIST_STATS(p0: cint): BOOL;
function NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(p0: PAny): BOOL;
function NETWORK_IS_IN_PLATFORM_PARTY: BOOL;
function NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT: cint;
function NETWORK_GET_PLATFORM_PARTY_MEMBERS(data: PAny; dataSize: cint): cint;
function NETWORK_IS_IN_PLATFORM_PARTY_CHAT: BOOL;
function NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(gamerHandle: PAny): BOOL;
function NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN: BOOL;
function NETWORK_IS_QUEUING_FOR_SESSION_JOIN: BOOL;
procedure NETWORK_CLEAR_QUEUED_JOIN_REQUEST;
procedure NETWORK_SEND_QUEUED_JOIN_REQUEST;
procedure NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS;
procedure NETWORK_SEED_RANDOM_NUMBER_GENERATOR(seed: cint);
function NETWORK_GET_RANDOM_INT: cint;
function NETWORK_GET_RANDOM_INT_RANGED(rangeStart, rangeEnd: cint): cint;
function _NETWORK_GET_RANDOM_FLOAT_RANGED(rangeStart, rangeEnd: cfloat): cfloat;
function NETWORK_PLAYER_IS_CHEATER: BOOL;
function NETWORK_PLAYER_GET_CHEATER_REASON: cint;
function NETWORK_PLAYER_IS_BADSPORT: BOOL;
function REMOTE_CHEATER_PLAYER_DETECTED(plyr: Player; a, b: cint): BOOL;
function BAD_SPORT_PLAYER_LEFT_DETECTED(gamerHandle: PAny; event, amountReceived: cint): BOOL;
procedure NETWORK_ADD_INVALID_OBJECT_MODEL(modelHash: Hash);
procedure NETWORK_REMOVE_INVALID_OBJECT_MODEL(modelHash: Hash);
procedure NETWORK_CLEAR_INVALID_OBJECT_MODELS;
procedure NETWORK_APPLY_PED_SCAR_DATA(_ped: Ped; p1: cint);
procedure NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(maxNumMissionParticipants: cint; p1: BOOL; instanceId: cint);
function NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(p0: Any; p1: BOOL; p2: Any): BOOL;
function NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT: BOOL;
function NETWORK_GET_MAX_NUM_PARTICIPANTS: cint;
function NETWORK_GET_NUM_PARTICIPANTS: cint;
function NETWORK_GET_SCRIPT_STATUS: cint;
procedure NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(vars: pcint; numVars: cint; debugName: PChar);
procedure NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(vars: pcint; numVars: cint; debugName: PChar);
procedure NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(p0, p1, p2: Any);
procedure NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(p0, p1, p2: Any);
procedure NETWORK_FINISH_BROADCASTING_DATA;
function NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA: BOOL;
function NETWORK_GET_PLAYER_INDEX(plyr: Player): Player;
function NETWORK_GET_PARTICIPANT_INDEX(index: cint): cint;
function NETWORK_GET_PLAYER_INDEX_FROM_PED(_ped: Ped): Player;
function NETWORK_GET_NUM_CONNECTED_PLAYERS: cint;
function NETWORK_IS_PLAYER_CONNECTED(plyr: Player): BOOL;
function NETWORK_GET_TOTAL_NUM_PLAYERS: cint;
function NETWORK_IS_PARTICIPANT_ACTIVE(p0: cint): BOOL;
function NETWORK_IS_PLAYER_ACTIVE(plyr: Player): BOOL;
function NETWORK_IS_PLAYER_A_PARTICIPANT(plyr: Player): BOOL;
function NETWORK_IS_HOST_OF_THIS_SCRIPT: BOOL;
function NETWORK_GET_HOST_OF_THIS_SCRIPT: Player;
function NETWORK_GET_HOST_OF_SCRIPT(scriptName: PChar; instance_id, position_hash: cint): Player;
procedure NETWORK_SET_MISSION_FINISHED;
function NETWORK_IS_SCRIPT_ACTIVE(scriptName: PChar; instance_id: cint; p2: BOOL; position_hash: cint): BOOL;
function NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(scriptHash: Hash; p1: cint; p2: BOOL; p3: cint): BOOL;
function NETWORK_IS_THREAD_A_NETWORK_SCRIPT(threadId: cint): BOOL;
function NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(scriptName: PChar; instance_id, position_hash: cint): cint;
function NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT: cint;
function NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT: Hash;
function NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(plyr: Player; script: PChar; instance_id: cint): BOOL;
procedure NETWORK_PREVENT_SCRIPT_HOST_MIGRATION;
procedure NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT;
function PARTICIPANT_ID: Player;
function PARTICIPANT_ID_TO_INT: cint;
function NETWORK_GET_KILLER_OF_PLAYER(plyr: Player; weaponHash: PHash): Player;
function NETWORK_GET_DESTROYER_OF_NETWORK_ID(netId: cint; weaponHash: PHash): Player;
function NETWORK_GET_DESTROYER_OF_ENTITY(para_entity: Entity; weaponHash: PHash): Player;
function NETWORK_GET_ASSISTED_KILL_OF_ENTITY(plyr: Player; para_entity: Entity; p2: pcint): BOOL;
function NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(plyr: Player; para_entity: Entity; p2: pcint): BOOL;
function NETWORK_GET_ENTITY_KILLER_OF_PLAYER(plyr: Player; weaponHash: PHash): Entity;
procedure NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(missionId: PChar);
procedure NETWORK_SET_CURRENT_CHAT_OPTION(newChatOption: cint);
procedure NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(mpSettingSpawn: Hash);
procedure NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(toggle: BOOL);
procedure NETWORK_SET_VEHICLE_DRIVEN_LOCATION(location: Hash);
procedure NETWORK_RESURRECT_LOCAL_PLAYER(x, y, z, heading: cfloat; p4, changetime, p6: BOOL; p7, p8: cint);
procedure NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(time: cint);
function NETWORK_IS_LOCAL_PLAYER_INVINCIBLE: BOOL;
procedure NETWORK_DISABLE_INVINCIBLE_FLASHING(plyr: Player; toggle: BOOL);
procedure NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(_ped: Ped);
procedure NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(toggle: BOOL);
function NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(para_entity: Entity): BOOL;
function NETWORK_GET_NETWORK_ID_FROM_ENTITY(para_entity: Entity): cint;
function NETWORK_GET_ENTITY_FROM_NETWORK_ID(netId: cint): Entity;
function NETWORK_GET_ENTITY_IS_NETWORKED(para_entity: Entity): BOOL;
function NETWORK_GET_ENTITY_IS_LOCAL(para_entity: Entity): BOOL;
procedure NETWORK_REGISTER_ENTITY_AS_NETWORKED(para_entity: Entity);
procedure NETWORK_UNREGISTER_NETWORKED_ENTITY(para_entity: Entity);
function NETWORK_DOES_NETWORK_ID_EXIST(netId: cint): BOOL;
function NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(netId: cint): BOOL;
function NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netId: cint): BOOL;
function NETWORK_HAS_CONTROL_OF_NETWORK_ID(netId: cint): BOOL;
function NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(netId: cint): BOOL;
function NETWORK_REQUEST_CONTROL_OF_ENTITY(para_entity: Entity): BOOL;
function NETWORK_REQUEST_CONTROL_OF_DOOR(doorID: cint): BOOL;
function NETWORK_HAS_CONTROL_OF_ENTITY(para_entity: Entity): BOOL;
function NETWORK_HAS_CONTROL_OF_PICKUP(para_pickup: Pickup): BOOL;
function NETWORK_HAS_CONTROL_OF_DOOR(doorHash: Hash): BOOL;
function NETWORK_IS_DOOR_NETWORKED(doorHash: Hash): BOOL;
function VEH_TO_NET(veh: Vehicle): cint;
function PED_TO_NET(_ped: Ped): cint;
function OBJ_TO_NET(obj: GTAObject): cint;
function NET_TO_VEH(netHandle: cint): Vehicle;
function NET_TO_PED(netHandle: cint): Ped;
function NET_TO_OBJ(netHandle: cint): GTAObject;
function NET_TO_ENT(netHandle: cint): Entity;
procedure NETWORK_GET_LOCAL_HANDLE(gamerHandle: PAny; gamerHandleSize: cint);
procedure NETWORK_HANDLE_FROM_USER_ID(userId: PChar; gamerHandle: PAny; gamerHandleSize: cint);
procedure NETWORK_HANDLE_FROM_MEMBER_ID(memberId: PChar; gamerHandle: PAny; gamerHandleSize: cint);
procedure NETWORK_HANDLE_FROM_PLAYER(plyr: Player; gamerHandle: PAny; gamerHandleSize: cint);
function NETWORK_HASH_FROM_PLAYER_HANDLE(plyr: Player): Hash;
function NETWORK_HASH_FROM_GAMER_HANDLE(gamerHandle: PAny): Hash;
procedure NETWORK_HANDLE_FROM_FRIEND(friendIndex: cint; gamerHandle: PAny; gamerHandleSize: cint);
function NETWORK_GAMERTAG_FROM_HANDLE_START(gamerHandle: PAny): BOOL;
function NETWORK_GAMERTAG_FROM_HANDLE_PENDING: BOOL;
function NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED: BOOL;
function NETWORK_GET_GAMERTAG_FROM_HANDLE(gamerHandle: PAny): PChar;
function NETWORK_DISPLAYNAMES_FROM_HANDLES_START(p0: PAny; p1: Any): cint;
function NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(p0, p1, p2: Any): cint;
function NETWORK_ARE_HANDLES_THE_SAME(gamerHandle1, gamerHandle2: PAny): BOOL;
function NETWORK_IS_HANDLE_VALID(gamerHandle: PAny; gamerHandleSize: cint): BOOL;
function NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(gamerHandle: PAny): Player;
function NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(gamerHandle: PAny): PChar;
function NETWORK_IS_GAMER_IN_MY_SESSION(gamerHandle: PAny): BOOL;
procedure NETWORK_SHOW_PROFILE_UI(gamerHandle: PAny);
function NETWORK_PLAYER_GET_NAME(plyr: Player): PChar;
function NETWORK_PLAYER_GET_USERID(plyr: Player; userID: pcint): PChar;
function NETWORK_PLAYER_IS_ROCKSTAR_DEV(plyr: Player): BOOL;
function NETWORK_PLAYER_INDEX_IS_CHEATER(plyr: Player): BOOL;
function NETWORK_ENTITY_GET_OBJECT_ID(para_entity: Entity): cint;
function NETWORK_GET_ENTITY_FROM_OBJECT_ID(p0: Any): Entity;
function NETWORK_IS_INACTIVE_PROFILE(p0: PAny): BOOL;
function NETWORK_GET_MAX_FRIENDS: cint;
function NETWORK_GET_FRIEND_COUNT: cint;
function NETWORK_GET_FRIEND_NAME(friendIndex: cint): PChar;
function NETWORK_GET_FRIEND_DISPLAY_NAME(friendIndex: cint): PChar;
function NETWORK_IS_FRIEND_ONLINE(name: PChar): BOOL;
function NETWORK_IS_FRIEND_HANDLE_ONLINE(gamerHandle: PAny): BOOL;
function NETWORK_IS_FRIEND_IN_SAME_TITLE(friendName: PChar): BOOL;
function NETWORK_IS_FRIEND_IN_MULTIPLAYER(friendName: PChar): BOOL;
function NETWORK_IS_FRIEND(gamerHandle: PAny): BOOL;
function NETWORK_IS_PENDING_FRIEND(p0: Any): BOOL;
function NETWORK_IS_ADDING_FRIEND: BOOL;
function NETWORK_ADD_FRIEND(gamerHandle: PAny; message: PChar): BOOL;
function NETWORK_IS_FRIEND_INDEX_ONLINE(friendIndex: cint): BOOL;
procedure NETWORK_SET_PLAYER_IS_PASSIVE(toggle: BOOL);
function NETWORK_GET_PLAYER_OWNS_WAYPOINT(plyr: Player): BOOL;
function NETWORK_CAN_SET_WAYPOINT: BOOL;
procedure NETWORK_IGNORE_REMOTE_WAYPOINTS;
function _NETWORK_DOES_COMMUNICATION_GROUP_EXIST(communicationType: cint): BOOL;
function _NETWORK_GET_COMMUNICATION_GROUP_FLAGS(communicationType: cint): cint;
procedure _NETWORK_SET_COMMUNICATION_GROUP_FLAGS(communicationType, communicationGroupFlag: cint);
function NETWORK_IS_PLAYER_ON_BLOCKLIST(gamerHandle: PAny): BOOL;
function NETWORK_SET_SCRIPT_AUTOMUTED(p0: Any): BOOL;
function NETWORK_HAS_AUTOMUTE_OVERRIDE: BOOL;
function NETWORK_HAS_HEADSET: BOOL;
procedure NETWORK_SET_LOOK_AT_TALKERS(p0: BOOL);
function NETWORK_IS_PUSH_TO_TALK_ACTIVE: BOOL;
function NETWORK_GAMER_HAS_HEADSET(gamerHandle: PAny): BOOL;
function NETWORK_IS_GAMER_TALKING(gamerHandle: PAny): BOOL;
function NETWORK_PERMISSIONS_HAS_GAMER_RECORD(gamerHandle: PAny): BOOL;
function NETWORK_CAN_COMMUNICATE_WITH_GAMER(gamerHandle: PAny): BOOL;
function NETWORK_CAN_TEXT_CHAT_WITH_GAMER(gamerHandle: PAny): BOOL;
function NETWORK_IS_GAMER_MUTED_BY_ME(gamerHandle: PAny): BOOL;
function NETWORK_AM_I_MUTED_BY_GAMER(gamerHandle: PAny): BOOL;
function NETWORK_IS_GAMER_BLOCKED_BY_ME(gamerHandle: PAny): BOOL;
function NETWORK_AM_I_BLOCKED_BY_GAMER(gamerHandle: PAny): BOOL;
function NETWORK_CAN_VIEW_GAMER_USER_CONTENT(gamerHandle: PAny): BOOL;
function NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(gamerHandle: PAny): BOOL;
function NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(gamerHandle: PAny): BOOL;
function NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(gamerHandle: PAny): BOOL;
function NETWORK_CAN_SEND_LOCAL_INVITE(gamerHandle: PAny): BOOL;
function NETWORK_CAN_RECEIVE_LOCAL_INVITE(gamerHandle: PAny): BOOL;
function NETWORK_IS_PLAYER_TALKING(plyr: Player): BOOL;
function NETWORK_PLAYER_HAS_HEADSET(plyr: Player): BOOL;
function NETWORK_IS_PLAYER_MUTED_BY_ME(plyr: Player): BOOL;
function NETWORK_AM_I_MUTED_BY_PLAYER(plyr: Player): BOOL;
function NETWORK_IS_PLAYER_BLOCKED_BY_ME(plyr: Player): BOOL;
function NETWORK_AM_I_BLOCKED_BY_PLAYER(plyr: Player): BOOL;
function NETWORK_GET_PLAYER_LOUDNESS(plyr: Player): cfloat;
procedure NETWORK_SET_TALKER_PROXIMITY(value: cfloat);
function NETWORK_GET_TALKER_PROXIMITY: cfloat;
procedure NETWORK_SET_VOICE_ACTIVE(toggle: BOOL);
procedure NETWORK_REMAIN_IN_GAME_CHAT(p0: BOOL);
procedure NETWORK_OVERRIDE_TRANSITION_CHAT(p0: BOOL);
procedure NETWORK_SET_TEAM_ONLY_CHAT(toggle: BOOL);
procedure NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(p0: Any);
function NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(p0, p1: Any): BOOL;
procedure NETWORK_OVERRIDE_TEAM_RESTRICTIONS(team: cint; toggle: BOOL);
procedure NETWORK_SET_OVERRIDE_SPECTATOR_MODE(toggle: BOOL);
procedure NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(toggle: BOOL);
procedure NETWORK_SET_PROXIMITY_AFFECTS_TEAM(toggle: BOOL);
procedure NETWORK_SET_NO_SPECTATOR_CHAT(toggle: BOOL);
procedure NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(toggle: BOOL);
procedure NETWORK_OVERRIDE_CHAT_RESTRICTIONS(plyr: Player; toggle: BOOL);
procedure NETWORK_OVERRIDE_SEND_RESTRICTIONS(plyr: Player; toggle: BOOL);
procedure NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(toggle: BOOL);
procedure NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(plyr: Player; toggle: BOOL);
procedure NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(toggle: BOOL);
procedure NETWORK_SET_VOICE_CHANNEL(channel: cint);
procedure NETWORK_CLEAR_VOICE_CHANNEL;
procedure NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(x, y, z: cfloat);
procedure NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE;
procedure NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(plyr: Player);
procedure NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(plyr: Player);
procedure NETWORK_GET_MUTE_COUNT_FOR_PLAYER(p0: Player; p1, p2: pcfloat);
procedure NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(toggle: BOOL);
function NETWORK_TEXT_CHAT_IS_TYPING: BOOL;
procedure SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME;
function SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE: BOOL;
procedure NETWORK_SET_FRIENDLY_FIRE_OPTION(toggle: BOOL);
procedure NETWORK_SET_RICH_PRESENCE(p0, p1: cint; p2, p3: Any);
procedure NETWORK_SET_RICH_PRESENCE_STRING(p0: cint; textLabel: PChar);
function NETWORK_GET_TIMEOUT_TIME: cint;
procedure NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(plyr: Player; x, y, z: cfloat; p4, p5: BOOL);
procedure NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(plyr: Player; p1: BOOL);
procedure REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(para_entity: Entity; _ped: Ped);
procedure NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(p0, p1: Any);
function NETWORK_IS_ANY_PLAYER_NEAR(p0, p1, p2, p3, p4, p5, p6: Any): BOOL;
function NETWORK_CLAN_SERVICE_IS_VALID: BOOL;
function NETWORK_CLAN_PLAYER_IS_ACTIVE(gamerHandle: PAny): BOOL;
function NETWORK_CLAN_PLAYER_GET_DESC(clanDesc: PAny; bufferSize: cint; gamerHandle: PAny): BOOL;
function NETWORK_CLAN_IS_ROCKSTAR_CLAN(clanDesc: PAny; bufferSize: cint): BOOL;
procedure NETWORK_CLAN_GET_UI_FORMATTED_TAG(clanDesc: PAny; bufferSize: cint; formattedTag: PChar);
function NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT: cint;
function NETWORK_CLAN_GET_MEMBERSHIP_DESC(memberDesc: PAny; p1: cint): BOOL;
function NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(gamerHandle: PAny): BOOL;
function NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(p0: PAny): BOOL;
function NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING: BOOL;
function NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(p0: pcint): BOOL;
function NETWORK_CLAN_GET_MEMBERSHIP_COUNT(p0: pcint): cint;
function NETWORK_CLAN_GET_MEMBERSHIP_VALID(p0: pcint; p1: Any): BOOL;
function NETWORK_CLAN_GET_MEMBERSHIP(p0: pcint; clanMembership: PAny; p2: cint): BOOL;
function NETWORK_CLAN_JOIN(clanDesc: cint): BOOL;
function NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(animDict, animName: PChar): BOOL;
function NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(p0: cint; p1: PChar): BOOL;
function NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED: BOOL;
function NETWORK_CLAN_GET_EMBLEM_TXD_NAME(netHandle: PAny; txdName: PChar): BOOL;
function NETWORK_CLAN_REQUEST_EMBLEM(p0: Any): BOOL;
function NETWORK_CLAN_IS_EMBLEM_READY(p0: Any; p1: PAny): BOOL;
procedure NETWORK_CLAN_RELEASE_EMBLEM(p0: Any);
function NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR: BOOL;
procedure NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL;
function NETWORK_GET_PRIMARY_CLAN_DATA_START(p0: PAny; p1: Any): BOOL;
function NETWORK_GET_PRIMARY_CLAN_DATA_PENDING: BOOL;
function NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS: BOOL;
function NETWORK_GET_PRIMARY_CLAN_DATA_NEW(p0, p1: PAny): BOOL;
procedure SET_NETWORK_ID_CAN_MIGRATE(netId: cint; toggle: BOOL);
procedure SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(netId: cint; toggle: BOOL);
procedure SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(netId: cint; plyr: Player; toggle: BOOL);
procedure SET_NETWORK_ID_CAN_BE_REASSIGNED(netId: cint; toggle: BOOL);
procedure NETWORK_SET_ENTITY_CAN_BLEND(para_entity: Entity; toggle: BOOL);
procedure NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(obj: GTAObject; toggle: BOOL);
procedure NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(para_entity: Entity; toggle: BOOL);
procedure SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(netId: cint; p1, p2: BOOL);
procedure SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(netId: cint; p1, p2: BOOL);
procedure SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(p0, p1, p2: Any);
procedure SET_NETWORK_CUTSCENE_ENTITIES(toggle: BOOL);
function ARE_CUTSCENE_ENTITIES_NETWORKED: BOOL;
procedure SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(netId: cint; state: BOOL);
function IS_NETWORK_ID_OWNED_BY_PARTICIPANT(netId: cint): BOOL;
procedure SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE(plyr: Player; locallyVisible: BOOL);
procedure SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(p0, p1: BOOL);
procedure SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(bIncludePlayersVehicle: BOOL);
procedure SET_LOCAL_PLAYER_VISIBLE_LOCALLY(bIncludePlayersVehicle: BOOL);
procedure SET_PLAYER_INVISIBLE_LOCALLY(plyr: Player; bIncludePlayersVehicle: BOOL);
procedure SET_PLAYER_VISIBLE_LOCALLY(plyr: Player; bIncludePlayersVehicle: BOOL);
procedure FADE_OUT_LOCAL_PLAYER(p0: BOOL);
procedure NETWORK_FADE_OUT_ENTITY(para_entity: Entity; normal, slow: BOOL);
procedure NETWORK_FADE_IN_ENTITY(para_entity: Entity; state: BOOL; p2: Any);
function NETWORK_IS_PLAYER_FADING(plyr: Player): BOOL;
function NETWORK_IS_ENTITY_FADING(para_entity: Entity): BOOL;
function IS_PLAYER_IN_CUTSCENE(plyr: Player): BOOL;
procedure SET_ENTITY_VISIBLE_IN_CUTSCENE(p0: Any; p1, p2: BOOL);
procedure SET_ENTITY_LOCALLY_INVISIBLE(para_entity: Entity);
procedure SET_ENTITY_LOCALLY_VISIBLE(para_entity: Entity);
function IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(netID: cint): BOOL;
procedure ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(netID: cint; toggle: BOOL);
function IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(plyr: Player): BOOL;
procedure ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(plyr: Player; toggle: BOOL);
function IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(p0, p1, p2, p3: cfloat): BOOL;
function IS_SPHERE_VISIBLE_TO_PLAYER(p0: Any; p1, p2, p3, p4: cfloat): BOOL;
procedure RESERVE_NETWORK_MISSION_OBJECTS(amount: cint);
procedure RESERVE_NETWORK_MISSION_PEDS(amount: cint);
procedure RESERVE_NETWORK_MISSION_VEHICLES(amount: cint);
procedure RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(amount: cint);
procedure RESERVE_LOCAL_NETWORK_MISSION_PEDS(amount: cint);
procedure RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(amount: cint);
function CAN_REGISTER_MISSION_OBJECTS(amount: cint): BOOL;
function CAN_REGISTER_MISSION_PEDS(amount: cint): BOOL;
function CAN_REGISTER_MISSION_VEHICLES(amount: cint): BOOL;
function CAN_REGISTER_MISSION_PICKUPS(amount: cint): BOOL;
function CAN_REGISTER_MISSION_DOORS(p0: Any): BOOL;
function CAN_REGISTER_MISSION_ENTITIES(ped_amt, vehicle_amt, object_amt, pickup_amt: cint): BOOL;
function GET_NUM_RESERVED_MISSION_OBJECTS(p0: BOOL; p1: Any): cint;
function GET_NUM_RESERVED_MISSION_PEDS(p0: BOOL; p1: Any): cint;
function GET_NUM_RESERVED_MISSION_VEHICLES(p0: BOOL; p1: Any): cint;
function GET_NUM_CREATED_MISSION_OBJECTS(p0: BOOL): cint;
function GET_NUM_CREATED_MISSION_PEDS(p0: BOOL): cint;
function GET_NUM_CREATED_MISSION_VEHICLES(p0: BOOL): cint;
procedure GET_RESERVED_MISSION_ENTITIES_IN_AREA(x, y, z: cfloat; p3: Any; out1, out2, out3: PAny);
function GET_MAX_NUM_NETWORK_OBJECTS: cint;
function GET_MAX_NUM_NETWORK_PEDS: cint;
function GET_MAX_NUM_NETWORK_VEHICLES: cint;
function GET_MAX_NUM_NETWORK_PICKUPS: cint;
procedure NETWORK_SET_OBJECT_SCOPE_DISTANCE(obj: GTAObject; range: cfloat);
procedure NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(p0, p1: Any);
procedure NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(p0: Any);
function GET_NETWORK_TIME: cint;
function GET_NETWORK_TIME_ACCURATE: cint;
function HAS_NETWORK_TIME_STARTED: BOOL;
function GET_TIME_OFFSET(timeA, timeB: cint): cint;
function IS_TIME_LESS_THAN(timeA, timeB: cint): BOOL;
function IS_TIME_MORE_THAN(timeA, timeB: cint): BOOL;
function IS_TIME_EQUAL_TO(timeA, timeB: cint): BOOL;
function GET_TIME_DIFFERENCE(timeA, timeB: cint): cint;
function GET_TIME_AS_STRING(time: cint): PChar;
function GET_CLOUD_TIME_AS_STRING: PChar;
function GET_CLOUD_TIME_AS_INT: cint;
procedure CONVERT_POSIX_TIME(posixTime: cint; timeStructure: PAny);
procedure NETWORK_SET_IN_SPECTATOR_MODE(toggle: BOOL; playerPed: Ped);
procedure NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(toggle: BOOL; playerPed: Ped; p2: BOOL);
procedure NETWORK_SET_IN_FREE_CAM_MODE(toggle: BOOL);
procedure NETWORK_SET_ANTAGONISTIC_TO_PLAYER(toggle: BOOL; plyr: Player);
function NETWORK_IS_IN_SPECTATOR_MODE: BOOL;
procedure NETWORK_SET_IN_MP_CUTSCENE(p0, p1: BOOL);
function NETWORK_IS_IN_MP_CUTSCENE: BOOL;
function NETWORK_IS_PLAYER_IN_MP_CUTSCENE(plyr: Player): BOOL;
procedure NETWORK_HIDE_PROJECTILE_IN_CUTSCENE;
procedure SET_NETWORK_VEHICLE_RESPOT_TIMER(netId, time: cint; p2, p3: Any);
function IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER(networkID: cint): BOOL;
procedure SET_NETWORK_VEHICLE_AS_GHOST(veh: Vehicle; toggle: BOOL);
procedure SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
procedure SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(veh: Vehicle; toggle: BOOL);
procedure SET_LOCAL_PLAYER_AS_GHOST(toggle, p1: BOOL);
function IS_ENTITY_A_GHOST(para_entity: Entity): BOOL;
procedure SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(p0: BOOL);
procedure SET_REMOTE_PLAYER_AS_GHOST(plyr: Player; p1: BOOL);
procedure SET_GHOST_ALPHA(alpha: cint);
procedure RESET_GHOST_ALPHA;
procedure SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(para_entity: Entity; toggle: BOOL);
procedure SET_INVERT_GHOSTING(p0: BOOL);
function IS_ENTITY_IN_GHOST_COLLISION(para_entity: Entity): BOOL;
procedure USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(toggle: BOOL);
function NETWORK_CREATE_SYNCHRONISED_SCENE(x, y, z, xRot, yRot, zRot: cfloat; rotationOrder: cint; useOcclusionPortal, looped: BOOL; p9, animTime, p11: cfloat): cint;
procedure NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(_ped: Ped; netScene: cint; animDict, animnName: PChar; speed, speedMultiplier: cfloat; duration, flag: cint; playbackRate: cfloat; p9: Any);
procedure NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9: Any);
procedure NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(para_entity: Entity; netScene: cint; animDict, animName: PChar; speed, speedMulitiplier: cfloat; flag: cint);
procedure NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(netScene: cint; modelHash: Hash; x, y, z, p5: cfloat; p6: PChar; p7, p8: cfloat; flags: cint);
procedure NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(netScene: cint; animDict, animName: PChar);
procedure NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(netScene: cint; para_entity: Entity; bone: cint);
procedure NETWORK_START_SYNCHRONISED_SCENE(netScene: cint);
procedure NETWORK_STOP_SYNCHRONISED_SCENE(netScene: cint);
function NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(netId: cint): cint;
procedure NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(netScene: cint);
procedure NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(p0: Any);
function NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(p0: cint; p1: Any): BOOL;
function NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(plyr: Player; x, y, z, radius, p5, p6, p7: cfloat; flags: cint): BOOL;
function NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(plyr: Player; x1, y1, z1, x2, y2, z2, width, p8, p9, p10: cfloat; flags: cint): BOOL;
function NETWORK_QUERY_RESPAWN_RESULTS(p0: PAny): cint;
procedure NETWORK_CANCEL_RESPAWN_SEARCH;
procedure NETWORK_GET_RESPAWN_RESULT(randomInt: cint; coordinates: PVector3; heading: pcfloat);
function NETWORK_GET_RESPAWN_RESULT_FLAGS(p0: cint): cint;
procedure NETWORK_START_SOLO_TUTORIAL_SESSION;
procedure NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(teamId, instanceId: cint);
procedure NETWORK_END_TUTORIAL_SESSION;
function NETWORK_IS_IN_TUTORIAL_SESSION: BOOL;
function NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION: BOOL;
function NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING: BOOL;
function NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(plyr: Player): cint;
function NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(plyr: Player; index: cint): BOOL;
procedure NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(p0: Any);
procedure NETWORK_CONCEAL_PLAYER(plyr: Player; toggle, p2: BOOL);
function NETWORK_IS_PLAYER_CONCEALED(plyr: Player): BOOL;
procedure NETWORK_CONCEAL_ENTITY(para_entity: Entity; toggle: BOOL);
function NETWORK_IS_ENTITY_CONCEALED(para_entity: Entity): BOOL;
procedure NETWORK_OVERRIDE_CLOCK_TIME(hours, minutes, seconds: cint);
procedure NETWORK_OVERRIDE_CLOCK_RATE(ms: cint);
procedure NETWORK_CLEAR_CLOCK_TIME_OVERRIDE;
function NETWORK_IS_CLOCK_TIME_OVERRIDDEN: BOOL;
function NETWORK_ADD_ENTITY_AREA(x1, y1, z1, x2, y2, z2: cfloat): cint;
function NETWORK_ADD_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat): cint;
function NETWORK_ADD_CLIENT_ENTITY_AREA(x1, y1, z1, x2, y2, z2: cfloat): cint;
function NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, radius: cfloat): cint;
function NETWORK_REMOVE_ENTITY_AREA(areaHandle: cint): BOOL;
function NETWORK_ENTITY_AREA_DOES_EXIST(areaHandle: cint): BOOL;
function NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(areaHandle: cint): BOOL;
function NETWORK_ENTITY_AREA_IS_OCCUPIED(areaHandle: cint): BOOL;
procedure NETWORK_USE_HIGH_PRECISION_BLENDING(netID: cint; toggle: BOOL);
procedure NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(netId: cint);
procedure NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(netId: cint; toggle: BOOL);
function NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS: BOOL;
function NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING: BOOL;
procedure NETWORK_REQUEST_CLOUD_TUNABLES;
function NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING: BOOL;
function NETWORK_GET_TUNABLE_CLOUD_CRC: cint;
function NETWORK_DOES_TUNABLE_EXIST(tunableContext, tunableName: PChar): BOOL;
function NETWORK_ACCESS_TUNABLE_INT(tunableContext, tunableName: PChar; value: pcint): BOOL;
function NETWORK_ACCESS_TUNABLE_FLOAT(tunableContext, tunableName: PChar; value: pcfloat): BOOL;
function NETWORK_ACCESS_TUNABLE_BOOL(tunableContext, tunableName: PChar): BOOL;
function NETWORK_DOES_TUNABLE_EXIST_HASH(tunableContext, tunableName: Hash): BOOL;
function NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR: BOOL;
function NETWORK_ACCESS_TUNABLE_INT_HASH(tunableContext, tunableName: Hash; value: pcint): BOOL;
function NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash: Hash; value: pcint): BOOL;
function NETWORK_ACCESS_TUNABLE_FLOAT_HASH(tunableContext, tunableName: Hash; value: pcfloat): BOOL;
function NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash: Hash; value: pcfloat): BOOL;
function NETWORK_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName: Hash): BOOL;
function NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash: Hash; value: PBOOL): BOOL;
function NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName: Hash; defaultValue: BOOL): BOOL;
function NETWORK_GET_CONTENT_MODIFIER_LIST_ID(contentHash: Hash): cint;
function NETWORK_GET_BONE_ID_OF_FATAL_HIT: cint;
procedure NETWORK_RESET_BODY_TRACKER;
function NETWORK_GET_NUMBER_BODY_TRACKER_HITS: cint;
function NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(boneIndex: cint): BOOL;
function NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(_ped: Ped; plyr: Player): BOOL;
procedure NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(para_entity: Entity; toggle: BOOL);
procedure NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(para_entity: Entity; toggle: BOOL);
procedure NETWORK_SET_NO_LONGER_NEEDED(para_entity: Entity; toggle: BOOL);
function NETWORK_EXPLODE_VEHICLE(veh: Vehicle; isAudible, isInvisible: BOOL; netId: cint): BOOL;
procedure NETWORK_EXPLODE_HELI(veh: Vehicle; isAudible, isInvisible: BOOL; netId: cint);
procedure NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(para_entity: Entity);
procedure NETWORK_OVERRIDE_COORDS_AND_HEADING(para_entity: Entity; x, y, z, heading: cfloat);
procedure NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(netId: cint; toggle: BOOL);
procedure NETWORK_DISABLE_PROXIMITY_MIGRATION(netID: cint);
procedure NETWORK_SET_PROPERTY_ID(id: cint);
procedure NETWORK_CLEAR_PROPERTY_ID;
procedure NETWORK_SET_PLAYER_MENTAL_STATE(p0: cint);
procedure NETWORK_SET_MINIMUM_RANK_FOR_MISSION(p0: BOOL);
procedure NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA;
function NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(plyr: Player): BOOL;
function NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(_ped: Ped; plyr: Player): BOOL;
function GET_NUM_COMMERCE_ITEMS: cint;
function IS_COMMERCE_DATA_VALID: BOOL;
procedure TRIGGER_COMMERCE_DATA_FETCH(p0: Any);
function IS_COMMERCE_DATA_FETCH_IN_PROGRESS: BOOL;
function GET_COMMERCE_ITEM_ID(index: cint): PChar;
function GET_COMMERCE_ITEM_NAME(index: cint): PChar;
function GET_COMMERCE_PRODUCT_PRICE(index: cint): PChar;
function GET_COMMERCE_ITEM_NUM_CATS(index: cint): cint;
function GET_COMMERCE_ITEM_CAT(index, index2: cint): PChar;
procedure OPEN_COMMERCE_STORE(p0, p1: PChar; p2: cint);
function IS_COMMERCE_STORE_OPEN: BOOL;
procedure SET_STORE_ENABLED(toggle: BOOL);
function REQUEST_COMMERCE_ITEM_IMAGE(index: cint): BOOL;
procedure RELEASE_ALL_COMMERCE_ITEM_IMAGES;
function GET_COMMERCE_ITEM_TEXTURENAME(index: cint): PChar;
function IS_STORE_AVAILABLE_TO_USER: BOOL;
procedure DELAY_MP_STORE_OPEN;
procedure RESET_STORE_NETWORK_GAME_TRACKING;
function IS_USER_OLD_ENOUGH_TO_ACCESS_STORE: BOOL;
procedure SET_LAST_VIEWED_SHOP_ITEM(p0: Hash; p1: cint; p2: Hash);
function GET_USER_PREMIUM_ACCESS: cint;
function GET_USER_STARTER_ACCESS: cint;
function CLOUD_DELETE_MEMBER_FILE(p0: PChar): cint;
function CLOUD_HAS_REQUEST_COMPLETED(requestId: cint): BOOL;
function CLOUD_DID_REQUEST_SUCCEED(requestId: cint): BOOL;
procedure CLOUD_CHECK_AVAILABILITY;
function CLOUD_IS_CHECKING_AVAILABILITY: BOOL;
function CLOUD_GET_AVAILABILITY_CHECK_RESULT: BOOL;
function GET_CONTENT_TO_LOAD_TYPE: cint;
function GET_IS_LAUNCH_FROM_LIVE_AREA: BOOL;
function GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT: BOOL;
procedure CLEAR_SERVICE_EVENT_ARGUMENTS;
function UGC_COPY_CONTENT(p0, p1: PAny): BOOL;
function UGC_IS_CREATING: BOOL;
function UGC_HAS_CREATE_FINISHED: BOOL;
function UGC_DID_CREATE_SUCCEED: BOOL;
function UGC_GET_CREATE_RESULT: cint;
function UGC_GET_CREATE_CONTENT_ID: PChar;
procedure UGC_CLEAR_CREATE_RESULT;
function UGC_QUERY_MY_CONTENT(p0, p1: Any; p2: PAny; p3, p4, p5: Any): BOOL;
function UGC_QUERY_BY_CATEGORY(p0, p1, p2: Any; p3: PChar; p4: Any; p5: BOOL): BOOL;
function UGC_QUERY_BY_CONTENT_ID(contentId: PChar; latestVersion: BOOL; contentTypeName: PChar): BOOL;
function UGC_QUERY_BY_CONTENT_IDS(data: PAny; count: cint; latestVersion: BOOL; contentTypeName: PChar): BOOL;
function UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(offset, count: cint; contentTypeName: PChar; p3: cint): BOOL;
function UGC_GET_BOOKMARKED_CONTENT(p0, p1: Any; p2: PChar; p3: PAny): BOOL;
function UGC_GET_MY_CONTENT(p0, p1: Any; p2: PChar; p3: PAny): BOOL;
function UGC_GET_FRIEND_CONTENT(p0, p1: Any; p2: PChar; p3: PAny): BOOL;
function UGC_GET_CREW_CONTENT(p0, p1, p2: Any; p3: PChar; p4: PAny): BOOL;
function UGC_GET_GET_BY_CATEGORY(p0, p1, p2: Any; p3: PChar; p4: PAny): BOOL;
function UGC_GET_GET_BY_CONTENT_ID(contentId, contentTypeName: PChar): BOOL;
function UGC_GET_GET_BY_CONTENT_IDS(data: PAny; dataCount: cint; contentTypeName: PChar): BOOL;
function UGC_GET_MOST_RECENTLY_CREATED_CONTENT(p0, p1: Any; p2, p3: PAny): BOOL;
function UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(p0, p1: Any; p2, p3: PAny): BOOL;
function UGC_GET_TOP_RATED_CONTENT(p0, p1: Any; p2, p3: PAny): BOOL;
procedure UGC_CANCEL_QUERY;
function UGC_IS_GETTING: BOOL;
function UGC_HAS_GET_FINISHED: BOOL;
function UGC_DID_GET_SUCCEED: BOOL;
function UGC_WAS_QUERY_FORCE_CANCELLED: BOOL;
function UGC_GET_QUERY_RESULT: cint;
function UGC_GET_CONTENT_NUM: cint;
function UGC_GET_CONTENT_TOTAL: cint;
function UGC_GET_CONTENT_HASH: Hash;
procedure UGC_CLEAR_QUERY_RESULTS;
function UGC_GET_CONTENT_USER_ID(p0: cint): PChar;
function UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(p0: cint; p1: PAny): BOOL;
function UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(p0: Any): BOOL;
function UGC_GET_CONTENT_USER_NAME(p0: Any): PChar;
function UGC_GET_CONTENT_IS_USING_SC_NICKNAME(p0: Any): BOOL;
function UGC_GET_CONTENT_CATEGORY(p0: cint): cint;
function UGC_GET_CONTENT_ID(p0: cint): PChar;
function UGC_GET_ROOT_CONTENT_ID(p0: cint): PChar;
function UGC_GET_CONTENT_NAME(p0: Any): PChar;
function UGC_GET_CONTENT_DESCRIPTION_HASH(p0: Any): cint;
function UGC_GET_CONTENT_PATH(p0, p1: cint): PChar;
procedure UGC_GET_CONTENT_UPDATED_DATE(p0: Any; p1: PAny);
function UGC_GET_CONTENT_FILE_VERSION(p0, p1: Any): cint;
function UGC_GET_CONTENT_HAS_LO_RES_PHOTO(p0: cint): BOOL;
function UGC_GET_CONTENT_HAS_HI_RES_PHOTO(p0: cint): BOOL;
function UGC_GET_CONTENT_LANGUAGE(p0: Any): cint;
function UGC_GET_CONTENT_IS_PUBLISHED(p0: Any): BOOL;
function UGC_GET_CONTENT_IS_VERIFIED(p0: Any): BOOL;
function UGC_GET_CONTENT_RATING(p0, p1: Any): cfloat;
function UGC_GET_CONTENT_RATING_COUNT(p0, p1: Any): cint;
function UGC_GET_CONTENT_RATING_POSITIVE_COUNT(p0, p1: Any): cint;
function UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(p0, p1: Any): cint;
function UGC_GET_CONTENT_HAS_PLAYER_RECORD(p0: Any): BOOL;
function UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(p0: Any): BOOL;
function UGC_REQUEST_CONTENT_DATA_FROM_INDEX(p0, p1: cint): cint;
function UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(contentTypeName, contentId: PChar; p2, p3, p4: cint): cint;
function UGC_REQUEST_CACHED_DESCRIPTION(p0: cint): cint;
function UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(p0: Any): BOOL;
function UGC_HAS_DESCRIPTION_REQUEST_FINISHED(p0: Any): BOOL;
function UGC_DID_DESCRIPTION_REQUEST_SUCCEED(p0: Any): BOOL;
function UGC_GET_CACHED_DESCRIPTION(p0, p1: Any): PChar;
function UGC_RELEASE_CACHED_DESCRIPTION(p0: Any): BOOL;
procedure UGC_RELEASE_ALL_CACHED_DESCRIPTIONS;
function UGC_HAS_PERMISSION_TO_WRITE: BOOL;
function UGC_PUBLISH(contentId, baseContentId, contentTypeName: PChar): BOOL;
function UGC_SET_BOOKMARKED(contentId: PChar; bookmarked: BOOL; contentTypeName: PChar): BOOL;
function UGC_SET_DELETED(p0: PAny; p1: BOOL; p2: PChar): BOOL;
function UGC_IS_MODIFYING: BOOL;
function UGC_HAS_MODIFY_FINISHED: BOOL;
function UGC_DID_MODIFY_SUCCEED: BOOL;
function UGC_GET_MODIFY_RESULT: cint;
procedure UGC_CLEAR_MODIFY_RESULT;
function UGC_GET_CREATORS_BY_USER_ID(p0, p1: PAny): BOOL;
function UGC_HAS_QUERY_CREATORS_FINISHED: BOOL;
function UGC_DID_QUERY_CREATORS_SUCCEED: BOOL;
function UGC_GET_CREATOR_NUM: cint;
function UGC_LOAD_OFFLINE_QUERY(p0: Any): BOOL;
procedure UGC_CLEAR_OFFLINE_QUERY;
procedure UGC_SET_QUERY_DATA_FROM_OFFLINE(p0: BOOL);
procedure UGC_SET_USING_OFFLINE_CONTENT(p0: BOOL);
function UGC_IS_LANGUAGE_SUPPORTED(p0: Any): BOOL;
function FACEBOOK_POST_COMPLETED_HEIST(heistName: PChar; cashEarned, xpEarned: cint): BOOL;
function FACEBOOK_POST_CREATE_CHARACTER: BOOL;
function FACEBOOK_POST_COMPLETED_MILESTONE(milestoneId: cint): BOOL;
function FACEBOOK_HAS_POST_COMPLETED: BOOL;
function FACEBOOK_DID_POST_SUCCEED: BOOL;
function FACEBOOK_CAN_POST_TO_FACEBOOK: BOOL;
function TEXTURE_DOWNLOAD_REQUEST(gamerHandle: PAny; filePath, name: PChar; p3: BOOL): cint;
function TITLE_TEXTURE_DOWNLOAD_REQUEST(filePath, name: PChar; p2: BOOL): cint;
function UGC_TEXTURE_DOWNLOAD_REQUEST(p0: PChar; p1, p2, p3: cint; p4: PChar; p5: BOOL): cint;
procedure TEXTURE_DOWNLOAD_RELEASE(p0: cint);
function TEXTURE_DOWNLOAD_HAS_FAILED(p0: cint): BOOL;
function TEXTURE_DOWNLOAD_GET_NAME(p0: cint): PChar;
function GET_STATUS_OF_TEXTURE_DOWNLOAD(p0: cint): cint;
function NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET: BOOL;
function NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING: BOOL;
function NETWORK_IS_CABLE_CONNECTED: BOOL;
function NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV: BOOL;
function NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV: BOOL;
function NETWORK_HAVE_ROS_BANNED_PRIV: BOOL;
function NETWORK_HAVE_ROS_CREATE_TICKET_PRIV: BOOL;
function NETWORK_HAVE_ROS_MULTIPLAYER_PRIV: BOOL;
function NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV: BOOL;
function NETWORK_HAS_ROS_PRIVILEGE(index: cint): BOOL;
function NETWORK_HAS_ROS_PRIVILEGE_END_DATE(privilege: cint; banType: pcint; timeData: PAny): BOOL;
function NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN: BOOL;
function NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT: BOOL;
function _NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION: BOOL;
function _NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION: BOOL;
function NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(p0: Any): cint;
function NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(netHandle: PAny): cint;
procedure NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE;
procedure NETWORK_SKIP_RADIO_RESET_NEXT_OPEN;
function NETWORK_SKIP_RADIO_WARNING: BOOL;
procedure NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC;
procedure NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(toggle: BOOL);
procedure NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(para_entity: Entity; toggle: BOOL);
procedure NETWORK_SHOW_CHAT_RESTRICTION_MSC(plyr: Player);
procedure NETWORK_SHOW_PSN_UGC_RESTRICTION;
function NETWORK_IS_TITLE_UPDATE_REQUIRED: BOOL;
procedure NETWORK_QUIT_MP_TO_DESKTOP;
function NETWORK_IS_CONNECTED_VIA_RELAY(plyr: Player): BOOL;
function NETWORK_GET_AVERAGE_LATENCY(plyr: Player): cfloat;
function NETWORK_GET_AVERAGE_PING(plyr: Player): cfloat;
function NETWORK_GET_AVERAGE_PACKET_LOSS(plyr: Player): cfloat;
function NETWORK_GET_NUM_UNACKED_RELIABLES(plyr: Player): cint;
function NETWORK_GET_UNRELIABLE_RESEND_COUNT(plyr: Player): cint;
function NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(plyr: Player): cint;
procedure NETWORK_REPORT_CODE_TAMPER;
function NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(para_entity: Entity): Vector3;
function NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(plyr: Player): Vector3;
function NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(para_entity: Entity): Vector3;
function NETWORK_GET_PREDICTED_VELOCITY(para_entity: Entity; maxSpeedToPredict: cfloat): Vector3;
procedure NETWORK_DUMP_NET_IF_CONFIG;
procedure NETWORK_GET_SIGNALLING_INFO(p0: PAny);
procedure NETWORK_GET_NET_STATISTICS_INFO(p0: PAny);
function NETWORK_GET_PLAYER_ACCOUNT_ID(plyr: Player): cint;
procedure NETWORK_UGC_NAV(p0, p1: Any);
function CREATE_OBJECT(modelHash: Hash; x, y, z: cfloat; isNetwork, bScriptHostObj, dynamic: BOOL): GTAObject;
function CREATE_OBJECT_NO_OFFSET(modelHash: Hash; x, y, z: cfloat; isNetwork, bScriptHostObj, dynamic: BOOL): GTAObject;
procedure DELETE_OBJECT(obj: PGTAObject);
function PLACE_OBJECT_ON_GROUND_PROPERLY(obj: GTAObject): BOOL;
function PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(obj: GTAObject): BOOL;
function ROTATE_OBJECT(obj: GTAObject; p1, p2: cfloat; p3: BOOL): BOOL;
function SLIDE_OBJECT(obj: GTAObject; toX, toY, toZ, speedX, speedY, speedZ: cfloat; collision: BOOL): BOOL;
procedure SET_OBJECT_TARGETTABLE(obj: GTAObject; targettable: BOOL; p2: Any);
procedure SET_OBJECT_FORCE_VEHICLES_TO_AVOID(obj: GTAObject; toggle: BOOL);
function GET_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius: cfloat; modelHash: Hash; isMission, p6, p7: BOOL): GTAObject;
function HAS_OBJECT_BEEN_BROKEN(obj: GTAObject; p1: Any): BOOL;
function HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(p0, p1, p2, p3: cfloat; modelHash: Hash; p5: Any): BOOL;
function HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL): BOOL;
function GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(p0: Any): BOOL;
function GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset: cfloat): Vector3;
function GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius: cfloat; modelHash: Hash; outPosition, outRotation: PVector3; rotationOrder: cint): BOOL;
procedure SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(_type: Hash; x, y, z: cfloat; locked: BOOL; heading: cfloat; p6: BOOL);
procedure GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(_type: Hash; x, y, z: cfloat; locked: PBOOL; heading: pcfloat);
procedure SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(modelHash: Hash; x, y, z: cfloat; locked: BOOL; xRotMult, yRotMult, zRotMult: cfloat);
procedure PLAY_OBJECT_AUTO_START_ANIM(p0: Any);
procedure ADD_DOOR_TO_SYSTEM(doorHash, modelHash: Hash; x, y, z: cfloat; p5, scriptDoor, isLocal: BOOL);
procedure REMOVE_DOOR_FROM_SYSTEM(doorHash: Hash; p1: Any);
procedure DOOR_SYSTEM_SET_DOOR_STATE(doorHash: Hash; state: cint; requestDoor, forceUpdate: BOOL);
function DOOR_SYSTEM_GET_DOOR_STATE(doorHash: Hash): cint;
function DOOR_SYSTEM_GET_DOOR_PENDING_STATE(doorHash: Hash): cint;
procedure DOOR_SYSTEM_SET_AUTOMATIC_RATE(doorHash: Hash; rate: cfloat; requestDoor, forceUpdate: BOOL);
procedure DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(doorHash: Hash; distance: cfloat; requestDoor, forceUpdate: BOOL);
procedure DOOR_SYSTEM_SET_OPEN_RATIO(doorHash: Hash; ajar: cfloat; requestDoor, forceUpdate: BOOL);
function DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(doorHash: Hash): cfloat;
function DOOR_SYSTEM_GET_OPEN_RATIO(doorHash: Hash): cfloat;
procedure DOOR_SYSTEM_SET_SPRING_REMOVED(doorHash: Hash; removed, requestDoor, forceUpdate: BOOL);
procedure DOOR_SYSTEM_SET_HOLD_OPEN(doorHash: Hash; toggle: BOOL);
procedure DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(doorHash: Hash; p1: BOOL);
function IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash: Hash): BOOL;
function IS_DOOR_CLOSED(doorHash: Hash): BOOL;
procedure OPEN_ALL_BARRIERS_FOR_RACE(p0: BOOL);
procedure CLOSE_ALL_BARRIERS_FOR_RACE;
function DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(p0: Any): BOOL;
function DOOR_SYSTEM_FIND_EXISTING_DOOR(x, y, z: cfloat; modelHash: Hash; outDoorHash: PHash): BOOL;
function IS_GARAGE_EMPTY(garageHash: Hash; p1: BOOL; p2: cint): BOOL;
function IS_PLAYER_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; plyr: Player; p2: cfloat; p3: cint): BOOL;
function IS_PLAYER_PARTIALLY_INSIDE_GARAGE(garageHash: Hash; plyr: Player; p2: cint): BOOL;
function ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; p1, p2, p3: BOOL; p4: Any): BOOL;
function IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; p1, p2, p3: BOOL; p4: Any): BOOL;
function IS_OBJECT_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; para_entity: Entity; p2: cfloat; p3: cint): BOOL;
function IS_OBJECT_PARTIALLY_INSIDE_GARAGE(garageHash: Hash; para_entity: Entity; p2: cint): BOOL;
procedure CLEAR_GARAGE(garageHash: Hash; isNetwork: BOOL);
procedure CLEAR_OBJECTS_INSIDE_GARAGE(garageHash: Hash; vehicles, peds, objects, isNetwork: BOOL);
procedure DISABLE_TIDYING_UP_IN_GARAGE(id: cint; toggle: BOOL);
procedure ENABLE_SAVING_IN_GARAGE(garageHash: Hash; toggle: BOOL);
procedure CLOSE_SAFEHOUSE_GARAGES;
function DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(x, y, z, radius: cfloat; para_hash: Hash; p5: BOOL): BOOL;
function IS_POINT_IN_ANGLED_AREA(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width: cfloat; debug, includeZ: BOOL): BOOL;
procedure SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(obj: GTAObject; toggle: BOOL);
procedure SET_OBJECT_PHYSICS_PARAMS(obj: GTAObject; weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy: cfloat);
function GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(p0: Any; p1: BOOL): cfloat;
procedure SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(obj: GTAObject; toggle: BOOL);
function IS_ANY_OBJECT_NEAR_POINT(x, y, z, range: cfloat; p4: BOOL): BOOL;
function IS_OBJECT_NEAR_POINT(objectHash: Hash; x, y, z, range: cfloat): BOOL;
procedure REMOVE_OBJECT_HIGH_DETAIL_MODEL(obj: GTAObject);
procedure BREAK_OBJECT_FRAGMENT_CHILD(p0: GTAObject; p1: Any; p2: BOOL);
procedure DAMAGE_OBJECT_FRAGMENT_CHILD(p0, p1, p2: Any);
procedure FIX_OBJECT_FRAGMENT(obj: GTAObject);
procedure TRACK_OBJECT_VISIBILITY(obj: GTAObject);
function IS_OBJECT_VISIBLE(obj: GTAObject): BOOL;
procedure SET_OBJECT_IS_SPECIAL_GOLFBALL(obj: GTAObject; toggle: BOOL);
procedure SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(p0: Any; p1: BOOL);
procedure ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(value: BOOL);
procedure SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(obj: GTAObject; toggle: BOOL);
function GET_RAYFIRE_MAP_OBJECT(x, y, z, radius: cfloat; name: PChar): GTAObject;
procedure SET_STATE_OF_RAYFIRE_MAP_OBJECT(obj: GTAObject; state: cint);
function GET_STATE_OF_RAYFIRE_MAP_OBJECT(obj: GTAObject): cint;
function DOES_RAYFIRE_MAP_OBJECT_EXIST(obj: GTAObject): BOOL;
function GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(obj: GTAObject): cfloat;
function CREATE_PICKUP(pickupHash: Hash; posX, posY, posZ: cfloat; p4, value: cint; p6: BOOL; modelHash: Hash): Pickup;
function CREATE_PICKUP_ROTATE(pickupHash: Hash; posX, posY, posZ, rotX, rotY, rotZ: cfloat; flag, amount: cint; p9: Any; p10: BOOL; modelHash: Hash): Pickup;
procedure FORCE_PICKUP_ROTATE_FACE_UP;
procedure SET_CUSTOM_PICKUP_WEAPON_HASH(pickupHash: Hash; para_pickup: Pickup);
function CREATE_AMBIENT_PICKUP(pickupHash: Hash; posX, posY, posZ: cfloat; flags, value: cint; modelHash: Hash; p7, p8: BOOL): GTAObject;
function CREATE_NON_NETWORKED_AMBIENT_PICKUP(pickupHash: Hash; posX, posY, posZ: cfloat; flags, value: cint; modelHash: Hash; p7, p8: BOOL): GTAObject;
procedure BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(p0, p1: Any);
function CREATE_PORTABLE_PICKUP(pickupHash: Hash; x, y, z: cfloat; placeOnGround: BOOL; modelHash: Hash): GTAObject;
function CREATE_NON_NETWORKED_PORTABLE_PICKUP(pickupHash: Hash; x, y, z: cfloat; placeOnGround: BOOL; modelHash: Hash): GTAObject;
procedure ATTACH_PORTABLE_PICKUP_TO_PED(pickupObject: GTAObject; _ped: Ped);
procedure DETACH_PORTABLE_PICKUP_FROM_PED(pickupObject: GTAObject);
procedure FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(obj: GTAObject);
procedure HIDE_PORTABLE_PICKUP_WHEN_DETACHED(pickupObject: GTAObject; toggle: BOOL);
procedure SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(modelHash: Hash; number: cint);
procedure SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(toggle: BOOL);
function GET_SAFE_PICKUP_COORDS(x, y, z, p3, p4: cfloat): Vector3;
procedure ADD_EXTENDED_PICKUP_PROBE_AREA(x, y, z, radius: cfloat);
procedure CLEAR_EXTENDED_PICKUP_PROBE_AREAS;
function GET_PICKUP_COORDS(para_pickup: Pickup): Vector3;
procedure SUPPRESS_PICKUP_SOUND_FOR_PICKUP(p0, p1: Any);
procedure REMOVE_ALL_PICKUPS_OF_TYPE(pickupHash: Hash);
function HAS_PICKUP_BEEN_COLLECTED(para_pickup: Pickup): BOOL;
procedure REMOVE_PICKUP(para_pickup: Pickup);
procedure CREATE_MONEY_PICKUPS(x, y, z: cfloat; value, amount: cint; model: Hash);
function DOES_PICKUP_EXIST(para_pickup: Pickup): BOOL;
function DOES_PICKUP_OBJECT_EXIST(pickupObject: GTAObject): BOOL;
function GET_PICKUP_OBJECT(para_pickup: Pickup): GTAObject;
function IS_OBJECT_A_PICKUP(obj: GTAObject): BOOL;
function IS_OBJECT_A_PORTABLE_PICKUP(obj: GTAObject): BOOL;
function DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(pickupHash: Hash; x, y, z, radius: cfloat): BOOL;
procedure SET_PICKUP_REGENERATION_TIME(para_pickup: Pickup; duration: cint);
procedure FORCE_PICKUP_REGENERATE(p0: Any);
procedure SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(plyr: Player; pickupHash: Hash; toggle: BOOL);
procedure SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(modelHash: Hash; toggle: BOOL);
procedure ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(pickupHash: Hash);
procedure SET_TEAM_PICKUP_OBJECT(obj: GTAObject; p1: Any; p2: BOOL);
procedure PREVENT_COLLECTION_OF_PORTABLE_PICKUP(obj: GTAObject; p1, p2: BOOL);
procedure SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
procedure SET_PICKUP_GLOW_OFFSET(para_pickup: Pickup; p1: cfloat);
procedure SET_PICKUP_OBJECT_GLOW_OFFSET(para_pickup: Pickup; p1: cfloat; p2: BOOL);
procedure SET_OBJECT_GLOW_IN_SAME_TEAM(para_pickup: Pickup);
procedure SET_PICKUP_OBJECT_ARROW_MARKER(para_pickup: Pickup; toggle: BOOL);
procedure ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
function GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(pickupHash: Hash): cint;
procedure SET_PICKUP_GENERATION_RANGE_MULTIPLIER(multiplier: cfloat);
function GET_PICKUP_GENERATION_RANGE_MULTIPLIER: cfloat;
procedure SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(p0: BOOL);
procedure SET_PICKUP_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
procedure SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
procedure SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
procedure SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
procedure SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(p0: cint);
procedure SET_PORTABLE_PICKUP_PERSIST(para_pickup: Pickup; toggle: BOOL);
procedure ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(para_pickup: Pickup; toggle: BOOL);
procedure FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(para_pickup: Pickup; toggle: BOOL);
procedure ALLOW_PICKUP_BY_NONE_PARTICIPANT(para_pickup: Pickup; toggle: BOOL);
procedure SUPPRESS_PICKUP_REWARD_TYPE(rewardType: cint; suppress: BOOL);
procedure CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION;
procedure CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(rewardType: cint);
procedure RENDER_FAKE_PICKUP_GLOW(x, y, z: cfloat; colorIndex: cint);
procedure SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(para_pickup: Pickup);
procedure SET_PICKUP_TRACK_DAMAGE_EVENTS(para_pickup: Pickup; toggle: BOOL);
procedure SET_ENTITY_FLAG_SUPPRESS_SHADOW(para_entity: Entity; toggle: BOOL);
procedure SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(obj: GTAObject; toggle: BOOL);
function GET_WEAPON_TYPE_FROM_PICKUP_TYPE(pickupHash: Hash): Hash;
function GET_PICKUP_TYPE_FROM_WEAPON_HASH(weaponHash: Hash): Hash;
function IS_PICKUP_WEAPON_OBJECT_VALID(obj: GTAObject): BOOL;
function GET_OBJECT_TINT_INDEX(obj: GTAObject): cint;
procedure SET_OBJECT_TINT_INDEX(obj: GTAObject; textureVariation: cint);
function SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(x, y, z, radius: cfloat; modelHash: Hash; textureVariation: cint): BOOL;
procedure SET_PROP_TINT_INDEX(p0, p1: Any);
function SET_PROP_LIGHT_COLOR(obj: GTAObject; p1: BOOL; r, g, b: cint): BOOL;
function IS_PROP_LIGHT_OVERRIDEN(obj: GTAObject): BOOL;
procedure SET_OBJECT_IS_VISIBLE_IN_MIRRORS(obj: GTAObject; toggle: BOOL);
procedure SET_OBJECT_SPEED_BOOST_AMOUNT(obj: GTAObject; p1: Any);
procedure SET_OBJECT_SPEED_BOOST_DURATION(obj: GTAObject; duration: cfloat);
function CONVERT_OLD_PICKUP_TYPE_TO_NEW(pickupHash: Hash): Hash;
procedure SET_FORCE_OBJECT_THIS_FRAME(x, y, z, p3: cfloat);
procedure ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(obj: GTAObject);
procedure SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(p0: Any);
procedure SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(para_entity: Entity; p1: Any);
procedure SET_DRIVE_ARTICULATED_JOINT(obj: GTAObject; toggle: BOOL; p2: cint);
procedure SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(obj: GTAObject; toggle: BOOL; p2: cint; _ped: Ped);
procedure SET_OBJECT_IS_A_PRESSURE_PLATE(obj: GTAObject; toggle: BOOL);
procedure SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(obj: GTAObject; p1: BOOL);
function GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(obj: GTAObject; p1: Any): BOOL;
function GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(p0, p1: Any): BOOL;
procedure SET_IS_OBJECT_ARTICULATED(obj: GTAObject; toggle: BOOL);
procedure SET_IS_OBJECT_BALL(obj: GTAObject; toggle: BOOL);
function IS_CONTROL_ENABLED(control, action: cint): BOOL;
function IS_CONTROL_PRESSED(control, action: cint): BOOL;
function IS_CONTROL_RELEASED(control, action: cint): BOOL;
function IS_CONTROL_JUST_PRESSED(control, action: cint): BOOL;
function IS_CONTROL_JUST_RELEASED(control, action: cint): BOOL;
function GET_CONTROL_VALUE(control, action: cint): cint;
function GET_CONTROL_NORMAL(control, action: cint): cfloat;
procedure SET_USE_ADJUSTED_MOUSE_COORDS(toggle: BOOL);
function GET_CONTROL_UNBOUND_NORMAL(control, action: cint): cfloat;
function SET_CONTROL_VALUE_NEXT_FRAME(control, action: cint; value: cfloat): BOOL;
function IS_DISABLED_CONTROL_PRESSED(control, action: cint): BOOL;
function IS_DISABLED_CONTROL_RELEASED(control, action: cint): BOOL;
function IS_DISABLED_CONTROL_JUST_PRESSED(control, action: cint): BOOL;
function IS_DISABLED_CONTROL_JUST_RELEASED(control, action: cint): BOOL;
function GET_DISABLED_CONTROL_NORMAL(control, action: cint): cfloat;
function GET_DISABLED_CONTROL_UNBOUND_NORMAL(control, action: cint): cfloat;
function GET_CONTROL_HOW_LONG_AGO(control: cint): cint;
function IS_USING_KEYBOARD_AND_MOUSE(control: cint): BOOL;
function IS_USING_CURSOR(control: cint): BOOL;
function SET_CURSOR_POSITION(x, y: cfloat): BOOL;
function IS_USING_REMOTE_PLAY(control: cint): BOOL;
function HAVE_CONTROLS_CHANGED(control: cint): BOOL;
function GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(control, action: cint; allowXOSwap: BOOL): PChar;
function GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(control, controlGroup: cint; allowXOSwap: BOOL): PChar;
procedure SET_CONTROL_LIGHT_EFFECT_COLOR(control, red, green, blue: cint);
procedure CLEAR_CONTROL_LIGHT_EFFECT(control: cint);
procedure SET_CONTROL_SHAKE(control, duration, frequency: cint);
procedure SET_CONTROL_TRIGGER_SHAKE(control, leftDuration, leftFrequency, rightDuration, rightFrequency: cint);
procedure STOP_CONTROL_SHAKE(control: cint);
procedure SET_CONTROL_SHAKE_SUPPRESSED_ID(control, uniqueId: cint);
procedure CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(control: cint);
function IS_LOOK_INVERTED: BOOL;
function IS_MOUSE_LOOK_INVERTED: BOOL;
function GET_LOCAL_PLAYER_AIM_STATE: cint;
function GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE: cint;
function GET_IS_USING_ALTERNATE_HANDBRAKE: BOOL;
function GET_IS_USING_ALTERNATE_DRIVEBY: BOOL;
function GET_ALLOW_MOVEMENT_WHILE_ZOOMED: BOOL;
procedure SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(toggle: BOOL);
procedure SET_INPUT_EXCLUSIVE(control, action: cint);
procedure DISABLE_CONTROL_ACTION(control, action: cint; disableRelatedActions: BOOL);
procedure ENABLE_CONTROL_ACTION(control, action: cint; enableRelatedActions: BOOL);
procedure DISABLE_ALL_CONTROL_ACTIONS(control: cint);
procedure ENABLE_ALL_CONTROL_ACTIONS(control: cint);
function INIT_PC_SCRIPTED_CONTROLS(schemeName: PChar): BOOL;
function SWITCH_PC_SCRIPTED_CONTROLS(schemeName: PChar): BOOL;
procedure SHUTDOWN_PC_SCRIPTED_CONTROLS;
procedure ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(control: cint);
procedure SET_ROADS_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; nodeEnabled, unknown2: BOOL);
procedure SET_ROADS_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; unknown1, unknown2, unknown3: BOOL);
procedure SET_PED_PATHS_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6: BOOL; p7: Any);
function GET_SAFE_COORD_FOR_PED(x, y, z: cfloat; onGround: BOOL; outPosition: PVector3; flags: cint): BOOL;
function GET_CLOSEST_VEHICLE_NODE(x, y, z: cfloat; outPosition: PVector3; nodeFlags: cint; p5, p6: cfloat): BOOL;
function GET_CLOSEST_MAJOR_VEHICLE_NODE(x, y, z: cfloat; outPosition: PVector3; unknown1, unknown2: cfloat): BOOL;
function GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z: cfloat; outPosition: PVector3; outHeading: pcfloat; nodeType: cint; p6, p7: cfloat): BOOL;
function GET_NTH_CLOSEST_VEHICLE_NODE(x, y, z: cfloat; nthClosest: cint; outPosition: PVector3; nodeFlags: cint; unknown1, unknown2: cfloat): BOOL;
function GET_NTH_CLOSEST_VEHICLE_NODE_ID(x, y, z: cfloat; nth, nodeFlags: cint; p5, p6: cfloat): cint;
function GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z: cfloat; nthClosest: cint; outPosition: PVector3; outHeading: pcfloat; outNumLanes: pcint; nodeFlags: cint; unknown3, unknown4: cfloat): BOOL;
function GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(x, y, z: cfloat; nthClosest: cint; outPosition: PVector3; outHeading: pcfloat; nodeFlags: cint; p7, p8: cfloat): cint;
function GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(x, y, z, desiredX, desiredY, desiredZ: cfloat; nthClosest: cint; outPosition: PVector3; outHeading: pcfloat; nodeFlags: cint; p10, p11: cfloat): BOOL;
function GET_VEHICLE_NODE_PROPERTIES(x, y, z: cfloat; density, flags: pcint): BOOL;
function IS_VEHICLE_NODE_ID_VALID(vehicleNodeId: cint): BOOL;
procedure GET_VEHICLE_NODE_POSITION(nodeId: cint; outPosition: PVector3);
function GET_VEHICLE_NODE_IS_GPS_ALLOWED(nodeID: cint): BOOL;
function GET_VEHICLE_NODE_IS_SWITCHED_OFF(nodeID: cint): BOOL;
function GET_CLOSEST_ROAD(x, y, z, p3: cfloat; p4: cint; p5, p6: PVector3; p7, p8: PAny; p9: pcfloat; p10: BOOL): BOOL;
function LOAD_ALL_PATH_NODES(_set: BOOL): BOOL;
procedure SET_ALLOW_STREAM_PROLOGUE_NODES(toggle: BOOL);
procedure SET_ALLOW_STREAM_HEIST_ISLAND_NODES(_type: cint);
function ARE_NODES_LOADED_FOR_AREA(x1, y1, x2, y2: cfloat): BOOL;
function REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(x1, y1, x2, y2: cfloat): BOOL;
procedure SET_ROADS_BACK_TO_ORIGINAL(p0, p1, p2, p3, p4, p5: cfloat; p6: Any);
procedure SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; p7: Any);
procedure SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
procedure ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(p0, p1, p2, p3, p4, p5, p6: Any);
procedure SET_PED_PATHS_BACK_TO_ORIGINAL(x1, y1, z1, x2, y2, z2: cfloat; p6: Any);
function GET_RANDOM_VEHICLE_NODE(x, y, z, radius: cfloat; p4, p5, p6: BOOL; outPosition: PVector3; nodeId: pcint): BOOL;
function GET_SPAWN_COORDS_FOR_VEHICLE_NODE(nodeAddress: cint; towardsCoorsX, towardsCoorsY, towardsCoorsZ: cfloat; centrePoint: PVector3; heading: pcfloat): Vector3;
procedure GET_STREET_NAME_AT_COORD(x, y, z: cfloat; streetName, crossingRoad: PHash);
function GENERATE_DIRECTIONS_TO_COORD(x, y, z: cfloat; p3: BOOL; direction: pcint; p5, distToNxJunction: pcfloat): cint;
procedure SET_IGNORE_NO_GPS_FLAG(toggle: BOOL);
procedure SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(toggle: BOOL);
procedure SET_GPS_DISABLED_ZONE(x1, y1, z1, x2, y2, z3: cfloat);
function GET_GPS_BLIP_ROUTE_LENGTH: cint;
function GET_POS_ALONG_GPS_TYPE_ROUTE(_result: PVector3; p1: BOOL; p2: cfloat; p3: cint): BOOL;
function GET_GPS_BLIP_ROUTE_FOUND: BOOL;
function GET_ROAD_BOUNDARY_USING_HEADING(x, y, z, heading: cfloat; outPosition: PVector3): BOOL;
function GET_POSITION_BY_SIDE_OF_ROAD(x, y, z: cfloat; p3: cint; outPosition: PVector3): BOOL;
function IS_POINT_ON_ROAD(x, y, z: cfloat; veh: Vehicle): BOOL;
function GET_NEXT_GPS_DISABLED_ZONE_INDEX: cint;
procedure SET_GPS_DISABLED_ZONE_AT_INDEX(x1, y1, z1, x2, y2, z2: cfloat; index: cint);
procedure CLEAR_GPS_DISABLED_ZONE_AT_INDEX(index: cint);
procedure ADD_NAVMESH_REQUIRED_REGION(x, y, radius: cfloat);
procedure REMOVE_NAVMESH_REQUIRED_REGIONS;
function IS_NAVMESH_REQUIRED_REGION_IN_USE: BOOL;
procedure DISABLE_NAVMESH_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; toggle: BOOL);
function ARE_ALL_NAVMESH_REGIONS_LOADED: BOOL;
function IS_NAVMESH_LOADED_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
function GET_NUM_NAVMESHES_EXISTING_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat): cint;
function ADD_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6: cfloat; p7: BOOL; p8: Any): cint;
procedure UPDATE_NAVMESH_BLOCKING_OBJECT(p0: Any; p1, p2, p3, p4, p5, p6, p7: cfloat; p8: Any);
procedure REMOVE_NAVMESH_BLOCKING_OBJECT(p0: Any);
function DOES_NAVMESH_BLOCKING_OBJECT_EXIST(p0: Any): BOOL;
function GET_APPROX_HEIGHT_FOR_POINT(x, y: cfloat): cfloat;
function GET_APPROX_HEIGHT_FOR_AREA(x1, y1, x2, y2: cfloat): cfloat;
function GET_APPROX_FLOOR_FOR_POINT(x, y: cfloat): cfloat;
function GET_APPROX_FLOOR_FOR_AREA(x1, y1, x2, y2: cfloat): cfloat;
function CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(x1, y1, z1, x2, y2, z2: cfloat): cfloat;
function CREATE_PED(pedType: cint; modelHash: Hash; x, y, z, heading: cfloat; isNetwork, bScriptHostPed: BOOL): Ped;
procedure DELETE_PED(_ped: PPed);
function CLONE_PED(_ped: Ped; isNetwork, bScriptHostPed, copyHeadBlendFlag: BOOL): Ped;
function CLONE_PED_ALT(_ped: Ped; isNetwork, bScriptHostPed, copyHeadBlendFlag, p4: BOOL): Ped;
procedure CLONE_PED_TO_TARGET(_ped, targetPed: Ped);
procedure CLONE_PED_TO_TARGET_ALT(_ped, targetPed: Ped; p2: BOOL);
function IS_PED_IN_VEHICLE(_ped: Ped; veh: Vehicle; atGetIn: BOOL): BOOL;
function IS_PED_IN_MODEL(_ped: Ped; modelHash: Hash): BOOL;
function IS_PED_IN_ANY_VEHICLE(_ped: Ped; atGetIn: BOOL): BOOL;
function IS_COP_PED_IN_AREA_3D(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
function IS_PED_INJURED(_ped: Ped): BOOL;
function IS_PED_HURT(_ped: Ped): BOOL;
function IS_PED_FATALLY_INJURED(_ped: Ped): BOOL;
function IS_PED_DEAD_OR_DYING(_ped: Ped; p1: BOOL): BOOL;
function IS_CONVERSATION_PED_DEAD(_ped: Ped): BOOL;
function IS_PED_AIMING_FROM_COVER(_ped: Ped): BOOL;
function IS_PED_RELOADING(_ped: Ped): BOOL;
function IS_PED_A_PLAYER(_ped: Ped): BOOL;
function CREATE_PED_INSIDE_VEHICLE(veh: Vehicle; pedType: cint; modelHash: Hash; seat: cint; isNetwork, bScriptHostPed: BOOL): Ped;
procedure SET_PED_DESIRED_HEADING(_ped: Ped; heading: cfloat);
procedure FORCE_ALL_HEADING_VALUES_TO_ALIGN(_ped: Ped);
function IS_PED_FACING_PED(_ped, otherPed: Ped; angle: cfloat): BOOL;
function IS_PED_IN_MELEE_COMBAT(_ped: Ped): BOOL;
function IS_PED_STOPPED(_ped: Ped): BOOL;
function IS_PED_SHOOTING_IN_AREA(_ped: Ped; x1, y1, z1, x2, y2, z2: cfloat; p7, p8: BOOL): BOOL;
function IS_ANY_PED_SHOOTING_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6, p7: BOOL): BOOL;
function IS_PED_SHOOTING(_ped: Ped): BOOL;
procedure SET_PED_ACCURACY(_ped: Ped; accuracy: cint);
function GET_PED_ACCURACY(_ped: Ped): cint;
procedure SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(multiplier: cfloat);
function IS_PED_MODEL(_ped: Ped; modelHash: Hash): BOOL;
procedure EXPLODE_PED_HEAD(_ped: Ped; weaponHash: Hash);
procedure REMOVE_PED_ELEGANTLY(_ped: PPed);
procedure ADD_ARMOUR_TO_PED(_ped: Ped; amount: cint);
procedure SET_PED_ARMOUR(_ped: Ped; amount: cint);
procedure SET_PED_INTO_VEHICLE(_ped: Ped; veh: Vehicle; seatIndex: cint);
procedure SET_PED_ALLOW_VEHICLES_OVERRIDE(_ped: Ped; toggle: BOOL);
function CAN_CREATE_RANDOM_PED(p0: BOOL): BOOL;
function CREATE_RANDOM_PED(posX, posY, posZ: cfloat): Ped;
function CREATE_RANDOM_PED_AS_DRIVER(veh: Vehicle; returnHandle: BOOL): Ped;
function CAN_CREATE_RANDOM_DRIVER: BOOL;
function CAN_CREATE_RANDOM_BIKE_RIDER: BOOL;
procedure SET_PED_MOVE_ANIMS_BLEND_OUT(_ped: Ped);
procedure SET_PED_CAN_BE_DRAGGED_OUT(_ped: Ped; toggle: BOOL);
procedure SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(toggle: BOOL);
function IS_PED_MALE(_ped: Ped): BOOL;
function IS_PED_HUMAN(_ped: Ped): BOOL;
function GET_VEHICLE_PED_IS_IN(_ped: Ped; includeEntering: BOOL): Vehicle;
procedure RESET_PED_LAST_VEHICLE(_ped: Ped);
procedure SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
procedure SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(p0, p1: cfloat);
procedure SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME;
procedure SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(x, y, z: cfloat);
procedure SET_PED_NON_CREATION_AREA(x1, y1, z1, x2, y2, z2: cfloat);
procedure CLEAR_PED_NON_CREATION_AREA;
procedure INSTANTLY_FILL_PED_POPULATION;
function IS_PED_ON_MOUNT(_ped: Ped): BOOL;
function GET_MOUNT(_ped: Ped): Ped;
function IS_PED_ON_VEHICLE(_ped: Ped): BOOL;
function IS_PED_ON_SPECIFIC_VEHICLE(_ped: Ped; veh: Vehicle): BOOL;
procedure SET_PED_MONEY(_ped: Ped; amount: cint);
function GET_PED_MONEY(_ped: Ped): cint;
procedure SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(p0: cfloat; p1: Any);
procedure SET_AMBIENT_PEDS_DROP_MONEY(p0: BOOL);
procedure SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(p0: BOOL);
procedure SET_PED_SUFFERS_CRITICAL_HITS(_ped: Ped; toggle: BOOL);
procedure SET_PED_UPPER_BODY_DAMAGE_ONLY(_ped: Ped; toggle: BOOL);
function IS_PED_SITTING_IN_VEHICLE(_ped: Ped; veh: Vehicle): BOOL;
function IS_PED_SITTING_IN_ANY_VEHICLE(_ped: Ped): BOOL;
function IS_PED_ON_FOOT(_ped: Ped): BOOL;
function IS_PED_ON_ANY_BIKE(_ped: Ped): BOOL;
function IS_PED_PLANTING_BOMB(_ped: Ped): BOOL;
function GET_DEAD_PED_PICKUP_COORDS(_ped: Ped; p1, p2: cfloat): Vector3;
function IS_PED_IN_ANY_BOAT(_ped: Ped): BOOL;
function IS_PED_IN_ANY_SUB(_ped: Ped): BOOL;
function IS_PED_IN_ANY_HELI(_ped: Ped): BOOL;
function IS_PED_IN_ANY_PLANE(_ped: Ped): BOOL;
function IS_PED_IN_FLYING_VEHICLE(_ped: Ped): BOOL;
procedure SET_PED_DIES_IN_WATER(_ped: Ped; toggle: BOOL);
function GET_PED_DIES_IN_WATER(_ped: Ped): BOOL;
procedure SET_PED_DIES_IN_SINKING_VEHICLE(_ped: Ped; toggle: BOOL);
function GET_PED_ARMOUR(_ped: Ped): cint;
procedure SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_BE_SHOT_IN_VEHICLE(_ped: Ped; toggle: BOOL);
function GET_PED_LAST_DAMAGE_BONE(_ped: Ped; outBone: pcint): BOOL;
procedure CLEAR_PED_LAST_DAMAGE_BONE(_ped: Ped);
procedure SET_AI_WEAPON_DAMAGE_MODIFIER(value: cfloat);
procedure RESET_AI_WEAPON_DAMAGE_MODIFIER;
procedure SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(modifier: cfloat);
procedure RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER;
procedure SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(_ped: Ped; p1: BOOL);
procedure SET_PED_CAN_BE_TARGETTED(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_BE_TARGETTED_BY_TEAM(_ped: Ped; team: cint; toggle: BOOL);
procedure SET_PED_CAN_BE_TARGETTED_BY_PLAYER(_ped: Ped; plyr: Player; toggle: BOOL);
procedure SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(_ped: Ped; toggle: BOOL);
procedure SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(_ped: Ped; toggle: BOOL);
function IS_PED_IN_ANY_POLICE_VEHICLE(_ped: Ped): BOOL;
procedure FORCE_PED_TO_OPEN_PARACHUTE(_ped: Ped);
function IS_PED_IN_PARACHUTE_FREE_FALL(_ped: Ped): BOOL;
function IS_PED_FALLING(_ped: Ped): BOOL;
function IS_PED_JUMPING(_ped: Ped): BOOL;
function IS_PED_LANDING(p0: Any): BOOL;
function IS_PED_DOING_A_BEAST_JUMP(p0: Any): BOOL;
function IS_PED_CLIMBING(_ped: Ped): BOOL;
function IS_PED_VAULTING(_ped: Ped): BOOL;
function IS_PED_DIVING(_ped: Ped): BOOL;
function IS_PED_JUMPING_OUT_OF_VEHICLE(_ped: Ped): BOOL;
function IS_PED_OPENING_DOOR(_ped: Ped): BOOL;
function GET_PED_PARACHUTE_STATE(_ped: Ped): cint;
function GET_PED_PARACHUTE_LANDING_TYPE(_ped: Ped): cint;
procedure SET_PED_PARACHUTE_TINT_INDEX(_ped: Ped; tintIndex: cint);
procedure GET_PED_PARACHUTE_TINT_INDEX(_ped: Ped; outTintIndex: pcint);
procedure SET_PED_RESERVE_PARACHUTE_TINT_INDEX(_ped: Ped; p1: Any);
function CREATE_PARACHUTE_BAG_OBJECT(_ped: Ped; p1, p2: BOOL): GTAObject;
procedure SET_PED_DUCKING(_ped: Ped; toggle: BOOL);
function IS_PED_DUCKING(_ped: Ped): BOOL;
function IS_PED_IN_ANY_TAXI(_ped: Ped): BOOL;
procedure SET_PED_ID_RANGE(_ped: Ped; value: cfloat);
procedure SET_PED_HIGHLY_PERCEPTIVE(_ped: Ped; toggle: BOOL);
procedure SET_COP_PERCEPTION_OVERRIDES(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6: cfloat);
procedure SET_PED_INJURED_ON_GROUND_BEHAVIOUR(_ped: Ped; p1: cfloat);
procedure DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(_ped: Ped);
procedure SET_PED_SEEING_RANGE(_ped: Ped; value: cfloat);
procedure SET_PED_HEARING_RANGE(_ped: Ped; value: cfloat);
procedure SET_PED_VISUAL_FIELD_MIN_ANGLE(_ped: Ped; value: cfloat);
procedure SET_PED_VISUAL_FIELD_MAX_ANGLE(_ped: Ped; value: cfloat);
procedure SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(_ped: Ped; angle: cfloat);
procedure SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(_ped: Ped; angle: cfloat);
procedure SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(_ped: Ped; range: cfloat);
procedure SET_PED_VISUAL_FIELD_CENTER_ANGLE(_ped: Ped; angle: cfloat);
function GET_PED_VISUAL_FIELD_CENTER_ANGLE(_ped: Ped): cfloat;
procedure SET_PED_STEALTH_MOVEMENT(_ped: Ped; p1: BOOL; action: PChar);
function GET_PED_STEALTH_MOVEMENT(_ped: Ped): BOOL;
function CREATE_GROUP(unused: cint): cint;
procedure SET_PED_AS_GROUP_LEADER(_ped: Ped; groupId: cint);
procedure SET_PED_AS_GROUP_MEMBER(_ped: Ped; groupId: cint);
procedure SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(pedHandle: Ped; groupHandle: cint; toggle: BOOL);
procedure REMOVE_GROUP(groupId: cint);
procedure REMOVE_PED_FROM_GROUP(_ped: Ped);
function IS_PED_GROUP_MEMBER(_ped: Ped; groupId: cint): BOOL;
function IS_PED_HANGING_ON_TO_VEHICLE(_ped: Ped): BOOL;
procedure SET_GROUP_SEPARATION_RANGE(groupHandle: cint; separationRange: cfloat);
procedure SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(_ped: Ped; ms: cint);
function IS_PED_PRONE(_ped: Ped): BOOL;
function IS_PED_IN_COMBAT(_ped, target: Ped): BOOL;
function GET_PED_TARGET_FROM_COMBAT_PED(_ped: Ped; p1: Any): Entity;
function CAN_PED_IN_COMBAT_SEE_TARGET(_ped, target: Ped): BOOL;
function IS_PED_DOING_DRIVEBY(_ped: Ped): BOOL;
function IS_PED_JACKING(_ped: Ped): BOOL;
function IS_PED_BEING_JACKED(_ped: Ped): BOOL;
function IS_PED_BEING_STUNNED(_ped: Ped; p1: cint): BOOL;
function GET_PEDS_JACKER(_ped: Ped): Ped;
function GET_JACK_TARGET(_ped: Ped): Ped;
function IS_PED_FLEEING(_ped: Ped): BOOL;
function IS_PED_IN_COVER(_ped: Ped; exceptUseWeapon: BOOL): BOOL;
function IS_PED_IN_COVER_FACING_LEFT(_ped: Ped): BOOL;
function IS_PED_IN_HIGH_COVER(_ped: Ped): BOOL;
function IS_PED_GOING_INTO_COVER(_ped: Ped): BOOL;
function SET_PED_PINNED_DOWN(_ped: Ped; pinned: BOOL; i: cint): BOOL;
function _HAS_PED_CLEAR_LOS_TO_ENTITY(_ped: Ped; para_entity: Entity; x, y, z: cfloat; p5: cint; p6, p7: BOOL): BOOL;
function GET_SEAT_PED_IS_TRYING_TO_ENTER(_ped: Ped): cint;
function GET_VEHICLE_PED_IS_TRYING_TO_ENTER(_ped: Ped): Vehicle;
function GET_PED_SOURCE_OF_DEATH(_ped: Ped): Entity;
function GET_PED_CAUSE_OF_DEATH(_ped: Ped): Hash;
function GET_PED_TIME_OF_DEATH(_ped: Ped): cint;
function COUNT_PEDS_IN_COMBAT_WITH_TARGET(_ped: Ped): cint;
function COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(_ped: Ped; x, y, z, radius: cfloat): cint;
procedure SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(_ped: Ped; para_hash: Hash);
procedure SET_PED_RELATIONSHIP_GROUP_HASH(_ped: Ped; para_hash: Hash);
procedure SET_RELATIONSHIP_BETWEEN_GROUPS(relationship: cint; group1, group2: Hash);
procedure CLEAR_RELATIONSHIP_BETWEEN_GROUPS(relationship: cint; group1, group2: Hash);
function ADD_RELATIONSHIP_GROUP(name: PChar; groupHash: PHash): BOOL;
procedure REMOVE_RELATIONSHIP_GROUP(groupHash: Hash);
function DOES_RELATIONSHIP_GROUP_EXIST(groupHash: Hash): BOOL;
function GET_RELATIONSHIP_BETWEEN_PEDS(ped1, ped2: Ped): cint;
function GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(_ped: Ped): Hash;
function GET_PED_RELATIONSHIP_GROUP_HASH(_ped: Ped): Hash;
function GET_RELATIONSHIP_BETWEEN_GROUPS(group1, group2: Hash): cint;
procedure SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(group: Hash; p1: BOOL);
procedure TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(_ped: Ped; p1: Any; p2: cfloat; para_hash: Hash; p4, p5: Any);
procedure SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(_ped: Ped; toggle: BOOL);
procedure SET_PED_TO_INFORM_RESPECTED_FRIENDS(_ped: Ped; radius: cfloat; maxFriends: cint);
function IS_PED_RESPONDING_TO_EVENT(_ped: Ped; event: Any): BOOL;
function GET_POS_FROM_FIRED_EVENT(_ped: Ped; eventType: cint; outData: PAny): BOOL;
procedure SET_PED_FIRING_PATTERN(_ped: Ped; patternHash: Hash);
procedure SET_PED_SHOOT_RATE(_ped: Ped; shootRate: cint);
procedure SET_COMBAT_FLOAT(_ped: Ped; combatType: cint; p2: cfloat);
function GET_COMBAT_FLOAT(_ped: Ped; p1: cint): cfloat;
procedure GET_GROUP_SIZE(groupID: cint; p1: PAny; sizeInMembers: pcint);
function DOES_GROUP_EXIST(groupId: cint): BOOL;
function GET_PED_GROUP_INDEX(_ped: Ped): cint;
function IS_PED_IN_GROUP(_ped: Ped): BOOL;
function GET_PLAYER_PED_IS_FOLLOWING(_ped: Ped): Player;
procedure SET_GROUP_FORMATION(groupId, formationType: cint);
procedure SET_GROUP_FORMATION_SPACING(groupId: cint; x, y, z: cfloat);
procedure RESET_GROUP_FORMATION_DEFAULT_SPACING(groupHandle: cint);
function GET_VEHICLE_PED_IS_USING(_ped: Ped): Vehicle;
function GET_VEHICLE_PED_IS_ENTERING(_ped: Ped): Vehicle;
procedure SET_PED_GRAVITY(_ped: Ped; toggle: BOOL);
procedure APPLY_DAMAGE_TO_PED(_ped: Ped; damageAmount: cint; p2: BOOL; p3: Any; weaponType: Hash);
function GET_TIME_PED_DAMAGED_BY_WEAPON(_ped: Ped; weaponHash: Hash): cint;
procedure SET_PED_ALLOWED_TO_DUCK(_ped: Ped; toggle: BOOL);
procedure SET_PED_NEVER_LEAVES_GROUP(_ped: Ped; toggle: BOOL);
function GET_PED_TYPE(_ped: Ped): cint;
procedure SET_PED_AS_COP(_ped: Ped; toggle: BOOL);
procedure SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(toggle: BOOL);
procedure SET_PED_MAX_HEALTH(_ped: Ped; value: cint);
function GET_PED_MAX_HEALTH(_ped: Ped): cint;
procedure SET_PED_MAX_TIME_IN_WATER(_ped: Ped; value: cfloat);
procedure SET_PED_MAX_TIME_UNDERWATER(_ped: Ped; value: cfloat);
procedure SET_CORPSE_RAGDOLL_FRICTION(_ped: Ped; p1: cfloat);
procedure SET_PED_VEHICLE_FORCED_SEAT_USAGE(_ped: Ped; veh: Vehicle; seatIndex, flags: cint; p4: Any);
procedure CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(_ped: Ped);
procedure SET_PED_CAN_BE_KNOCKED_OFF_BIKE(p0, p1: Any);
procedure SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(_ped: Ped; state: cint);
function CAN_KNOCK_PED_OFF_VEHICLE(_ped: Ped): BOOL;
procedure KNOCK_PED_OFF_VEHICLE(_ped: Ped);
procedure SET_PED_COORDS_NO_GANG(_ped: Ped; posX, posY, posZ: cfloat);
function GET_PED_AS_GROUP_MEMBER(groupID, memberNumber: cint): Ped;
function GET_PED_AS_GROUP_LEADER(groupID: cint): Ped;
procedure SET_PED_KEEP_TASK(_ped: Ped; toggle: BOOL);
procedure SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(_ped: Ped; toggle: BOOL);
function IS_PED_SWIMMING(_ped: Ped): BOOL;
function IS_PED_SWIMMING_UNDER_WATER(_ped: Ped): BOOL;
procedure SET_PED_COORDS_KEEP_VEHICLE(_ped: Ped; posX, posY, posZ: cfloat);
procedure SET_PED_DIES_IN_VEHICLE(_ped: Ped; toggle: BOOL);
procedure SET_CREATE_RANDOM_COPS(toggle: BOOL);
procedure SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(toggle: BOOL);
procedure SET_CREATE_RANDOM_COPS_ON_SCENARIOS(toggle: BOOL);
function CAN_CREATE_RANDOM_COPS: BOOL;
procedure SET_PED_AS_ENEMY(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_SMASH_GLASS(_ped: Ped; p1, p2: BOOL);
function IS_PED_IN_ANY_TRAIN(_ped: Ped): BOOL;
function IS_PED_GETTING_INTO_A_VEHICLE(_ped: Ped): BOOL;
function IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(_ped: Ped): BOOL;
procedure SET_ENABLE_HANDCUFFS(_ped: Ped; toggle: BOOL);
procedure SET_ENABLE_BOUND_ANKLES(_ped: Ped; toggle: BOOL);
procedure SET_ENABLE_SCUBA(_ped: Ped; toggle: BOOL);
procedure SET_CAN_ATTACK_FRIENDLY(_ped: Ped; toggle, p2: BOOL);
function GET_PED_ALERTNESS(_ped: Ped): cint;
procedure SET_PED_ALERTNESS(_ped: Ped; value: cint);
procedure SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(_ped: Ped; toggle: BOOL);
procedure SET_PED_MOVEMENT_CLIPSET(_ped: Ped; clipSet: PChar; transitionSpeed: cfloat);
procedure RESET_PED_MOVEMENT_CLIPSET(_ped: Ped; p1: cfloat);
procedure SET_PED_STRAFE_CLIPSET(_ped: Ped; clipSet: PChar);
procedure RESET_PED_STRAFE_CLIPSET(_ped: Ped);
procedure SET_PED_WEAPON_MOVEMENT_CLIPSET(_ped: Ped; clipSet: PChar);
procedure RESET_PED_WEAPON_MOVEMENT_CLIPSET(_ped: Ped);
procedure SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(_ped: Ped; clipset: PChar);
procedure CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(_ped: Ped);
procedure SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(_ped: Ped; p1: PChar);
procedure CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(_ped: Ped);
procedure CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(_ped: Ped);
procedure SET_PED_IN_VEHICLE_CONTEXT(_ped: Ped; context: Hash);
procedure RESET_PED_IN_VEHICLE_CONTEXT(_ped: Ped);
function IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(_ped: Ped; animDict, anim: PChar): BOOL;
procedure SET_PED_ALTERNATE_WALK_ANIM(_ped: Ped; animDict, animName: PChar; p3: cfloat; p4: BOOL);
procedure CLEAR_PED_ALTERNATE_WALK_ANIM(_ped: Ped; p1: cfloat);
procedure SET_PED_ALTERNATE_MOVEMENT_ANIM(_ped: Ped; stance: cint; animDictionary, animationName: PChar; p4: cfloat; p5: BOOL);
procedure CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(_ped: Ped; stance: cint; p2: cfloat);
procedure SET_PED_GESTURE_GROUP(_ped: Ped; animGroupGesture: PChar);
function GET_ANIM_INITIAL_OFFSET_POSITION(animDict, animName: PChar; x, y, z, xRot, yRot, zRot, p8: cfloat; p9: cint): Vector3;
function GET_ANIM_INITIAL_OFFSET_ROTATION(animDict, animName: PChar; x, y, z, xRot, yRot, zRot, p8: cfloat; p9: cint): Vector3;
function GET_PED_DRAWABLE_VARIATION(_ped: Ped; componentId: cint): cint;
function GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(_ped: Ped; componentId: cint): cint;
function GET_PED_TEXTURE_VARIATION(_ped: Ped; componentId: cint): cint;
function GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(_ped: Ped; componentId, drawableId: cint): cint;
function GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(_ped: Ped; propId: cint): cint;
function GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(_ped: Ped; propId, drawableId: cint): cint;
function GET_PED_PALETTE_VARIATION(_ped: Ped; componentId: cint): cint;
function GET_MP_OUTFIT_DATA_FROM_METADATA(p0, p1: PAny): BOOL;
function GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(p0: cint): cint;
function GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(p0: cint): cint;
function IS_PED_COMPONENT_VARIATION_VALID(_ped: Ped; componentId, drawableId, textureId: cint): BOOL;
procedure SET_PED_COMPONENT_VARIATION(_ped: Ped; componentId, drawableId, textureId, paletteId: cint);
procedure SET_PED_RANDOM_COMPONENT_VARIATION(_ped: Ped; p1: cint);
procedure SET_PED_RANDOM_PROPS(_ped: Ped);
procedure SET_PED_DEFAULT_COMPONENT_VARIATION(_ped: Ped);
procedure SET_PED_BLEND_FROM_PARENTS(_ped: Ped; p1, p2: Any; p3, p4: cfloat);
procedure SET_PED_HEAD_BLEND_DATA(_ped: Ped; shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID: cint; shapeMix, skinMix, thirdMix: cfloat; isParent: BOOL);
function GET_PED_HEAD_BLEND_DATA(_ped: Ped; headBlendData: PAny): BOOL;
procedure UPDATE_PED_HEAD_BLEND_DATA(_ped: Ped; shapeMix, skinMix, thirdMix: cfloat);
procedure SET_HEAD_BLEND_EYE_COLOR(_ped: Ped; index: cint);
function GET_HEAD_BLEND_EYE_COLOR(_ped: Ped): cint;
procedure SET_PED_HEAD_OVERLAY(_ped: Ped; overlayID, index: cint; opacity: cfloat);
function GET_PED_HEAD_OVERLAY(_ped: Ped; overlayID: cint): cint;
function GET_PED_HEAD_OVERLAY_NUM(overlayID: cint): cint;
procedure SET_PED_HEAD_OVERLAY_TINT(_ped: Ped; overlayID, colorType, colorID, secondColorID: cint);
procedure SET_PED_HAIR_TINT(_ped: Ped; colorID, highlightColorID: cint);
function GET_NUM_PED_HAIR_TINTS: cint;
function GET_NUM_PED_MAKEUP_TINTS: cint;
procedure GET_PED_HAIR_TINT_COLOR(hairColorIndex: cint; outR, outG, outB: pcint);
procedure GET_PED_MAKEUP_TINT_COLOR(makeupColorIndex: cint; outR, outG, outB: pcint);
function IS_PED_HAIR_TINT_FOR_CREATOR(colorId: cint): BOOL;
function GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(colorId: cint): cint;
function IS_PED_LIPSTICK_TINT_FOR_CREATOR(colorId: cint): BOOL;
function IS_PED_BLUSH_TINT_FOR_CREATOR(colorId: cint): BOOL;
function IS_PED_HAIR_TINT_FOR_BARBER(colorID: cint): BOOL;
function GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(colorID: cint): cint;
function IS_PED_LIPSTICK_TINT_FOR_BARBER(colorID: cint): BOOL;
function IS_PED_BLUSH_TINT_FOR_BARBER(colorID: cint): BOOL;
function IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(colorId: cint): BOOL;
function GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(modelHash: Hash; drawableId, textureId: cint): cint;
procedure SET_PED_MICRO_MORPH(_ped: Ped; index: cint; scale: cfloat);
function HAS_PED_HEAD_BLEND_FINISHED(_ped: Ped): BOOL;
procedure FINALIZE_HEAD_BLEND(_ped: Ped);
procedure SET_HEAD_BLEND_PALETTE_COLOR(_ped: Ped; r, g, b, id: cint);
procedure DISABLE_HEAD_BLEND_PALETTE_COLOR(_ped: Ped);
function GET_PED_HEAD_BLEND_FIRST_INDEX(_type: cint): cint;
function GET_PED_HEAD_BLEND_NUM_HEADS(_type: cint): cint;
function SET_PED_PRELOAD_VARIATION_DATA(_ped: Ped; slot, drawableId, textureId: cint): cint;
function HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(_ped: Ped): BOOL;
procedure RELEASE_PED_PRELOAD_VARIATION_DATA(_ped: Ped);
function SET_PED_PRELOAD_PROP_DATA(_ped: Ped; componentId, drawableId, TextureId: cint): cint;
function HAS_PED_PRELOAD_PROP_DATA_FINISHED(_ped: Ped): BOOL;
procedure RELEASE_PED_PRELOAD_PROP_DATA(_ped: Ped);
function GET_PED_PROP_INDEX(_ped: Ped; componentId: cint; p2: Any): cint;
procedure SET_PED_PROP_INDEX(_ped: Ped; componentId, drawableId, TextureId: cint; attach: BOOL; p5: Any);
procedure KNOCK_OFF_PED_PROP(_ped: Ped; p1, p2, p3, p4: BOOL);
procedure CLEAR_PED_PROP(_ped: Ped; propId: cint; p2: Any);
procedure CLEAR_ALL_PED_PROPS(_ped: Ped; p1: Any);
procedure DROP_AMBIENT_PROP(_ped: Ped);
function GET_PED_PROP_TEXTURE_INDEX(_ped: Ped; componentId: cint): cint;
procedure CLEAR_PED_PARACHUTE_PACK_VARIATION(_ped: Ped);
procedure SET_PED_SCUBA_GEAR_VARIATION(_ped: Ped);
procedure CLEAR_PED_SCUBA_GEAR_VARIATION(_ped: Ped);
function IS_USING_PED_SCUBA_GEAR_VARIATION(p0: Any): BOOL;
procedure SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(_ped: Ped; toggle: BOOL);
procedure SET_PED_BOUNDS_ORIENTATION(_ped: Ped; p1, p2, x, y, z: cfloat);
procedure REGISTER_TARGET(_ped, target: Ped);
procedure REGISTER_HATED_TARGETS_AROUND_PED(_ped: Ped; radius: cfloat);
function GET_RANDOM_PED_AT_COORD(x, y, z, xRadius, yRadius, zRadius: cfloat; pedType: cint): Ped;
function GET_CLOSEST_PED(x, y, z, radius: cfloat; p4, p5: BOOL; outPed: PPed; p7, p8: BOOL; pedType: cint): BOOL;
procedure SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(value: BOOL);
function GET_CAN_PED_BE_GRABBED_BY_SCRIPT(_ped: Ped; p1, p2, p3, p4, p5, p6, p7: BOOL; p8: Any): BOOL;
procedure SET_DRIVER_RACING_MODIFIER(driver: Ped; modifier: cfloat);
procedure SET_DRIVER_ABILITY(driver: Ped; ability: cfloat);
procedure SET_DRIVER_AGGRESSIVENESS(driver: Ped; aggressiveness: cfloat);
function CAN_PED_RAGDOLL(_ped: Ped): BOOL;
function SET_PED_TO_RAGDOLL(_ped: Ped; time1, time2, ragdollType: cint; p4, p5, p6: BOOL): BOOL;
function SET_PED_TO_RAGDOLL_WITH_FALL(_ped: Ped; time, p2, ragdollType: cint; x, y, z, velocity, p8, p9, p10, p11, p12, p13: cfloat): BOOL;
procedure SET_PED_RAGDOLL_ON_COLLISION(_ped: Ped; toggle: BOOL);
function IS_PED_RAGDOLL(_ped: Ped): BOOL;
function IS_PED_RUNNING_RAGDOLL_TASK(_ped: Ped): BOOL;
procedure SET_PED_RAGDOLL_FORCE_FALL(_ped: Ped);
procedure RESET_PED_RAGDOLL_TIMER(_ped: Ped);
procedure SET_PED_CAN_RAGDOLL(_ped: Ped; toggle: BOOL);
function IS_PED_RUNNING_MELEE_TASK(_ped: Ped): BOOL;
function IS_PED_RUNNING_MOBILE_PHONE_TASK(_ped: Ped): BOOL;
function IS_MOBILE_PHONE_TO_PED_EAR(_ped: Ped): BOOL;
procedure SET_RAGDOLL_BLOCKING_FLAGS(_ped: Ped; blockingFlag: cint);
procedure CLEAR_RAGDOLL_BLOCKING_FLAGS(_ped: Ped; blockingFlag: cint);
procedure SET_PED_ANGLED_DEFENSIVE_AREA(_ped: Ped; p1, p2, p3, p4, p5, p6, p7: cfloat; p8, p9: BOOL);
procedure SET_PED_SPHERE_DEFENSIVE_AREA(_ped: Ped; x, y, z, radius: cfloat; p5, p6: BOOL);
procedure SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(_ped, target: Ped; xOffset, yOffset, zOffset, radius: cfloat; p6: BOOL);
procedure SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(_ped: Ped; target: Vehicle; xOffset, yOffset, zOffset, radius: cfloat; p6: BOOL);
procedure SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(_ped, attachPed: Ped; p2, p3, p4, p5, p6, p7, p8: cfloat; p9, p10: BOOL);
procedure SET_PED_DEFENSIVE_AREA_DIRECTION(_ped: Ped; p1, p2, p3: cfloat; p4: BOOL);
procedure REMOVE_PED_DEFENSIVE_AREA(_ped: Ped; toggle: BOOL);
function GET_PED_DEFENSIVE_AREA_POSITION(_ped: Ped; p1: BOOL): Vector3;
function IS_PED_DEFENSIVE_AREA_ACTIVE(_ped: Ped; p1: BOOL): BOOL;
procedure SET_PED_PREFERRED_COVER_SET(_ped: Ped; itemSet: Any);
procedure REMOVE_PED_PREFERRED_COVER_SET(_ped: Ped);
procedure REVIVE_INJURED_PED(_ped: Ped);
procedure RESURRECT_PED(_ped: Ped);
procedure SET_PED_NAME_DEBUG(_ped: Ped; name: PChar);
function GET_PED_EXTRACTED_DISPLACEMENT(_ped: Ped; worldSpace: BOOL): Vector3;
procedure SET_PED_DIES_WHEN_INJURED(_ped: Ped; toggle: BOOL);
procedure SET_PED_ENABLE_WEAPON_BLOCKING(_ped: Ped; toggle: BOOL);
procedure SPECIAL_FUNCTION_DO_NOT_USE(_ped: Ped; p1: BOOL);
procedure RESET_PED_VISIBLE_DAMAGE(_ped: Ped);
procedure APPLY_PED_BLOOD_DAMAGE_BY_ZONE(_ped: Ped; p1: Any; p2, p3: cfloat; p4: Any);
procedure APPLY_PED_BLOOD(_ped: Ped; boneIndex: cint; xRot, yRot, zRot: cfloat; woundType: PChar);
procedure APPLY_PED_BLOOD_BY_ZONE(_ped: Ped; p1: cint; p2, p3: cfloat; p4: PChar);
procedure APPLY_PED_BLOOD_SPECIFIC(_ped: Ped; p1: cint; p2, p3, p4, p5: cfloat; p6: cint; p7: cfloat; p8: PChar);
procedure APPLY_PED_DAMAGE_DECAL(_ped: Ped; damageZone: cint; xOffset, yOffset, heading, scale, alpha: cfloat; variation: cint; fadeIn: BOOL; decalName: PChar);
procedure APPLY_PED_DAMAGE_PACK(_ped: Ped; damagePack: PChar; damage, mult: cfloat);
procedure CLEAR_PED_BLOOD_DAMAGE(_ped: Ped);
procedure CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(_ped: Ped; p1: cint);
procedure HIDE_PED_BLOOD_DAMAGE_BY_ZONE(_ped: Ped; p1: Any; p2: BOOL);
procedure CLEAR_PED_DAMAGE_DECAL_BY_ZONE(_ped: Ped; p1: cint; p2: PChar);
function GET_PED_DECORATIONS_STATE(_ped: Ped): cint;
procedure MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(_ped: Ped; p1: BOOL);
procedure CLEAR_PED_WETNESS(_ped: Ped);
procedure SET_PED_WETNESS_HEIGHT(_ped: Ped; height: cfloat);
procedure SET_PED_WETNESS_ENABLED_THIS_FRAME(_ped: Ped);
procedure SET_PED_WETNESS(_ped: Ped; wetLevel: cfloat);
procedure CLEAR_PED_ENV_DIRT(_ped: Ped);
procedure SET_PED_SWEAT(_ped: Ped; sweat: cfloat);
procedure ADD_PED_DECORATION_FROM_HASHES(_ped: Ped; collection, overlay: Hash);
procedure ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(_ped: Ped; collection, overlay: Hash);
function GET_PED_DECORATION_ZONE_FROM_HASHES(collection, overlay: Hash): cint;
procedure CLEAR_PED_DECORATIONS(_ped: Ped);
procedure CLEAR_PED_DECORATIONS_LEAVE_SCARS(_ped: Ped);
function WAS_PED_SKELETON_UPDATED(_ped: Ped): BOOL;
function GET_PED_BONE_COORDS(_ped: Ped; boneId: cint; offsetX, offsetY, offsetZ: cfloat): Vector3;
procedure CREATE_NM_MESSAGE(startImmediately: BOOL; messageId: cint);
procedure GIVE_PED_NM_MESSAGE(_ped: Ped);
function ADD_SCENARIO_BLOCKING_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6, p7, p8, p9: BOOL; p10: Any): cint;
procedure REMOVE_SCENARIO_BLOCKING_AREAS;
procedure REMOVE_SCENARIO_BLOCKING_AREA(p0: Any; p1: BOOL);
procedure SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(x, y, z, range: cfloat; p4: cint);
function DOES_SCENARIO_BLOCKING_AREA_EXISTS(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
function IS_PED_USING_SCENARIO(_ped: Ped; scenario: PChar): BOOL;
function IS_PED_USING_ANY_SCENARIO(_ped: Ped): BOOL;
function SET_PED_PANIC_EXIT_SCENARIO(p0, p1, p2, p3: Any): BOOL;
procedure TOGGLE_SCENARIO_PED_COWER_IN_PLACE(_ped: Ped; toggle: BOOL);
function TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(p0, p1, p2, p3: Any): BOOL;
function SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(p0, p1, p2, p3: Any): BOOL;
procedure SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(_ped: Ped);
procedure SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(_ped: Ped);
function SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(_ped: Ped; p1, p2, p3: Any): BOOL;
procedure SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(_ped: Ped; p1: BOOL);
procedure SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(p0: Any; p1: BOOL);
procedure SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(p0: Any; p1: BOOL);
function IS_PED_GESTURING(p0: Any): BOOL;
procedure RESET_FACIAL_IDLE_ANIM(_ped: Ped);
procedure PLAY_FACIAL_ANIM(_ped: Ped; animName, animDict: PChar);
procedure SET_FACIAL_CLIPSET(_ped: Ped; animDict: PChar);
procedure SET_FACIAL_IDLE_ANIM_OVERRIDE(_ped: Ped; animName, animDict: PChar);
procedure CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(_ped: Ped);
procedure SET_PED_CAN_PLAY_GESTURE_ANIMS(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_PLAY_VISEME_ANIMS(_ped: Ped; toggle, p2: BOOL);
procedure SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(_ped: Ped; p1: BOOL);
procedure SET_PED_CAN_PLAY_AMBIENT_ANIMS(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(_ped: Ped; toggle: BOOL);
procedure TRIGGER_IDLE_ANIMATION_ON_PED(_ped: Ped);
procedure SET_PED_CAN_ARM_IK(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_HEAD_IK(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_LEG_IK(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_TORSO_IK(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_TORSO_REACT_IK(_ped: Ped; p1: BOOL);
procedure SET_PED_CAN_TORSO_VEHICLE_IK(_ped: Ped; p1: BOOL);
procedure SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(_ped: Ped; toggle: BOOL);
function IS_PED_HEADTRACKING_PED(ped1, ped2: Ped): BOOL;
function IS_PED_HEADTRACKING_ENTITY(_ped: Ped; para_entity: Entity): BOOL;
procedure SET_PED_PRIMARY_LOOKAT(_ped, lookAt: Ped);
procedure SET_PED_CLOTH_PIN_FRAMES(p0, p1: Any);
procedure SET_PED_CLOTH_PACKAGE_INDEX(p0, p1: Any);
procedure SET_PED_CLOTH_PRONE(p0: Any; p1: BOOL);
procedure SET_PED_CONFIG_FLAG(_ped: Ped; flagId: cint; value: BOOL);
procedure SET_PED_RESET_FLAG(_ped: Ped; flagId: cint; doReset: BOOL);
function GET_PED_CONFIG_FLAG(_ped: Ped; flagId: cint; p2: BOOL): BOOL;
function GET_PED_RESET_FLAG(_ped: Ped; flagId: cint): BOOL;
procedure SET_PED_GROUP_MEMBER_PASSENGER_INDEX(_ped: Ped; index: cint);
procedure SET_PED_CAN_EVASIVE_DIVE(_ped: Ped; toggle: BOOL);
function IS_PED_EVASIVE_DIVING(_ped: Ped; evadingEntity: PEntity): BOOL;
procedure SET_PED_SHOOTS_AT_COORD(_ped: Ped; x, y, z: cfloat; toggle: BOOL);
procedure SET_PED_MODEL_IS_SUPPRESSED(modelHash: Hash; toggle: BOOL);
procedure STOP_ANY_PED_MODEL_BEING_SUPPRESSED;
procedure SET_PED_CAN_BE_TARGETED_WHEN_INJURED(_ped: Ped; toggle: BOOL);
procedure SET_PED_GENERATES_DEAD_BODY_EVENTS(_ped: Ped; toggle: BOOL);
procedure BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(_ped: Ped; toggle: BOOL);
procedure SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(p0, p1: Any);
procedure SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(_ped: Ped; toggle: BOOL);
procedure GIVE_PED_HELMET(_ped: Ped; cannotRemove: BOOL; helmetFlag, textureIndex: cint);
procedure REMOVE_PED_HELMET(_ped: Ped; instantly: BOOL);
function IS_PED_TAKING_OFF_HELMET(_ped: Ped): BOOL;
procedure SET_PED_HELMET(_ped: Ped; canWearHelmet: BOOL);
procedure SET_PED_HELMET_FLAG(_ped: Ped; helmetFlag: cint);
procedure SET_PED_HELMET_PROP_INDEX(_ped: Ped; propIndex: cint; p2: BOOL);
procedure SET_PED_HELMET_VISOR_PROP_INDICES(_ped: Ped; p1: BOOL; p2, p3: cint);
function IS_PED_HELMET_VISOR_UP(_ped: Ped): BOOL;
procedure SET_PED_HELMET_TEXTURE_INDEX(_ped: Ped; textureIndex: cint);
function IS_PED_WEARING_HELMET(_ped: Ped): BOOL;
procedure CLEAR_PED_STORED_HAT_PROP(_ped: Ped);
function GET_PED_HELMET_STORED_HAT_PROP_INDEX(_ped: Ped): cint;
function GET_PED_HELMET_STORED_HAT_TEX_INDEX(_ped: Ped): cint;
function IS_CURRENT_HEAD_PROP_A_HELMET(p0: Any): BOOL;
procedure SET_PED_TO_LOAD_COVER(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_COWER_IN_COVER(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_PEEK_IN_COVER(_ped: Ped; toggle: BOOL);
procedure SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(_ped: Ped; toggle: BOOL);
procedure SET_PED_LEG_IK_MODE(_ped: Ped; mode: cint);
procedure SET_PED_MOTION_BLUR(_ped: Ped; toggle: BOOL);
procedure SET_PED_CAN_SWITCH_WEAPON(_ped: Ped; toggle: BOOL);
procedure SET_PED_DIES_INSTANTLY_IN_WATER(_ped: Ped; toggle: BOOL);
procedure SET_LADDER_CLIMB_INPUT_STATE(_ped: Ped; p1: cint);
procedure STOP_PED_WEAPON_FIRING_WHEN_DROPPED(_ped: Ped);
procedure SET_SCRIPTED_ANIM_SEAT_OFFSET(_ped: Ped; p1: cfloat);
procedure SET_PED_COMBAT_MOVEMENT(_ped: Ped; combatMovement: cint);
function GET_PED_COMBAT_MOVEMENT(_ped: Ped): cint;
procedure SET_PED_COMBAT_ABILITY(_ped: Ped; abilityLevel: cint);
procedure SET_PED_COMBAT_RANGE(_ped: Ped; combatRange: cint);
function GET_PED_COMBAT_RANGE(_ped: Ped): cint;
procedure SET_PED_COMBAT_ATTRIBUTES(_ped: Ped; attributeId: cint; enabled: BOOL);
procedure SET_PED_TARGET_LOSS_RESPONSE(_ped: Ped; responseType: cint);
function IS_PED_PERFORMING_MELEE_ACTION(_ped: Ped): BOOL;
function IS_PED_PERFORMING_STEALTH_KILL(_ped: Ped): BOOL;
function IS_PED_PERFORMING_A_COUNTER_ATTACK(_ped: Ped): BOOL;
function IS_PED_BEING_STEALTH_KILLED(_ped: Ped): BOOL;
function GET_MELEE_TARGET_FOR_PED(_ped: Ped): Ped;
function WAS_PED_KILLED_BY_STEALTH(_ped: Ped): BOOL;
function WAS_PED_KILLED_BY_TAKEDOWN(_ped: Ped): BOOL;
function WAS_PED_KNOCKED_OUT(_ped: Ped): BOOL;
procedure SET_PED_FLEE_ATTRIBUTES(_ped: Ped; attributeFlags: cint; enable: BOOL);
procedure SET_PED_COWER_HASH(_ped: Ped; p1: PChar);
procedure SET_PED_STEERS_AROUND_DEAD_BODIES(_ped: Ped; toggle: BOOL);
procedure SET_PED_STEERS_AROUND_PEDS(_ped: Ped; toggle: BOOL);
procedure SET_PED_STEERS_AROUND_OBJECTS(_ped: Ped; toggle: BOOL);
procedure SET_PED_STEERS_AROUND_VEHICLES(_ped: Ped; toggle: BOOL);
procedure SET_PED_IS_AVOIDED_BY_OTHERS(p0: Any; p1: BOOL);
procedure SET_PED_INCREASED_AVOIDANCE_RADIUS(_ped: Ped);
procedure SET_PED_BLOCKS_PATHING_WHEN_DEAD(_ped: Ped; toggle: BOOL);
procedure SET_PED_NO_TIME_DELAY_BEFORE_SHOT(p0: Any);
function IS_ANY_PED_NEAR_POINT(x, y, z, radius: cfloat): BOOL;
procedure FORCE_PED_AI_AND_ANIMATION_UPDATE(_ped: Ped; p1, p2: BOOL);
function IS_PED_HEADING_TOWARDS_POSITION(_ped: Ped; x, y, z, p4: cfloat): BOOL;
procedure REQUEST_PED_VISIBILITY_TRACKING(_ped: Ped);
procedure REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(_ped: Ped; p1: BOOL);
procedure REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(_ped: Ped; p1: BOOL);
procedure REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(_ped: Ped; p1: BOOL);
function IS_TRACKED_PED_VISIBLE(_ped: Ped): BOOL;
function GET_TRACKED_PED_PIXELCOUNT(_ped: Ped): cint;
function IS_PED_TRACKED(_ped: Ped): BOOL;
function HAS_PED_RECEIVED_EVENT(_ped: Ped; eventId: cint): BOOL;
function CAN_PED_SEE_HATED_PED(ped1, ped2: Ped): BOOL;
function CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(_ped: Ped; p1: pcint): BOOL;
function CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(_ped: Ped; p1: pcint): BOOL;
function GET_PED_BONE_INDEX(_ped: Ped; boneId: cint): cint;
function GET_PED_RAGDOLL_BONE_INDEX(_ped: Ped; bone: cint): cint;
procedure SET_PED_ENVEFF_SCALE(_ped: Ped; value: cfloat);
function GET_PED_ENVEFF_SCALE(_ped: Ped): cfloat;
procedure SET_ENABLE_PED_ENVEFF_SCALE(_ped: Ped; toggle: BOOL);
procedure SET_PED_ENVEFF_CPV_ADD(_ped: Ped; p1: cfloat);
procedure SET_PED_ENVEFF_COLOR_MODULATOR(_ped: Ped; p1, p2, p3: cint);
procedure SET_PED_EMISSIVE_SCALE(_ped: Ped; intensity: cfloat);
function GET_PED_EMISSIVE_SCALE(_ped: Ped): cfloat;
function IS_PED_SHADER_READY(_ped: Ped): BOOL;
procedure SET_PED_ENABLE_CREW_EMBLEM(_ped: Ped; toggle: BOOL);
procedure REQUEST_RAGDOLL_BOUNDS_UPDATE(p0, p1: Any);
procedure SET_PED_AO_BLOB_RENDERING(_ped: Ped; toggle: BOOL);
function IS_PED_SHELTERED(_ped: Ped): BOOL;
function CREATE_SYNCHRONIZED_SCENE(x, y, z, roll, pitch, yaw: cfloat; p6: cint): cint;
function CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(x, y, z, radius: cfloat; obj: Hash): cint;
function IS_SYNCHRONIZED_SCENE_RUNNING(sceneId: cint): BOOL;
procedure SET_SYNCHRONIZED_SCENE_ORIGIN(sceneID: cint; x, y, z, roll, pitch, yaw: cfloat; p7: BOOL);
procedure SET_SYNCHRONIZED_SCENE_PHASE(sceneID: cint; phase: cfloat);
function GET_SYNCHRONIZED_SCENE_PHASE(sceneID: cint): cfloat;
procedure SET_SYNCHRONIZED_SCENE_RATE(sceneID: cint; rate: cfloat);
function GET_SYNCHRONIZED_SCENE_RATE(sceneID: cint): cfloat;
procedure SET_SYNCHRONIZED_SCENE_LOOPED(sceneID: cint; toggle: BOOL);
function IS_SYNCHRONIZED_SCENE_LOOPED(sceneID: cint): BOOL;
procedure SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID: cint; toggle: BOOL);
function IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID: cint): BOOL;
procedure ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(sceneID: cint; para_entity: Entity; boneIndex: cint);
procedure DETACH_SYNCHRONIZED_SCENE(sceneID: cint);
procedure TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(scene: cint);
function FORCE_PED_MOTION_STATE(_ped: Ped; motionStateHash: Hash; p2: BOOL; p3: cint; p4: BOOL): BOOL;
function GET_PED_CURRENT_MOVE_BLEND_RATIO(_ped: Ped; speedX, speedY: pcfloat): BOOL;
procedure SET_PED_MAX_MOVE_BLEND_RATIO(_ped: Ped; value: cfloat);
procedure SET_PED_MIN_MOVE_BLEND_RATIO(_ped: Ped; value: cfloat);
procedure SET_PED_MOVE_RATE_OVERRIDE(_ped: Ped; value: cfloat);
procedure SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(_ped: Ped; p1: cfloat);
function PED_HAS_SEXINESS_FLAG_SET(_ped: Ped; sexinessFlag: cint): BOOL;
function GET_PED_NEARBY_VEHICLES(_ped: Ped; sizeAndVehs: PAny): cint;
function GET_PED_NEARBY_PEDS(_ped: Ped; sizeAndPeds: PAny; ignore: cint): cint;
function HAVE_ALL_STREAMING_REQUESTS_COMPLETED(_ped: Ped): BOOL;
function IS_PED_USING_ACTION_MODE(_ped: Ped): BOOL;
procedure SET_PED_USING_ACTION_MODE(_ped: Ped; p1: BOOL; p2: cint; action: PChar);
procedure SET_MOVEMENT_MODE_OVERRIDE(_ped: Ped; name: PChar);
procedure SET_PED_CAPSULE(_ped: Ped; value: cfloat);
function REGISTER_PEDHEADSHOT(_ped: Ped): cint;
function REGISTER_PEDHEADSHOT_HIRES(_ped: Ped): cint;
function REGISTER_PEDHEADSHOT_TRANSPARENT(_ped: Ped): cint;
procedure UNREGISTER_PEDHEADSHOT(id: cint);
function IS_PEDHEADSHOT_VALID(id: cint): BOOL;
function IS_PEDHEADSHOT_READY(id: cint): BOOL;
function GET_PEDHEADSHOT_TXD_STRING(id: cint): PChar;
function REQUEST_PEDHEADSHOT_IMG_UPLOAD(id: cint): BOOL;
procedure RELEASE_PEDHEADSHOT_IMG_UPLOAD(id: cint);
function IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE: BOOL;
function HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED: BOOL;
function HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED: BOOL;
procedure SET_PED_HEATSCALE_OVERRIDE(_ped: Ped; heatScale: cfloat);
procedure DISABLE_PED_HEATSCALE_OVERRIDE(_ped: Ped);
procedure SPAWNPOINTS_START_SEARCH(p0, p1, p2, p3, p4: cfloat; interiorFlags: cint; scale: cfloat; duration: cint);
procedure SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; interiorFlags: cint; scale: cfloat; duration: cint);
procedure SPAWNPOINTS_CANCEL_SEARCH;
function SPAWNPOINTS_IS_SEARCH_ACTIVE: BOOL;
function SPAWNPOINTS_IS_SEARCH_COMPLETE: BOOL;
function SPAWNPOINTS_IS_SEARCH_FAILED: BOOL;
function SPAWNPOINTS_GET_NUM_SEARCH_RESULTS: cint;
procedure SPAWNPOINTS_GET_SEARCH_RESULT(randomInt: cint; x, y, z: pcfloat);
procedure SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(p0: cint; p1: pcint);
procedure SET_IK_TARGET(_ped: Ped; ikIndex: cint; entityLookAt: Entity; boneLookAt: cint; offsetX, offsetY, offsetZ: cfloat; p7: Any; blendInDuration, blendOutDuration: cint);
procedure FORCE_INSTANT_LEG_IK_SETUP(_ped: Ped);
procedure REQUEST_ACTION_MODE_ASSET(asset: PChar);
function HAS_ACTION_MODE_ASSET_LOADED(asset: PChar): BOOL;
procedure REMOVE_ACTION_MODE_ASSET(asset: PChar);
procedure REQUEST_STEALTH_MODE_ASSET(asset: PChar);
function HAS_STEALTH_MODE_ASSET_LOADED(asset: PChar): BOOL;
procedure REMOVE_STEALTH_MODE_ASSET(asset: PChar);
procedure SET_PED_LOD_MULTIPLIER(_ped: Ped; multiplier: cfloat);
procedure SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(_ped: Ped; toggle: BOOL; p2: cint);
procedure SET_FORCE_FOOTSTEP_UPDATE(_ped: Ped; toggle: BOOL);
procedure SET_FORCE_STEP_TYPE(_ped: Ped; p1: BOOL; _type, p3: cint);
function IS_ANY_HOSTILE_PED_NEAR_POINT(_ped: Ped; x, y, z, radius: cfloat): BOOL;
procedure SET_PED_CAN_PLAY_IN_CAR_IDLES(_ped: Ped; toggle: BOOL);
function IS_TARGET_PED_IN_PERCEPTION_AREA(_ped, targetPed: Ped; p2, p3, p4, p5: cfloat): BOOL;
procedure SET_POP_CONTROL_SPHERE_THIS_FRAME(x, y, z, min, max: cfloat);
procedure FORCE_ZERO_MASS_IN_COLLISIONS(_ped: Ped);
procedure SET_DISABLE_HIGH_FALL_DEATH(_ped: Ped; toggle: BOOL);
procedure SET_PED_PHONE_PALETTE_IDX(p0, p1: Any);
procedure SET_PED_STEER_BIAS(_ped: Ped; value: cfloat);
function IS_PED_SWITCHING_WEAPON(_ped: Ped): BOOL;
procedure SET_PED_TREATED_AS_FRIENDLY(p0, p1, p2: Any);
procedure SET_DISABLE_PED_MAP_COLLISION(_ped: Ped);
procedure ENABLE_MP_LIGHT(_ped: Ped; toggle: BOOL);
function GET_MP_LIGHT_ENABLED(_ped: Ped): BOOL;
procedure CLEAR_COVER_POINT_FOR_PED(_ped: Ped);
procedure SET_ALLOW_STUNT_JUMP_CAMERA(_ped: Ped; toggle: BOOL);
function ADD_ROPE(x, y, z, rotX, rotY, rotZ, length: cfloat; ropeType: cint; maxLength, minLength, windingSpeed: cfloat; p11, p12, rigid: BOOL; p14: cfloat; breakWhenShot: BOOL; unkPtr: PAny): cint;
procedure DELETE_ROPE(ropeId: pcint);
procedure DELETE_CHILD_ROPE(ropeId: cint);
function DOES_ROPE_EXIST(ropeId: pcint): BOOL;
procedure ROPE_DRAW_ENABLED(ropeId: pcint; p1: BOOL);
procedure ROPE_DRAW_SHADOW_ENABLED(ropeId: pcint; toggle: BOOL);
procedure LOAD_ROPE_DATA(ropeId: cint; rope_preset: PChar);
procedure PIN_ROPE_VERTEX(ropeId, vertex: cint; x, y, z: cfloat);
procedure UNPIN_ROPE_VERTEX(ropeId, vertex: cint);
function GET_ROPE_VERTEX_COUNT(ropeId: cint): cint;
procedure ATTACH_ENTITIES_TO_ROPE(ropeId: cint; ent1, ent2: Entity; ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length: cfloat; p10, p11: BOOL; p12, p13: PAny);
procedure ATTACH_ROPE_TO_ENTITY(ropeId: cint; para_entity: Entity; x, y, z: cfloat; p5: BOOL);
procedure DETACH_ROPE_FROM_ENTITY(ropeId: cint; para_entity: Entity);
procedure ROPE_SET_UPDATE_PINVERTS(ropeId: cint);
procedure ROPE_SET_UPDATE_ORDER(ropeId: cint; p1: Any);
procedure ROPE_SET_SMOOTH_REELIN(ropeId: cint; p1: BOOL);
function IS_ROPE_ATTACHED_AT_BOTH_ENDS(ropeId: pcint): BOOL;
function GET_ROPE_LAST_VERTEX_COORD(ropeId: cint): Vector3;
function GET_ROPE_VERTEX_COORD(ropeId, vertex: cint): Vector3;
procedure START_ROPE_WINDING(ropeId: cint);
procedure STOP_ROPE_WINDING(ropeId: cint);
procedure START_ROPE_UNWINDING_FRONT(ropeId: cint);
procedure STOP_ROPE_UNWINDING_FRONT(ropeId: cint);
procedure ROPE_CONVERT_TO_SIMPLE(ropeId: cint);
procedure ROPE_LOAD_TEXTURES;
function ROPE_ARE_TEXTURES_LOADED: BOOL;
procedure ROPE_UNLOAD_TEXTURES;
function DOES_SCRIPT_OWN_ROPE(ropeId: cint): BOOL;
procedure ROPE_ATTACH_VIRTUAL_BOUND_GEOM(ropeId, p1: cint; p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13: cfloat);
procedure ROPE_CHANGE_SCRIPT_OWNER(p0: Any; p1, p2: BOOL);
procedure ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(ropeId, p1: cint);
function ROPE_GET_DISTANCE_BETWEEN_ENDS(ropeId: cint): cfloat;
procedure ROPE_FORCE_LENGTH(ropeId: cint; length: cfloat);
procedure ROPE_RESET_LENGTH(ropeId: cint; length: cfloat);
procedure APPLY_IMPULSE_TO_CLOTH(posX, posY, posZ, vecX, vecY, vecZ, impulse: cfloat);
procedure SET_DAMPING(para_entity: Entity; vertex: cint; value: cfloat);
procedure ACTIVATE_PHYSICS(para_entity: Entity);
procedure SET_CGOFFSET(para_entity: Entity; x, y, z: cfloat);
function GET_CGOFFSET(para_entity: Entity): Vector3;
procedure SET_CG_AT_BOUNDCENTER(para_entity: Entity);
procedure BREAK_ENTITY_GLASS(para_entity: Entity; p1, p2, p3, p4, p5, p6, p7, p8: cfloat; p9: Any; p10: BOOL);
function GET_IS_ENTITY_A_FRAG(obj: GTAObject): BOOL;
procedure SET_DISABLE_BREAKING(obj: GTAObject; toggle: BOOL);
procedure RESET_DISABLE_BREAKING(obj: GTAObject);
procedure SET_DISABLE_FRAG_DAMAGE(obj: GTAObject; toggle: BOOL);
procedure SET_USE_KINEMATIC_PHYSICS(para_entity: Entity; toggle: BOOL);
procedure SET_IN_STUNT_MODE(p0: BOOL);
procedure SET_IN_ARENA_MODE(toggle: BOOL);
function GET_PLAYER_PED(plyr: Player): Ped;
function GET_PLAYER_PED_SCRIPT_INDEX(plyr: Player): Ped;
procedure SET_PLAYER_MODEL(plyr: Player; model: Hash);
procedure CHANGE_PLAYER_PED(plyr: Player; _ped: Ped; p2, resetDamage: BOOL);
procedure GET_PLAYER_RGB_COLOUR(plyr: Player; r, g, b: pcint);
function GET_NUMBER_OF_PLAYERS: cint;
function GET_PLAYER_TEAM(plyr: Player): cint;
procedure SET_PLAYER_TEAM(plyr: Player; team: cint);
function GET_NUMBER_OF_PLAYERS_IN_TEAM(team: cint): cint;
function GET_PLAYER_NAME(plyr: Player): PChar;
function GET_WANTED_LEVEL_RADIUS(plyr: Player): cfloat;
function GET_PLAYER_WANTED_CENTRE_POSITION(plyr: Player): Vector3;
procedure SET_PLAYER_WANTED_CENTRE_POSITION(plyr: Player; position: PVector3; p2, p3: BOOL);
function GET_WANTED_LEVEL_THRESHOLD(wantedLevel: cint): cint;
procedure SET_PLAYER_WANTED_LEVEL(plyr: Player; wantedLevel: cint; disableNoMission: BOOL);
procedure SET_PLAYER_WANTED_LEVEL_NO_DROP(plyr: Player; wantedLevel: cint; p2: BOOL);
procedure SET_PLAYER_WANTED_LEVEL_NOW(plyr: Player; p1: BOOL);
function ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(plyr: Player): BOOL;
function ARE_PLAYER_STARS_GREYED_OUT(plyr: Player): BOOL;
function IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(plyr: Player): BOOL;
procedure SET_DISPATCH_COPS_FOR_PLAYER(plyr: Player; toggle: BOOL);
function IS_PLAYER_WANTED_LEVEL_GREATER(plyr: Player; wantedLevel: cint): BOOL;
procedure CLEAR_PLAYER_WANTED_LEVEL(plyr: Player);
function IS_PLAYER_DEAD(plyr: Player): BOOL;
function IS_PLAYER_PRESSING_HORN(plyr: Player): BOOL;
procedure SET_PLAYER_CONTROL(plyr: Player; bHasControl: BOOL; flags: cint);
function GET_PLAYER_WANTED_LEVEL(plyr: Player): cint;
procedure SET_MAX_WANTED_LEVEL(maxWantedLevel: cint);
procedure SET_POLICE_RADAR_BLIPS(toggle: BOOL);
procedure SET_POLICE_IGNORE_PLAYER(plyr: Player; toggle: BOOL);
function IS_PLAYER_PLAYING(plyr: Player): BOOL;
procedure SET_EVERYONE_IGNORE_PLAYER(plyr: Player; toggle: BOOL);
procedure SET_ALL_RANDOM_PEDS_FLEE(plyr: Player; toggle: BOOL);
procedure SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(plyr: Player);
procedure SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(plyr: Player; toggle: BOOL);
procedure SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(plyr: Player);
procedure SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(plyr: Player);
procedure SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(plyr: Player; toggle: BOOL);
procedure SET_WANTED_LEVEL_MULTIPLIER(multiplier: cfloat);
procedure SET_WANTED_LEVEL_DIFFICULTY(plyr: Player; difficulty: cfloat);
procedure RESET_WANTED_LEVEL_DIFFICULTY(plyr: Player);
function GET_WANTED_LEVEL_TIME_TO_ESCAPE: cint;
procedure SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(plyr: Player; wantedLevel, lossTime: cint);
procedure RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(plyr: Player);
procedure START_FIRING_AMNESTY(duration: cint);
procedure REPORT_CRIME(plyr: Player; crimeType, wantedLvlThresh: cint);
procedure SUPPRESS_CRIME_THIS_FRAME(plyr: Player; crimeType: cint);
procedure UPDATE_WANTED_POSITION_THIS_FRAME(plyr: Player);
procedure SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(plyr: Player);
procedure ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(plyr: Player; p1: Any);
procedure FORCE_START_HIDDEN_EVASION(plyr: Player);
procedure SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(plyr: Player);
procedure REPORT_POLICE_SPOTTED_PLAYER(plyr: Player);
procedure SET_LAW_RESPONSE_DELAY_OVERRIDE(p0: cfloat);
procedure RESET_LAW_RESPONSE_DELAY_OVERRIDE;
function CAN_PLAYER_START_MISSION(plyr: Player): BOOL;
function IS_PLAYER_READY_FOR_CUTSCENE(plyr: Player): BOOL;
function IS_PLAYER_TARGETTING_ENTITY(plyr: Player; para_entity: Entity): BOOL;
function GET_PLAYER_TARGET_ENTITY(plyr: Player; entity: PEntity): BOOL;
function IS_PLAYER_FREE_AIMING(plyr: Player): BOOL;
function IS_PLAYER_FREE_AIMING_AT_ENTITY(plyr: Player; para_entity: Entity): BOOL;
function GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(plyr: Player; entity: PEntity): BOOL;
procedure SET_PLAYER_LOCKON_RANGE_OVERRIDE(plyr: Player; range: cfloat);
procedure SET_PLAYER_CAN_DO_DRIVE_BY(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_CAN_USE_COVER(plyr: Player; toggle: BOOL);
function GET_MAX_WANTED_LEVEL: cint;
function IS_PLAYER_TARGETTING_ANYTHING(plyr: Player): BOOL;
procedure SET_PLAYER_SPRINT(plyr: Player; toggle: BOOL);
procedure RESET_PLAYER_STAMINA(plyr: Player);
procedure RESTORE_PLAYER_STAMINA(plyr: Player; p1: cfloat);
function GET_PLAYER_SPRINT_STAMINA_REMAINING(plyr: Player): cfloat;
function GET_PLAYER_SPRINT_TIME_REMAINING(plyr: Player): cfloat;
function GET_PLAYER_UNDERWATER_TIME_REMAINING(plyr: Player): cfloat;
function SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(plyr: Player; time: cfloat): cfloat;
function GET_PLAYER_GROUP(plyr: Player): cint;
function GET_PLAYER_MAX_ARMOUR(plyr: Player): cint;
function IS_PLAYER_CONTROL_ON(plyr: Player): BOOL;
function GET_ARE_CAMERA_CONTROLS_DISABLED: BOOL;
function IS_PLAYER_SCRIPT_CONTROL_ON(plyr: Player): BOOL;
function IS_PLAYER_CLIMBING(plyr: Player): BOOL;
function IS_PLAYER_BEING_ARRESTED(plyr: Player; atArresting: BOOL): BOOL;
procedure RESET_PLAYER_ARREST_STATE(plyr: Player);
function GET_PLAYERS_LAST_VEHICLE: Vehicle;
function GET_PLAYER_INDEX: Player;
function INT_TO_PLAYERINDEX(value: cint): Player;
function INT_TO_PARTICIPANTINDEX(value: cint): cint;
function GET_TIME_SINCE_PLAYER_HIT_VEHICLE(plyr: Player): cint;
function GET_TIME_SINCE_PLAYER_HIT_PED(plyr: Player): cint;
function GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(plyr: Player): cint;
function GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(plyr: Player): cint;
function IS_PLAYER_FREE_FOR_AMBIENT_TASK(plyr: Player): BOOL;
function PLAYER_ID: Player;
function PLAYER_PED_ID: Ped;
function NETWORK_PLAYER_ID_TO_INT: cint;
function HAS_FORCE_CLEANUP_OCCURRED(cleanupFlags: cint): BOOL;
procedure FORCE_CLEANUP(cleanupFlags: cint);
procedure FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(name: PChar; cleanupFlags: cint);
procedure FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(id, cleanupFlags: cint);
function GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP: cint;
procedure SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(plyr: Player; veh: Vehicle);
procedure SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(plyr: Player);
function GIVE_ACHIEVEMENT_TO_PLAYER(achievementId: cint): BOOL;
function SET_ACHIEVEMENT_PROGRESS(achievementId, progress: cint): BOOL;
function GET_ACHIEVEMENT_PROGRESS(achievementId: cint): cint;
function HAS_ACHIEVEMENT_BEEN_PASSED(achievementId: cint): BOOL;
function IS_PLAYER_ONLINE: BOOL;
function IS_PLAYER_LOGGING_IN_NP: BOOL;
procedure DISPLAY_SYSTEM_SIGNIN_UI(p0: BOOL);
function IS_SYSTEM_UI_BEING_DISPLAYED: BOOL;
procedure SET_PLAYER_INVINCIBLE(plyr: Player; toggle: BOOL);
function GET_PLAYER_INVINCIBLE(plyr: Player): BOOL;
function GET_PLAYER_DEBUG_INVINCIBLE(plyr: Player): BOOL;
procedure SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(plyr: Player; p1: BOOL);
procedure REMOVE_PLAYER_HELMET(plyr: Player; p2: BOOL);
procedure GIVE_PLAYER_RAGDOLL_CONTROL(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_LOCKON(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_TARGETING_MODE(targetMode: cint);
function GET_PLAYER_TARGETING_MODE: cint;
procedure SET_PLAYER_TARGET_LEVEL(targetLevel: cint);
function GET_IS_USING_FPS_THIRD_PERSON_COVER: BOOL;
function GET_IS_USING_HOOD_CAMERA: BOOL;
procedure CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(plyr: Player);
function HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(plyr: Player): BOOL;
procedure CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(plyr: Player);
function HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(plyr: Player): BOOL;
procedure SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(plyr: Player; multiplier: cfloat);
procedure SET_SWIM_MULTIPLIER_FOR_PLAYER(plyr: Player; multiplier: cfloat);
procedure SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(plyr: Player; multiplier: cfloat);
function GET_TIME_SINCE_LAST_ARREST: cint;
function GET_TIME_SINCE_LAST_DEATH: cint;
procedure ASSISTED_MOVEMENT_CLOSE_ROUTE;
procedure ASSISTED_MOVEMENT_FLUSH_ROUTE;
procedure SET_PLAYER_FORCED_AIM(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_FORCED_ZOOM(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_FORCE_SKIP_AIM_INTRO(plyr: Player; toggle: BOOL);
procedure DISABLE_PLAYER_FIRING(plyr: Player; toggle: BOOL);
procedure DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN;
procedure SET_DISABLE_AMBIENT_MELEE_MOVE(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_MAX_ARMOUR(plyr: Player; value: cint);
procedure SPECIAL_ABILITY_ACTIVATE(plyr: Player; p1: cint);
procedure SET_SPECIAL_ABILITY_MP(plyr: Player; p1: cint; p2: Any);
procedure SPECIAL_ABILITY_DEACTIVATE_MP(plyr: Player; p1: cint);
procedure SPECIAL_ABILITY_DEACTIVATE(plyr: Player; p1: Any);
procedure SPECIAL_ABILITY_DEACTIVATE_FAST(plyr: Player; p1: Any);
procedure SPECIAL_ABILITY_RESET(plyr: Player; p1: Any);
procedure SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(plyr: Player; p1: Any);
procedure SPECIAL_ABILITY_CHARGE_SMALL(plyr: Player; p1, p2: BOOL; p3: Any);
procedure SPECIAL_ABILITY_CHARGE_MEDIUM(plyr: Player; p1, p2: BOOL; p3: Any);
procedure SPECIAL_ABILITY_CHARGE_LARGE(plyr: Player; p1, p2: BOOL; p3: Any);
procedure SPECIAL_ABILITY_CHARGE_CONTINUOUS(plyr: Player; p1: Ped; p2: Any);
procedure SPECIAL_ABILITY_CHARGE_ABSOLUTE(plyr: Player; p1: cint; p2: BOOL; p3: Any);
procedure SPECIAL_ABILITY_CHARGE_NORMALIZED(plyr: Player; normalizedValue: cfloat; p2: BOOL; p3: Any);
procedure SPECIAL_ABILITY_FILL_METER(plyr: Player; p1: BOOL; p2: Any);
procedure SPECIAL_ABILITY_DEPLETE_METER(plyr: Player; p1: BOOL; p2: Any);
procedure SPECIAL_ABILITY_LOCK(playerModel: Hash; p1: Any);
procedure SPECIAL_ABILITY_UNLOCK(playerModel: Hash; p1: Any);
function IS_SPECIAL_ABILITY_UNLOCKED(playerModel: Hash): BOOL;
function IS_SPECIAL_ABILITY_ACTIVE(plyr: Player; p1: Any): BOOL;
function IS_SPECIAL_ABILITY_METER_FULL(plyr: Player; p1: Any): BOOL;
procedure ENABLE_SPECIAL_ABILITY(plyr: Player; toggle: BOOL; p2: Any);
function IS_SPECIAL_ABILITY_ENABLED(plyr: Player; p1: Any): BOOL;
procedure SET_SPECIAL_ABILITY_MULTIPLIER(multiplier: cfloat);
procedure UPDATE_SPECIAL_ABILITY_FROM_STAT(plyr: Player; p1: Any);
function GET_IS_PLAYER_DRIVING_ON_HIGHWAY(plyr: Player): BOOL;
function GET_IS_PLAYER_DRIVING_WRECKLESS(plyr: Player; p1: cint): BOOL;
function GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(plyr: Player; p1: cfloat): BOOL;
procedure START_PLAYER_TELEPORT(plyr: Player; x, y, z, heading: cfloat; p5, findCollisionLand, p7: BOOL);
function UPDATE_PLAYER_TELEPORT(plyr: Player): BOOL;
procedure STOP_PLAYER_TELEPORT;
function IS_PLAYER_TELEPORT_ACTIVE: BOOL;
function GET_PLAYER_CURRENT_STEALTH_NOISE(plyr: Player): cfloat;
procedure SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(plyr: Player; regenRate: cfloat);
function GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(plyr: Player): cfloat;
procedure SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(plyr: Player; limit: cfloat);
procedure DISABLE_PLAYER_HEALTH_RECHARGE(plyr: Player);
procedure SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(plyr: Player; p1: cfloat);
procedure SET_PLAYER_WEAPON_DAMAGE_MODIFIER(plyr: Player; modifier: cfloat);
procedure SET_PLAYER_WEAPON_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
procedure SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
procedure SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(plyr: Player; modifier: cfloat; p2: BOOL);
procedure SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
procedure SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(plyr: Player; modifier: cfloat);
procedure SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
procedure SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(plyr: Player; p1: cfloat);
procedure SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(plyr: Player; p1: Any);
procedure SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(plyr: Player; p1: cfloat);
procedure SET_PLAYER_PARACHUTE_TINT_INDEX(plyr: Player; tintIndex: cint);
procedure GET_PLAYER_PARACHUTE_TINT_INDEX(plyr: Player; tintIndex: pcint);
procedure SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(plyr: Player; index: cint);
procedure GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(plyr: Player; index: pcint);
procedure SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(plyr: Player; tintIndex: cint);
procedure GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(plyr: Player; tintIndex: pcint);
procedure SET_PLAYER_HAS_RESERVE_PARACHUTE(plyr: Player);
function GET_PLAYER_HAS_RESERVE_PARACHUTE(plyr: Player): BOOL;
procedure SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(plyr: Player; enabled: BOOL);
procedure SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(plyr: Player; r, g, b: cint);
procedure GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(plyr: Player; r, g, b: pcint);
procedure SET_PLAYER_PHONE_PALETTE_IDX(plyr: Player; flags: cint);
procedure SET_PLAYER_NOISE_MULTIPLIER(plyr: Player; multiplier: cfloat);
procedure SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(plyr: Player; multiplier: cfloat);
function CAN_PED_HEAR_PLAYER(plyr: Player; _ped: Ped): BOOL;
procedure SIMULATE_PLAYER_INPUT_GAIT(plyr: Player; amount: cfloat; gaitType: cint; speed: cfloat; p4, p5: BOOL; p6: Any);
procedure RESET_PLAYER_INPUT_GAIT(plyr: Player);
procedure SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(plyr: Player; toggle: BOOL);
procedure SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(plyr: Player; value: cfloat);
function IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(plyr: Player): BOOL;
procedure INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(plyr: Player);
procedure SET_PLAYER_SIMULATE_AIMING(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_CLOTH_PIN_FRAMES(plyr: Player; p1: cint);
procedure SET_PLAYER_CLOTH_PACKAGE_INDEX(index: cint);
procedure SET_PLAYER_CLOTH_LOCK_COUNTER(value: cint);
procedure PLAYER_ATTACH_VIRTUAL_BOUND(p0, p1, p2, p3, p4, p5, p6, p7: cfloat);
procedure PLAYER_DETACH_VIRTUAL_BOUND;
function HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(plyr: Player): BOOL;
function IS_PLAYER_BATTLE_AWARE(plyr: Player): BOOL;
function GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(plyr: Player; p1: cint; p2: BOOL): BOOL;
procedure EXTEND_WORLD_BOUNDARY_FOR_PLAYER(x, y, z: cfloat);
procedure RESET_WORLD_BOUNDARY_FOR_PLAYER;
function IS_PLAYER_RIDING_TRAIN(plyr: Player): BOOL;
function HAS_PLAYER_LEFT_THE_WORLD(plyr: Player): BOOL;
procedure SET_PLAYER_LEAVE_PED_BEHIND(plyr: Player; toggle: BOOL);
procedure SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(plyr: Player; p1: cint; p2, p3: Any; p4: BOOL);
procedure CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(plyr: Player);
procedure SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(plyr: Player; model: Hash);
procedure SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(plyr: Player; model: Hash);
function GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(plyr: Player): Hash;
function GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(plyr: Player): Hash;
procedure CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(plyr: Player);
procedure CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(plyr: Player);
procedure SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(plyr: Player; model: Hash);
procedure CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(plyr: Player);
procedure DISABLE_PLAYER_VEHICLE_REWARDS(plyr: Player);
procedure SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(p0: BOOL);
procedure SET_PLAYER_BLUETOOTH_STATE(plyr: Player; state: BOOL);
function IS_PLAYER_BLUETOOTH_ENABLE(plyr: Player): BOOL;
procedure DISABLE_CAMERA_VIEW_MODE_CYCLE(plyr: Player);
function GET_PLAYER_FAKE_WANTED_LEVEL(plyr: Player): cint;
procedure SET_PLAYER_CAN_DAMAGE_PLAYER(player1, player2: Player; toggle: BOOL);
procedure SET_APPLY_WAYPOINT_OF_PLAYER(plyr: Player; hudColor: cint);
function IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(p0: Any): BOOL;
procedure SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(p0: Any);
procedure SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(p0, p1: Any);
procedure ADD_PLAYER_TARGETABLE_ENTITY(plyr: Player; para_entity: Entity);
procedure REMOVE_PLAYER_TARGETABLE_ENTITY(plyr: Player; para_entity: Entity);
procedure SET_PLAYER_PREVIOUS_VARIATION_DATA(plyr: Player; p1, p2: cint; p3, p4, p5: Any);
procedure REMOVE_SCRIPT_FIRE_POSITION;
procedure SET_SCRIPT_FIRE_POSITION(coordX, coordY, coordZ: cfloat);
procedure REPLAY_START_EVENT(p0: cint);
procedure REPLAY_STOP_EVENT;
procedure REPLAY_CANCEL_EVENT;
procedure REPLAY_RECORD_BACK_FOR_TIME(p0, p1: cfloat; p2: cint);
procedure REPLAY_CHECK_FOR_EVENT_THIS_FRAME(missionNameLabel: PChar; p1: Any);
procedure REPLAY_PREVENT_RECORDING_THIS_FRAME;
procedure REPLAY_RESET_EVENT_INFO;
procedure REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME;
procedure RECORD_GREATEST_MOMENT(p0, p1, p2: cint);
procedure START_REPLAY_RECORDING(mode: cint);
procedure STOP_REPLAY_RECORDING;
procedure CANCEL_REPLAY_RECORDING;
function SAVE_REPLAY_RECORDING: BOOL;
function IS_REPLAY_RECORDING: BOOL;
function IS_REPLAY_INITIALIZED: BOOL;
function IS_REPLAY_AVAILABLE: BOOL;
function IS_REPLAY_RECORD_SPACE_AVAILABLE(p0: BOOL): BOOL;
procedure REGISTER_EFFECT_FOR_REPLAY_EDITOR(p0: PChar; p1: BOOL);
function REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP: BOOL;
procedure SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM;
procedure SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(p0: BOOL);
procedure REPLAY_CONTROL_SHUTDOWN;
procedure ACTIVATE_ROCKSTAR_EDITOR(p0: cint);
function SAVEMIGRATION_IS_MP_ENABLED: BOOL;
function SAVEMIGRATION_MP_REQUEST_ACCOUNTS: BOOL;
function SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS: cint;
function SAVEMIGRATION_MP_NUM_ACCOUNTS: cint;
function SAVEMIGRATION_MP_GET_ACCOUNT(p0: cint; p1: PAny): BOOL;
function SAVEMIGRATION_MP_REQUEST_STATUS: BOOL;
function SAVEMIGRATION_MP_GET_STATUS: cint;
procedure REQUEST_SCRIPT(scriptName: PChar);
procedure SET_SCRIPT_AS_NO_LONGER_NEEDED(scriptName: PChar);
function HAS_SCRIPT_LOADED(scriptName: PChar): BOOL;
function DOES_SCRIPT_EXIST(scriptName: PChar): BOOL;
procedure REQUEST_SCRIPT_WITH_NAME_HASH(scriptHash: Hash);
procedure SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(scriptHash: Hash);
function HAS_SCRIPT_WITH_NAME_HASH_LOADED(scriptHash: Hash): BOOL;
function DOES_SCRIPT_WITH_NAME_HASH_EXIST(scriptHash: Hash): BOOL;
procedure TERMINATE_THREAD(threadId: cint);
function IS_THREAD_ACTIVE(threadId: cint): BOOL;
function GET_NAME_OF_SCRIPT_WITH_THIS_ID(threadId: cint): PChar;
procedure SCRIPT_THREAD_ITERATOR_RESET;
function SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID: cint;
function GET_ID_OF_THIS_THREAD: cint;
procedure TERMINATE_THIS_THREAD;
function GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(scriptHash: Hash): cint;
function GET_THIS_SCRIPT_NAME: PChar;
function GET_HASH_OF_THIS_SCRIPT_NAME: Hash;
function GET_NUMBER_OF_EVENTS(eventGroup: cint): cint;
function GET_EVENT_EXISTS(eventGroup, eventIndex: cint): BOOL;
function GET_EVENT_AT_INDEX(eventGroup, eventIndex: cint): cint;
function GET_EVENT_DATA(eventGroup, eventIndex: cint; eventData: PAny; eventDataSize: cint): BOOL;
procedure TRIGGER_SCRIPT_EVENT(eventGroup: cint; eventData: PAny; eventDataSize, playerBits: cint);
procedure SHUTDOWN_LOADING_SCREEN;
procedure SET_NO_LOADING_SCREEN(toggle: BOOL);
function GET_NO_LOADING_SCREEN: BOOL;
procedure COMMIT_TO_LOADINGSCREEN_SELCTION;
function BG_IS_EXITFLAG_SET: BOOL;
procedure BG_SET_EXITFLAG_RESPONSE;
procedure BG_START_CONTEXT_HASH(contextHash: Hash);
procedure BG_END_CONTEXT_HASH(contextHash: Hash);
procedure BG_START_CONTEXT(contextName: PChar);
procedure BG_END_CONTEXT(contextName: PChar);
function BG_DOES_LAUNCH_PARAM_EXIST(scriptIndex: cint; p1: PChar): BOOL;
function BG_GET_LAUNCH_PARAM_VALUE(scriptIndex: cint; p1: PChar): cint;
function BG_GET_SCRIPT_ID_FROM_NAME_HASH(p0: Hash): cint;
procedure _SEND_TU_SCRIPT_EVENT_NEW(eventGroup: cint; eventData: PAny; eventDataSize, playerBits: cint; eventType: Hash);
procedure REGISTER_SCRIPT_VARIABLE(variable: PAny);
procedure UNREGISTER_SCRIPT_VARIABLE(variable: PAny);
procedure FORCE_CHECK_SCRIPT_VARIABLES;
function START_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2: cfloat; flags: cint; para_entity: Entity; p8: cint): cint;
function START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2: cfloat; flags: cint; para_entity: Entity; p8: cint): cint;
function START_SHAPE_TEST_BOUNDING_BOX(para_entity: Entity; flags1, flags2: cint): cint;
function START_SHAPE_TEST_BOX(x, y, z, dimX, dimY, dimZ, rotX, rotY, rotZ: cfloat; p9: Any; flags: cint; para_entity: Entity; p12: Any): cint;
function START_SHAPE_TEST_BOUND(para_entity: Entity; flags1, flags2: cint): cint;
function START_SHAPE_TEST_CAPSULE(x1, y1, z1, x2, y2, z2, radius: cfloat; flags: cint; para_entity: Entity; p9: cint): cint;
function START_SHAPE_TEST_SWEPT_SPHERE(x1, y1, z1, x2, y2, z2, radius: cfloat; flags: cint; para_entity: Entity; p9: Any): cint;
function START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(pVec1, pVec2: PVector3; flag: cint; para_entity: Entity; flag2: cint): cint;
function GET_SHAPE_TEST_RESULT(shapeTestHandle: cint; hit: PBOOL; endCoords, surfaceNormal: PVector3; entityHit: PEntity): cint;
function GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(shapeTestHandle: cint; hit: PBOOL; endCoords, surfaceNormal: PVector3; materialHash: PHash; entityHit: PEntity): cint;
procedure RELEASE_SCRIPT_GUID_FROM_ENTITY(entityHit: Entity);
function SC_INBOX_GET_TOTAL_NUM_MESSAGES: cint;
function SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(msgIndex: cint): Hash;
function SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(msgIndex: cint): BOOL;
function SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(msgIndex: cint): BOOL;
function SC_INBOX_MESSAGE_GET_DATA_INT(p0: cint; context: PChar; _out: pcint): BOOL;
function SC_INBOX_MESSAGE_GET_DATA_BOOL(p0: cint; p1: PChar): BOOL;
function SC_INBOX_MESSAGE_GET_DATA_STRING(p0: cint; context, _out: PChar): BOOL;
function SC_INBOX_MESSAGE_DO_APPLY(p0: cint): BOOL;
function SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(p0: cint): PChar;
procedure SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(gamerHandle: PAny);
procedure SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(data: PAny);
function SC_INBOX_MESSAGE_GET_UGCDATA(p0: cint; p1: PAny): BOOL;
function SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(index: cint; outData: PAny): BOOL;
procedure SC_EMAIL_RETRIEVE_EMAILS(offset, limit: cint);
function SC_EMAIL_GET_RETRIEVAL_STATUS: cint;
function SC_EMAIL_GET_NUM_RETRIEVED_EMAILS: cint;
function SC_EMAIL_GET_EMAIL_AT_INDEX(p0: cint; p1: PAny): BOOL;
procedure SC_EMAIL_DELETE_EMAILS(p0: PAny; p1: Any);
procedure SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(gamerHandle: PAny);
procedure SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST;
procedure SC_EMAIL_SEND_EMAIL(p0: PChar);
function SC_EMAIL_SET_CURRENT_EMAIL_TAG(p0: Any): BOOL;
procedure SC_CACHE_NEW_ROCKSTAR_MSGS(toggle: BOOL);
function SC_HAS_NEW_ROCKSTAR_MSG: BOOL;
function SC_GET_NEW_ROCKSTAR_MSG: PChar;
function SC_PRESENCE_ATTR_SET_INT(attrHash: Hash; value: cint): BOOL;
function SC_PRESENCE_ATTR_SET_FLOAT(attrHash: Hash; value: cfloat): BOOL;
function SC_PRESENCE_ATTR_SET_STRING(attrHash: Hash; value: PChar): BOOL;
function SC_PRESENCE_SET_ACTIVITY_RATING(p0: Any; p1: cfloat): BOOL;
function SC_GAMERDATA_GET_INT(name: PChar; value: pcint): BOOL;
function SC_GAMERDATA_GET_FLOAT(name: PChar; value: pcfloat): BOOL;
function SC_GAMERDATA_GET_BOOL(name: PChar): BOOL;
function SC_GAMERDATA_GET_STRING(name, value: PChar): BOOL;
function SC_GAMERDATA_GET_ACTIVE_XP_BONUS(value: pcfloat): BOOL;
function SC_PROFANITY_CHECK_STRING(str: PChar; token: pcint): BOOL;
function SC_PROFANITY_CHECK_STRING_UGC(str: PChar; token: pcint): BOOL;
function SC_PROFANITY_GET_CHECK_IS_VALID(token: cint): BOOL;
function SC_PROFANITY_GET_CHECK_IS_PENDING(token: cint): BOOL;
function SC_PROFANITY_GET_STRING_PASSED(token: cint): BOOL;
function SC_PROFANITY_GET_STRING_STATUS(token: cint): cint;
function SC_LICENSEPLATE_CHECK_STRING(p0: PChar; p1: pcint): BOOL;
function SC_LICENSEPLATE_GET_CHECK_IS_VALID(p0: Any): BOOL;
function SC_LICENSEPLATE_GET_CHECK_IS_PENDING(p0: Any): BOOL;
function SC_LICENSEPLATE_GET_COUNT(token: cint): cint;
function SC_LICENSEPLATE_GET_PLATE(token, plateIndex: cint): PChar;
function SC_LICENSEPLATE_GET_PLATE_DATA(token, plateIndex: cint): PChar;
function SC_LICENSEPLATE_SET_PLATE_DATA(oldPlateText, newPlateText: PChar; plateData: PAny): BOOL;
function SC_LICENSEPLATE_ADD(plateText: PChar; plateData: PAny; token: pcint): BOOL;
function SC_LICENSEPLATE_GET_ADD_IS_PENDING(token: cint): BOOL;
function SC_LICENSEPLATE_GET_ADD_STATUS(token: cint): cint;
function SC_LICENSEPLATE_ISVALID(plateText: PChar; token: pcint): BOOL;
function SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(token: cint): BOOL;
function SC_LICENSEPLATE_GET_ISVALID_STATUS(token: cint): cint;
function SC_COMMUNITY_EVENT_IS_ACTIVE: BOOL;
function SC_COMMUNITY_EVENT_GET_EVENT_ID: cint;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(p0: PChar; p1: pcint): BOOL;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(p0: PChar; p1: pcfloat): BOOL;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(p0, p1: PChar): BOOL;
function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(p0: PChar): BOOL;
function SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(p0: PChar): BOOL;
function SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(p0: PChar): cint;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(p0: PChar; p1: pcint; p2: PChar): BOOL;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(p0: PChar; p1: pcfloat; p2: PChar): BOOL;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(p0, p1, p2: PChar): BOOL;
function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(p0, p1: PChar): BOOL;
function SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(p0: cint): BOOL;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(p0: cint; p1: PChar; p2: pcint): BOOL;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(p0: cint; p1: PChar; p2: pcfloat): BOOL;
function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(p0: cint; p1, p2: PChar): BOOL;
function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(p0: cint; p1: PChar): BOOL;
function SC_TRANSITION_NEWS_SHOW(p0: Any): BOOL;
function SC_TRANSITION_NEWS_SHOW_TIMED(p0, p1: Any): BOOL;
function SC_TRANSITION_NEWS_SHOW_NEXT_ITEM: BOOL;
function SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU: BOOL;
function SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(p0: PChar; p1: pcint): BOOL;
procedure SC_TRANSITION_NEWS_END;
function SC_PAUSE_NEWS_INIT_STARTER_PACK(p0: Any): BOOL;
function SC_PAUSE_NEWS_GET_PENDING_STORY(p0: Any): BOOL;
procedure SC_PAUSE_NEWS_SHUTDOWN;
function SC_ACCOUNT_INFO_GET_NICKNAME: PChar;
function SC_ACHIEVEMENT_INFO_STATUS(p0: pcint): BOOL;
function SC_HAS_ACHIEVEMENT_BEEN_PASSED(achievementId: cint): BOOL;
function STAT_CLEAR_SLOT_FOR_RELOAD(statSlot: cint): BOOL;
function STAT_LOAD(statSlot: cint): BOOL;
function STAT_SAVE(p0: cint; p1: BOOL; p2: cint; p3: BOOL): BOOL;
procedure STAT_SET_OPEN_SAVETYPE_IN_JOB(p0: cint);
function STAT_LOAD_PENDING(statSlot: cint): BOOL;
function STAT_SAVE_PENDING: BOOL;
function STAT_SAVE_PENDING_OR_REQUESTED: BOOL;
function STAT_DELETE_SLOT(p0: cint): BOOL;
function STAT_SLOT_IS_LOADED(statSlot: cint): BOOL;
function STAT_CLOUD_SLOT_LOAD_FAILED(p0: cint): BOOL;
function STAT_CLOUD_SLOT_LOAD_FAILED_CODE(p0: Any): cint;
procedure STAT_SET_BLOCK_SAVES(toggle: BOOL);
function STAT_GET_BLOCK_SAVES: BOOL;
function STAT_CLOUD_SLOT_SAVE_FAILED(p0: Any): BOOL;
procedure STAT_CLEAR_PENDING_SAVES(p0: Any);
function STAT_LOAD_DIRTY_READ_DETECTED: BOOL;
procedure STAT_CLEAR_DIRTY_READ_DETECTED;
function STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP: BOOL;
function _GET_STAT_HASH_FOR_CHARACTER_STAT(dataType, statIndex, charSlot: cint): Hash;
function STAT_SET_INT(statName: Hash; value: cint; save: BOOL): BOOL;
function STAT_SET_FLOAT(statName: Hash; value: cfloat; save: BOOL): BOOL;
function STAT_SET_BOOL(statName: Hash; value, save: BOOL): BOOL;
function STAT_SET_GXT_LABEL(statName: Hash; value: PChar; save: BOOL): BOOL;
function STAT_SET_DATE(statName: Hash; value: PAny; numFields: cint; save: BOOL): BOOL;
function STAT_SET_STRING(statName: Hash; value: PChar; save: BOOL): BOOL;
function STAT_SET_POS(statName: Hash; x, y, z: cfloat; save: BOOL): BOOL;
function STAT_SET_MASKED_INT(statName: Hash; p1, p2, p3: cint; save: BOOL): BOOL;
function STAT_SET_USER_ID(statName: Hash; value: PChar; save: BOOL): BOOL;
function STAT_SET_CURRENT_POSIX_TIME(statName: Hash; p1: BOOL): BOOL;
function STAT_GET_INT(statHash: Hash; outValue: pcint; p2: cint): BOOL;
function STAT_GET_FLOAT(statHash: Hash; outValue: pcfloat; p2: Any): BOOL;
function STAT_GET_BOOL(statHash: Hash; outValue: PBOOL; p2: Any): BOOL;
function STAT_GET_DATE(statHash: Hash; outValue: PAny; numFields: cint; p3: Any): BOOL;
function STAT_GET_STRING(statHash: Hash; p1: cint): PChar;
function STAT_GET_POS(statName: Hash; outX, outY, outZ: pcfloat; p4: Any): BOOL;
function STAT_GET_MASKED_INT(statHash: Hash; outValue: pcint; p2, p3: cint; p4: Any): BOOL;
function STAT_GET_USER_ID(statHash: Hash): PChar;
function STAT_GET_LICENSE_PLATE(statName: Hash): PChar;
function STAT_SET_LICENSE_PLATE(statName: Hash; str: PChar): BOOL;
procedure STAT_INCREMENT(statName: Hash; value: cfloat);
function STAT_COMMUNITY_START_SYNCH: BOOL;
function STAT_COMMUNITY_SYNCH_IS_PENDING: BOOL;
function STAT_COMMUNITY_GET_HISTORY(statName: Hash; p1: cint; outValue: pcfloat): BOOL;
procedure STAT_RESET_ALL_ONLINE_CHARACTER_STATS(p0: cint);
procedure STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(p0: cint);
function STAT_GET_NUMBER_OF_DAYS(statName: Hash): cint;
function STAT_GET_NUMBER_OF_HOURS(statName: Hash): cint;
function STAT_GET_NUMBER_OF_MINUTES(statName: Hash): cint;
function STAT_GET_NUMBER_OF_SECONDS(statName: Hash): cint;
procedure STAT_SET_PROFILE_SETTING_VALUE(profileSetting, value: cint);
procedure STATS_COMPLETED_CHARACTER_CREATION(p0: Any);
function PACKED_STAT_GET_INT_STAT_INDEX(p0: cint): cint;
function GET_PACKED_INT_STAT_KEY(index: cint; spStat, charStat: BOOL; character: cint): Hash;
function GET_PACKED_TU_INT_STAT_KEY(index: cint; spStat, charStat: BOOL; character: cint): Hash;
function GET_PACKED_NG_INT_STAT_KEY(index: cint; spStat, charStat: BOOL; character: cint; section: PChar): Hash;
function GET_PACKED_STAT_BOOL_CODE(index, characterSlot: cint): BOOL;
function GET_PACKED_STAT_INT_CODE(index, characterSlot: cint): cint;
procedure SET_PACKED_STAT_BOOL_CODE(index: cint; value: BOOL; characterSlot: cint);
procedure SET_PACKED_STAT_INT_CODE(index, value, characterSlot: cint);
procedure PLAYSTATS_BACKGROUND_SCRIPT_ACTION(action: PChar; value: cint);
procedure _PLAYSTATS_FLOW_LOW(posX, posY, posZ: cfloat; p3: PChar; p4: Any; amount: cint);
procedure _PLAYSTATS_FLOW_MEDIUM(x, y, z: cfloat; interiorAction: PChar; p4: cint; p5: Hash);
procedure PLAYSTATS_NPC_INVITE(p0: PChar);
procedure PLAYSTATS_AWARD_XP(amount: cint; _type, category: Hash);
procedure PLAYSTATS_RANK_UP(rank: cint);
procedure PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE;
procedure PLAYSTATS_ACTIVITY_DONE(p0, activityId: cint; p2: Any);
procedure PLAYSTATS_LEAVE_JOB_CHAIN(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_MISSION_STARTED(p0: PChar; p1, p2: Any; p3: BOOL);
procedure PLAYSTATS_MISSION_OVER(p0: PChar; p1, p2: Any; p3, p4, p5: BOOL);
procedure PLAYSTATS_MISSION_CHECKPOINT(p0: PChar; p1, p2, p3: Any);
procedure PLAYSTATS_RANDOM_MISSION_DONE(name: PChar; p1, p2, p3: Any);
procedure PLAYSTATS_ROS_BET(amount, act: cint; plyr: Player; cm: cfloat);
procedure PLAYSTATS_RACE_CHECKPOINT(p0: Vehicle; p1: Any; p2, p3: cint; p4: Any);
function PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(playerAccountId, posixTime: pcint): BOOL;
procedure PLAYSTATS_MATCH_STARTED(p0, p1, p2: Any);
procedure PLAYSTATS_SHOP_ITEM(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_CRATE_DROP_MISSION_DONE(p0, p1, p2, p3, p4, p5, p6, p7: Any);
procedure PLAYSTATS_CRATE_CREATED(p0, p1, p2: cfloat);
procedure PLAYSTATS_HOLD_UP_MISSION_DONE(p0, p1, p2, p3: Any);
procedure PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(p0, p1, p2, p3: Any);
procedure PLAYSTATS_RACE_TO_POINT_MISSION_DONE(p0: cint; p1, p2, p3: Any);
procedure PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(p0: Any);
procedure PLAYSTATS_WEBSITE_VISITED(scaleformHash: Hash; p1: cint);
procedure PLAYSTATS_FRIEND_ACTIVITY(p0: cint; p1: BOOL);
procedure PLAYSTATS_ODDJOB_DONE(totalTimeMs, p1: cint; p2: BOOL);
procedure PLAYSTATS_PROP_CHANGE(p0: Ped; p1, p2, p3: cint);
procedure PLAYSTATS_CLOTH_CHANGE(p0: Ped; p1, p2, p3, p4: Any);
procedure PLAYSTATS_WEAPON_MODE_CHANGE(weaponHash, componentHashTo, componentHashFrom: Hash);
procedure PLAYSTATS_CHEAT_APPLIED(cheat: PChar);
procedure PLAYSTATS_JOB_ACTIVITY_END(p0, p1, p2, p3: PAny);
procedure PLAYSTATS_JOB_BEND(p0, p1, p2, p3: PAny);
procedure PLAYSTATS_JOB_LTS_END(p0, p1, p2, p3: PAny);
procedure PLAYSTATS_JOB_LTS_ROUND_END(p0, p1, p2, p3: PAny);
procedure PLAYSTATS_QUICKFIX_TOOL(element: cint; item: PChar);
procedure PLAYSTATS_IDLE_KICK(msStoodIdle: cint);
procedure PLAYSTATS_SET_JOIN_TYPE(joinType: cint);
procedure PLAYSTATS_HEIST_SAVE_CHEAT(para_hash: Hash; p1: cint);
procedure PLAYSTATS_APPEND_DIRECTOR_METRIC(p0: PAny);
procedure PLAYSTATS_AWARD_BAD_SPORT(id: cint);
procedure PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(modelHash: Hash);
procedure _PLAYSTATS_SHOPMENU_NAV(p0, p1, p2, p3: Any);
procedure PLAYSTATS_FM_EVENT_CHALLENGES(p0: Any);
procedure PLAYSTATS_FM_EVENT_VEHICLETARGET(p0: Any);
procedure PLAYSTATS_FM_EVENT_URBANWARFARE(p0: Any);
procedure PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(p0: Any);
procedure PLAYSTATS_FM_EVENT_ATOB(p0: Any);
procedure PLAYSTATS_FM_EVENT_PENNEDIN(p0: Any);
procedure PLAYSTATS_FM_EVENT_PASSTHEPARCEL(p0: Any);
procedure PLAYSTATS_FM_EVENT_HOTPROPERTY(p0: Any);
procedure PLAYSTATS_FM_EVENT_DEADDROP(p0: Any);
procedure PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(p0: Any);
procedure PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(p0: Any);
procedure PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(p0: Any);
procedure PLAYSTATS_FM_EVENT_HUNTBEAST(p0: Any);
procedure PLAYSTATS_PIMENU_HIDE_OPTIONS(data: PAny);
function LEADERBOARDS_GET_NUMBER_OF_COLUMNS(p0: cint; p1: Any): cint;
function LEADERBOARDS_GET_COLUMN_ID(p0, p1, p2: cint): cint;
function LEADERBOARDS_GET_COLUMN_TYPE(p0: cint; p1, p2: Any): cint;
function LEADERBOARDS_READ_CLEAR_ALL: cint;
function LEADERBOARDS_READ_CLEAR(p0, p1, p2: Any): cint;
function LEADERBOARDS_READ_PENDING(p0, p1, p2: Any): BOOL;
function LEADERBOARDS_READ_ANY_PENDING: BOOL;
function LEADERBOARDS_READ_SUCCESSFUL(p0, p1, p2: Any): BOOL;
function LEADERBOARDS2_READ_FRIENDS_BY_ROW(p0, p1: PAny; p2: Any; p3: BOOL; p4, p5: Any): BOOL;
function LEADERBOARDS2_READ_BY_HANDLE(p0, p1: PAny): BOOL;
function LEADERBOARDS2_READ_BY_RANK(p0: PAny; p1, p2: Any): BOOL;
function LEADERBOARDS2_READ_BY_RADIUS(p0: PAny; p1: Any; p2: PAny): BOOL;
function LEADERBOARDS2_READ_BY_SCORE_INT(p0: PAny; p1, p2: Any): BOOL;
function LEADERBOARDS2_READ_BY_SCORE_FLOAT(p0: PAny; p1: cfloat; p2: Any): BOOL;
function LEADERBOARDS2_READ_RANK_PREDICTION(p0, p1, p2: PAny): BOOL;
function LEADERBOARDS2_READ_BY_PLAFORM(p0: PAny; gamerHandleCsv, platformName: PChar): BOOL;
function LEADERBOARDS2_READ_GET_ROW_DATA_START(p0: PAny): BOOL;
procedure LEADERBOARDS2_READ_GET_ROW_DATA_END;
function LEADERBOARDS2_READ_GET_ROW_DATA_INFO(p0: Any; p1: PAny): BOOL;
function LEADERBOARDS2_READ_GET_ROW_DATA_INT(p0, p1: Any): cint;
function LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(p0, p1: Any): cfloat;
function LEADERBOARDS2_WRITE_DATA(p0: PAny): BOOL;
procedure LEADERBOARDS_WRITE_ADD_COLUMN(p0, p1: Any; p2: cfloat);
procedure LEADERBOARDS_WRITE_ADD_COLUMN_LONG(p0, p1, p2: Any);
function LEADERBOARDS_CACHE_DATA_ROW(p0: PAny): BOOL;
procedure LEADERBOARDS_CLEAR_CACHE_DATA;
procedure LEADERBOARDS_CLEAR_CACHE_DATA_ID(p0: Any);
function LEADERBOARDS_GET_CACHE_EXISTS(p0: Any): BOOL;
function LEADERBOARDS_GET_CACHE_TIME(p0: Any): cint;
function LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(p0: Any): cint;
function LEADERBOARDS_GET_CACHE_DATA_ROW(p0, p1: Any; p2: PAny): BOOL;
procedure PRESENCE_EVENT_UPDATESTAT_INT(statHash: Hash; value, p2: cint);
procedure PRESENCE_EVENT_UPDATESTAT_FLOAT(statHash: Hash; value: cfloat; p2: cint);
procedure PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(statHash: Hash; value, p2: cint; str: PChar);
function GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES: BOOL;
procedure SET_HAS_POSTED_ALL_VEHICLES_DRIVEN;
procedure SET_PROFILE_SETTING_PROLOGUE_COMPLETE;
procedure SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE;
procedure SET_PROFILE_SETTING_CREATOR_RACES_DONE(value: cint);
procedure SET_PROFILE_SETTING_CREATOR_DM_DONE(value: cint);
procedure SET_PROFILE_SETTING_CREATOR_CTF_DONE(value: cint);
procedure SET_JOB_ACTIVITY_ID_STARTED(p0: Any; characterSlot: cint);
procedure SET_FREEMODE_PROLOGUE_DONE(p0: Any; characterSlot: cint);
procedure SET_FREEMODE_STRAND_PROGRESSION_STATUS(profileSetting, settingValue: cint);
procedure STAT_NETWORK_INCREMENT_ON_SUICIDE(p0: Any; p1: cfloat);
procedure STAT_SET_CHEAT_IS_ACTIVE;
function LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(p0, p1: PAny): BOOL;
procedure FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE;
procedure STAT_MIGRATE_CLEAR_FOR_RESTART;
function STAT_MIGRATE_SAVEGAME_START(platformName: PChar): BOOL;
function STAT_MIGRATE_SAVEGAME_GET_STATUS: cint;
function STAT_MIGRATE_CHECK_ALREADY_DONE: BOOL;
function STAT_MIGRATE_CHECK_START: BOOL;
function STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(p0: cint): cint;
function STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(p0: cint; p1: PAny): cint;
function STAT_GET_SAVE_MIGRATION_STATUS(data: PAny): cint;
function STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION: BOOL;
function STAT_GET_CANCEL_SAVE_MIGRATION_STATUS: cint;
function STAT_SAVE_MIGRATION_CONSUME_CONTENT(contentId: Hash; srcPlatform, srcGamerHandle: PChar): BOOL;
function STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(p0: pcint): cint;
procedure STAT_ENABLE_STATS_TRACKING;
procedure STAT_DISABLE_STATS_TRACKING;
function STAT_IS_STATS_TRACKING_ENABLED: BOOL;
function STAT_START_RECORD_STAT(statType, valueType: cint): BOOL;
function STAT_STOP_RECORD_STAT: BOOL;
function STAT_GET_RECORDED_VALUE(value: pcfloat): BOOL;
function STAT_IS_RECORDING_STAT: BOOL;
function STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE: cint;
function STAT_GET_CURRENT_REAR_WHEEL_DISTANCE: cfloat;
function STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE: cfloat;
function STAT_GET_CURRENT_JUMP_DISTANCE: cfloat;
function STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE: cfloat;
function STAT_GET_CURRENT_SPEED: cfloat;
function STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE: cfloat;
function STAT_GET_CURRENT_SKYDIVING_DISTANCE: cfloat;
function STAT_GET_CHALLENGE_FLYING_DIST: cfloat;
function STAT_GET_FLYING_ALTITUDE(outValue: pcfloat): BOOL;
function STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN: BOOL;
function STAT_GET_VEHICLE_BAIL_DISTANCE: cfloat;
function STAT_ROLLBACK_SAVE_MIGRATION: BOOL;
procedure SET_HAS_SPECIALEDITION_CONTENT(value: cint);
procedure SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(transactionId: cint);
procedure GET_BOSS_GOON_UUID(characterSlot: cint; p1, p2: Any);
procedure PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(p0: Any);
procedure PLAYSTATS_BW_YATCHATTACK(p0: Any);
procedure PLAYSTATS_BW_HUNT_THE_BOSS(p0: Any);
procedure PLAYSTATS_BW_SIGHTSEER(p0: Any);
procedure PLAYSTATS_BW_ASSAULT(p0: Any);
procedure PLAYSTATS_BW_BELLY_OF_THE_BEAST(p0: Any);
procedure PLAYSTATS_BW_HEAD_HUNTER(p0: Any);
procedure PLAYSTATS_BW_FRAGILE_GOODS(p0: Any);
procedure PLAYSTATS_BW_AIR_FREIGHT(p0: Any);
procedure PLAYSTATS_BC_CAR_JACKING(p0: Any);
procedure PLAYSTATS_BC_SMASH_AND_GRAB(p0: Any);
procedure PLAYSTATS_BC_PROTECTION_RACKET(p0: Any);
procedure PLAYSTATS_BC_MOST_WANTED(p0: Any);
procedure PLAYSTATS_BC_FINDERS_KEEPERS(p0: Any);
procedure PLAYSTATS_BC_POINT_TO_POINT(p0: Any);
procedure PLAYSTATS_BC_CASHING(p0: Any);
procedure PLAYSTATS_BC_SALVAGE(p0: Any);
procedure PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(amount: cint);
procedure PLAYSTATS_BUY_CONTRABAND_MISSION(data: PAny);
procedure PLAYSTATS_SELL_CONTRABAND_MISSION(data: PAny);
procedure PLAYSTATS_DEFEND_CONTRABAND_MISSION(data: PAny);
procedure PLAYSTATS_RECOVER_CONTRABAND_MISSION(data: PAny);
procedure PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(p0: Any);
procedure START_BEING_BOSS(p0, p1, p2: Any);
procedure START_BEING_GOON(p0, p1, p2: Any);
procedure END_BEING_BOSS(p0, p1, p2: Any);
procedure END_BEING_GOON(p0, p1, p2, p3, p4: Any);
procedure HIRED_LIMO(p0, p1: Any);
procedure ORDER_BOSS_VEHICLE(p0, p1: Any; vehicleHash: Hash);
procedure CHANGE_UNIFORM(p0, p1, p2: Any);
procedure CHANGE_GOON_LOOKING_FOR_WORK(p0: Any);
procedure SEND_METRIC_GHOSTING_TO_PLAYER(p0: Any);
procedure SEND_METRIC_VIP_POACH(p0, p1, p2: Any);
procedure SEND_METRIC_PUNISH_BODYGUARD(p0: Any);
procedure PLAYSTATS_START_TRACKING_STUNTS;
procedure PLAYSTATS_STOP_TRACKING_STUNTS;
procedure PLAYSTATS_MISSION_ENDED(p0: Any);
procedure PLAYSTATS_IMPEXP_MISSION_ENDED(p0: Any);
procedure PLAYSTATS_CHANGE_MC_ROLE(p0, p1, p2, p3: Any; role, p5: cint; p6: Any);
procedure PLAYSTATS_CHANGE_MC_OUTFIT(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_SWITCH_MC_EMBLEM(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_MC_REQUEST_BIKE(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_ABANDONED_MC(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_EARNED_MC_POINTS(p0, p1, p2, p3, p4, p5: Any);
procedure PLAYSTATS_MC_FORMATION_ENDS(p0, p1, p2, p3, p4, p5, p6: Any);
procedure PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(p0, p1, p2, p3, p4, p5, p6, p7: Any);
procedure PLAYSTATS_RIVAL_BEHAVIOR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9: Any);
procedure PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(p0, p1, p2, p3, p4, p5, p6: Any);
procedure PLAYSTATS_DUPE_DETECTED(data: PAny);
procedure PLAYSTATS_BAN_ALERT(p0: cint);
procedure PLAYSTATS_GUNRUNNING_MISSION_ENDED(data: PAny);
procedure PLAYSTATS_GUNRUNNING_RND(p0: Any);
procedure PLAYSTATS_BUSINESS_BATTLE_ENDED(p0: Any);
procedure PLAYSTATS_WAREHOUSE_MISSION_ENDED(p0: Any);
procedure PLAYSTATS_NIGHTCLUB_MISSION_ENDED(p0: Any);
procedure PLAYSTATS_DJ_USAGE(p0, p1: Any);
procedure PLAYSTATS_MINIGAME_USAGE(p0, p1, p2: Any);
procedure PLAYSTATS_STONE_HATCHET_ENDED(data: PAny);
procedure PLAYSTATS_SMUGGLER_MISSION_ENDED(data: PAny);
procedure PLAYSTATS_FM_HEIST_PREP_ENDED(data: PAny);
procedure PLAYSTATS_INSTANCED_HEIST_ENDED(data: PAny; p1, p2, p3: Any);
procedure PLAYSTATS_DAR_CHECKPOINT(data: PAny);
procedure PLAYSTATS_ENTER_SESSION_PACK(data: PAny);
procedure PLAYSTATS_DRONE_USAGE(p0, p1, p2: cint);
procedure PLAYSTATS_SPIN_WHEEL(p0, p1, p2, p3: cint);
procedure PLAYSTATS_ARENA_WARS_SPECTATOR(p0, p1, p2, p3, p4: cint);
procedure PLAYSTATS_ARENA_WARS_ENDED(data: PAny);
procedure PLAYSTATS_SWITCH_PASSIVE_MODE(p0: BOOL; p1, p2, p3: cint);
procedure PLAYSTATS_COLLECTIBLE_PICKED_UP(p0: cint; objectHash: Hash; p2, p3: Any; moneyAmount, rpAmount, chipsAmount: cint; p7: Any; p8: cint; p9, p10: Any);
procedure PLAYSTATS_CASINO_STORY_MISSION_ENDED(p0, p1: Any);
procedure PLAYSTATS_CASINO_CHIP(p0: Any);
procedure PLAYSTATS_CASINO_ROULETTE(p0: Any);
procedure PLAYSTATS_CASINO_BLACKJACK(p0: Any);
procedure PLAYSTATS_CASINO_THREE_CARD_POKER(p0: Any);
procedure PLAYSTATS_CASINO_SLOT_MACHINE(p0: Any);
procedure PLAYSTATS_CASINO_INSIDE_TRACK(p0: Any);
procedure PLAYSTATS_CASINO_LUCKY_SEVEN(p0: Any);
procedure PLAYSTATS_CASINO_ROULETTE_LIGHT(p0: Any);
procedure PLAYSTATS_CASINO_BLACKJACK_LIGHT(p0: Any);
procedure PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(p0: Any);
procedure PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(p0: Any);
procedure PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(p0: Any);
procedure PLAYSTATS_ARCADE_GAME(p0, p1, p2, p3, p4, p5, p6: Any);
procedure PLAYSTATS_ARCADE_LOVE_MATCH(p0, p1: Any);
procedure PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(data: PAny);
procedure PLAYSTATS_HEIST3_DRONE(p0: Any);
procedure PLAYSTATS_HEIST3_HACK(p0, p1, p2, p3, p4, p5: Any);
procedure PLAYSTATS_NPC_PHONE(p0: PAny);
procedure PLAYSTATS_ARCADE_CABINET(p0: Any);
procedure PLAYSTATS_HEIST3_FINALE(p0: Any);
procedure PLAYSTATS_HEIST3_PREP(p0: Any);
procedure PLAYSTATS_MASTER_CONTROL(p0, p1, p2, p3: Any);
procedure PLAYSTATS_QUIT_MODE(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_MISSION_VOTE(p0: Any);
procedure PLAYSTATS_NJVS_VOTE(p0: Any);
procedure PLAYSTATS_KILL_YOURSELF;
procedure PLAYSTATS_FM_MISSION_END(p0, p1, p2, p3: Any);
procedure PLAYSTATS_HEIST4_PREP(p0: Any);
procedure PLAYSTATS_HEIST4_FINALE(p0: Any);
procedure PLAYSTATS_HEIST4_HACK(p0, p1, p2, p3, p4: Any);
procedure PLAYSTATS_SUB_WEAP(p0, p1, p2, p3: Any);
procedure PLAYSTATS_FAST_TRVL(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10: Any);
procedure PLAYSTATS_HUB_ENTRY(p0: Any);
procedure PLAYSTATS_DJ_MISSION_ENDED(p0: Any);
procedure PLAYSTATS_ROBBERY_PREP(p0: Any);
procedure PLAYSTATS_ROBBERY_FINALE(p0: Any);
procedure PLAYSTATS_EXTRA_EVENT(p0: Any);
procedure PLAYSTATS_CARCLUB_POINTS(p0: Any);
procedure PLAYSTATS_CARCLUB_CHALLENGE(p0, p1, p2, p3: Any);
procedure PLAYSTATS_CARCLUB_PRIZE(p0: cint; vehicleModel: Hash);
procedure PLAYSTATS_AWARD_NAV(p0, p1, p2, p3: Any);
procedure PLAYSTATS_INST_MISSION_END(p0: Any);
procedure PLAYSTATS_HUB_EXIT(p0: Any);
procedure PLAYSTATS_VEH_DEL(bossId1, bossId2, bossType, vehicleID, reason: cint);
procedure PLAYSTATS_INVENTORY(p0: Any);
procedure _PLAYSTATS_ACID_MISSION_END(p0: Any);
procedure _PLAYSTATS_ACID_RND(p0: Any);
procedure _PLAYSTATS_IDLE(p0, p1, p2: Any);
procedure _PLAYSTATS_PLAYER_STYLE(p0: Any);
procedure _PLAYSTATS_RANDOM_EVENT(p0: Any);
procedure _PLAYSTATS_ALERT(data: PAny);
procedure _PLAYSTATS_ATTRITION_STAGE_END(p0: Any);
procedure _PLAYSTATS_SHOWROOM_NAV(p0, p1: Any; entity: Hash);
procedure _PLAYSTATS_SHOWROOM_OVERVIEW(data: PAny);
procedure LOAD_ALL_OBJECTS_NOW;
procedure LOAD_SCENE(x, y, z: cfloat);
function NETWORK_UPDATE_LOAD_SCENE: BOOL;
function IS_NETWORK_LOADING_SCENE: BOOL;
procedure SET_INTERIOR_ACTIVE(interiorID: cint; toggle: BOOL);
procedure REQUEST_MODEL(model: Hash);
procedure REQUEST_MENU_PED_MODEL(model: Hash);
function HAS_MODEL_LOADED(model: Hash): BOOL;
procedure REQUEST_MODELS_IN_ROOM(para_interior: Interior; roomName: PChar);
procedure SET_MODEL_AS_NO_LONGER_NEEDED(model: Hash);
function IS_MODEL_IN_CDIMAGE(model: Hash): BOOL;
function IS_MODEL_VALID(model: Hash): BOOL;
function IS_MODEL_A_PED(model: Hash): BOOL;
function IS_MODEL_A_VEHICLE(model: Hash): BOOL;
procedure REQUEST_COLLISION_AT_COORD(x, y, z: cfloat);
procedure REQUEST_COLLISION_FOR_MODEL(model: Hash);
function HAS_COLLISION_FOR_MODEL_LOADED(model: Hash): BOOL;
procedure REQUEST_ADDITIONAL_COLLISION_AT_COORD(x, y, z: cfloat);
function DOES_ANIM_DICT_EXIST(animDict: PChar): BOOL;
procedure REQUEST_ANIM_DICT(animDict: PChar);
function HAS_ANIM_DICT_LOADED(animDict: PChar): BOOL;
procedure REMOVE_ANIM_DICT(animDict: PChar);
procedure REQUEST_ANIM_SET(animSet: PChar);
function HAS_ANIM_SET_LOADED(animSet: PChar): BOOL;
procedure REMOVE_ANIM_SET(animSet: PChar);
procedure REQUEST_CLIP_SET(clipSet: PChar);
function HAS_CLIP_SET_LOADED(clipSet: PChar): BOOL;
procedure REMOVE_CLIP_SET(clipSet: PChar);
procedure REQUEST_IPL(iplName: PChar);
procedure REMOVE_IPL(iplName: PChar);
function IS_IPL_ACTIVE(iplName: PChar): BOOL;
procedure SET_STREAMING(toggle: BOOL);
procedure LOAD_GLOBAL_WATER_FILE(waterType: cint);
function GET_GLOBAL_WATER_FILE: cint;
procedure SET_GAME_PAUSES_FOR_STREAMING(toggle: BOOL);
procedure SET_REDUCE_PED_MODEL_BUDGET(toggle: BOOL);
procedure SET_REDUCE_VEHICLE_MODEL_BUDGET(toggle: BOOL);
procedure SET_DITCH_POLICE_MODELS(toggle: BOOL);
function GET_NUMBER_OF_STREAMING_REQUESTS: cint;
procedure REQUEST_PTFX_ASSET;
function HAS_PTFX_ASSET_LOADED: BOOL;
procedure REMOVE_PTFX_ASSET;
procedure REQUEST_NAMED_PTFX_ASSET(fxName: PChar);
function HAS_NAMED_PTFX_ASSET_LOADED(fxName: PChar): BOOL;
procedure REMOVE_NAMED_PTFX_ASSET(fxName: PChar);
procedure SET_VEHICLE_POPULATION_BUDGET(p0: cint);
procedure SET_PED_POPULATION_BUDGET(p0: cint);
procedure CLEAR_FOCUS;
procedure SET_FOCUS_POS_AND_VEL(x, y, z, offsetX, offsetY, offsetZ: cfloat);
procedure SET_FOCUS_ENTITY(para_entity: Entity);
function IS_ENTITY_FOCUS(para_entity: Entity): BOOL;
procedure SET_RESTORE_FOCUS_ENTITY(p0: Entity);
procedure SET_MAPDATACULLBOX_ENABLED(name: PChar; toggle: BOOL);
procedure SET_ALL_MAPDATA_CULLED(p0: Any);
function STREAMVOL_CREATE_SPHERE(x, y, z, rad: cfloat; p4, p5: Any): cint;
function STREAMVOL_CREATE_FRUSTUM(p0, p1, p2, p3, p4, p5, p6: cfloat; p7, p8: Any): cint;
function STREAMVOL_CREATE_LINE(p0, p1, p2, p3, p4, p5: cfloat; p6: Any): cint;
procedure STREAMVOL_DELETE(unused: Any);
function STREAMVOL_HAS_LOADED(unused: Any): BOOL;
function STREAMVOL_IS_VALID(unused: Any): BOOL;
function IS_STREAMVOL_ACTIVE: BOOL;
function NEW_LOAD_SCENE_START(posX, posY, posZ, offsetX, offsetY, offsetZ, radius: cfloat; p7: cint): BOOL;
function NEW_LOAD_SCENE_START_SPHERE(x, y, z, radius: cfloat; p4: Any): BOOL;
procedure NEW_LOAD_SCENE_STOP;
function IS_NEW_LOAD_SCENE_ACTIVE: BOOL;
function IS_NEW_LOAD_SCENE_LOADED: BOOL;
function IS_SAFE_TO_START_PLAYER_SWITCH: BOOL;
procedure START_PLAYER_SWITCH(from, _to: Ped; flags, switchType: cint);
procedure STOP_PLAYER_SWITCH;
function IS_PLAYER_SWITCH_IN_PROGRESS: BOOL;
function GET_PLAYER_SWITCH_TYPE: cint;
function GET_IDEAL_PLAYER_SWITCH_TYPE(x1, y1, z1, x2, y2, z2: cfloat): cint;
function GET_PLAYER_SWITCH_STATE: cint;
function GET_PLAYER_SHORT_SWITCH_STATE: cint;
procedure SET_PLAYER_SHORT_SWITCH_STYLE(p0: cint);
function GET_PLAYER_SWITCH_JUMP_CUT_INDEX: cint;
procedure SET_PLAYER_SWITCH_OUTRO(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip: cfloat; rotationOrder: cint);
procedure SET_PLAYER_SWITCH_ESTABLISHING_SHOT(name: PChar);
procedure ALLOW_PLAYER_SWITCH_PAN;
procedure ALLOW_PLAYER_SWITCH_OUTRO;
procedure ALLOW_PLAYER_SWITCH_ASCENT;
procedure ALLOW_PLAYER_SWITCH_DESCENT;
function IS_SWITCH_READY_FOR_DESCENT: BOOL;
procedure ENABLE_SWITCH_PAUSE_BEFORE_DESCENT;
procedure DISABLE_SWITCH_OUTRO_FX;
procedure SWITCH_TO_MULTI_FIRSTPART(_ped: Ped; flags, switchType: cint);
procedure SWITCH_TO_MULTI_SECONDPART(_ped: Ped);
function IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED: BOOL;
function GET_PLAYER_SWITCH_INTERP_OUT_DURATION: cint;
function GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME: cint;
function IS_SWITCH_SKIPPING_DESCENT: BOOL;
procedure SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME;
function GET_LODSCALE: cfloat;
procedure OVERRIDE_LODSCALE_THIS_FRAME(scaling: cfloat);
procedure REMAP_LODSCALE_RANGE_THIS_FRAME(p0, p1, p2, p3: cfloat);
procedure SUPPRESS_HD_MAP_STREAMING_THIS_FRAME;
procedure SET_RENDER_HD_ONLY(toggle: BOOL);
procedure FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME;
procedure IPL_GROUP_SWAP_START(iplName1, iplName2: PChar);
procedure IPL_GROUP_SWAP_CANCEL;
function IPL_GROUP_SWAP_IS_READY: BOOL;
procedure IPL_GROUP_SWAP_FINISH;
function IPL_GROUP_SWAP_IS_ACTIVE: BOOL;
procedure PREFETCH_SRL(srl: PChar);
function IS_SRL_LOADED: BOOL;
procedure BEGIN_SRL;
procedure END_SRL;
procedure SET_SRL_TIME(p0: cfloat);
procedure SET_SRL_POST_CUTSCENE_CAMERA(p0, p1, p2, p3, p4, p5: Any);
procedure SET_SRL_READAHEAD_TIMES(p0, p1, p2, p3: Any);
procedure SET_SRL_LONG_JUMP_MODE(p0: BOOL);
procedure SET_SRL_FORCE_PRESTREAM(p0: Any);
procedure SET_HD_AREA(x, y, z, radius: cfloat);
procedure CLEAR_HD_AREA;
procedure INIT_CREATOR_BUDGET;
procedure SHUTDOWN_CREATOR_BUDGET;
function ADD_MODEL_TO_CREATOR_BUDGET(modelHash: Hash): BOOL;
procedure REMOVE_MODEL_FROM_CREATOR_BUDGET(modelHash: Hash);
function GET_USED_CREATOR_BUDGET: cfloat;
procedure SET_ISLAND_ENABLED(name: PChar; toggle: BOOL);
procedure TASK_PAUSE(_ped: Ped; ms: cint);
procedure TASK_STAND_STILL(_ped: Ped; time: cint);
procedure TASK_JUMP(_ped: Ped; usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce: BOOL);
procedure TASK_COWER(_ped: Ped; duration: cint);
procedure TASK_HANDS_UP(_ped: Ped; duration: cint; facingPed: Ped; timeToFacePed, flags: cint);
procedure UPDATE_TASK_HANDS_UP_DURATION(_ped: Ped; duration: cint);
procedure TASK_OPEN_VEHICLE_DOOR(_ped: Ped; veh: Vehicle; timeOut, seat: cint; speed: cfloat);
procedure TASK_ENTER_VEHICLE(_ped: Ped; veh: Vehicle; timeout, seat: cint; speed: cfloat; flag: cint; overrideEntryClipsetName: PChar; p7: Any);
procedure TASK_LEAVE_VEHICLE(_ped: Ped; veh: Vehicle; flags: cint);
procedure TASK_GET_OFF_BOAT(_ped: Ped; boat: Vehicle);
procedure TASK_SKY_DIVE(_ped: Ped; instant: BOOL);
procedure TASK_PARACHUTE(_ped: Ped; giveParachuteItem, instant: BOOL);
procedure TASK_PARACHUTE_TO_TARGET(_ped: Ped; x, y, z: cfloat);
procedure SET_PARACHUTE_TASK_TARGET(_ped: Ped; x, y, z: cfloat);
procedure SET_PARACHUTE_TASK_THRUST(_ped: Ped; thrust: cfloat);
procedure TASK_RAPPEL_FROM_HELI(_ped: Ped; minHeightAboveGround: cfloat);
procedure TASK_VEHICLE_DRIVE_TO_COORD(_ped: Ped; veh: Vehicle; x, y, z, speed: cfloat; p6: Any; vehicleModel: Hash; drivingMode: cint; stopRange, straightLineDistance: cfloat);
procedure TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(_ped: Ped; veh: Vehicle; x, y, z, speed: cfloat; driveMode: cint; stopRange: cfloat);
procedure TASK_VEHICLE_DRIVE_WANDER(_ped: Ped; veh: Vehicle; speed: cfloat; drivingStyle: cint);
procedure TASK_FOLLOW_TO_OFFSET_OF_ENTITY(_ped: Ped; para_entity: Entity; offsetX, offsetY, offsetZ, movementSpeed: cfloat; timeout: cint; stoppingRange: cfloat; persistFollowing: BOOL);
procedure TASK_GO_STRAIGHT_TO_COORD(_ped: Ped; x, y, z, speed: cfloat; timeout: cint; targetHeading, distanceToSlide: cfloat);
procedure TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(_ped: Ped; para_entity: Entity; x, y, z, moveBlendRatio: cfloat; time: cint);
procedure TASK_ACHIEVE_HEADING(_ped: Ped; heading: cfloat; timeout: cint);
procedure TASK_FLUSH_ROUTE;
procedure TASK_EXTEND_ROUTE(x, y, z: cfloat);
procedure TASK_FOLLOW_POINT_ROUTE(_ped: Ped; speed: cfloat; mode: cint);
procedure TASK_GO_TO_ENTITY(para_entity, target: Entity; duration: cint; distance, moveBlendRatio, slowDownDistance: cfloat; flags: cint);
procedure TASK_SMART_FLEE_COORD(_ped: Ped; x, y, z, distance: cfloat; time: cint; preferPavements, quitIfOutOfRange: BOOL);
procedure TASK_SMART_FLEE_PED(_ped, fleeTarget: Ped; safeDistance: cfloat; fleeTime: cint; preferPavements, updateToNearestHatedPed: BOOL);
procedure TASK_REACT_AND_FLEE_PED(_ped, fleeTarget: Ped);
procedure TASK_SHOCKING_EVENT_REACT(_ped: Ped; eventHandle: cint);
procedure TASK_WANDER_IN_AREA(_ped: Ped; x, y, z, radius, minimalLength, timeBetweenWalks: cfloat);
procedure TASK_WANDER_STANDARD(_ped: Ped; heading: cfloat; flags: cint);
procedure TASK_WANDER_SPECIFIC(_ped: Ped; conditionalAnimGroupStr, conditionalAnimStr: PChar; heading: cfloat);
procedure TASK_VEHICLE_PARK(_ped: Ped; veh: Vehicle; x, y, z, heading: cfloat; mode: cint; radius: cfloat; keepEngineOn: BOOL);
procedure TASK_STEALTH_KILL(killer, target: Ped; stealthKillActionResultHash: Hash; desiredMoveBlendRatio: cfloat; stealthFlags: cint);
procedure TASK_PLANT_BOMB(_ped: Ped; x, y, z, heading: cfloat);
procedure TASK_FOLLOW_NAV_MESH_TO_COORD(_ped: Ped; x, y, z, moveBlendRatio: cfloat; time: cint; targetRadius: cfloat; flags: cint; targetHeading: cfloat);
procedure TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(_ped: Ped; x, y, z, moveBlendRatio: cfloat; time: cint; targetRadius: cfloat; flags: cint; slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading: cfloat);
procedure SET_PED_PATH_CAN_USE_CLIMBOVERS(_ped: Ped; Toggle: BOOL);
procedure SET_PED_PATH_CAN_USE_LADDERS(_ped: Ped; Toggle: BOOL);
procedure SET_PED_PATH_CAN_DROP_FROM_HEIGHT(_ped: Ped; Toggle: BOOL);
procedure SET_PED_PATH_CLIMB_COST_MODIFIER(_ped: Ped; modifier: cfloat);
procedure SET_PED_PATH_MAY_ENTER_WATER(_ped: Ped; mayEnterWater: BOOL);
procedure SET_PED_PATH_PREFER_TO_AVOID_WATER(_ped: Ped; avoidWater: BOOL);
procedure SET_PED_PATH_AVOID_FIRE(_ped: Ped; avoidFire: BOOL);
procedure SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(height: cfloat);
function GET_NAVMESH_ROUTE_DISTANCE_REMAINING(_ped: Ped; distanceRemaining: pcfloat; isPathReady: PBOOL): cint;
function GET_NAVMESH_ROUTE_RESULT(_ped: Ped): cint;
function IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(_ped: Ped): BOOL;
procedure TASK_GO_TO_COORD_ANY_MEANS(_ped: Ped; x, y, z, moveBlendRatio: cfloat; veh: Vehicle; useLongRangeVehiclePathing: BOOL; drivingFlags: cint; maxRangeToShootTargets: cfloat);
procedure TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(_ped: Ped; x, y, z, moveBlendRatio: cfloat; veh: Vehicle; useLongRangeVehiclePathing: BOOL; drivingFlags: cint; maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance: cfloat; extraFlags: cint; warpTimerMS: cfloat);
procedure TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(_ped: Ped; x, y, z, moveBlendRatio: cfloat; veh: Vehicle; useLongRangeVehiclePathing: BOOL; drivingFlags: cint; maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance: cfloat; extraFlags: cint; cruiseSpeed, targetArriveDist: cfloat);
procedure TASK_PLAY_ANIM(_ped: Ped; animDictionary, animationName: PChar; blendInSpeed, blendOutSpeed: cfloat; duration, flag: cint; playbackRate: cfloat; lockX, lockY, lockZ: BOOL);
procedure TASK_PLAY_ANIM_ADVANCED(_ped: Ped; animDict, animName: PChar; posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed: cfloat; duration: cint; flag: Any; animTime: cfloat; rotOrder, ikFlags: cint);
procedure STOP_ANIM_TASK(para_entity: Entity; animDictionary, animationName: PChar; blendDelta: cfloat);
procedure TASK_SCRIPTED_ANIMATION(_ped: Ped; priorityLowData, priorityMidData, priorityHighData: pcint; blendInDelta, blendOutDelta: cfloat);
procedure PLAY_ENTITY_SCRIPTED_ANIM(para_entity: Entity; priorityLowData, priorityMidData, priorityHighData: pcint; blendInDelta, blendOutDelta: cfloat);
procedure STOP_ANIM_PLAYBACK(para_entity: Entity; priority: cint; secondary: BOOL);
procedure SET_ANIM_WEIGHT(para_entity: Entity; weight: cfloat; priority, index: cint; secondary: BOOL);
procedure SET_ANIM_PHASE(para_entity: Entity; phase: cfloat; priority: cint; secondary: BOOL);
procedure SET_ANIM_RATE(para_entity: Entity; rate: cfloat; priority: cint; secondary: BOOL);
procedure SET_ANIM_LOOPED(para_entity: Entity; looped: BOOL; priority: cint; secondary: BOOL);
procedure TASK_PLAY_PHONE_GESTURE_ANIMATION(_ped: Ped; animDict, animation, boneMaskType: PChar; blendInDuration, blendOutDuration: cfloat; isLooping, holdLastFrame: BOOL);
procedure TASK_STOP_PHONE_GESTURE_ANIMATION(_ped: Ped; blendOutOverride: cfloat);
function IS_PLAYING_PHONE_GESTURE_ANIM(_ped: Ped): BOOL;
function GET_PHONE_GESTURE_ANIM_CURRENT_TIME(_ped: Ped): cfloat;
function GET_PHONE_GESTURE_ANIM_TOTAL_TIME(_ped: Ped): cfloat;
procedure TASK_VEHICLE_PLAY_ANIM(veh: Vehicle; animationSet, animationName: PChar);
procedure TASK_LOOK_AT_COORD(para_entity: Entity; x, y, z: cfloat; duration, flags, priority: cint);
procedure TASK_LOOK_AT_ENTITY(_ped: Ped; lookAt: Entity; duration, flags, priority: cint);
procedure TASK_CLEAR_LOOK_AT(_ped: Ped);
procedure OPEN_SEQUENCE_TASK(taskSequenceId: pcint);
procedure CLOSE_SEQUENCE_TASK(taskSequenceId: cint);
procedure TASK_PERFORM_SEQUENCE(_ped: Ped; taskSequenceId: cint);
procedure TASK_PERFORM_SEQUENCE_LOCALLY(_ped: Ped; taskSequenceId: cint);
procedure CLEAR_SEQUENCE_TASK(taskSequenceId: pcint);
procedure SET_SEQUENCE_TO_REPEAT(taskSequenceId: cint; _repeat: BOOL);
function GET_SEQUENCE_PROGRESS(_ped: Ped): cint;
function GET_IS_TASK_ACTIVE(_ped: Ped; taskIndex: cint): BOOL;
function GET_SCRIPT_TASK_STATUS(_ped: Ped; taskHash: Hash): cint;
function GET_ACTIVE_VEHICLE_MISSION_TYPE(veh: Vehicle): cint;
procedure TASK_LEAVE_ANY_VEHICLE(_ped: Ped; delayTime, flags: cint);
procedure TASK_AIM_GUN_SCRIPTED(_ped: Ped; scriptTask: Hash; disableBlockingClip, instantBlendToAim: BOOL);
procedure TASK_AIM_GUN_SCRIPTED_WITH_TARGET(_ped, target: Ped; x, y, z: cfloat; gunTaskType: cint; disableBlockingClip, forceAim: BOOL);
procedure UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(_ped, target: Ped; x, y, z: cfloat; disableBlockingClip: BOOL);
function GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(gunTaskType: cint): PChar;
procedure TASK_AIM_GUN_AT_ENTITY(_ped: Ped; para_entity: Entity; duration: cint; instantBlendToAim: BOOL);
procedure TASK_TURN_PED_TO_FACE_ENTITY(_ped: Ped; para_entity: Entity; duration: cint);
procedure TASK_AIM_GUN_AT_COORD(_ped: Ped; x, y, z: cfloat; time: cint; instantBlendToAim, playAnimIntro: BOOL);
procedure TASK_SHOOT_AT_COORD(_ped: Ped; x, y, z: cfloat; duration: cint; firingPattern: Hash);
procedure TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(_ped: Ped; veh: Vehicle; useAlternateShuffle: BOOL);
procedure CLEAR_PED_TASKS(_ped: Ped);
procedure CLEAR_PED_SECONDARY_TASK(_ped: Ped);
procedure TASK_EVERYONE_LEAVE_VEHICLE(veh: Vehicle);
procedure TASK_GOTO_ENTITY_OFFSET(_ped: Ped; para_entity: Entity; time: cint; seekRadius, seekAngleDeg, moveBlendRatio: cfloat; gotoEntityOffsetFlags: cint);
procedure TASK_GOTO_ENTITY_OFFSET_XY(_ped: Ped; para_entity: Entity; duration: cint; targetRadius, offsetX, offsetY, moveBlendRatio: cfloat; gotoEntityOffsetFlags: cint);
procedure TASK_TURN_PED_TO_FACE_COORD(_ped: Ped; x, y, z: cfloat; duration: cint);
procedure TASK_VEHICLE_TEMP_ACTION(driver: Ped; veh: Vehicle; action, time: cint);
procedure TASK_VEHICLE_MISSION(driver: Ped; veh, vehicleTarget: Vehicle; missionType: cint; cruiseSpeed: cfloat; drivingStyle: cint; targetReached, straightLineDistance: cfloat; DriveAgainstTraffic: BOOL);
procedure TASK_VEHICLE_MISSION_PED_TARGET(_ped: Ped; veh: Vehicle; pedTarget: Ped; missionType: cint; maxSpeed: cfloat; drivingStyle: cint; minDistance, straightLineDistance: cfloat; DriveAgainstTraffic: BOOL);
procedure TASK_VEHICLE_MISSION_COORS_TARGET(_ped: Ped; veh: Vehicle; x, y, z: cfloat; mission: cint; cruiseSpeed: cfloat; drivingStyle: cint; targetReached, straightLineDistance: cfloat; DriveAgainstTraffic: BOOL);
procedure TASK_VEHICLE_ESCORT(_ped: Ped; veh, targetVehicle: Vehicle; mode: cint; speed: cfloat; drivingStyle: cint; minDistance: cfloat; minHeightAboveTerrain: cint; noRoadsDistance: cfloat);
procedure TASK_VEHICLE_FOLLOW(driver: Ped; veh: Vehicle; targetEntity: Entity; speed: cfloat; drivingStyle, minDistance: cint);
procedure TASK_VEHICLE_CHASE(driver: Ped; targetEnt: Entity);
procedure TASK_VEHICLE_HELI_PROTECT(pilot: Ped; veh: Vehicle; entityToFollow: Entity; targetSpeed: cfloat; drivingFlags: cint; radius: cfloat; altitude, heliFlags: cint);
procedure SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(_ped: Ped; flag: cint; _set: BOOL);
procedure SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(_ped: Ped; distance: cfloat);
procedure TASK_HELI_CHASE(pilot: Ped; entityToFollow: Entity; x, y, z: cfloat);
procedure TASK_PLANE_CHASE(pilot: Ped; entityToFollow: Entity; x, y, z: cfloat);
procedure TASK_PLANE_LAND(pilot: Ped; plane: Vehicle; runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ: cfloat);
procedure CLEAR_DEFAULT_PRIMARY_TASK(_ped: Ped);
procedure CLEAR_PRIMARY_VEHICLE_TASK(veh: Vehicle);
procedure CLEAR_VEHICLE_CRASH_TASK(veh: Vehicle);
procedure TASK_PLANE_GOTO_PRECISE_VTOL(_ped: Ped; veh: Vehicle; x, y, z: cfloat; flightHeight, minHeightAboveTerrain: cint; useDesiredOrientation: BOOL; desiredOrientation: cfloat; autopilot: BOOL);
procedure TASK_SUBMARINE_GOTO_AND_STOP(_ped: Ped; submarine: Vehicle; x, y, z: cfloat; autopilot: BOOL);
procedure TASK_HELI_MISSION(pilot: Ped; aircraft, targetVehicle: Vehicle; targetPed: Ped; destinationX, destinationY, destinationZ: cfloat; missionFlag: cint; maxSpeed, radius, targetHeading: cfloat; maxHeight, minHeight: cint; slowDownDistance: cfloat; behaviorFlags: cint);
procedure TASK_HELI_ESCORT_HELI(pilot: Ped; heli1, heli2: Vehicle; offsetX, offsetY, offsetZ: cfloat);
procedure TASK_PLANE_MISSION(pilot: Ped; aircraft, targetVehicle: Vehicle; targetPed: Ped; destinationX, destinationY, destinationZ: cfloat; missionFlag: cint; angularDrag, targetReached, targetHeading, maxZ, minZ: cfloat; precise: BOOL);
procedure TASK_PLANE_TAXI(pilot: Ped; aircraft: Vehicle; x, y, z, cruiseSpeed, targetReached: cfloat);
procedure TASK_BOAT_MISSION(pedDriver: Ped; veh, targetVehicle: Vehicle; targetPed: Ped; x, y, z: cfloat; mission: cint; maxSpeed: cfloat; drivingStyle: cint; targetReached: cfloat; boatFlags: Any);
procedure TASK_DRIVE_BY(driverPed, targetPed: Ped; targetVehicle: Vehicle; targetX, targetY, targetZ, distanceToShoot: cfloat; pedAccuracy: cint; pushUnderneathDrivingTaskIfDriving: BOOL; firingPattern: Hash);
procedure SET_DRIVEBY_TASK_TARGET(shootingPed, targetPed: Ped; targetVehicle: Vehicle; x, y, z: cfloat);
procedure CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(_ped: Ped);
function IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(_ped: Ped): BOOL;
function CONTROL_MOUNTED_WEAPON(_ped: Ped): BOOL;
procedure SET_MOUNTED_WEAPON_TARGET(shootingPed, targetPed: Ped; targetVehicle: Vehicle; x, y, z: cfloat; taskMode: cint; ignoreTargetVehDeadCheck: BOOL);
function IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(_ped: Ped): BOOL;
procedure TASK_USE_MOBILE_PHONE(_ped: Ped; usePhone: BOOL; desiredPhoneMode: cint);
procedure TASK_USE_MOBILE_PHONE_TIMED(_ped: Ped; duration: cint);
procedure TASK_CHAT_TO_PED(_ped, target: Ped; flags: cint; goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime: cfloat);
procedure TASK_WARP_PED_INTO_VEHICLE(_ped: Ped; veh: Vehicle; seat: cint);
procedure TASK_SHOOT_AT_ENTITY(para_entity, target: Entity; duration: cint; firingPattern: Hash);
procedure TASK_CLIMB(_ped: Ped; usePlayerLaunchForce: BOOL);
procedure TASK_CLIMB_LADDER(_ped: Ped; fast: BOOL);
procedure TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(_ped: Ped; x1, y1, z1, x2, y2, z2, minZ: cfloat; ropeHandle: cint; clipSet: PChar; p10, p11: Any);
function GET_TASK_RAPPEL_DOWN_WALL_STATE(_ped: Ped): cint;
procedure CLEAR_PED_TASKS_IMMEDIATELY(_ped: Ped);
procedure TASK_PERFORM_SEQUENCE_FROM_PROGRESS(_ped: Ped; taskIndex, progress1, progress2: cint);
procedure SET_NEXT_DESIRED_MOVE_STATE(nextMoveState: cfloat);
procedure SET_PED_DESIRED_MOVE_BLEND_RATIO(_ped: Ped; newMoveBlendRatio: cfloat);
function GET_PED_DESIRED_MOVE_BLEND_RATIO(_ped: Ped): cfloat;
procedure TASK_GOTO_ENTITY_AIMING(_ped: Ped; target: Entity; distanceToStopAt, StartAimingDist: cfloat);
procedure TASK_SET_DECISION_MAKER(_ped: Ped; decisionMakerId: Hash);
procedure TASK_SET_SPHERE_DEFENSIVE_AREA(_ped: Ped; x, y, z, radius: cfloat);
procedure TASK_CLEAR_DEFENSIVE_AREA(_ped: Ped);
procedure TASK_PED_SLIDE_TO_COORD(_ped: Ped; x, y, z, heading, speed: cfloat);
procedure TASK_PED_SLIDE_TO_COORD_HDG_RATE(_ped: Ped; x, y, z, heading, speed, headingChangeRate: cfloat);
function ADD_COVER_POINT(x, y, z, direction: cfloat; usage, height, arc: cint; isPriority: BOOL): ScrHandle;
procedure REMOVE_COVER_POINT(coverpoint: ScrHandle);
function DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(x, y, z: cfloat): BOOL;
function GET_SCRIPTED_COVER_POINT_COORDS(coverpoint: ScrHandle): Vector3;
procedure ADD_SCRIPTED_COVER_AREA(x, y, z, radius: cfloat);
procedure TASK_COMBAT_PED(_ped, targetPed: Ped; combatFlags, threatResponseFlags: cint);
procedure TASK_COMBAT_PED_TIMED(_ped, target: Ped; time, flags: cint);
procedure TASK_SEEK_COVER_FROM_POS(_ped: Ped; x, y, z: cfloat; duration: cint; allowPeekingAndFiring: BOOL);
procedure TASK_SEEK_COVER_FROM_PED(_ped, target: Ped; duration: cint; allowPeekingAndFiring: BOOL);
procedure TASK_SEEK_COVER_TO_COVER_POINT(_ped: Ped; coverpoint: ScrHandle; x, y, z: cfloat; time: cint; allowPeekingAndFiring: BOOL);
procedure TASK_SEEK_COVER_TO_COORDS(_ped: Ped; x1, y1, z1, x2, y2, z2: cfloat; timeout: cint; shortRoute: BOOL);
procedure TASK_PUT_PED_DIRECTLY_INTO_COVER(_ped: Ped; x, y, z: cfloat; time: cint; allowPeekingAndFiring: BOOL; blendInDuration: cfloat; forceInitialFacingDirection, forceFaceLeft: BOOL; identifier: cint; doEntry: BOOL);
procedure TASK_WARP_PED_DIRECTLY_INTO_COVER(_ped: Ped; time: cint; allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft: BOOL; identifier: cint);
procedure TASK_EXIT_COVER(_ped: Ped; exitType: cint; x, y, z: cfloat);
procedure TASK_PUT_PED_DIRECTLY_INTO_MELEE(_ped, meleeTarget: Ped; blendInDuration, timeInMelee, strafePhaseSync: cfloat; aiCombatFlags: cint);
procedure TASK_TOGGLE_DUCK(_ped: Ped; toggleType: cint);
procedure TASK_GUARD_CURRENT_POSITION(_ped: Ped; maxPatrolProximity, defensiveAreaRadius: cfloat; setDefensiveArea: BOOL);
procedure TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(_ped: Ped; x, y, z, heading, maxPatrolProximity: cfloat; timer: cint);
procedure TASK_GUARD_SPHERE_DEFENSIVE_AREA(_ped: Ped; defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity: cfloat; time: cint; x, y, z, defensiveAreaRadius: cfloat);
procedure TASK_STAND_GUARD(_ped: Ped; x, y, z, heading: cfloat; scenarioName: PChar);
procedure SET_DRIVE_TASK_CRUISE_SPEED(driver: Ped; cruiseSpeed: cfloat);
procedure SET_DRIVE_TASK_MAX_CRUISE_SPEED(_ped: Ped; speed: cfloat);
procedure SET_DRIVE_TASK_DRIVING_STYLE(_ped: Ped; drivingStyle: cint);
procedure ADD_COVER_BLOCKING_AREA(startX, startY, startZ, endX, endY, endZ: cfloat; blockObjects, blockVehicles, blockMap, blockPlayer: BOOL);
procedure REMOVE_ALL_COVER_BLOCKING_AREAS;
procedure REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(x, y, z: cfloat);
procedure REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(startX, startY, startZ, endX, endY, endZ: cfloat; blockObjects, blockVehicles, blockMap, blockPlayer: BOOL);
procedure TASK_START_SCENARIO_IN_PLACE(_ped: Ped; scenarioName: PChar; unkDelay: cint; playEnterAnim: BOOL);
procedure TASK_START_SCENARIO_AT_POSITION(_ped: Ped; scenarioName: PChar; x, y, z, heading: cfloat; duration: cint; sittingScenario, teleport: BOOL);
procedure TASK_USE_NEAREST_SCENARIO_TO_COORD(_ped: Ped; x, y, z, distance: cfloat; duration: cint);
procedure TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(_ped: Ped; x, y, z, radius: cfloat; timeToLeave: cint);
procedure TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(_ped: Ped; x, y, z, maxRange: cfloat; timeToLeave: cint);
procedure TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(_ped: Ped; x, y, z, radius: cfloat; timeToLeave: cint);
function DOES_SCENARIO_EXIST_IN_AREA(x, y, z, radius: cfloat; mustBeFree: BOOL): BOOL;
function DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(x, y, z: cfloat; scenarioName: PChar; radius: cfloat; mustBeFree: BOOL): BOOL;
function IS_SCENARIO_OCCUPIED(x, y, z, maxRange: cfloat; onlyUsersActuallyAtScenario: BOOL): BOOL;
function PED_HAS_USE_SCENARIO_TASK(_ped: Ped): BOOL;
procedure PLAY_ANIM_ON_RUNNING_SCENARIO(_ped: Ped; animDict, animName: PChar);
function DOES_SCENARIO_GROUP_EXIST(scenarioGroup: PChar): BOOL;
function IS_SCENARIO_GROUP_ENABLED(scenarioGroup: PChar): BOOL;
procedure SET_SCENARIO_GROUP_ENABLED(scenarioGroup: PChar; enabled: BOOL);
procedure RESET_SCENARIO_GROUPS_ENABLED;
procedure SET_EXCLUSIVE_SCENARIO_GROUP(scenarioGroup: PChar);
procedure RESET_EXCLUSIVE_SCENARIO_GROUP;
function IS_SCENARIO_TYPE_ENABLED(scenarioType: PChar): BOOL;
procedure SET_SCENARIO_TYPE_ENABLED(scenarioType: PChar; toggle: BOOL);
procedure RESET_SCENARIO_TYPES_ENABLED;
function IS_PED_ACTIVE_IN_SCENARIO(_ped: Ped): BOOL;
function IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(_ped: Ped): BOOL;
procedure SET_PED_CAN_PLAY_AMBIENT_IDLES(_ped: Ped; blockIdleClips, removeIdleClipIfPlaying: BOOL);
procedure TASK_COMBAT_HATED_TARGETS_IN_AREA(_ped: Ped; x, y, z, radius: cfloat; combatFlags: cint);
procedure TASK_COMBAT_HATED_TARGETS_AROUND_PED(_ped: Ped; radius: cfloat; combatFlags: cint);
procedure TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(_ped: Ped; radius: cfloat; time, combatFlags: cint);
procedure TASK_THROW_PROJECTILE(_ped: Ped; x, y, z: cfloat; ignoreCollisionEntityIndex: cint; createInvincibleProjectile: BOOL);
procedure TASK_SWAP_WEAPON(_ped: Ped; drawWeapon: BOOL);
procedure TASK_RELOAD_WEAPON(_ped: Ped; drawWeapon: BOOL);
function IS_PED_GETTING_UP(_ped: Ped): BOOL;
procedure TASK_WRITHE(_ped, target: Ped; minFireLoops, startState: cint; forceShootOnGround: BOOL; shootFromGroundTimer: cint);
function IS_PED_IN_WRITHE(_ped: Ped): BOOL;
procedure OPEN_PATROL_ROUTE(patrolRoute: PChar);
procedure CLOSE_PATROL_ROUTE;
procedure ADD_PATROL_ROUTE_NODE(nodeId: cint; nodeType: PChar; posX, posY, posZ, headingX, headingY, headingZ: cfloat; duration: cint);
procedure ADD_PATROL_ROUTE_LINK(nodeId1, nodeId2: cint);
procedure CREATE_PATROL_ROUTE;
procedure DELETE_PATROL_ROUTE(patrolRoute: PChar);
function GET_PATROL_TASK_INFO(_ped: Ped; timeLeftAtNode, nodeId: pcint): BOOL;
procedure TASK_PATROL(_ped: Ped; patrolRouteName: PChar; alertState: cint; canChatToPeds, useHeadLookAt: BOOL);
procedure TASK_STAY_IN_COVER(_ped: Ped);
procedure ADD_VEHICLE_SUBTASK_ATTACK_COORD(_ped: Ped; x, y, z: cfloat);
procedure ADD_VEHICLE_SUBTASK_ATTACK_PED(_ped, target: Ped);
procedure TASK_VEHICLE_SHOOT_AT_PED(_ped, target: Ped; fireTolerance: cfloat);
procedure TASK_VEHICLE_AIM_AT_PED(_ped, target: Ped);
procedure TASK_VEHICLE_SHOOT_AT_COORD(_ped: Ped; x, y, z, fireTolerance: cfloat);
procedure TASK_VEHICLE_AIM_AT_COORD(_ped: Ped; x, y, z: cfloat);
procedure TASK_VEHICLE_GOTO_NAVMESH(_ped: Ped; veh: Vehicle; x, y, z, speed: cfloat; behaviorFlag: cint; stoppingRange: cfloat);
procedure TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(_ped: Ped; x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio: cfloat; shoot: BOOL; targetRadius, slowDistance: cfloat; useNavMesh: BOOL; navFlags: cint; instantBlendToAim: BOOL; firingPattern: Hash);
procedure TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(_ped: Ped; x, y, z: cfloat; aimAtID: Entity; moveBlendRatio: cfloat; shoot: BOOL; targetRadius, slowDistance: cfloat; useNavMesh: BOOL; navFlags: cint; instantBlendToAim: BOOL; firingPattern: Hash; time: cint);
procedure TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle: Ped; goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed: cfloat; shootAtEnemies: BOOL; distanceToStopAt, noRoadsDistance: cfloat; useNavMesh: BOOL; navFlags, taskFlags: cint; firingPattern: Hash);
procedure TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(_ped: Ped; para_entity: Entity; aimX, aimY, aimZ, moveBlendRatio: cfloat; shoot: BOOL; targetRadius, slowDistance: cfloat; useNavMesh, instantBlendToAim: BOOL; firingPattern: Hash);
procedure TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(_ped: Ped; entityToWalkTo, entityToAimAt: Entity; speed: cfloat; shootatEntity: BOOL; targetRadius, slowDistance: cfloat; useNavMesh, instantBlendToAim: BOOL; firingPattern: Hash);
procedure SET_HIGH_FALL_TASK(_ped: Ped; minTime, maxTime, entryType: cint);
procedure REQUEST_WAYPOINT_RECORDING(name: PChar);
function GET_IS_WAYPOINT_RECORDING_LOADED(name: PChar): BOOL;
procedure REMOVE_WAYPOINT_RECORDING(name: PChar);
function WAYPOINT_RECORDING_GET_NUM_POINTS(name: PChar; points: pcint): BOOL;
function WAYPOINT_RECORDING_GET_COORD(name: PChar; point: cint; coord: PVector3): BOOL;
function WAYPOINT_RECORDING_GET_SPEED_AT_POINT(name: PChar; point: cint): cfloat;
function WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(name: PChar; x, y, z: cfloat; point: pcint): BOOL;
procedure TASK_FOLLOW_WAYPOINT_RECORDING(_ped: Ped; name: PChar; p2, p3, p4: cint);
function IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(_ped: Ped): BOOL;
function GET_PED_WAYPOINT_PROGRESS(_ped: Ped): cint;
function GET_PED_WAYPOINT_DISTANCE(p0: Any): cfloat;
function SET_PED_WAYPOINT_ROUTE_OFFSET(_ped: Ped; x, y, z: cfloat): BOOL;
function GET_WAYPOINT_DISTANCE_ALONG_ROUTE(name: PChar; point: cint): cfloat;
function WAYPOINT_PLAYBACK_GET_IS_PAUSED(p0: Any): BOOL;
procedure WAYPOINT_PLAYBACK_PAUSE(p0: Any; p1, p2: BOOL);
procedure WAYPOINT_PLAYBACK_RESUME(p0: Any; p1: BOOL; p2, p3: Any);
procedure WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0: Any; p1: cfloat; p2: BOOL);
procedure WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0: Any);
procedure USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(name: PChar; p1: BOOL; p2, p3: cfloat);
procedure WAYPOINT_PLAYBACK_START_AIMING_AT_PED(_ped, target: Ped; p2: BOOL);
procedure WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(_ped: Ped; x, y, z: cfloat; p4: BOOL);
procedure WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(_ped, ped2: Ped; p2, p3: BOOL);
procedure WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(_ped: Ped; x, y, z: cfloat; p4: BOOL; firingPattern: Hash);
procedure WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(_ped: Ped);
procedure ASSISTED_MOVEMENT_REQUEST_ROUTE(route: PChar);
procedure ASSISTED_MOVEMENT_REMOVE_ROUTE(route: PChar);
function ASSISTED_MOVEMENT_IS_ROUTE_LOADED(route: PChar): BOOL;
procedure ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(route: PChar; props: cint);
procedure ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(dist: cfloat);
procedure TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(_ped: Ped; veh: Vehicle; WPRecording: PChar; p3, p4, p5, p6: cint; p7: cfloat; p8: BOOL; p9: cfloat);
function IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(veh: Vehicle): BOOL;
function GET_VEHICLE_WAYPOINT_PROGRESS(veh: Vehicle): cint;
function GET_VEHICLE_WAYPOINT_TARGET_POINT(veh: Vehicle): cint;
procedure VEHICLE_WAYPOINT_PLAYBACK_PAUSE(veh: Vehicle);
procedure VEHICLE_WAYPOINT_PLAYBACK_RESUME(veh: Vehicle);
procedure VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(veh: Vehicle);
procedure VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(veh: Vehicle; speed: cfloat);
procedure TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(_ped: Ped; toggle: BOOL);
procedure TASK_FORCE_MOTION_STATE(_ped: Ped; state: Hash; forceRestart: BOOL);
procedure TASK_MOVE_NETWORK_BY_NAME(_ped: Ped; task: PChar; multiplier: cfloat; allowOverrideCloneUpdate: BOOL; animDict: PChar; flags: cint);
procedure TASK_MOVE_NETWORK_ADVANCED_BY_NAME(_ped: Ped; network: PChar; x, y, z, rotX, rotY, rotZ: cfloat; rotOrder: cint; blendDuration: cfloat; allowOverrideCloneUpdate: BOOL; animDict: PChar; flags: cint);
procedure TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(_ped: Ped; network: PChar; initialParameters: pcint; blendDuration: cfloat; allowOverrideCloneUpdate: BOOL; animDict: PChar; flags: cint);
procedure TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(_ped: Ped; network: PChar; initialParameters: pcint; x, y, z, rotX, rotY, rotZ: cfloat; rotOrder: cint; blendDuration: cfloat; allowOverrideCloneUpdate: BOOL; dictionary: PChar; flags: cint);
function IS_TASK_MOVE_NETWORK_ACTIVE(_ped: Ped): BOOL;
function IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(_ped: Ped): BOOL;
function REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(_ped: Ped; name: PChar): BOOL;
function SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(_ped: Ped; state: PChar): BOOL;
function GET_TASK_MOVE_NETWORK_STATE(_ped: Ped): PChar;
procedure SET_TASK_MOVE_NETWORK_ANIM_SET(_ped: Ped; clipSet, variableClipSet: Hash);
procedure SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(_ped: Ped; signalName: PChar; value: cfloat);
procedure SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(_ped: Ped; signalName: PChar; value: cfloat);
procedure SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(_ped: Ped; signalName: PChar; value: cfloat);
procedure SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(_ped: Ped; signalName: PChar; value: BOOL);
function GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(_ped: Ped; signalName: PChar): cfloat;
function GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(_ped: Ped; signalName: PChar): BOOL;
function GET_TASK_MOVE_NETWORK_EVENT(_ped: Ped; eventName: PChar): BOOL;
function SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(_ped: Ped; enable: BOOL): BOOL;
procedure _SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(_ped: Ped; enable: BOOL);
function IS_MOVE_BLEND_RATIO_STILL(_ped: Ped): BOOL;
function IS_MOVE_BLEND_RATIO_WALKING(_ped: Ped): BOOL;
function IS_MOVE_BLEND_RATIO_RUNNING(_ped: Ped): BOOL;
function IS_MOVE_BLEND_RATIO_SPRINTING(_ped: Ped): BOOL;
function IS_PED_STILL(_ped: Ped): BOOL;
function IS_PED_WALKING(_ped: Ped): BOOL;
function IS_PED_RUNNING(_ped: Ped): BOOL;
function IS_PED_SPRINTING(_ped: Ped): BOOL;
function IS_PED_STRAFING(_ped: Ped): BOOL;
procedure TASK_SYNCHRONIZED_SCENE(_ped: Ped; scene: cint; animDictionary, animationName: PChar; blendIn, blendOut: cfloat; flags, ragdollBlockingFlags: cint; moverBlendDelta: cfloat; ikFlags: cint);
procedure TASK_AGITATED_ACTION_CONFRONT_RESPONSE(_ped, ped2: Ped);
procedure TASK_SWEEP_AIM_ENTITY(_ped: Ped; animDict, lowAnimName, medAnimName, hiAnimName: PChar; runtime: cint; targetEntity: Entity; turnRate, blendInDuration: cfloat);
procedure UPDATE_TASK_SWEEP_AIM_ENTITY(_ped: Ped; para_entity: Entity);
procedure TASK_SWEEP_AIM_POSITION(_ped: Ped; animDict, lowAnimName, medAnimName, hiAnimName: PChar; runtime: cint; x, y, z, turnRate, blendInDuration: cfloat);
procedure UPDATE_TASK_SWEEP_AIM_POSITION(_ped: Ped; x, y, z: cfloat);
procedure TASK_ARREST_PED(_ped, target: Ped);
function IS_PED_RUNNING_ARREST_TASK(_ped: Ped): BOOL;
function IS_PED_BEING_ARRESTED(_ped: Ped): BOOL;
procedure UNCUFF_PED(_ped: Ped);
function IS_PED_CUFFED(_ped: Ped): BOOL;
function CREATE_VEHICLE(modelHash: Hash; x, y, z, heading: cfloat; isNetwork, bScriptHostVeh, p7: BOOL): Vehicle;
procedure DELETE_VEHICLE(veh: PVehicle);
procedure SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(veh: Vehicle; toggle, p2: BOOL);
procedure SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(veh: Vehicle; canBeLockedOn, p2: BOOL);
procedure SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh: Vehicle; toggle: BOOL);
function GET_VEHICLE_HOMING_LOCKON_STATE(veh: Vehicle): cint;
function GET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0: Any): cint;
procedure SET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0, p1: Any);
function IS_VEHICLE_MODEL(veh: Vehicle; model: Hash): BOOL;
function DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator: cint): BOOL;
function CREATE_SCRIPT_VEHICLE_GENERATOR(x, y, z, heading, p4, p5: cfloat; modelHash: Hash; p7, p8, p9, p10: cint; p11, p12, p13, p14, p15: BOOL; p16: cint): cint;
procedure DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator: cint);
procedure SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator: cint; enabled: BOOL);
procedure SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; toggle, p7: BOOL);
procedure SET_ALL_VEHICLE_GENERATORS_ACTIVE;
procedure SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active: BOOL);
procedure SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(x, y, z, radius: cfloat);
procedure CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST;
function SET_VEHICLE_ON_GROUND_PROPERLY(veh: Vehicle; p1: cfloat): BOOL;
function SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(p0: Vehicle; p1, p2, p3: BOOL): BOOL;
function IS_VEHICLE_STUCK_ON_ROOF(veh: Vehicle): BOOL;
procedure ADD_VEHICLE_UPSIDEDOWN_CHECK(veh: Vehicle);
procedure REMOVE_VEHICLE_UPSIDEDOWN_CHECK(veh: Vehicle);
function IS_VEHICLE_STOPPED(veh: Vehicle): BOOL;
function GET_VEHICLE_NUMBER_OF_PASSENGERS(veh: Vehicle; includeDriver, includeDeadOccupants: BOOL): cint;
function GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(veh: Vehicle): cint;
function GET_VEHICLE_MODEL_NUMBER_OF_SEATS(modelHash: Hash): cint;
function IS_SEAT_WARP_ONLY(veh: Vehicle; seatIndex: cint): BOOL;
function IS_TURRET_SEAT(veh: Vehicle; seatIndex: cint): BOOL;
function DOES_VEHICLE_ALLOW_RAPPEL(veh: Vehicle): BOOL;
procedure SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
procedure SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
procedure SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
procedure SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(toggle: BOOL);
procedure SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(value: cfloat);
procedure SET_FAR_DRAW_VEHICLES(toggle: BOOL);
procedure SET_NUMBER_OF_PARKED_VEHICLES(value: cint);
procedure SET_VEHICLE_DOORS_LOCKED(veh: Vehicle; doorLockStatus: cint);
procedure SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(veh: Vehicle; doorId, doorLockStatus: cint);
procedure SET_VEHICLE_HAS_MUTED_SIRENS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(veh: Vehicle; plyr: Player; toggle: BOOL);
function GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(veh: Vehicle; plyr: Player): BOOL;
procedure SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(veh: Vehicle; team: cint; toggle: BOOL);
procedure SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(veh: Vehicle);
procedure _SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS(veh: Vehicle; modifier: cfloat);
function _GET_VEHICLE_THROTTLE(veh: Vehicle): cfloat;
procedure EXPLODE_VEHICLE(veh: Vehicle; isAudible, isInvisible: BOOL);
procedure SET_VEHICLE_OUT_OF_CONTROL(veh: Vehicle; killDriver, explodeOnImpact: BOOL);
procedure SET_VEHICLE_TIMED_EXPLOSION(veh: Vehicle; _ped: Ped; toggle: BOOL);
procedure ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(veh: Vehicle);
procedure CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE;
function HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE: BOOL;
procedure DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE;
function HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB(veh: Vehicle): BOOL;
procedure SET_TAXI_LIGHTS(veh: Vehicle; state: BOOL);
function IS_TAXI_LIGHT_ON(veh: Vehicle): BOOL;
function IS_VEHICLE_IN_GARAGE_AREA(garageName: PChar; veh: Vehicle): BOOL;
procedure SET_VEHICLE_COLOURS(veh: Vehicle; colorPrimary, colorSecondary: cint);
procedure SET_VEHICLE_FULLBEAM(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_IS_RACING(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh: Vehicle; r, g, b: cint);
procedure GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh: Vehicle; r, g, b: pcint);
procedure CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh: Vehicle);
function GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(veh: Vehicle): BOOL;
procedure SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh: Vehicle; r, g, b: cint);
procedure GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh: Vehicle; r, g, b: pcint);
procedure CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh: Vehicle);
function GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(veh: Vehicle): BOOL;
procedure SET_VEHICLE_ENVEFF_SCALE(veh: Vehicle; fade: cfloat);
function GET_VEHICLE_ENVEFF_SCALE(veh: Vehicle): cfloat;
procedure SET_CAN_RESPRAY_VEHICLE(veh: Vehicle; state: BOOL);
procedure SET_GOON_BOSS_VEHICLE(veh: Vehicle; toggle: BOOL);
procedure SET_OPEN_REAR_DOORS_ON_EXPLOSION(veh: Vehicle; toggle: BOOL);
procedure FORCE_SUBMARINE_SURFACE_MODE(veh: Vehicle; toggle: BOOL);
procedure FORCE_SUBMARINE_NEURTAL_BUOYANCY(p0, p1: Any);
procedure SET_SUBMARINE_CRUSH_DEPTHS(veh: Vehicle; p1: BOOL; depth1, depth2, depth3: cfloat);
function GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(submarine: Vehicle): BOOL;
function GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(submarine: Vehicle): cint;
procedure SET_BOAT_IGNORE_LAND_PROBES(p0, p1: Any);
procedure _SET_BOUNDS_AFFECT_WATER_PROBES(veh: Vehicle; toggle: BOOL);
procedure SET_BOAT_ANCHOR(veh: Vehicle; toggle: BOOL);
function CAN_ANCHOR_BOAT_HERE(veh: Vehicle): BOOL;
function CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(veh: Vehicle): BOOL;
procedure SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(veh: Vehicle; toggle: BOOL);
procedure SET_FORCE_LOW_LOD_ANCHOR_MODE(veh: Vehicle; p1: BOOL);
procedure SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(veh: Vehicle; value: cfloat);
function IS_BOAT_ANCHORED(veh: Vehicle): BOOL;
procedure SET_BOAT_SINKS_WHEN_WRECKED(veh: Vehicle; toggle: BOOL);
procedure SET_BOAT_WRECKED(veh: Vehicle);
procedure SET_VEHICLE_SIREN(veh: Vehicle; toggle: BOOL);
function IS_VEHICLE_SIREN_ON(veh: Vehicle): BOOL;
function IS_VEHICLE_SIREN_AUDIO_ON(veh: Vehicle): BOOL;
procedure SET_VEHICLE_STRONG(veh: Vehicle; toggle: BOOL);
procedure REMOVE_VEHICLE_STUCK_CHECK(veh: Vehicle);
procedure GET_VEHICLE_COLOURS(veh: Vehicle; colorPrimary, colorSecondary: pcint);
function IS_VEHICLE_SEAT_FREE(veh: Vehicle; seatIndex: cint; isTaskRunning: BOOL): BOOL;
function GET_PED_IN_VEHICLE_SEAT(veh: Vehicle; seatIndex: cint; p2: BOOL): Ped;
function GET_LAST_PED_IN_VEHICLE_SEAT(veh: Vehicle; seatIndex: cint): Ped;
function GET_VEHICLE_LIGHTS_STATE(veh: Vehicle; lightsOn, highbeamsOn: PBOOL): BOOL;
function IS_VEHICLE_TYRE_BURST(veh: Vehicle; wheelID: cint; completely: BOOL): BOOL;
procedure SET_VEHICLE_FORWARD_SPEED(veh: Vehicle; speed: cfloat);
procedure SET_VEHICLE_FORWARD_SPEED_XY(veh: Vehicle; speed: cfloat);
procedure BRING_VEHICLE_TO_HALT(veh: Vehicle; distance: cfloat; duration: cint; p3: BOOL);
procedure SET_VEHICLE_STEER_FOR_BUILDINGS(veh: Vehicle; p1: Any);
procedure SET_VEHICLE_CAUSES_SWERVING(veh: Vehicle; toggle: BOOL);
procedure SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(p0, p1: Any);
procedure STOP_BRINGING_VEHICLE_TO_HALT(veh: Vehicle);
function IS_VEHICLE_BEING_BROUGHT_TO_HALT(veh: Vehicle): BOOL;
procedure LOWER_FORKLIFT_FORKS(forklift: Vehicle);
procedure SET_FORKLIFT_FORK_HEIGHT(veh: Vehicle; height: cfloat);
function IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(veh: Vehicle; para_entity: Entity): BOOL;
function IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(veh: Vehicle): BOOL;
function FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(para_entity: Entity): Vehicle;
function IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(veh: Vehicle; para_entity: Entity): BOOL;
procedure ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(veh: Vehicle; para_entity: Entity);
procedure DETACH_CONTAINER_FROM_HANDLER_FRAME(veh: Vehicle);
procedure SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(veh: Vehicle; p1: BOOL);
procedure SET_BOAT_DISABLE_AVOIDANCE(veh: Vehicle; p1: BOOL);
function IS_HELI_LANDING_AREA_BLOCKED(veh: Vehicle): BOOL;
procedure SET_SHORT_SLOWDOWN_FOR_LANDING(veh: Vehicle);
procedure SET_HELI_TURBULENCE_SCALAR(veh: Vehicle; p1: cfloat);
procedure SET_CAR_BOOT_OPEN(veh: Vehicle);
procedure SET_VEHICLE_TYRE_BURST(veh: Vehicle; index: cint; onRim: BOOL; p3: cfloat);
procedure SET_VEHICLE_DOORS_SHUT(veh: Vehicle; closeInstantly: BOOL);
procedure SET_VEHICLE_TYRES_CAN_BURST(veh: Vehicle; toggle: BOOL);
function GET_VEHICLE_TYRES_CAN_BURST(veh: Vehicle): BOOL;
procedure SET_VEHICLE_WHEELS_CAN_BREAK(veh: Vehicle; enabled: BOOL);
procedure SET_VEHICLE_DOOR_OPEN(veh: Vehicle; doorId: cint; loose, openInstantly: BOOL);
procedure SET_VEHICLE_DOOR_AUTO_LOCK(veh: Vehicle; doorId: cint; toggle: BOOL);
procedure SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(p0: Any);
procedure REMOVE_VEHICLE_WINDOW(veh: Vehicle; windowIndex: cint);
procedure ROLL_DOWN_WINDOWS(veh: Vehicle);
procedure ROLL_DOWN_WINDOW(veh: Vehicle; windowIndex: cint);
procedure ROLL_UP_WINDOW(veh: Vehicle; windowIndex: cint);
procedure SMASH_VEHICLE_WINDOW(veh: Vehicle; windowIndex: cint);
procedure FIX_VEHICLE_WINDOW(veh: Vehicle; windowIndex: cint);
procedure POP_OUT_VEHICLE_WINDSCREEN(veh: Vehicle);
procedure POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(veh: Vehicle; x, y, z: cfloat);
procedure SET_VEHICLE_LIGHTS(veh: Vehicle; state: cint);
procedure SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_HEADLIGHT_SHADOWS(veh: Vehicle; p1: cint);
procedure SET_VEHICLE_ALARM(veh: Vehicle; state: BOOL);
procedure START_VEHICLE_ALARM(veh: Vehicle);
function IS_VEHICLE_ALARM_ACTIVATED(veh: Vehicle): BOOL;
procedure SET_VEHICLE_INTERIORLIGHT(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_FORCE_INTERIORLIGHT(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_LIGHT_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
procedure ATTACH_VEHICLE_TO_TRAILER(veh, trailer: Vehicle; radius: cfloat);
procedure ATTACH_VEHICLE_ON_TO_TRAILER(veh, trailer: Vehicle; offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions: cfloat);
procedure STABILISE_ENTITY_ATTACHED_TO_HELI(veh: Vehicle; para_entity: Entity; p2: cfloat);
procedure DETACH_VEHICLE_FROM_TRAILER(veh: Vehicle);
function IS_VEHICLE_ATTACHED_TO_TRAILER(veh: Vehicle): BOOL;
procedure SET_TRAILER_INVERSE_MASS_SCALE(veh: Vehicle; p1: cfloat);
procedure SET_TRAILER_LEGS_RAISED(veh: Vehicle);
procedure SET_TRAILER_LEGS_LOWERED(veh: Vehicle);
procedure SET_VEHICLE_TYRE_FIXED(veh: Vehicle; tyreIndex: cint);
procedure SET_VEHICLE_NUMBER_PLATE_TEXT(veh: Vehicle; plateText: PChar);
function GET_VEHICLE_NUMBER_PLATE_TEXT(veh: Vehicle): PChar;
function GET_NUMBER_OF_VEHICLE_NUMBER_PLATES: cint;
procedure SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh: Vehicle; plateIndex: cint);
function GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh: Vehicle): cint;
procedure SET_RANDOM_TRAINS(toggle: BOOL);
function CREATE_MISSION_TRAIN(variation: cint; x, y, z: cfloat; direction: BOOL; p5, p6: Any): Vehicle;
procedure SWITCH_TRAIN_TRACK(trackId: cint; state: BOOL);
procedure SET_TRAIN_TRACK_SPAWN_FREQUENCY(trackIndex, frequency: cint);
procedure ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(p0: Any);
procedure DELETE_ALL_TRAINS;
procedure SET_TRAIN_SPEED(tr: Vehicle; speed: cfloat);
procedure SET_TRAIN_CRUISE_SPEED(tr: Vehicle; speed: cfloat);
procedure SET_RANDOM_BOATS(toggle: BOOL);
procedure SET_RANDOM_BOATS_MP(toggle: BOOL);
procedure SET_GARBAGE_TRUCKS(toggle: BOOL);
function DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(veh: Vehicle): BOOL;
function GET_VEHICLE_RECORDING_ID(recording: cint; script: PChar): cint;
procedure REQUEST_VEHICLE_RECORDING(recording: cint; script: PChar);
function HAS_VEHICLE_RECORDING_BEEN_LOADED(recording: cint; script: PChar): BOOL;
procedure REMOVE_VEHICLE_RECORDING(recording: cint; script: PChar);
function GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(id: cint; time: cfloat): Vector3;
function GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(recording: cint; time: cfloat; script: PChar): Vector3;
function GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(id: cint; time: cfloat): Vector3;
function GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(recording: cint; time: cfloat; script: PChar): Vector3;
function GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(id: cint): cfloat;
function GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(recording: cint; script: PChar): cfloat;
function GET_POSITION_IN_RECORDING(veh: Vehicle): cfloat;
function GET_TIME_POSITION_IN_RECORDING(veh: Vehicle): cfloat;
procedure START_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle; recording: cint; script: PChar; p3: BOOL);
procedure START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(veh: Vehicle; recording: cint; script: PChar; flags, time, drivingStyle: cint);
procedure FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(veh: Vehicle; p1: BOOL);
procedure STOP_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
procedure PAUSE_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
procedure UNPAUSE_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
function IS_PLAYBACK_GOING_ON_FOR_VEHICLE(veh: Vehicle): BOOL;
function IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(veh: Vehicle): BOOL;
function GET_CURRENT_PLAYBACK_FOR_VEHICLE(veh: Vehicle): cint;
procedure SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
procedure SET_PLAYBACK_SPEED(veh: Vehicle; speed: cfloat);
procedure START_PLAYBACK_RECORDED_VEHICLE_USING_AI(veh: Vehicle; recording: cint; script: PChar; speed: cfloat; drivingStyle: cint);
procedure SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle; time: cfloat);
procedure SET_PLAYBACK_TO_USE_AI(veh: Vehicle; drivingStyle: cint);
procedure SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(veh: Vehicle; time, drivingStyle: cint; p3: BOOL);
procedure SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(veh: Vehicle; x, y, z: cfloat; p4: Any);
procedure SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(veh: Vehicle; x, y, z: cfloat);
procedure SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(veh: Vehicle; x, y, z: cfloat);
procedure SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(veh: Vehicle; p1: BOOL);
procedure EXPLODE_VEHICLE_IN_CUTSCENE(veh: Vehicle; p1: BOOL);
procedure ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0: Any; p1: cfloat; p2: Any; p3, p4, p5: BOOL; p6: Any);
procedure SET_VEHICLE_MODEL_IS_SUPPRESSED(model: Hash; suppressed: BOOL);
function GET_RANDOM_VEHICLE_IN_SPHERE(x, y, z, radius: cfloat; modelHash: Hash; flags: cint): Vehicle;
function GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0, p1, p2, p3: cfloat; p4, p5, p6: cint): Vehicle;
function GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0, p1, p2, p3: cfloat; p4, p5, p6: cint): Vehicle;
function GET_CLOSEST_VEHICLE(x, y, z, radius: cfloat; modelHash: Hash; flags: cint): Vehicle;
function GET_TRAIN_CARRIAGE(tr: Vehicle; trailerNumber: cint): Vehicle;
function IS_MISSION_TRAIN(tr: Vehicle): BOOL;
procedure DELETE_MISSION_TRAIN(tr: PVehicle);
procedure SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(tr: PVehicle; p1: BOOL);
procedure SET_MISSION_TRAIN_COORDS(tr: Vehicle; x, y, z: cfloat);
function IS_THIS_MODEL_A_BOAT(model: Hash): BOOL;
function IS_THIS_MODEL_A_JETSKI(model: Hash): BOOL;
function IS_THIS_MODEL_A_PLANE(model: Hash): BOOL;
function IS_THIS_MODEL_A_HELI(model: Hash): BOOL;
function IS_THIS_MODEL_A_CAR(model: Hash): BOOL;
function IS_THIS_MODEL_A_TRAIN(model: Hash): BOOL;
function IS_THIS_MODEL_A_BIKE(model: Hash): BOOL;
function IS_THIS_MODEL_A_BICYCLE(model: Hash): BOOL;
function IS_THIS_MODEL_A_QUADBIKE(model: Hash): BOOL;
function IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(model: Hash): BOOL;
function IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(model: Hash): BOOL;
procedure SET_HELI_BLADES_FULL_SPEED(veh: Vehicle);
procedure SET_HELI_BLADES_SPEED(veh: Vehicle; speed: cfloat);
procedure FORCE_SUB_THROTTLE_FOR_TIME(veh: Vehicle; p1, p2: cfloat);
procedure SET_VEHICLE_CAN_BE_TARGETTED(veh: Vehicle; state: BOOL);
procedure SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(veh: Vehicle; p1: BOOL);
procedure SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(veh: Vehicle; state: BOOL);
procedure SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(veh: Vehicle; p1: BOOL);
procedure SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(p0, p1: Any);
function GET_VEHICLE_DIRT_LEVEL(veh: Vehicle): cfloat;
procedure SET_VEHICLE_DIRT_LEVEL(veh: Vehicle; dirtLevel: cfloat);
function GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(veh: Vehicle): BOOL;
function IS_VEHICLE_DOOR_FULLY_OPEN(veh: Vehicle; doorId: cint): BOOL;
procedure SET_VEHICLE_ENGINE_ON(veh: Vehicle; value, instantly, disableAutoStart: BOOL);
procedure SET_VEHICLE_UNDRIVEABLE(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_PROVIDES_COVER(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_DOOR_CONTROL(veh: Vehicle; doorId, speed: cint; angle: cfloat);
procedure SET_VEHICLE_DOOR_LATCHED(veh: Vehicle; doorId: cint; p2, p3, p4: BOOL);
function GET_VEHICLE_DOOR_ANGLE_RATIO(veh: Vehicle; doorId: cint): cfloat;
function GET_PED_USING_VEHICLE_DOOR(veh: Vehicle; doord: cint): Ped;
procedure SET_VEHICLE_DOOR_SHUT(veh: Vehicle; doorId: cint; closeInstantly: BOOL);
procedure SET_VEHICLE_DOOR_BROKEN(veh: Vehicle; doorId: cint; deleteDoor: BOOL);
procedure SET_VEHICLE_CAN_BREAK(veh: Vehicle; toggle: BOOL);
function DOES_VEHICLE_HAVE_ROOF(veh: Vehicle): BOOL;
procedure SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(p0: Any);
procedure SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(p0: Any);
procedure SET_CARJACK_MISSION_REMOVAL_PARAMETERS(p0, p1: Any);
function IS_BIG_VEHICLE(veh: Vehicle): BOOL;
function GET_NUMBER_OF_VEHICLE_COLOURS(veh: Vehicle): cint;
procedure SET_VEHICLE_COLOUR_COMBINATION(veh: Vehicle; colorCombination: cint);
function GET_VEHICLE_COLOUR_COMBINATION(veh: Vehicle): cint;
procedure SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(veh: Vehicle; colorIndex: cint);
function GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(veh: Vehicle): cint;
procedure SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(veh: Vehicle; p1: BOOL);
procedure SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(veh: Vehicle; p1: BOOL);
procedure SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(veh: Vehicle; p1: BOOL);
procedure GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(p0: BOOL; modelHash: PHash; successIndicator: pcint);
function GET_VEHICLE_DOOR_LOCK_STATUS(veh: Vehicle): cint;
function GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(veh: Vehicle; doorId: cint): cint;
function IS_VEHICLE_DOOR_DAMAGED(veh: Vehicle; doorID: cint): BOOL;
procedure SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(veh: Vehicle; doorId: cint; isBreakable: BOOL);
function IS_VEHICLE_BUMPER_BOUNCING(veh: Vehicle; frontBumper: BOOL): BOOL;
function IS_VEHICLE_BUMPER_BROKEN_OFF(veh: Vehicle; frontBumper: BOOL): BOOL;
function IS_COP_VEHICLE_IN_AREA_3D(x1, x2, y1, y2, z1, z2: cfloat): BOOL;
function IS_VEHICLE_ON_ALL_WHEELS(veh: Vehicle): BOOL;
function GET_VEHICLE_MODEL_VALUE(vehicleModel: Hash): cint;
function GET_VEHICLE_LAYOUT_HASH(veh: Vehicle): Hash;
function GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(veh: Vehicle; p1: cint): Hash;
procedure SET_RENDER_TRAIN_AS_DERAILED(tr: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_EXTRA_COLOURS(veh: Vehicle; pearlescentColor, wheelColor: cint);
procedure GET_VEHICLE_EXTRA_COLOURS(veh: Vehicle; pearlescentColor, wheelColor: pcint);
procedure SET_VEHICLE_EXTRA_COLOUR_5(veh: Vehicle; color: cint);
procedure GET_VEHICLE_EXTRA_COLOUR_5(veh: Vehicle; color: pcint);
procedure SET_VEHICLE_EXTRA_COLOUR_6(veh: Vehicle; color: cint);
procedure GET_VEHICLE_EXTRA_COLOUR_6(veh: Vehicle; color: pcint);
procedure STOP_ALL_GARAGE_ACTIVITY;
procedure SET_VEHICLE_FIXED(veh: Vehicle);
procedure SET_VEHICLE_DEFORMATION_FIXED(veh: Vehicle);
procedure SET_VEHICLE_CAN_ENGINE_MISSFIRE(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_CAN_LEAK_OIL(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_CAN_LEAK_PETROL(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_VEHICLE_ENGINE_FIRES(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_PRETEND_OCCUPANTS(veh: Vehicle; toggle: BOOL);
procedure REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6: Any);
procedure SET_VEHICLE_STEER_BIAS(veh: Vehicle; value: cfloat);
function IS_VEHICLE_EXTRA_TURNED_ON(veh: Vehicle; extraId: cint): BOOL;
procedure SET_VEHICLE_EXTRA(veh: Vehicle; extraId: cint; disable: BOOL);
function DOES_EXTRA_EXIST(veh: Vehicle; extraId: cint): BOOL;
function IS_EXTRA_BROKEN_OFF(veh: Vehicle; extraId: cint): BOOL;
procedure SET_CONVERTIBLE_ROOF(veh: Vehicle; p1: BOOL);
procedure LOWER_CONVERTIBLE_ROOF(veh: Vehicle; instantlyLower: BOOL);
procedure RAISE_CONVERTIBLE_ROOF(veh: Vehicle; instantlyRaise: BOOL);
function GET_CONVERTIBLE_ROOF_STATE(veh: Vehicle): cint;
function IS_VEHICLE_A_CONVERTIBLE(veh: Vehicle; p1: BOOL): BOOL;
function TRANSFORM_TO_SUBMARINE(veh: Vehicle; noAnimation: BOOL): BOOL;
procedure TRANSFORM_TO_CAR(veh: Vehicle; noAnimation: BOOL);
function IS_VEHICLE_IN_SUBMARINE_MODE(veh: Vehicle): BOOL;
function IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(veh: Vehicle): BOOL;
procedure SET_VEHICLE_DAMAGE(veh: Vehicle; xOffset, yOffset, zOffset, damage, radius: cfloat; focusOnModel: BOOL);
procedure SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(veh: Vehicle; toggle: BOOL);
function GET_VEHICLE_ENGINE_HEALTH(veh: Vehicle): cfloat;
procedure SET_VEHICLE_ENGINE_HEALTH(veh: Vehicle; health: cfloat);
procedure SET_PLANE_ENGINE_HEALTH(veh: Vehicle; health: cfloat);
function GET_VEHICLE_PETROL_TANK_HEALTH(veh: Vehicle): cfloat;
procedure SET_VEHICLE_PETROL_TANK_HEALTH(veh: Vehicle; health: cfloat);
function IS_VEHICLE_STUCK_TIMER_UP(veh: Vehicle; p1, ms: cint): BOOL;
procedure RESET_VEHICLE_STUCK_TIMER(veh: Vehicle; nullAttributes: cint);
function IS_VEHICLE_DRIVEABLE(veh: Vehicle; isOnFireCheck: BOOL): BOOL;
procedure SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(veh: Vehicle; owned: BOOL);
procedure SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(veh: Vehicle; p1: BOOL);
procedure SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(veh: Vehicle; toggle: BOOL);
procedure START_VEHICLE_HORN(veh: Vehicle; duration: cint; mode: Hash; forever: BOOL);
procedure SET_VEHICLE_IN_CAR_MOD_SHOP(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_HAS_STRONG_AXLES(veh: Vehicle; toggle: BOOL);
function GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash: Hash): PChar;
function GET_MAKE_NAME_FROM_VEHICLE_MODEL(modelHash: Hash): PChar;
function GET_VEHICLE_DEFORMATION_AT_POS(veh: Vehicle; offsetX, offsetY, offsetZ: cfloat): Vector3;
procedure SET_VEHICLE_LIVERY(veh: Vehicle; livery: cint);
function GET_VEHICLE_LIVERY(veh: Vehicle): cint;
function GET_VEHICLE_LIVERY_COUNT(veh: Vehicle): cint;
procedure SET_VEHICLE_LIVERY2(veh: Vehicle; livery: cint);
function GET_VEHICLE_LIVERY2(veh: Vehicle): cint;
function GET_VEHICLE_LIVERY2_COUNT(veh: Vehicle): cint;
function IS_VEHICLE_WINDOW_INTACT(veh: Vehicle; windowIndex: cint): BOOL;
function ARE_ALL_VEHICLE_WINDOWS_INTACT(veh: Vehicle): BOOL;
function ARE_ANY_VEHICLE_SEATS_FREE(veh: Vehicle): BOOL;
procedure RESET_VEHICLE_WHEELS(veh: Vehicle; toggle: BOOL);
function IS_HELI_PART_BROKEN(veh: Vehicle; p1, p2, p3: BOOL): BOOL;
function GET_HELI_MAIN_ROTOR_HEALTH(veh: Vehicle): cfloat;
function GET_HELI_TAIL_ROTOR_HEALTH(veh: Vehicle): cfloat;
function GET_HELI_TAIL_BOOM_HEALTH(veh: Vehicle): cfloat;
procedure SET_HELI_MAIN_ROTOR_HEALTH(veh: Vehicle; health: cfloat);
procedure SET_HELI_TAIL_ROTOR_HEALTH(veh: Vehicle; health: cfloat);
function SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(veh: Vehicle; toggle: BOOL): BOOL;
procedure SET_VEHICLE_NAME_DEBUG(veh: Vehicle; name: PChar);
procedure SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(veh: Vehicle; toggle: BOOL);
procedure SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_DISABLE_TOWING(veh: Vehicle; toggle: BOOL);
function GET_VEHICLE_HAS_LANDING_GEAR(veh: Vehicle): BOOL;
procedure CONTROL_LANDING_GEAR(veh: Vehicle; state: cint);
function GET_LANDING_GEAR_STATE(veh: Vehicle): cint;
function IS_ANY_VEHICLE_NEAR_POINT(x, y, z, radius: cfloat): BOOL;
procedure REQUEST_VEHICLE_HIGH_DETAIL_MODEL(veh: Vehicle);
function _GET_VEHICLE_MODEL_NUM_DRIVE_GEARS(vehicleModel: Hash): cint;
function _GET_VEHICLE_MAX_DRIVE_GEAR_COUNT(veh: Vehicle): cint;
function _GET_VEHICLE_CURRENT_DRIVE_GEAR(veh: Vehicle): cint;
function _GET_VEHICLE_CURRENT_REV_RATIO(veh: Vehicle): cfloat;
procedure REMOVE_VEHICLE_HIGH_DETAIL_MODEL(veh: Vehicle);
function IS_VEHICLE_HIGH_DETAIL(veh: Vehicle): BOOL;
procedure REQUEST_VEHICLE_ASSET(vehicleHash: Hash; vehicleAsset: cint);
function HAS_VEHICLE_ASSET_LOADED(vehicleAsset: cint): BOOL;
procedure REMOVE_VEHICLE_ASSET(vehicleAsset: cint);
procedure SET_VEHICLE_TOW_TRUCK_ARM_POSITION(veh: Vehicle; position: cfloat);
procedure _SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM(towTruck, veh: Vehicle);
procedure ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck, veh: Vehicle; rear: BOOL; hookOffsetX, hookOffsetY, hookOffsetZ: cfloat);
procedure DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck, veh: Vehicle);
function DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(veh: Vehicle): BOOL;
function IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck, veh: Vehicle): BOOL;
function GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck: Vehicle): Entity;
function SET_VEHICLE_AUTOMATICALLY_ATTACHES(veh: Vehicle; p1: BOOL; p2: Any): Entity;
procedure SET_VEHICLE_BULLDOZER_ARM_POSITION(veh: Vehicle; position: cfloat; p2: BOOL);
procedure SET_VEHICLE_TANK_TURRET_POSITION(veh: Vehicle; position: cfloat; p2: BOOL);
procedure SET_VEHICLE_TURRET_TARGET(veh: Vehicle; p1: BOOL; x, y, z: cfloat; p5: BOOL);
procedure SET_VEHICLE_TANK_STATIONARY(veh: Vehicle; p1: BOOL);
procedure SET_VEHICLE_TURRET_SPEED_THIS_FRAME(veh: Vehicle; speed: cfloat);
procedure DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(veh: Vehicle);
procedure SET_VEHICLE_FLIGHT_NOZZLE_POSITION(veh: Vehicle; angleRatio: cfloat);
procedure SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(veh: Vehicle; angle: cfloat);
function GET_VEHICLE_FLIGHT_NOZZLE_POSITION(plane: Vehicle): cfloat;
procedure SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(veh: Vehicle; toggle: BOOL);
function GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(outVec: PVector3; p1: Any; outVec1: PVector3; p3, p4, p5, p6, p7, p8: Any): BOOL;
procedure SET_VEHICLE_BURNOUT(veh: Vehicle; toggle: BOOL);
function IS_VEHICLE_IN_BURNOUT(veh: Vehicle): BOOL;
procedure SET_VEHICLE_REDUCE_GRIP(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_REDUCE_GRIP_LEVEL(veh: Vehicle; val: cint);
procedure SET_VEHICLE_INDICATOR_LIGHTS(veh: Vehicle; turnSignal: cint; toggle: BOOL);
procedure SET_VEHICLE_BRAKE_LIGHTS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_TAIL_LIGHTS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_HANDBRAKE(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_BRAKE(veh: Vehicle; toggle: BOOL);
procedure INSTANTLY_FILL_VEHICLE_POPULATION;
function HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED: BOOL;
procedure NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(toggle: BOOL);
procedure NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(p0: cint);
function GET_VEHICLE_TRAILER_VEHICLE(veh: Vehicle; trailer: PVehicle): BOOL;
function _GET_VEHICLE_TRAILER_PARENT_VEHICLE(trailer: Vehicle): Vehicle;
procedure SET_VEHICLE_USES_LARGE_REAR_RAMP(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_RUDDER_BROKEN(veh: Vehicle; toggle: BOOL);
procedure SET_CONVERTIBLE_ROOF_LATCH_STATE(veh: Vehicle; state: BOOL);
function GET_VEHICLE_ESTIMATED_MAX_SPEED(veh: Vehicle): cfloat;
function GET_VEHICLE_MAX_BRAKING(veh: Vehicle): cfloat;
function GET_VEHICLE_MAX_TRACTION(veh: Vehicle): cfloat;
function GET_VEHICLE_ACCELERATION(veh: Vehicle): cfloat;
function GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(modelHash: Hash): cfloat;
function GET_VEHICLE_MODEL_MAX_BRAKING(modelHash: Hash): cfloat;
function GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(modelHash: Hash): cfloat;
function GET_VEHICLE_MODEL_MAX_TRACTION(modelHash: Hash): cfloat;
function GET_VEHICLE_MODEL_ACCELERATION(modelHash: Hash): cfloat;
function GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(modelHash: Hash): cfloat;
function GET_FLYING_VEHICLE_MODEL_AGILITY(modelHash: Hash): cfloat;
function GET_BOAT_VEHICLE_MODEL_AGILITY(modelHash: Hash): cfloat;
function GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(vehicleClass: cint): cfloat;
function GET_VEHICLE_CLASS_MAX_TRACTION(vehicleClass: cint): cfloat;
function GET_VEHICLE_CLASS_MAX_AGILITY(vehicleClass: cint): cfloat;
function GET_VEHICLE_CLASS_MAX_ACCELERATION(vehicleClass: cint): cfloat;
function GET_VEHICLE_CLASS_MAX_BRAKING(vehicleClass: cint): cfloat;
function ADD_ROAD_NODE_SPEED_ZONE(x, y, z, radius, speed: cfloat; p5: BOOL): cint;
function REMOVE_ROAD_NODE_SPEED_ZONE(speedzone: cint): BOOL;
procedure OPEN_BOMB_BAY_DOORS(veh: Vehicle);
procedure CLOSE_BOMB_BAY_DOORS(veh: Vehicle);
function GET_ARE_BOMB_BAY_DOORS_OPEN(aircraft: Vehicle): BOOL;
function IS_VEHICLE_SEARCHLIGHT_ON(veh: Vehicle): BOOL;
procedure SET_VEHICLE_SEARCHLIGHT(heli: Vehicle; toggle, canBeUsedByAI: BOOL);
function DOES_VEHICLE_HAVE_SEARCHLIGHT(veh: Vehicle): BOOL;
function IS_ENTRY_POINT_FOR_SEAT_CLEAR(_ped: Ped; veh: Vehicle; seatIndex: cint; side, onEnter: BOOL): BOOL;
function GET_ENTRY_POINT_POSITION(veh: Vehicle; doorId: cint): Vector3;
function CAN_SHUFFLE_SEAT(veh: Vehicle; seatIndex: cint): BOOL;
function GET_NUM_MOD_KITS(veh: Vehicle): cint;
procedure SET_VEHICLE_MOD_KIT(veh: Vehicle; modKit: cint);
function GET_VEHICLE_MOD_KIT(veh: Vehicle): cint;
function GET_VEHICLE_MOD_KIT_TYPE(veh: Vehicle): cint;
function GET_VEHICLE_WHEEL_TYPE(veh: Vehicle): cint;
procedure SET_VEHICLE_WHEEL_TYPE(veh: Vehicle; WheelType: cint);
function GET_NUM_MOD_COLORS(paintType: cint; p1: BOOL): cint;
procedure SET_VEHICLE_MOD_COLOR_1(veh: Vehicle; paintType, color, pearlescentColor: cint);
procedure SET_VEHICLE_MOD_COLOR_2(veh: Vehicle; paintType, color: cint);
procedure GET_VEHICLE_MOD_COLOR_1(veh: Vehicle; paintType, color, pearlescentColor: pcint);
procedure GET_VEHICLE_MOD_COLOR_2(veh: Vehicle; paintType, color: pcint);
function GET_VEHICLE_MOD_COLOR_1_NAME(veh: Vehicle; p1: BOOL): PChar;
function GET_VEHICLE_MOD_COLOR_2_NAME(veh: Vehicle): PChar;
function HAVE_VEHICLE_MODS_STREAMED_IN(veh: Vehicle): BOOL;
function IS_VEHICLE_MOD_GEN9_EXCLUSIVE(veh: Vehicle; modType, modIndex: cint): BOOL;
procedure SET_VEHICLE_MOD(veh: Vehicle; modType, modIndex: cint; customTires: BOOL);
function GET_VEHICLE_MOD(veh: Vehicle; modType: cint): cint;
function GET_VEHICLE_MOD_VARIATION(veh: Vehicle; modType: cint): cint;
function GET_NUM_VEHICLE_MODS(veh: Vehicle; modType: cint): cint;
procedure REMOVE_VEHICLE_MOD(veh: Vehicle; modType: cint);
procedure TOGGLE_VEHICLE_MOD(veh: Vehicle; modType: cint; toggle: BOOL);
function IS_TOGGLE_MOD_ON(veh: Vehicle; modType: cint): BOOL;
function GET_MOD_TEXT_LABEL(veh: Vehicle; modType, modValue: cint): PChar;
function GET_MOD_SLOT_NAME(veh: Vehicle; modType: cint): PChar;
function GET_LIVERY_NAME(veh: Vehicle; liveryIndex: cint): PChar;
function GET_VEHICLE_MOD_MODIFIER_VALUE(veh: Vehicle; modType, modIndex: cint): cint;
function GET_VEHICLE_MOD_IDENTIFIER_HASH(veh: Vehicle; modType, modIndex: cint): Hash;
procedure PRELOAD_VEHICLE_MOD(veh: Vehicle; modType, modIndex: cint);
function HAS_PRELOAD_MODS_FINISHED(veh: Vehicle): BOOL;
procedure RELEASE_PRELOAD_MODS(veh: Vehicle);
procedure SET_VEHICLE_TYRE_SMOKE_COLOR(veh: Vehicle; r, g, b: cint);
procedure GET_VEHICLE_TYRE_SMOKE_COLOR(veh: Vehicle; r, g, b: pcint);
procedure SET_VEHICLE_WINDOW_TINT(veh: Vehicle; tint: cint);
function GET_VEHICLE_WINDOW_TINT(veh: Vehicle): cint;
function GET_NUM_VEHICLE_WINDOW_TINTS: cint;
procedure GET_VEHICLE_COLOR(veh: Vehicle; r, g, b: pcint);
function GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(veh: Vehicle): cint;
function GET_VEHICLE_CAUSE_OF_DESTRUCTION(veh: Vehicle): Hash;
procedure OVERRIDE_PLANE_DAMAGE_THREHSOLD(veh: Vehicle; health: cfloat);
procedure _SET_TRANSMISSION_REDUCED_GEAR_RATIO(veh: Vehicle; toggle: BOOL);
function _GET_VEHICLE_DESIRED_DRIVE_GEAR(veh: Vehicle): cint;
function GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(veh: Vehicle): BOOL;
function GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(veh: Vehicle): BOOL;
function GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(veh: Vehicle): BOOL;
procedure MODIFY_VEHICLE_TOP_SPEED(veh: Vehicle; value: cfloat);
procedure SET_VEHICLE_MAX_SPEED(veh: Vehicle; speed: cfloat);
procedure SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(veh: Vehicle; p1: BOOL);
procedure SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(veh: Vehicle; toggle: BOOL; p2: cfloat);
function ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(p0, p1, p2, p3, p4, p5, p6: cfloat): cint;
procedure REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(p0: cint);
function IS_ANY_PED_RAPPELLING_FROM_HELI(veh: Vehicle): BOOL;
procedure SET_VEHICLE_CHEAT_POWER_INCREASE(veh: Vehicle; value: cfloat);
procedure SET_VEHICLE_INFLUENCES_WANTED_LEVEL(p0: Any; p1: BOOL);
procedure SET_VEHICLE_IS_WANTED(veh: Vehicle; state: BOOL);
procedure SWING_BOAT_BOOM_TO_RATIO(veh: Vehicle; ratio: cfloat);
procedure SWING_BOAT_BOOM_FREELY(veh: Vehicle; toggle: BOOL);
procedure ALLOW_BOAT_BOOM_TO_ANIMATE(veh: Vehicle; toggle: BOOL);
function GET_BOAT_BOOM_POSITION_RATIO(veh: Vehicle): cfloat;
procedure DISABLE_PLANE_AILERON(veh: Vehicle; p1, p2: BOOL);
function GET_IS_VEHICLE_ENGINE_RUNNING(veh: Vehicle): BOOL;
procedure SET_VEHICLE_USE_ALTERNATE_HANDLING(veh: Vehicle; toggle: BOOL);
procedure SET_BIKE_ON_STAND(veh: Vehicle; x, y: cfloat);
procedure SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(veh: Vehicle; p1: BOOL);
procedure LOCK_DOORS_WHEN_NO_LONGER_NEEDED(veh: Vehicle);
procedure SET_LAST_DRIVEN_VEHICLE(veh: Vehicle);
function GET_LAST_DRIVEN_VEHICLE: Vehicle;
procedure CLEAR_LAST_DRIVEN_VEHICLE;
procedure SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(veh: Vehicle; toggle: BOOL);
procedure SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(plane: Vehicle; height: cint);
procedure SET_VEHICLE_LOD_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
procedure SET_VEHICLE_CAN_SAVE_IN_GARAGE(veh: Vehicle; toggle: BOOL);
function GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(veh: Vehicle): cint;
function GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(veh: Vehicle): cint;
procedure SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(p0: Any; p1: BOOL);
procedure SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(veh: Vehicle; toggle: BOOL);
procedure COPY_VEHICLE_DAMAGES(sourceVehicle, targetVehicle: Vehicle);
procedure DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS;
procedure SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(distance: cfloat);
procedure SET_VEHICLE_SHOOT_AT_TARGET(driver: Ped; para_entity: Entity; xTarget, yTarget, zTarget: cfloat);
function GET_VEHICLE_LOCK_ON_TARGET(veh: Vehicle; entity: PEntity): BOOL;
procedure SET_FORCE_HD_VEHICLE(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(veh: Vehicle; p1: cfloat);
function GET_VEHICLE_PLATE_TYPE(veh: Vehicle): cint;
procedure TRACK_VEHICLE_VISIBILITY(veh: Vehicle);
function IS_VEHICLE_VISIBLE(veh: Vehicle): BOOL;
procedure SET_VEHICLE_GRAVITY(veh: Vehicle; toggle: BOOL);
procedure SET_ENABLE_VEHICLE_SLIPSTREAMING(toggle: BOOL);
procedure SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(toggle: BOOL);
function GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(veh: Vehicle): cfloat;
function IS_VEHICLE_PRODUCING_SLIP_STREAM(veh: Vehicle): BOOL;
procedure SET_VEHICLE_INACTIVE_DURING_PLAYBACK(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_ACTIVE_DURING_PLAYBACK(veh: Vehicle; toggle: BOOL);
function IS_VEHICLE_SPRAYABLE(veh: Vehicle): BOOL;
procedure SET_VEHICLE_ENGINE_CAN_DEGRADE(veh: Vehicle; toggle: BOOL);
procedure DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(veh: Vehicle; p1, p2: cint);
procedure ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(veh: Vehicle);
function IS_PLANE_LANDING_GEAR_INTACT(plane: Vehicle): BOOL;
function ARE_PLANE_PROPELLERS_INTACT(plane: Vehicle): BOOL;
function SET_PLANE_PROPELLER_HEALTH(plane: Vehicle; health: cfloat): BOOL;
procedure SET_VEHICLE_CAN_DEFORM_WHEELS(veh: Vehicle; toggle: BOOL);
function IS_VEHICLE_STOLEN(veh: Vehicle): BOOL;
procedure SET_VEHICLE_IS_STOLEN(veh: Vehicle; isStolen: BOOL);
procedure SET_PLANE_TURBULENCE_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
function ARE_WINGS_OF_PLANE_INTACT(plane: Vehicle): BOOL;
procedure ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(veh: Vehicle);
procedure DETACH_VEHICLE_FROM_CARGOBOB(veh, cargobob: Vehicle);
function DETACH_VEHICLE_FROM_ANY_CARGOBOB(veh: Vehicle): BOOL;
function DETACH_ENTITY_FROM_CARGOBOB(cargobob: Vehicle; para_entity: Entity): BOOL;
function IS_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob, vehicleAttached: Vehicle): BOOL;
function GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob: Vehicle): Vehicle;
function GET_ENTITY_ATTACHED_TO_CARGOBOB(p0: Any): Entity;
procedure ATTACH_VEHICLE_TO_CARGOBOB(cargobob, veh: Vehicle; p2: cint; x, y, z: cfloat);
procedure ATTACH_ENTITY_TO_CARGOBOB(p0, p1, p2, p3, p4, p5: Any);
procedure SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(cargobob: Vehicle; toggle: BOOL);
procedure SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(p0, p1: Any);
function CAN_CARGOBOB_PICK_UP_ENTITY(p0, p1: Any): BOOL;
function GET_ATTACHED_PICK_UP_HOOK_POSITION(cargobob: Vehicle): Vector3;
function DOES_CARGOBOB_HAVE_PICK_UP_ROPE(cargobob: Vehicle): BOOL;
procedure CREATE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob: Vehicle; state: cint);
procedure REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob: Vehicle);
procedure SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(cargobob: Vehicle; length1, length2: cfloat; p3: BOOL);
procedure SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(p0, p1, p2: Any);
procedure SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(p0, p1: Any);
procedure SET_CARGOBOB_PICKUP_ROPE_TYPE(p0, p1: Any);
function DOES_CARGOBOB_HAVE_PICKUP_MAGNET(cargobob: Vehicle): BOOL;
procedure SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(cargobob: Vehicle; isActive: BOOL);
procedure SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(cargobob: Vehicle; strength: cfloat);
procedure SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(cargobob: Vehicle; p1: cfloat);
procedure SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(cargobob: Vehicle; p1: cfloat);
procedure SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(cargobob: Vehicle; p1: cfloat);
procedure SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(cargobob: Vehicle; p1: cfloat);
procedure SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(veh: Vehicle; p1: cfloat);
procedure SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(veh, cargobob: Vehicle);
procedure SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(veh: Vehicle; p1, p2: BOOL);
procedure SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(veh: Vehicle; p1: BOOL);
function DOES_VEHICLE_HAVE_WEAPONS(veh: Vehicle): BOOL;
procedure SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(veh: Vehicle; p1: BOOL);
procedure DISABLE_VEHICLE_WEAPON(disabled: BOOL; weaponHash: Hash; veh: Vehicle; owner: Ped);
function IS_VEHICLE_WEAPON_DISABLED(weaponHash: Hash; veh: Vehicle; owner: Ped): BOOL;
procedure SET_VEHICLE_USED_FOR_PILOT_SCHOOL(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(veh: Vehicle; toggle: BOOL);
function GET_VEHICLE_CLASS(veh: Vehicle): cint;
function GET_VEHICLE_CLASS_FROM_NAME(modelHash: Hash): cint;
procedure SET_PLAYERS_LAST_VEHICLE(veh: Vehicle);
procedure SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(veh: Vehicle; toggle: BOOL);
procedure SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(veh: Vehicle; p1: cfloat);
procedure SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_IMPATIENCE_TIMER(veh: Vehicle; p1: Any);
procedure SET_VEHICLE_HANDLING_OVERRIDE(veh: Vehicle; para_hash: Hash);
procedure SET_VEHICLE_EXTENDED_REMOVAL_RANGE(veh: Vehicle; range: cint);
procedure SET_VEHICLE_STEERING_BIAS_SCALAR(p0: Any; p1: cfloat);
procedure SET_HELI_CONTROL_LAGGING_RATE_SCALAR(helicopter: Vehicle; multiplier: cfloat);
procedure SET_VEHICLE_FRICTION_OVERRIDE(veh: Vehicle; friction: cfloat);
procedure SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(veh: Vehicle; toggle: BOOL);
function ARE_PLANE_CONTROL_PANELS_INTACT(veh: Vehicle; p1: BOOL): BOOL;
procedure SET_VEHICLE_CEILING_HEIGHT(veh: Vehicle; height: cfloat);
procedure SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(veh: Vehicle; toggle: BOOL);
procedure CLEAR_VEHICLE_ROUTE_HISTORY(veh: Vehicle);
function DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator: PChar): Vehicle;
procedure SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_EXCLUSIVE_DRIVER(veh: Vehicle; _ped: Ped; index: cint);
function IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(_ped: Ped; veh: Vehicle; outIndex: pcint): BOOL;
procedure DISABLE_INDIVIDUAL_PLANE_PROPELLER(veh: Vehicle; propeller: cint);
procedure SET_VEHICLE_FORCE_AFTERBURNER(veh: Vehicle; toggle: BOOL);
procedure SET_DONT_PROCESS_VEHICLE_GLASS(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_WANTED_CONES_RESPONSE(veh: Vehicle; toggle: BOOL);
procedure SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(veh: Vehicle; toggle: BOOL);
procedure SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(veh: Vehicle; p1: cfloat);
procedure SET_VEHICLE_READY_FOR_CLEANUP(p0: Any);
procedure SET_DISTANT_CARS_ENABLED(toggle: BOOL);
procedure SET_VEHICLE_NEON_COLOUR(veh: Vehicle; r, g, b: cint);
procedure SET_VEHICLE_NEON_INDEX_COLOUR(veh: Vehicle; index: cint);
procedure GET_VEHICLE_NEON_COLOUR(veh: Vehicle; r, g, b: pcint);
procedure SET_VEHICLE_NEON_ENABLED(veh: Vehicle; index: cint; toggle: BOOL);
function GET_VEHICLE_NEON_ENABLED(veh: Vehicle; index: cint): BOOL;
procedure SET_AMBIENT_VEHICLE_NEON_ENABLED(p0: BOOL);
procedure SUPPRESS_NEONS_ON_VEHICLE(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_SUPERDUMMY(veh: Vehicle; p1: BOOL);
procedure REQUEST_VEHICLE_DIAL(veh: Vehicle);
function GET_VEHICLE_BODY_HEALTH(veh: Vehicle): cfloat;
procedure SET_VEHICLE_BODY_HEALTH(veh: Vehicle; value: cfloat);
procedure GET_VEHICLE_SIZE(veh: Vehicle; out1, out2: PVector3);
function GET_FAKE_SUSPENSION_LOWERING_AMOUNT(veh: Vehicle): cfloat;
procedure SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(multiplier: cfloat);
function GET_NUMBER_OF_VEHICLE_DOORS(veh: Vehicle): cint;
procedure SET_HYDRAULICS_CONTROL(veh: Vehicle; toggle: BOOL);
procedure SET_CAN_ADJUST_GROUND_CLEARANCE(veh: Vehicle; p1: BOOL);
function GET_VEHICLE_HEALTH_PERCENTAGE(veh: Vehicle; maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth: cfloat): cfloat;
function GET_VEHICLE_IS_MERCENARY(veh: Vehicle): BOOL;
procedure SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(veh: Vehicle; p1: BOOL);
procedure SET_VEHICLE_KERS_ALLOWED(veh: Vehicle; toggle: BOOL);
function GET_VEHICLE_HAS_KERS(veh: Vehicle): BOOL;
procedure SET_PLANE_RESIST_TO_EXPLOSION(veh: Vehicle; toggle: BOOL);
procedure SET_HELI_RESIST_TO_EXPLOSION(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_BMX_EXTRA_TRICK_FORCES(p0: Any);
procedure SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(veh: Vehicle; wheelId: cint; value: cfloat);
function GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(veh: Vehicle; wheelId: cint): cfloat;
procedure SET_CAN_USE_HYDRAULICS(veh: Vehicle; toggle: BOOL);
procedure SET_HYDRAULIC_VEHICLE_STATE(veh: Vehicle; state: cint);
procedure SET_HYDRAULIC_WHEEL_STATE(veh: Vehicle; wheelId, state: cint; value: cfloat; p4: Any);
function HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(p0, p1: Any): BOOL;
procedure CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(veh: Vehicle);
procedure SET_VEHICLE_BOBBLEHEAD_VELOCITY(x, y, p2: cfloat);
function GET_VEHICLE_IS_DUMMY(p0: Any): BOOL;
function SET_VEHICLE_DAMAGE_SCALE(veh: Vehicle; p1: cfloat): BOOL;
function SET_VEHICLE_WEAPON_DAMAGE_SCALE(veh: Vehicle; multiplier: cfloat): BOOL;
function SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(p0, p1: Any): BOOL;
procedure SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(p0, p1: Any);
procedure SET_BIKE_EASY_TO_LAND(veh: Vehicle; toggle: BOOL);
procedure SET_INVERT_VEHICLE_CONTROLS(veh: Vehicle; state: BOOL);
procedure SET_SPEED_BOOST_EFFECT_DISABLED(disabled: BOOL);
procedure SET_SLOW_DOWN_EFFECT_DISABLED(disabled: BOOL);
procedure SET_FORMATION_LEADER(veh: Vehicle; x, y, z, p4: cfloat);
procedure RESET_FORMATION_LEADER;
function GET_IS_BOAT_CAPSIZED(veh: Vehicle): BOOL;
procedure SET_ALLOW_RAMMING_SOOP_OR_RAMP(p0, p1: Any);
procedure SET_SCRIPT_RAMP_IMPULSE_SCALE(veh: Vehicle; impulseScale: cfloat);
function GET_IS_DOOR_VALID(veh: Vehicle; doorId: cint): BOOL;
procedure SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(veh: Vehicle; seconds: cfloat);
function GET_HAS_ROCKET_BOOST(veh: Vehicle): BOOL;
function IS_ROCKET_BOOST_ACTIVE(veh: Vehicle): BOOL;
procedure SET_ROCKET_BOOST_ACTIVE(veh: Vehicle; active: BOOL);
function GET_HAS_RETRACTABLE_WHEELS(veh: Vehicle): BOOL;
function GET_IS_WHEELS_RETRACTED(veh: Vehicle): BOOL;
procedure SET_WHEELS_EXTENDED_INSTANTLY(veh: Vehicle);
procedure SET_WHEELS_RETRACTED_INSTANTLY(veh: Vehicle);
function GET_CAR_HAS_JUMP(veh: Vehicle): BOOL;
procedure SET_USE_HIGHER_CAR_JUMP(veh: Vehicle; toggle: BOOL);
procedure SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_WEAPON_RESTRICTED_AMMO(veh: Vehicle; weaponIndex, capacity: cint);
function GET_VEHICLE_WEAPON_RESTRICTED_AMMO(veh: Vehicle; weaponIndex: cint): cint;
function GET_VEHICLE_HAS_PARACHUTE(veh: Vehicle): BOOL;
function GET_VEHICLE_CAN_DEPLOY_PARACHUTE(veh: Vehicle): BOOL;
procedure VEHICLE_START_PARACHUTING(veh: Vehicle; active: BOOL);
function IS_VEHICLE_PARACHUTE_DEPLOYED(veh: Vehicle): BOOL;
procedure VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(veh: Vehicle; toggle: BOOL);
procedure VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(p0, p1: Any);
procedure VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(p0, p1: Any);
procedure VEHICLE_SET_JET_WASH_FORCE_ENABLED(p0: Any);
procedure SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(toggle: BOOL);
procedure _SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS(toggle: BOOL);
procedure VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(veh: Vehicle; modelHash: Hash);
procedure VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(veh: Vehicle; textureVariation: cint);
function VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(p0, p1: Any): cint;
function VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(p0, p1: Any): cint;
function VEHICLE_SET_OVERRIDE_SIDE_RATIO(p0, p1: Any): cint;
function GET_ALL_VEHICLES(vehsStruct: PAny): cint;
procedure SET_CARGOBOB_EXTA_PICKUP_RANGE(p0, p1: Any);
procedure SET_OVERRIDE_VEHICLE_DOOR_TORQUE(p0, p1, p2: Any);
procedure SET_WHEELIE_ENABLED(veh: Vehicle; enabled: BOOL);
procedure SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(p0, p1: Any);
procedure SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(veh: Vehicle; value: cfloat);
procedure SET_TRAILER_ATTACHMENT_ENABLED(p0, p1: Any);
procedure SET_ROCKET_BOOST_FILL(veh: Vehicle; percentage: cfloat);
procedure SET_GLIDER_ACTIVE(veh: Vehicle; state: BOOL);
procedure SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(veh: Vehicle; shouldReset: BOOL);
procedure SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(veh: Vehicle; disable: BOOL);
procedure SET_GROUND_EFFECT_REDUCES_DRAG(toggle: BOOL);
procedure SET_DISABLE_MAP_COLLISION(veh: Vehicle);
procedure SET_DISABLE_PED_STAND_ON_TOP(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_DAMAGE_SCALES(veh: Vehicle; p1, p2, p3, p4: Any);
procedure SET_PLANE_SECTION_DAMAGE_SCALE(veh: Vehicle; p1, p2: Any);
procedure SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_BOMB_AMMO(veh: Vehicle; bombCount: cint);
function GET_VEHICLE_BOMB_AMMO(veh: Vehicle): cint;
procedure SET_VEHICLE_COUNTERMEASURE_AMMO(veh: Vehicle; counterMeasureCount: cint);
function GET_VEHICLE_COUNTERMEASURE_AMMO(veh: Vehicle): cint;
procedure SET_HELI_COMBAT_OFFSET(veh: Vehicle; x, y, z: cfloat);
function GET_CAN_VEHICLE_BE_PLACED_HERE(veh: Vehicle; x, y, z, rotX, rotY, rotZ: cfloat; p7: cint; p8: Any): BOOL;
procedure SET_DISABLE_AUTOMATIC_CRASH_TASK(veh: Vehicle; toggle: BOOL);
procedure SET_SPECIAL_FLIGHT_MODE_RATIO(veh: Vehicle; ratio: cfloat);
procedure SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh: Vehicle; targetRatio: cfloat);
procedure SET_SPECIAL_FLIGHT_MODE_ALLOWED(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_HOVER_MODE_FLIGHT(veh: Vehicle; toggle: BOOL);
function GET_OUTRIGGERS_DEPLOYED(veh: Vehicle): BOOL;
function FIND_SPAWN_COORDINATES_FOR_HELI(_ped: Ped): Vector3;
procedure SET_DEPLOY_FOLDING_WINGS(veh: Vehicle; deploy, p2: BOOL);
function ARE_FOLDING_WINGS_DEPLOYED(veh: Vehicle): BOOL;
procedure _SET_DEPLOY_MISSILE_BAYS(veh: Vehicle; deploy: BOOL);
function _ARE_MISSILE_BAYS_DEPLOYED(veh: Vehicle): BOOL;
procedure SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(veh: Vehicle; toggle: BOOL);
procedure SET_TURRET_HIDDEN(veh: Vehicle; index: cint; toggle: BOOL);
procedure SET_HOVER_MODE_WING_RATIO(veh: Vehicle; ratio: cfloat);
procedure SET_DISABLE_TURRET_MOVEMENT(veh: Vehicle; turretId: cint);
procedure SET_FORCE_FIX_LINK_MATRICES(veh: Vehicle);
procedure SET_TRANSFORM_RATE_FOR_ANIMATION(veh: Vehicle; transformRate: cfloat);
procedure SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(veh: Vehicle; toggle: BOOL);
procedure SET_VEHICLE_COMBAT_MODE(toggle: BOOL);
procedure SET_VEHICLE_DETONATION_MODE(toggle: BOOL);
procedure SET_VEHICLE_SHUNT_ON_STICK(toggle: BOOL);
function GET_IS_VEHICLE_SHUNTING(veh: Vehicle): BOOL;
function GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(veh: Vehicle): BOOL;
function GET_LAST_SHUNT_VEHICLE(veh: Vehicle): Vehicle;
procedure SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(toggle: BOOL);
procedure SET_OVERRIDE_NITROUS_LEVEL(veh: Vehicle; toggle: BOOL; level, power, rechargeTime: cfloat; disableSound: BOOL);
procedure SET_NITROUS_IS_ACTIVE(veh: Vehicle; enabled: BOOL);
procedure _SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER(veh: Vehicle; modifier: cfloat);
procedure _SET_DRIFT_SLIP_ANGLE_LIMITS(veh: Vehicle; durationScalar, amplitudeScalar, slipAngleLimit: cfloat);
procedure _SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS(veh: Vehicle; time: cint);
procedure FULLY_CHARGE_NITROUS(veh: Vehicle);
function _GET_REMAINING_NITROUS_DURATION(veh: Vehicle): cfloat;
function IS_NITROUS_ACTIVE(veh: Vehicle): BOOL;
procedure CLEAR_NITROUS(veh: Vehicle);
procedure SET_INCREASE_WHEEL_CRUSH_DAMAGE(veh: Vehicle; toggle: BOOL);
procedure SET_DISABLE_WEAPON_BLADE_FORCES(toggle: BOOL);
procedure SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(toggle: BOOL);
function GET_DOES_VEHICLE_HAVE_TOMBSTONE(veh: Vehicle): BOOL;
procedure HIDE_TOMBSTONE(veh: Vehicle; toggle: BOOL);
procedure APPLY_EMP_EFFECT(veh: Vehicle);
function GET_IS_VEHICLE_DISABLED_BY_EMP(veh: Vehicle): BOOL;
procedure SET_DISABLE_RETRACTING_WEAPON_BLADES(toggle: BOOL);
function GET_TYRE_HEALTH(veh: Vehicle; wheelIndex: cint): cfloat;
procedure SET_TYRE_HEALTH(veh: Vehicle; wheelIndex: cint; health: cfloat);
function GET_TYRE_WEAR_RATE(veh: Vehicle; wheelIndex: cint): cfloat;
procedure SET_TYRE_WEAR_RATE(veh: Vehicle; wheelIndex: cint; multiplier: cfloat);
procedure SET_TYRE_WEAR_RATE_SCALE(veh: Vehicle; wheelIndex: cint; multiplier: cfloat);
procedure SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(veh: Vehicle; wheelIndex: cint; multiplier: cfloat);
procedure SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(veh: Vehicle; p1: cint);
procedure SET_REDUCED_SUSPENSION_FORCE(veh: Vehicle; enable: BOOL);
procedure SET_DRIFT_TYRES(veh: Vehicle; toggle: BOOL);
function GET_DRIFT_TYRES_SET(veh: Vehicle): BOOL;
procedure NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(veh: Vehicle; toggle: BOOL);
procedure SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(veh: Vehicle; p1: BOOL);
procedure _SET_ALLOW_COLLISION_WHEN_IN_VEHICLE(veh: Vehicle; toggle: BOOL);
function _IS_VEHICLE_GEN9_EXCLUSIVE_MODEL(vehicleModel: Hash): BOOL;
function _GET_VEHICLE_MAX_EXHAUST_BONE_COUNT: cint;
function _GET_VEHICLE_EXHAUST_BONE(veh: Vehicle; index: cint; boneIndex: pcint; axisX: PBOOL): BOOL;
function GET_WATER_HEIGHT(x, y, z: cfloat; height: pcfloat): BOOL;
function GET_WATER_HEIGHT_NO_WAVES(x, y, z: cfloat; height: pcfloat): BOOL;
function TEST_PROBE_AGAINST_WATER(x1, y1, z1, x2, y2, z2: cfloat; _result: PVector3): BOOL;
function TEST_PROBE_AGAINST_ALL_WATER(x1, y1, z1, x2, y2, z2: cfloat; flags: cint; waterHeight: pcfloat): cint;
function TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(x, y, z: cfloat; flags: cint; waterHeight: pcfloat): cint;
procedure MODIFY_WATER(x, y, radius, height: cfloat);
function ADD_EXTRA_CALMING_QUAD(xLow, yLow, xHigh, yHigh, height: cfloat): cint;
procedure REMOVE_EXTRA_CALMING_QUAD(calmingQuad: cint);
procedure SET_DEEP_OCEAN_SCALER(intensity: cfloat);
function GET_DEEP_OCEAN_SCALER: cfloat;
procedure SET_CALMED_WAVE_HEIGHT_SCALER(height: cfloat);
procedure RESET_DEEP_OCEAN_SCALER;
procedure ENABLE_LASER_SIGHT_RENDERING(toggle: BOOL);
function GET_WEAPON_COMPONENT_TYPE_MODEL(componentHash: Hash): Hash;
function GET_WEAPONTYPE_MODEL(weaponHash: Hash): Hash;
function GET_WEAPONTYPE_SLOT(weaponHash: Hash): Hash;
function GET_WEAPONTYPE_GROUP(weaponHash: Hash): Hash;
function GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(componentHash: Hash): cint;
function GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(componentHash: Hash; extraComponentIndex: cint): Hash;
procedure SET_CURRENT_PED_WEAPON(_ped: Ped; weaponHash: Hash; bForceInHand: BOOL);
function GET_CURRENT_PED_WEAPON(_ped: Ped; weaponHash: PHash; p2: BOOL): BOOL;
function GET_CURRENT_PED_WEAPON_ENTITY_INDEX(_ped: Ped; p1: Any): Entity;
function GET_BEST_PED_WEAPON(_ped: Ped; p1: BOOL): Hash;
function SET_CURRENT_PED_VEHICLE_WEAPON(_ped: Ped; weaponHash: Hash): BOOL;
function GET_CURRENT_PED_VEHICLE_WEAPON(_ped: Ped; weaponHash: PHash): BOOL;
procedure SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(_ped: Ped);
function IS_PED_ARMED(_ped: Ped; typeFlags: cint): BOOL;
function IS_WEAPON_VALID(weaponHash: Hash): BOOL;
function HAS_PED_GOT_WEAPON(_ped: Ped; weaponHash: Hash; p2: BOOL): BOOL;
function IS_PED_WEAPON_READY_TO_SHOOT(_ped: Ped): BOOL;
function GET_PED_WEAPONTYPE_IN_SLOT(_ped: Ped; weaponSlot: Hash): Hash;
function GET_AMMO_IN_PED_WEAPON(_ped: Ped; weaponhash: Hash): cint;
procedure ADD_AMMO_TO_PED(_ped: Ped; weaponHash: Hash; ammo: cint);
procedure SET_PED_AMMO(_ped: Ped; weaponHash: Hash; ammo: cint; p3: BOOL);
procedure SET_PED_INFINITE_AMMO(_ped: Ped; toggle: BOOL; weaponHash: Hash);
procedure SET_PED_INFINITE_AMMO_CLIP(_ped: Ped; toggle: BOOL);
procedure SET_PED_STUN_GUN_FINITE_AMMO(p0, p1: Any);
procedure GIVE_WEAPON_TO_PED(_ped: Ped; weaponHash: Hash; ammoCount: cint; isHidden, bForceInHand: BOOL);
procedure GIVE_DELAYED_WEAPON_TO_PED(_ped: Ped; weaponHash: Hash; ammoCount: cint; bForceInHand: BOOL);
procedure REMOVE_ALL_PED_WEAPONS(_ped: Ped; p1: BOOL);
procedure REMOVE_WEAPON_FROM_PED(_ped: Ped; weaponHash: Hash);
procedure HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(_ped: Ped; toggle: BOOL);
procedure SET_PED_CURRENT_WEAPON_VISIBLE(_ped: Ped; visible, deselectWeapon, p3, p4: BOOL);
procedure SET_PED_DROPS_WEAPONS_WHEN_DEAD(_ped: Ped; toggle: BOOL);
function HAS_PED_BEEN_DAMAGED_BY_WEAPON(_ped: Ped; weaponHash: Hash; weaponType: cint): BOOL;
procedure CLEAR_PED_LAST_WEAPON_DAMAGE(_ped: Ped);
function HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(para_entity: Entity; weaponHash: Hash; weaponType: cint): BOOL;
procedure CLEAR_ENTITY_LAST_WEAPON_DAMAGE(para_entity: Entity);
procedure SET_PED_DROPS_WEAPON(_ped: Ped);
procedure SET_PED_DROPS_INVENTORY_WEAPON(_ped: Ped; weaponHash: Hash; xOffset, yOffset, zOffset: cfloat; ammoCount: cint);
function GET_MAX_AMMO_IN_CLIP(_ped: Ped; weaponHash: Hash; p2: BOOL): cint;
function GET_AMMO_IN_CLIP(_ped: Ped; weaponHash: Hash; ammo: pcint): BOOL;
function SET_AMMO_IN_CLIP(_ped: Ped; weaponHash: Hash; ammo: cint): BOOL;
function GET_MAX_AMMO(_ped: Ped; weaponHash: Hash; ammo: pcint): BOOL;
function GET_MAX_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash; ammo: pcint): BOOL;
procedure ADD_PED_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash; ammo: cint);
procedure SET_PED_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash; ammo: cint);
function GET_PED_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash): cint;
procedure SET_PED_AMMO_TO_DROP(_ped: Ped; p1: cint);
procedure SET_PICKUP_AMMO_AMOUNT_SCALER(p0: cfloat);
function GET_PED_AMMO_TYPE_FROM_WEAPON(_ped: Ped; weaponHash: Hash): Hash;
function GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(_ped: Ped; weaponHash: Hash): Hash;
function GET_PED_LAST_WEAPON_IMPACT_COORD(_ped: Ped; coords: PVector3): BOOL;
procedure SET_PED_GADGET(_ped: Ped; gadgetHash: Hash; p2: BOOL);
function GET_IS_PED_GADGET_EQUIPPED(_ped: Ped; gadgetHash: Hash): BOOL;
function GET_SELECTED_PED_WEAPON(_ped: Ped): Hash;
procedure EXPLODE_PROJECTILES(_ped: Ped; weaponHash: Hash; p2: BOOL);
procedure REMOVE_ALL_PROJECTILES_OF_TYPE(weaponHash: Hash; explode: BOOL);
function GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(_ped: Ped): cfloat;
function GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(_ped: Ped): cfloat;
function HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(driver: Ped; veh: Vehicle; weaponHash: Hash; p3: Any): BOOL;
procedure GIVE_WEAPON_COMPONENT_TO_PED(_ped: Ped; weaponHash, componentHash: Hash);
procedure REMOVE_WEAPON_COMPONENT_FROM_PED(_ped: Ped; weaponHash, componentHash: Hash);
function HAS_PED_GOT_WEAPON_COMPONENT(_ped: Ped; weaponHash, componentHash: Hash): BOOL;
function IS_PED_WEAPON_COMPONENT_ACTIVE(_ped: Ped; weaponHash, componentHash: Hash): BOOL;
function REFILL_AMMO_INSTANTLY(_ped: Ped): BOOL;
function MAKE_PED_RELOAD(_ped: Ped): BOOL;
procedure REQUEST_WEAPON_ASSET(weaponHash: Hash; p1, p2: cint);
function HAS_WEAPON_ASSET_LOADED(weaponHash: Hash): BOOL;
procedure REMOVE_WEAPON_ASSET(weaponHash: Hash);
function CREATE_WEAPON_OBJECT(weaponHash: Hash; ammoCount: cint; x, y, z: cfloat; showWorldModel: BOOL; scale: cfloat; p7, p8, p9: Any): GTAObject;
procedure GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(weaponObject: GTAObject; componentHash: Hash);
procedure REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(obj: GTAObject; componentHash: Hash);
function HAS_WEAPON_GOT_WEAPON_COMPONENT(weapon: GTAObject; componentHash: Hash): BOOL;
procedure GIVE_WEAPON_OBJECT_TO_PED(weaponObject: GTAObject; _ped: Ped);
function DOES_WEAPON_TAKE_WEAPON_COMPONENT(weaponHash, componentHash: Hash): BOOL;
function GET_WEAPON_OBJECT_FROM_PED(_ped: Ped; p1: BOOL): GTAObject;
procedure GIVE_LOADOUT_TO_PED(_ped: Ped; loadoutHash: Hash);
procedure SET_PED_WEAPON_TINT_INDEX(_ped: Ped; weaponHash: Hash; tintIndex: cint);
function GET_PED_WEAPON_TINT_INDEX(_ped: Ped; weaponHash: Hash): cint;
procedure SET_WEAPON_OBJECT_TINT_INDEX(weapon: GTAObject; tintIndex: cint);
function GET_WEAPON_OBJECT_TINT_INDEX(weapon: GTAObject): cint;
function GET_WEAPON_TINT_COUNT(weaponHash: Hash): cint;
procedure SET_PED_WEAPON_COMPONENT_TINT_INDEX(_ped: Ped; weaponHash, camoComponentHash: Hash; colorIndex: cint);
function GET_PED_WEAPON_COMPONENT_TINT_INDEX(_ped: Ped; weaponHash, camoComponentHash: Hash): cint;
procedure SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject: GTAObject; camoComponentHash: Hash; colorIndex: cint);
function GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject: GTAObject; camoComponentHash: Hash): cint;
function GET_PED_WEAPON_CAMO_INDEX(_ped: Ped; weaponHash: Hash): cint;
procedure SET_WEAPON_OBJECT_CAMO_INDEX(weaponObject: GTAObject; p1: cint);
function GET_WEAPON_HUD_STATS(weaponHash: Hash; outData: PAny): BOOL;
function GET_WEAPON_COMPONENT_HUD_STATS(componentHash: Hash; outData: PAny): BOOL;
function GET_WEAPON_DAMAGE(weaponHash, componentHash: Hash): cfloat;
function GET_WEAPON_CLIP_SIZE(weaponHash: Hash): cint;
function GET_WEAPON_TIME_BETWEEN_SHOTS(weaponHash: Hash): cfloat;
procedure SET_PED_CHANCE_OF_FIRING_BLANKS(_ped: Ped; xBias, yBias: cfloat);
function SET_PED_SHOOT_ORDNANCE_WEAPON(_ped: Ped; p1: cfloat): GTAObject;
procedure REQUEST_WEAPON_HIGH_DETAIL_MODEL(weaponObject: Entity);
procedure _SET_WEAPON_PED_DAMAGE_MODIFIER(weapon: Hash; damageModifier: cfloat);
procedure SET_WEAPON_DAMAGE_MODIFIER(weaponHash: Hash; damageMultiplier: cfloat);
procedure SET_WEAPON_AOE_MODIFIER(weaponHash: Hash; multiplier: cfloat);
procedure SET_WEAPON_EFFECT_DURATION_MODIFIER(p0: Hash; p1: cfloat);
function IS_PED_CURRENT_WEAPON_SILENCED(_ped: Ped): BOOL;
function IS_FLASH_LIGHT_ON(_ped: Ped): BOOL;
function SET_FLASH_LIGHT_FADE_DISTANCE(distance: cfloat): BOOL;
procedure SET_FLASH_LIGHT_ACTIVE_HISTORY(_ped: Ped; toggle: BOOL);
procedure SET_WEAPON_ANIMATION_OVERRIDE(_ped: Ped; animStyle: Hash);
function GET_WEAPON_DAMAGE_TYPE(weaponHash: Hash): cint;
procedure SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(_ped: Ped);
function CAN_USE_WEAPON_ON_PARACHUTE(weaponHash: Hash): BOOL;
function CREATE_AIR_DEFENCE_SPHERE(x, y, z, radius, p4, p5, p6: cfloat; weaponHash: Hash): cint;
function CREATE_AIR_DEFENCE_ANGLED_AREA(p0, p1, p2, p3, p4, p5, p6, p7, p8, radius: cfloat; weaponHash: Hash): cint;
function REMOVE_AIR_DEFENCE_SPHERE(zoneId: cint): BOOL;
procedure REMOVE_ALL_AIR_DEFENCE_SPHERES;
procedure SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(plyr: Player; zoneId: cint; enable: BOOL);
function IS_AIR_DEFENCE_SPHERE_IN_AREA(x, y, z, radius: cfloat; outZoneId: pcint): BOOL;
procedure FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(zoneId: cint; x, y, z: cfloat);
function DOES_AIR_DEFENCE_SPHERE_EXIST(zoneId: cint): BOOL;
procedure SET_CAN_PED_SELECT_INVENTORY_WEAPON(_ped: Ped; weaponHash: Hash; toggle: BOOL);
procedure SET_CAN_PED_SELECT_ALL_WEAPONS(_ped: Ped; toggle: BOOL);
function GET_ZONE_AT_COORDS(x, y, z: cfloat): cint;
function GET_ZONE_FROM_NAME_ID(zoneName: PChar): cint;
function GET_ZONE_POPSCHEDULE(zoneId: cint): cint;
function GET_NAME_OF_ZONE(x, y, z: cfloat): PChar;
procedure SET_ZONE_ENABLED(zoneId: cint; toggle: BOOL);
function GET_ZONE_SCUMMINESS(zoneId: cint): cint;
procedure OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(scheduleId: cint; vehicleHash: Hash);
procedure CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(scheduleId: cint);
function GET_HASH_OF_MAP_AREA_AT_COORDS(x, y, z: cfloat): Hash;

implementation

procedure WAIT(ms: cint);
begin
  nativeInit(UINT64($4EDE34FBADD967A6));
  nativePush64(UINT64(ms));
  nativeCall;
end;

function START_NEW_SCRIPT(scriptName: PChar; stackSize: cint): cint;
begin
  nativeInit(UINT64($E81651AD79516E48));
  nativePush64(UINT64(scriptName));
  nativePush64(UINT64(stackSize));
  exit(cint(nativeCall^));
end;

function START_NEW_SCRIPT_WITH_ARGS(scriptName: PChar; args: PAny; argCount, stackSize: cint): cint;
begin
  nativeInit(UINT64($B8BA7F44DF1575E1));
  nativePush64(UINT64(scriptName));
  nativePush64(UINT64(args));
  nativePush64(UINT64(argCount));
  nativePush64(UINT64(stackSize));
  exit(cint(nativeCall^));
end;

function START_NEW_SCRIPT_WITH_NAME_HASH(scriptHash: Hash; stackSize: cint): cint;
begin
  nativeInit(UINT64($EB1C67C3A5333A92));
  nativePush64(UINT64(scriptHash));
  nativePush64(UINT64(stackSize));
  exit(cint(nativeCall^));
end;

function START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(scriptHash: Hash; args: PAny; argCount, stackSize: cint): cint;
begin
  nativeInit(UINT64($C4BB298BD441BE78));
  nativePush64(UINT64(scriptHash));
  nativePush64(UINT64(args));
  nativePush64(UINT64(argCount));
  nativePush64(UINT64(stackSize));
  exit(cint(nativeCall^));
end;

function TIMERA: cint;
begin
  nativeInit(UINT64($83666F9FB8FEBD4B));
  exit(cint(nativeCall^));
end;

function TIMERB: cint;
begin
  nativeInit(UINT64($C9D9444186B5A374));
  exit(cint(nativeCall^));
end;

procedure SETTIMERA(value: cint);
begin
  nativeInit(UINT64($C1B1E9A034A63A62));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SETTIMERB(value: cint);
begin
  nativeInit(UINT64($5AE11BC36633DE4E));
  nativePush64(UINT64(value));
  nativeCall;
end;

function TIMESTEP: cfloat;
begin
  nativeInit(UINT64($0000000050597EE2));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function SIN(value: cfloat): cfloat;
begin
  nativeInit(UINT64($0BADBFA3B172435F));
  nativePush64(PUINT64(@value)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function COS(value: cfloat): cfloat;
begin
  nativeInit(UINT64($D0FFB162F40A139C));
  nativePush64(PUINT64(@value)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function SQRT(value: cfloat): cfloat;
begin
  nativeInit(UINT64($71D93B57D07F9804));
  nativePush64(PUINT64(@value)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function POW(base, exponent: cfloat): cfloat;
begin
  nativeInit(UINT64($E3621CC40F31FE2E));
  nativePush64(PUINT64(@base)^);
  nativePush64(PUINT64(@exponent)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function LOG10(value: cfloat): cfloat;
begin
  nativeInit(UINT64($E816E655DE37FE20));
  nativePush64(PUINT64(@value)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function VMAG(x, y, z: cfloat): cfloat;
begin
  nativeInit(UINT64($652D2EEEF1D3E62C));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function VMAG2(x, y, z: cfloat): cfloat;
begin
  nativeInit(UINT64($A8CEACB4F35AE058));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function VDIST(x1, y1, z1, x2, y2, z2: cfloat): cfloat;
begin
  nativeInit(UINT64($2A488C176D52CCA5));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function VDIST2(x1, y1, z1, x2, y2, z2: cfloat): cfloat;
begin
  nativeInit(UINT64($B7A628320EFF8E47));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function SHIFT_LEFT(value, bitShift: cint): cint;
begin
  nativeInit(UINT64($EDD95A39E5544DE8));
  nativePush64(UINT64(value));
  nativePush64(UINT64(bitShift));
  exit(cint(nativeCall^));
end;

function SHIFT_RIGHT(value, bitShift: cint): cint;
begin
  nativeInit(UINT64($97EF1E5BCE9DC075));
  nativePush64(UINT64(value));
  nativePush64(UINT64(bitShift));
  exit(cint(nativeCall^));
end;

function FLOOR(value: cfloat): cint;
begin
  nativeInit(UINT64($F34EE736CF047844));
  nativePush64(PUINT64(@value)^);
  exit(cint(nativeCall^));
end;

function CEIL(value: cfloat): cint;
begin
  nativeInit(UINT64($11E019C8F43ACC8A));
  nativePush64(PUINT64(@value)^);
  exit(cint(nativeCall^));
end;

function ROUND(value: cfloat): cint;
begin
  nativeInit(UINT64($F2DB717A73826179));
  nativePush64(PUINT64(@value)^);
  exit(cint(nativeCall^));
end;

function TO_FLOAT(value: cint): cfloat;
begin
  nativeInit(UINT64($BBDA792448DB5A89));
  nativePush64(UINT64(value));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_THIS_THREAD_PRIORITY(priority: cint);
begin
  nativeInit(UINT64($42B65DEEF2EDF2A1));
  nativePush64(UINT64(priority));
  nativeCall;
end;

function APP_DATA_VALID: BOOL;
begin
  nativeInit(UINT64($846AA8E7D55EE5B6));
  exit(BOOL(nativeCall^));
end;

function APP_GET_INT(prop: PChar): cint;
begin
  nativeInit(UINT64($D3A58A12C77D9D4B));
  nativePush64(UINT64(prop));
  exit(cint(nativeCall^));
end;

function APP_GET_FLOAT(prop: PChar): cfloat;
begin
  nativeInit(UINT64($1514FB24C02C2322));
  nativePush64(UINT64(prop));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function APP_GET_STRING(prop: PChar): PChar;
begin
  nativeInit(UINT64($749B023950D2311C));
  nativePush64(UINT64(prop));
  exit(PChar(nativeCall^));
end;

procedure APP_SET_INT(prop: PChar; value: cint);
begin
  nativeInit(UINT64($607E8E3D3E4F9611));
  nativePush64(UINT64(prop));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure APP_SET_FLOAT(prop: PChar; value: cfloat);
begin
  nativeInit(UINT64($25D7687C68E0DAA4));
  nativePush64(UINT64(prop));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure APP_SET_STRING(prop, value: PChar);
begin
  nativeInit(UINT64($3FF2FCEC4B7721B4));
  nativePush64(UINT64(prop));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure APP_SET_APP(appName: PChar);
begin
  nativeInit(UINT64($CFD0406ADAF90D2B));
  nativePush64(UINT64(appName));
  nativeCall;
end;

procedure APP_SET_BLOCK(blockName: PChar);
begin
  nativeInit(UINT64($262AB456A3D21F93));
  nativePush64(UINT64(blockName));
  nativeCall;
end;

procedure APP_CLEAR_BLOCK;
begin
  nativeInit(UINT64($5FE1DF3342DB7DBA));
  nativeCall;
end;

procedure APP_CLOSE_APP;
begin
  nativeInit(UINT64($E41C65E07A5F05FC));
  nativeCall;
end;

procedure APP_CLOSE_BLOCK;
begin
  nativeInit(UINT64($E8E3FCF72EAC0EF8));
  nativeCall;
end;

function APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT: BOOL;
begin
  nativeInit(UINT64($71EEE69745088DA0));
  exit(BOOL(nativeCall^));
end;

function APP_HAS_SYNCED_DATA(appName: PChar): BOOL;
begin
  nativeInit(UINT64($CA52279A7271517F));
  nativePush64(UINT64(appName));
  exit(BOOL(nativeCall^));
end;

procedure APP_SAVE_DATA;
begin
  nativeInit(UINT64($95C5D356CDA6E85F));
  nativeCall;
end;

function APP_GET_DELETED_FILE_STATUS: cint;
begin
  nativeInit(UINT64($C9853A2BE3DED1A6));
  exit(cint(nativeCall^));
end;

function APP_DELETE_APP_DATA(appName: PChar): BOOL;
begin
  nativeInit(UINT64($44151AEA95C8A003));
  nativePush64(UINT64(appName));
  exit(BOOL(nativeCall^));
end;

procedure PLAY_PED_RINGTONE(ringtoneName: PChar; _ped: Ped; p2: BOOL);
begin
  nativeInit(UINT64($F9E56683CA8E11A5));
  nativePush64(UINT64(ringtoneName));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_PED_RINGTONE_PLAYING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($1E8E5E20937E3137));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure STOP_PED_RINGTONE(_ped: Ped);
begin
  nativeInit(UINT64($6C5AE23EFA885092));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_MOBILE_PHONE_CALL_ONGOING: BOOL;
begin
  nativeInit(UINT64($7497D2CE2C30D24C));
  exit(BOOL(nativeCall^));
end;

function IS_MOBILE_INTERFERENCE_ACTIVE: BOOL;
begin
  nativeInit(UINT64($C8B1B2425604CDD0));
  exit(BOOL(nativeCall^));
end;

function GET_CURRENT_TV_SHOW_PLAY_TIME: cint;
begin
  nativeInit(UINT64($DD3AA743AB7D4D75));
  exit(cint(nativeCall^));
end;

procedure CREATE_NEW_SCRIPTED_CONVERSATION;
begin
  nativeInit(UINT64($D2C91A0B572AAE56));
  nativeCall;
end;

procedure ADD_LINE_TO_CONVERSATION(index: cint; p1, p2: PChar; p3, p4: cint; p5, p6, p7, p8: BOOL; p9: cint; p10, p11, p12: BOOL);
begin
  nativeInit(UINT64($C5EF963405593646));
  nativePush64(UINT64(index));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativeCall;
end;

procedure ADD_PED_TO_CONVERSATION(index: cint; _ped: Ped; p2: PChar);
begin
  nativeInit(UINT64($95D9F4BC443956E7));
  nativePush64(UINT64(index));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_POSITION_FOR_NULL_CONV_PED(p0: Any; p1, p2, p3: cfloat);
begin
  nativeInit(UINT64($33E3C6C6F2F0B506));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure SET_ENTITY_FOR_NULL_CONV_PED(p0: cint; para_entity: Entity);
begin
  nativeInit(UINT64($892B6AB8F33606F5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_MICROPHONE_POSITION(toggle: BOOL; x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat);
begin
  nativeInit(UINT64($B6AE90EDDE95C762));
  nativePush64(UINT64(toggle));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativeCall;
end;

procedure SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(p0: BOOL);
begin
  nativeInit(UINT64($0B568201DD99F0EB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_CONVERSATION_AUDIO_PLACEHOLDER(p0: BOOL);
begin
  nativeInit(UINT64($61631F5DF50D1C34));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure START_SCRIPT_PHONE_CONVERSATION(p0, p1: BOOL);
begin
  nativeInit(UINT64($252E5F915EABB675));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure PRELOAD_SCRIPT_PHONE_CONVERSATION(p0, p1: BOOL);
begin
  nativeInit(UINT64($6004BCB0E226AAEA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure START_SCRIPT_CONVERSATION(p0, p1, p2, p3: BOOL);
begin
  nativeInit(UINT64($6B17C62C9635D2DC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PRELOAD_SCRIPT_CONVERSATION(p0, p1, p2, p3: BOOL);
begin
  nativeInit(UINT64($3B3CAD6166916D87));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure START_PRELOADED_CONVERSATION;
begin
  nativeInit(UINT64($23641AFE870AF385));
  nativeCall;
end;

function GET_IS_PRELOADED_CONVERSATION_READY: BOOL;
begin
  nativeInit(UINT64($E73364DB90778FFA));
  exit(BOOL(nativeCall^));
end;

function IS_SCRIPTED_CONVERSATION_ONGOING: BOOL;
begin
  nativeInit(UINT64($16754C556D2EDE3D));
  exit(BOOL(nativeCall^));
end;

function IS_SCRIPTED_CONVERSATION_LOADED: BOOL;
begin
  nativeInit(UINT64($DF0D54BE7A776737));
  exit(BOOL(nativeCall^));
end;

function GET_CURRENT_SCRIPTED_CONVERSATION_LINE: cint;
begin
  nativeInit(UINT64($480357EE890C295A));
  exit(cint(nativeCall^));
end;

procedure PAUSE_SCRIPTED_CONVERSATION(p0: BOOL);
begin
  nativeInit(UINT64($8530AD776CD72B12));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure RESTART_SCRIPTED_CONVERSATION;
begin
  nativeInit(UINT64($9AEB285D1818C9AC));
  nativeCall;
end;

function STOP_SCRIPTED_CONVERSATION(p0: BOOL): cint;
begin
  nativeInit(UINT64($D79DEEFB53455EBA));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE;
begin
  nativeInit(UINT64($9663FE6B7A61EB00));
  nativeCall;
end;

procedure INTERRUPT_CONVERSATION(_ped: Ped; voiceline, speaker: PChar);
begin
  nativeInit(UINT64($A018A12E5C5C2FA6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(voiceline));
  nativePush64(UINT64(speaker));
  nativeCall;
end;

procedure INTERRUPT_CONVERSATION_AND_PAUSE(_ped: Ped; p1, speaker: PChar);
begin
  nativeInit(UINT64($8A694D7A68F8DC38));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(speaker));
  nativeCall;
end;

function GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(p0: PAny): cint;
begin
  nativeInit(UINT64($AA19F5572C38B564));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure SET_NO_DUCKING_FOR_CONVERSATION(p0: BOOL);
begin
  nativeInit(UINT64($B542DE8C3D1CB210));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure REGISTER_SCRIPT_WITH_AUDIO(p0: cint);
begin
  nativeInit(UINT64($C6ED9D5092438D91));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure UNREGISTER_SCRIPT_WITH_AUDIO;
begin
  nativeInit(UINT64($A8638BE228D4751A));
  nativeCall;
end;

function REQUEST_MISSION_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($7345BDD95E62E0F2));
  nativePush64(UINT64(audioBank));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function REQUEST_AMBIENT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($FE02FFBED8CA9D99));
  nativePush64(UINT64(audioBank));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function REQUEST_SCRIPT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($2F844A8B08D76685));
  nativePush64(UINT64(audioBank));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function HINT_MISSION_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($40763EA7B9B783E7));
  nativePush64(UINT64(audioBank));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function HINT_AMBIENT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($8F8C0E370AE62F5C));
  nativePush64(UINT64(audioBank));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function HINT_SCRIPT_AUDIO_BANK(audioBank: PChar; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($FB380A29641EC31A));
  nativePush64(UINT64(audioBank));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

procedure RELEASE_MISSION_AUDIO_BANK;
begin
  nativeInit(UINT64($0EC92A1BF0857187));
  nativeCall;
end;

procedure RELEASE_AMBIENT_AUDIO_BANK;
begin
  nativeInit(UINT64($65475A218FFAA93D));
  nativeCall;
end;

procedure RELEASE_NAMED_SCRIPT_AUDIO_BANK(audioBank: PChar);
begin
  nativeInit(UINT64($77ED170667F50170));
  nativePush64(UINT64(audioBank));
  nativeCall;
end;

procedure RELEASE_SCRIPT_AUDIO_BANK;
begin
  nativeInit(UINT64($7A2D8AD0A9EB9C3F));
  nativeCall;
end;

procedure UNHINT_AMBIENT_AUDIO_BANK;
begin
  nativeInit(UINT64($19AF7ED9B9D23058));
  nativeCall;
end;

procedure UNHINT_SCRIPT_AUDIO_BANK;
begin
  nativeInit(UINT64($9AC92EED5E4793AB));
  nativeCall;
end;

procedure UNHINT_NAMED_SCRIPT_AUDIO_BANK(audioBank: PChar);
begin
  nativeInit(UINT64($11579D940949C49E));
  nativePush64(UINT64(audioBank));
  nativeCall;
end;

function GET_SOUND_ID: cint;
begin
  nativeInit(UINT64($430386FE9BF80B45));
  exit(cint(nativeCall^));
end;

procedure RELEASE_SOUND_ID(soundId: cint);
begin
  nativeInit(UINT64($353FC880830B88FA));
  nativePush64(UINT64(soundId));
  nativeCall;
end;

procedure PLAY_SOUND(soundId: cint; audioName, audioRef: PChar; p3: BOOL; p4: Any; p5: BOOL);
begin
  nativeInit(UINT64($7FF4944CC209192D));
  nativePush64(UINT64(soundId));
  nativePush64(UINT64(audioName));
  nativePush64(UINT64(audioRef));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure PLAY_SOUND_FRONTEND(soundId: cint; audioName, audioRef: PChar; p3: BOOL);
begin
  nativeInit(UINT64($67C540AA08E4A6F5));
  nativePush64(UINT64(soundId));
  nativePush64(UINT64(audioName));
  nativePush64(UINT64(audioRef));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAY_DEFERRED_SOUND_FRONTEND(soundName, soundsetName: PChar);
begin
  nativeInit(UINT64($CADA5A0D0702381E));
  nativePush64(UINT64(soundName));
  nativePush64(UINT64(soundsetName));
  nativeCall;
end;

procedure PLAY_SOUND_FROM_ENTITY(soundId: cint; audioName: PChar; para_entity: Entity; audioRef: PChar; isNetwork: BOOL; p5: Any);
begin
  nativeInit(UINT64($E65F427EB70AB1ED));
  nativePush64(UINT64(soundId));
  nativePush64(UINT64(audioName));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(audioRef));
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure PLAY_SOUND_FROM_ENTITY_HASH(soundId: cint; model: Hash; para_entity: Entity; soundSetHash: Hash; p4, p5: Any);
begin
  nativeInit(UINT64($5B9853296731E88D));
  nativePush64(UINT64(soundId));
  nativePush64(UINT64(model));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(soundSetHash));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure PLAY_SOUND_FROM_COORD(soundId: cint; audioName: PChar; x, y, z: cfloat; audioRef: PChar; isNetwork: BOOL; range: cint; p8: BOOL);
begin
  nativeInit(UINT64($8D8686B622B88120));
  nativePush64(UINT64(soundId));
  nativePush64(UINT64(audioName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(audioRef));
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(range));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure UPDATE_SOUND_COORD(soundId: cint; x, y, z: cfloat);
begin
  nativeInit(UINT64($7EC3C679D0E7E46B));
  nativePush64(UINT64(soundId));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure STOP_SOUND(soundId: cint);
begin
  nativeInit(UINT64($A3B0C41BA5CC0BB5));
  nativePush64(UINT64(soundId));
  nativeCall;
end;

function GET_NETWORK_ID_FROM_SOUND_ID(soundId: cint): cint;
begin
  nativeInit(UINT64($2DE3F0A134FFBC0D));
  nativePush64(UINT64(soundId));
  exit(cint(nativeCall^));
end;

function GET_SOUND_ID_FROM_NETWORK_ID(netId: cint): cint;
begin
  nativeInit(UINT64($75262FD12D0A1C84));
  nativePush64(UINT64(netId));
  exit(cint(nativeCall^));
end;

procedure SET_VARIABLE_ON_SOUND(soundId: cint; variable: PChar; p2: cfloat);
begin
  nativeInit(UINT64($AD6B3148A78AE9B6));
  nativePush64(UINT64(soundId));
  nativePush64(UINT64(variable));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure SET_VARIABLE_ON_STREAM(variable: PChar; p1: cfloat);
begin
  nativeInit(UINT64($2F9D3834AEB9EF79));
  nativePush64(UINT64(variable));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure OVERRIDE_UNDERWATER_STREAM(p0: PChar; p1: BOOL);
begin
  nativeInit(UINT64($F2A9CDABCEA04BD6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VARIABLE_ON_UNDER_WATER_STREAM(variableName: PChar; value: cfloat);
begin
  nativeInit(UINT64($733ADF241531E5C2));
  nativePush64(UINT64(variableName));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function HAS_SOUND_FINISHED(soundId: cint): BOOL;
begin
  nativeInit(UINT64($FCBDCE714A7C88E5));
  nativePush64(UINT64(soundId));
  exit(BOOL(nativeCall^));
end;

procedure PLAY_PED_AMBIENT_SPEECH_NATIVE(_ped: Ped; speechName, speechParam: PChar; p3: Any);
begin
  nativeInit(UINT64($8E04FEDD28D42462));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(speechName));
  nativePush64(UINT64(speechParam));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(_ped: Ped; speechName, speechParam: PChar; p3: Any);
begin
  nativeInit(UINT64($C6941B4A3A8FBBB9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(speechName));
  nativePush64(UINT64(speechParam));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(_ped: Ped; speechName, voiceName, speechParam: PChar; p4: BOOL);
begin
  nativeInit(UINT64($3523634255FC3318));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(speechName));
  nativePush64(UINT64(voiceName));
  nativePush64(UINT64(speechParam));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(speechName, voiceName: PChar; x, y, z: cfloat; speechParam: PChar);
begin
  nativeInit(UINT64($ED640017ED337E45));
  nativePush64(UINT64(speechName));
  nativePush64(UINT64(voiceName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(speechParam));
  nativeCall;
end;

procedure OVERRIDE_TREVOR_RAGE(voiceEffect: PChar);
begin
  nativeInit(UINT64($13AD665062541A7E));
  nativePush64(UINT64(voiceEffect));
  nativeCall;
end;

procedure RESET_TREVOR_RAGE;
begin
  nativeInit(UINT64($E78503B10C4314E0));
  nativeCall;
end;

procedure SET_PLAYER_ANGRY(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EA241BB04110F091));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure PLAY_PAIN(_ped: Ped; painID, p1: cint; p3: Any);
begin
  nativeInit(UINT64($BC9AE166038A5CEC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(painID));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure RELEASE_WEAPON_AUDIO;
begin
  nativeInit(UINT64($CE4AC0439F607045));
  nativeCall;
end;

procedure ACTIVATE_AUDIO_SLOWMO_MODE(mode: PChar);
begin
  nativeInit(UINT64($D01005D2BA2EB778));
  nativePush64(UINT64(mode));
  nativeCall;
end;

procedure DEACTIVATE_AUDIO_SLOWMO_MODE(mode: PChar);
begin
  nativeInit(UINT64($DDC635D5B3262C56));
  nativePush64(UINT64(mode));
  nativeCall;
end;

procedure SET_AMBIENT_VOICE_NAME(_ped: Ped; name: PChar);
begin
  nativeInit(UINT64($6C8065A3B780185B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure SET_AMBIENT_VOICE_NAME_HASH(_ped: Ped; para_hash: Hash);
begin
  nativeInit(UINT64($9A53DED9921DE990));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

function GET_AMBIENT_VOICE_NAME_HASH(_ped: Ped): Hash;
begin
  nativeInit(UINT64($5E203DA2BA15D436));
  nativePush64(UINT64(_ped));
  exit(Hash(nativeCall^));
end;

procedure SET_PED_VOICE_FULL(_ped: Ped);
begin
  nativeInit(UINT64($40CF0D12D142A9E8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_RACE_AND_VOICE_GROUP(_ped: Ped; p1: cint; voiceGroup: Hash);
begin
  nativeInit(UINT64($1B7ABE26CBCBF8C7));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(voiceGroup));
  nativeCall;
end;

procedure SET_PED_VOICE_GROUP(_ped: Ped; voiceGroupHash: Hash);
begin
  nativeInit(UINT64($7CDC8C3B89F661B3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(voiceGroupHash));
  nativeCall;
end;

procedure SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(_ped: Ped; voiceGroupHash: Hash);
begin
  nativeInit(UINT64($0BABC1345ABBFB16));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(voiceGroupHash));
  nativeCall;
end;

procedure SET_PED_GENDER(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($A5342D390CDA41D6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure STOP_CURRENT_PLAYING_SPEECH(_ped: Ped);
begin
  nativeInit(UINT64($7A73D05A607734C7));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure STOP_CURRENT_PLAYING_AMBIENT_SPEECH(_ped: Ped);
begin
  nativeInit(UINT64($B8BEC0CA6F0EDB0F));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_AMBIENT_SPEECH_PLAYING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($9072C8B49907BFAD));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_SCRIPTED_SPEECH_PLAYING(p0: Ped): BOOL;
begin
  nativeInit(UINT64($CC9AA18DCC7084F4));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function IS_ANY_SPEECH_PLAYING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($729072355FA39EC9));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_ANY_POSITIONAL_SPEECH_PLAYING: BOOL;
begin
  nativeInit(UINT64($30CA2EF91D15ADF8));
  exit(BOOL(nativeCall^));
end;

function DOES_CONTEXT_EXIST_FOR_THIS_PED(_ped: Ped; speechName: PChar; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($49B99BF3FDA89A7A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(speechName));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_CURRENT_CONVERSATION(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($049E937F18F4020C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_IS_DRUNK(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($95D2D383D5396B8A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure PLAY_ANIMAL_VOCALIZATION(pedHandle: Ped; p1: cint; speechName: PChar);
begin
  nativeInit(UINT64($EE066C7006C49C0A));
  nativePush64(UINT64(pedHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(speechName));
  nativeCall;
end;

function IS_ANIMAL_VOCALIZATION_PLAYING(pedHandle: Ped): BOOL;
begin
  nativeInit(UINT64($C265DF9FB44A9FBD));
  nativePush64(UINT64(pedHandle));
  exit(BOOL(nativeCall^));
end;

procedure SET_ANIMAL_MOOD(animal: Ped; mood: cint);
begin
  nativeInit(UINT64($CC97B29285B1DC3B));
  nativePush64(UINT64(animal));
  nativePush64(UINT64(mood));
  nativeCall;
end;

function IS_MOBILE_PHONE_RADIO_ACTIVE: BOOL;
begin
  nativeInit(UINT64($B35CE999E8EF317E));
  exit(BOOL(nativeCall^));
end;

procedure SET_MOBILE_PHONE_RADIO_STATE(state: BOOL);
begin
  nativeInit(UINT64($BF286C554784F3DF));
  nativePush64(UINT64(state));
  nativeCall;
end;

function GET_PLAYER_RADIO_STATION_INDEX: cint;
begin
  nativeInit(UINT64($E8AF77C4C06ADC93));
  exit(cint(nativeCall^));
end;

function GET_PLAYER_RADIO_STATION_NAME: PChar;
begin
  nativeInit(UINT64($F6D733C32076AD03));
  exit(PChar(nativeCall^));
end;

function GET_RADIO_STATION_NAME(radioStation: cint): PChar;
begin
  nativeInit(UINT64($B28ECA15046CA8B9));
  nativePush64(UINT64(radioStation));
  exit(PChar(nativeCall^));
end;

function GET_PLAYER_RADIO_STATION_GENRE: cint;
begin
  nativeInit(UINT64($A571991A7FE6CCEB));
  exit(cint(nativeCall^));
end;

function IS_RADIO_RETUNING: BOOL;
begin
  nativeInit(UINT64($A151A7394A214E65));
  exit(BOOL(nativeCall^));
end;

function IS_RADIO_FADED_OUT: BOOL;
begin
  nativeInit(UINT64($0626A247D2405330));
  exit(BOOL(nativeCall^));
end;

procedure SET_RADIO_RETUNE_UP;
begin
  nativeInit(UINT64($FF266D1D0EB1195D));
  nativeCall;
end;

procedure SET_RADIO_RETUNE_DOWN;
begin
  nativeInit(UINT64($DD6BCF9E94425DF9));
  nativeCall;
end;

procedure SET_RADIO_TO_STATION_NAME(stationName: PChar);
begin
  nativeInit(UINT64($C69EDA28699D5107));
  nativePush64(UINT64(stationName));
  nativeCall;
end;

procedure SET_VEH_RADIO_STATION(veh: Vehicle; radioStation: PChar);
begin
  nativeInit(UINT64($1B9C0099CB942AC6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(radioStation));
  nativeCall;
end;

procedure SET_VEH_HAS_NORMAL_RADIO(veh: Vehicle);
begin
  nativeInit(UINT64($3E45765F3FBB582F));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_VEHICLE_RADIO_ON(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($0BE4BE946463F917));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEH_FORCED_RADIO_THIS_FRAME(veh: Vehicle);
begin
  nativeInit(UINT64($C1805D05E6D4FE10));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_EMITTER_RADIO_STATION(emitterName, radioStation: PChar; p2: Any);
begin
  nativeInit(UINT64($ACF57305B12AF907));
  nativePush64(UINT64(emitterName));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_STATIC_EMITTER_ENABLED(emitterName: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($399D2D3B33F1B8EB));
  nativePush64(UINT64(emitterName));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure LINK_STATIC_EMITTER_TO_ENTITY(emitterName: PChar; para_entity: Entity);
begin
  nativeInit(UINT64($651D3228960D08AF));
  nativePush64(UINT64(emitterName));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_RADIO_TO_STATION_INDEX(radioStation: cint);
begin
  nativeInit(UINT64($A619B168B8A8570F));
  nativePush64(UINT64(radioStation));
  nativeCall;
end;

procedure SET_FRONTEND_RADIO_ACTIVE(active: BOOL);
begin
  nativeInit(UINT64($F7F26C6E9CC9EBB8));
  nativePush64(UINT64(active));
  nativeCall;
end;

procedure UNLOCK_MISSION_NEWS_STORY(newsStory: cint);
begin
  nativeInit(UINT64($B165AB7C248B2DC1));
  nativePush64(UINT64(newsStory));
  nativeCall;
end;

function IS_MISSION_NEWS_STORY_UNLOCKED(newsStory: cint): BOOL;
begin
  nativeInit(UINT64($66E49BF55B4B1874));
  nativePush64(UINT64(newsStory));
  exit(BOOL(nativeCall^));
end;

function GET_AUDIBLE_MUSIC_TRACK_TEXT_ID: cint;
begin
  nativeInit(UINT64($50B196FC9ED6545B));
  exit(cint(nativeCall^));
end;

procedure PLAY_END_CREDITS_MUSIC(play: BOOL);
begin
  nativeInit(UINT64($CD536C4D33DCC900));
  nativePush64(UINT64(play));
  nativeCall;
end;

procedure SKIP_RADIO_FORWARD;
begin
  nativeInit(UINT64($6DDBBDD98E2E9C25));
  nativeCall;
end;

procedure FREEZE_RADIO_STATION(radioStation: PChar);
begin
  nativeInit(UINT64($344F393B027E38C3));
  nativePush64(UINT64(radioStation));
  nativeCall;
end;

procedure UNFREEZE_RADIO_STATION(radioStation: PChar);
begin
  nativeInit(UINT64($FC00454CF60B91DD));
  nativePush64(UINT64(radioStation));
  nativeCall;
end;

procedure SET_RADIO_AUTO_UNFREEZE(toggle: BOOL);
begin
  nativeInit(UINT64($C1AA9F53CE982990));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_INITIAL_PLAYER_STATION(radioStation: PChar);
begin
  nativeInit(UINT64($88795F13FACDA88D));
  nativePush64(UINT64(radioStation));
  nativeCall;
end;

procedure SET_USER_RADIO_CONTROL_ENABLED(toggle: BOOL);
begin
  nativeInit(UINT64($19F21E63AE6EAE4E));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RADIO_TRACK(radioStation, radioTrack: PChar);
begin
  nativeInit(UINT64($B39786F201FEE30B));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(radioTrack));
  nativeCall;
end;

procedure SET_RADIO_TRACK_WITH_START_OFFSET(radioStationName, mixName: PChar; p2: cint);
begin
  nativeInit(UINT64($2CB0075110BE1E56));
  nativePush64(UINT64(radioStationName));
  nativePush64(UINT64(mixName));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_NEXT_RADIO_TRACK(radioName, radioTrack, p2, p3: PChar);
begin
  nativeInit(UINT64($55ECF4D13D9903B0));
  nativePush64(UINT64(radioName));
  nativePush64(UINT64(radioTrack));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_VEHICLE_RADIO_LOUD(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($BB6F1CAEC68B0BCE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function CAN_VEHICLE_RECEIVE_CB_RADIO(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($032A116663A4D5AC));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(toggle: BOOL);
begin
  nativeInit(UINT64($1098355A16064BB3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function DOES_PLAYER_VEH_HAVE_RADIO: BOOL;
begin
  nativeInit(UINT64($109697E2FFBAC8A1));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_VEH_RADIO_ENABLE: BOOL;
begin
  nativeInit(UINT64($5F43D83FD6738741));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_RADIO_ENABLED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($3B988190C0AA6C0B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(p0: Any);
begin
  nativeInit(UINT64($DA07819E452FFE8F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_CUSTOM_RADIO_TRACK_LIST(radioStation, trackListName: PChar; p2: BOOL);
begin
  nativeInit(UINT64($4E404A9361F75BB2));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(trackListName));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure CLEAR_CUSTOM_RADIO_TRACK_LIST(radioStation: PChar);
begin
  nativeInit(UINT64($1654F24A88A8E3FE));
  nativePush64(UINT64(radioStation));
  nativeCall;
end;

function GET_NUM_UNLOCKED_RADIO_STATIONS: cint;
begin
  nativeInit(UINT64($F1620ECB50E01DE7));
  exit(cint(nativeCall^));
end;

function FIND_RADIO_STATION_INDEX(stationNameHash: Hash): cint;
begin
  nativeInit(UINT64($8D67489793FF428B));
  nativePush64(UINT64(stationNameHash));
  exit(cint(nativeCall^));
end;

procedure SET_RADIO_STATION_MUSIC_ONLY(radioStation: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($774BD811F656A122));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RADIO_FRONTEND_FADE_TIME(fadeTime: cfloat);
begin
  nativeInit(UINT64($2C96CDB04FCA358E));
  nativePush64(PUINT64(@fadeTime)^);
  nativeCall;
end;

procedure UNLOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName: PChar);
begin
  nativeInit(UINT64($031ACB6ABA18C729));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(trackListName));
  nativeCall;
end;

procedure LOCK_RADIO_STATION_TRACK_LIST(radioStation, trackListName: PChar);
begin
  nativeInit(UINT64($FF5E5EA2DCEEACF3));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(trackListName));
  nativeCall;
end;

procedure UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(enableMixes: BOOL);
begin
  nativeInit(UINT64($47AED84213A47510));
  nativePush64(UINT64(enableMixes));
  nativeCall;
end;

procedure LOCK_RADIO_STATION(radioStationName: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($477D9DB48F889591));
  nativePush64(UINT64(radioStationName));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RADIO_STATION_AS_FAVOURITE(radioStation: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($4CAFEBFA21EC188D));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_RADIO_STATION_FAVOURITED(radioStation: PChar): BOOL;
begin
  nativeInit(UINT64($2B1784DB08AFEA79));
  nativePush64(UINT64(radioStation));
  exit(BOOL(nativeCall^));
end;

function GET_NEXT_AUDIBLE_BEAT(out1, out2: pcfloat; out3: pcint): BOOL;
begin
  nativeInit(UINT64($C64A06D939F826F5));
  nativePush64(UINT64(out1));
  nativePush64(UINT64(out2));
  nativePush64(UINT64(out3));
  exit(BOOL(nativeCall^));
end;

procedure FORCE_MUSIC_TRACK_LIST(radioStation, trackListName: PChar; milliseconds: cint);
begin
  nativeInit(UINT64($4E0AF9114608257C));
  nativePush64(UINT64(radioStation));
  nativePush64(UINT64(trackListName));
  nativePush64(UINT64(milliseconds));
  nativeCall;
end;

function GET_CURRENT_TRACK_PLAY_TIME(radioStationName: PChar): cint;
begin
  nativeInit(UINT64($3E65CDE5215832C1));
  nativePush64(UINT64(radioStationName));
  exit(cint(nativeCall^));
end;

function GET_CURRENT_TRACK_SOUND_NAME(radioStationName: PChar): Hash;
begin
  nativeInit(UINT64($34D66BC058019CE0));
  nativePush64(UINT64(radioStationName));
  exit(Hash(nativeCall^));
end;

procedure SET_VEHICLE_MISSILE_WARNING_ENABLED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($F3365489E0DD50F9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_AMBIENT_ZONE_STATE(zoneName: PChar; p1, p2: BOOL);
begin
  nativeInit(UINT64($BDA07E5950085E46));
  nativePush64(UINT64(zoneName));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure CLEAR_AMBIENT_ZONE_STATE(zoneName: PChar; p1: BOOL);
begin
  nativeInit(UINT64($218DD44AAAC964FF));
  nativePush64(UINT64(zoneName));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_AMBIENT_ZONE_LIST_STATE(ambientZone: PChar; p1, p2: BOOL);
begin
  nativeInit(UINT64($9748FA4DE50CCE3E));
  nativePush64(UINT64(ambientZone));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure CLEAR_AMBIENT_ZONE_LIST_STATE(ambientZone: PChar; p1: BOOL);
begin
  nativeInit(UINT64($120C48C614909FA4));
  nativePush64(UINT64(ambientZone));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_AMBIENT_ZONE_STATE_PERSISTENT(ambientZone: PChar; p1, p2: BOOL);
begin
  nativeInit(UINT64($1D6650420CEC9D3B));
  nativePush64(UINT64(ambientZone));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(ambientZone: PChar; p1, p2: BOOL);
begin
  nativeInit(UINT64($F3638DAE8C4045E1));
  nativePush64(UINT64(ambientZone));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_AMBIENT_ZONE_ENABLED(ambientZone: PChar): BOOL;
begin
  nativeInit(UINT64($01E2817A479A7F9B));
  nativePush64(UINT64(ambientZone));
  exit(BOOL(nativeCall^));
end;

procedure REFRESH_CLOSEST_OCEAN_SHORELINE;
begin
  nativeInit(UINT64($5D2BFAAB8D956E0E));
  nativeCall;
end;

procedure SET_CUTSCENE_AUDIO_OVERRIDE(name: PChar);
begin
  nativeInit(UINT64($3B4BF5F0859204D9));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(variableName: PChar; value: cfloat);
begin
  nativeInit(UINT64($BCC29F935ED07688));
  nativePush64(UINT64(variableName));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function PLAY_POLICE_REPORT(name: PChar; p1: cfloat): cint;
begin
  nativeInit(UINT64($DFEBD56D9BD1EB16));
  nativePush64(UINT64(name));
  nativePush64(PUINT64(@p1)^);
  exit(cint(nativeCall^));
end;

procedure CANCEL_ALL_POLICE_REPORTS;
begin
  nativeInit(UINT64($B4F90FAF7670B16F));
  nativeCall;
end;

procedure BLIP_SIREN(veh: Vehicle);
begin
  nativeInit(UINT64($1B9025BDA76822B6));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure OVERRIDE_VEH_HORN(veh: Vehicle; override: BOOL; hornHash: cint);
begin
  nativeInit(UINT64($3CDC1E622CCE0356));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(override));
  nativePush64(UINT64(hornHash));
  nativeCall;
end;

function IS_HORN_ACTIVE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($9D6BFC12B05C6121));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_AGGRESSIVE_HORNS(toggle: BOOL);
begin
  nativeInit(UINT64($395BF71085D1B1D9));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RADIO_POSITION_AUDIO_MUTE(p0: BOOL);
begin
  nativeInit(UINT64($02E93C796ABD3A97));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_VEHICLE_CONVERSATIONS_PERSIST(p0, p1: BOOL);
begin
  nativeInit(UINT64($58BB377BEC7CD5F4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(p0, p1, p2: BOOL);
begin
  nativeInit(UINT64($9BD7BD55E4533183));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_STREAM_PLAYING: BOOL;
begin
  nativeInit(UINT64($D11FA52EB849D978));
  exit(BOOL(nativeCall^));
end;

function GET_STREAM_PLAY_TIME: cint;
begin
  nativeInit(UINT64($4E72BBDBCA58A3DB));
  exit(cint(nativeCall^));
end;

function LOAD_STREAM(streamName, soundSet: PChar): BOOL;
begin
  nativeInit(UINT64($1F1F957154EC51DF));
  nativePush64(UINT64(streamName));
  nativePush64(UINT64(soundSet));
  exit(BOOL(nativeCall^));
end;

function LOAD_STREAM_WITH_START_OFFSET(streamName: PChar; startOffset: cint; soundSet: PChar): BOOL;
begin
  nativeInit(UINT64($59C16B79F53B3712));
  nativePush64(UINT64(streamName));
  nativePush64(UINT64(startOffset));
  nativePush64(UINT64(soundSet));
  exit(BOOL(nativeCall^));
end;

procedure PLAY_STREAM_FROM_PED(_ped: Ped);
begin
  nativeInit(UINT64($89049DD63C08B5D1));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure PLAY_STREAM_FROM_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($B70374A758007DFA));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure PLAY_STREAM_FROM_OBJECT(obj: GTAObject);
begin
  nativeInit(UINT64($EBAA9B64D76356FD));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure PLAY_STREAM_FRONTEND;
begin
  nativeInit(UINT64($58FCE43488F9F5F4));
  nativeCall;
end;

procedure PLAY_STREAM_FROM_POSITION(x, y, z: cfloat);
begin
  nativeInit(UINT64($21442F412E8DE56B));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure STOP_STREAM;
begin
  nativeInit(UINT64($A4718A1419D18151));
  nativeCall;
end;

procedure STOP_PED_SPEAKING(_ped: Ped; shaking: BOOL);
begin
  nativeInit(UINT64($9D64D7405520E3D3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(shaking));
  nativeCall;
end;

procedure BLOCK_ALL_SPEECH_FROM_PED(_ped: Ped; p1, p2: BOOL);
begin
  nativeInit(UINT64($F8AD2EED7C47E8FE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure STOP_PED_SPEAKING_SYNCED(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($AB6781A5F3101470));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure DISABLE_PED_PAIN_AUDIO(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($A9A41C1E940FB0E8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_AMBIENT_SPEECH_DISABLED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($932C2D096A2C3FFF));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure BLOCK_SPEECH_CONTEXT_GROUP(p0: PChar; p1: cint);
begin
  nativeInit(UINT64($A8A7D434AFB4B97B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure UNBLOCK_SPEECH_CONTEXT_GROUP(p0: PChar);
begin
  nativeInit(UINT64($2ACABED337622DF2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_SIREN_WITH_NO_DRIVER(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1FEF0683B96EBCF2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_SIREN_BYPASS_MP_DRIVER_CHECK(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($F584CF8529B51434));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure TRIGGER_SIREN_AUDIO(veh: Vehicle);
begin
  nativeInit(UINT64($66C3FB05206041BA));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_HORN_PERMANENTLY_ON(veh: Vehicle);
begin
  nativeInit(UINT64($9C11908013EA4715));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_HORN_ENABLED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($76D683C108594D0E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_AUDIO_VEHICLE_PRIORITY(veh: Vehicle; p1: Any);
begin
  nativeInit(UINT64($E5564483E407F914));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_HORN_PERMANENTLY_ON_TIME(veh: Vehicle; time: cfloat);
begin
  nativeInit(UINT64($9D3AF56E94C9AE98));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@time)^);
  nativeCall;
end;

procedure USE_SIREN_AS_HORN(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($FA932DE350266EF8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FORCE_USE_AUDIO_GAME_OBJECT(veh: Vehicle; audioName: PChar);
begin
  nativeInit(UINT64($4F0C413926060B38));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(audioName));
  nativeCall;
end;

procedure PRELOAD_VEHICLE_AUDIO_BANK(vehicleModel: Hash);
begin
  nativeInit(UINT64($CA4CEA6AE0000A7E));
  nativePush64(UINT64(vehicleModel));
  nativeCall;
end;

procedure SET_VEHICLE_STARTUP_REV_SOUND(veh: Vehicle; p1, p2: PChar);
begin
  nativeInit(UINT64($F1F8157B8C3F171C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure RESET_VEHICLE_STARTUP_REV_SOUND(veh: Vehicle);
begin
  nativeInit(UINT64($D2DCCD8E16E20997));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_FORCE_REVERSE_WARNING(p0, p1: Any);
begin
  nativeInit(UINT64($97FFB4ADEED08066));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_VEHICLE_AUDIBLY_DAMAGED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($5DB8010EE71FDEF2));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(veh: Vehicle; damageFactor: cfloat);
begin
  nativeInit(UINT64($59E7B488451F4D3A));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@damageFactor)^);
  nativeCall;
end;

procedure SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(veh: Vehicle; intensity: cfloat);
begin
  nativeInit(UINT64($01BB4D577D38BD9E));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

procedure ENABLE_VEHICLE_FANBELT_DAMAGE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1C073274E065C6D2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ENABLE_VEHICLE_EXHAUST_POPS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($2BE4BC731D039D5A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_BOOST_ACTIVE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($4A04DE7CAB2739A1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($6FDDAD856E36988A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_SCRIPT_UPDATE_DOOR_AUDIO(doorHash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($06C0023BED16DD6B));
  nativePush64(UINT64(doorHash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure PLAY_VEHICLE_DOOR_OPEN_SOUND(veh: Vehicle; doorId: cint);
begin
  nativeInit(UINT64($3A539D52857EA82D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativeCall;
end;

procedure PLAY_VEHICLE_DOOR_CLOSE_SOUND(veh: Vehicle; doorId: cint);
begin
  nativeInit(UINT64($62A456AA4769EF34));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativeCall;
end;

procedure ENABLE_STALL_WARNING_SOUNDS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($C15907D667F7CFB2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure _ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS(veh: Vehicle; enable: BOOL);
begin
  nativeInit(UINT64($BEFB80290414FD4F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(enable));
  nativeCall;
end;

function IS_GAME_IN_CONTROL_OF_MUSIC: BOOL;
begin
  nativeInit(UINT64($6D28DC1671E334FD));
  exit(BOOL(nativeCall^));
end;

procedure SET_GPS_ACTIVE(active: BOOL);
begin
  nativeInit(UINT64($3BD3F52BA9B1E4E8));
  nativePush64(UINT64(active));
  nativeCall;
end;

procedure PLAY_MISSION_COMPLETE_AUDIO(audioName: PChar);
begin
  nativeInit(UINT64($B138AAB8A70D3C69));
  nativePush64(UINT64(audioName));
  nativeCall;
end;

function IS_MISSION_COMPLETE_PLAYING: BOOL;
begin
  nativeInit(UINT64($19A30C23F5827F8A));
  exit(BOOL(nativeCall^));
end;

function IS_MISSION_COMPLETE_READY_FOR_UI: BOOL;
begin
  nativeInit(UINT64($6F259F82D873B8B8));
  exit(BOOL(nativeCall^));
end;

procedure BLOCK_DEATH_JINGLE(toggle: BOOL);
begin
  nativeInit(UINT64($F154B8D1775B2DEC));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function START_AUDIO_SCENE(scene: PChar): BOOL;
begin
  nativeInit(UINT64($013A80FC08F6E4F2));
  nativePush64(UINT64(scene));
  exit(BOOL(nativeCall^));
end;

procedure STOP_AUDIO_SCENE(scene: PChar);
begin
  nativeInit(UINT64($DFE8422B3B94E688));
  nativePush64(UINT64(scene));
  nativeCall;
end;

procedure STOP_AUDIO_SCENES;
begin
  nativeInit(UINT64($BAC7FC81A75EC1A1));
  nativeCall;
end;

function IS_AUDIO_SCENE_ACTIVE(scene: PChar): BOOL;
begin
  nativeInit(UINT64($B65B60556E2A9225));
  nativePush64(UINT64(scene));
  exit(BOOL(nativeCall^));
end;

procedure SET_AUDIO_SCENE_VARIABLE(scene, variable: PChar; value: cfloat);
begin
  nativeInit(UINT64($EF21A9EF089A2668));
  nativePush64(UINT64(scene));
  nativePush64(UINT64(variable));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_AUDIO_SCRIPT_CLEANUP_TIME(time: cint);
begin
  nativeInit(UINT64($A5F377B175A699C5));
  nativePush64(UINT64(time));
  nativeCall;
end;

procedure ADD_ENTITY_TO_AUDIO_MIX_GROUP(para_entity: Entity; groupName: PChar; p2: cfloat);
begin
  nativeInit(UINT64($153973AB99FE8980));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(groupName));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(para_entity: Entity; p1: cfloat);
begin
  nativeInit(UINT64($18EB48CFC41F2EA0));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function AUDIO_IS_MUSIC_PLAYING: BOOL;
begin
  nativeInit(UINT64($845FFC3A4FEEFA3E));
  exit(BOOL(nativeCall^));
end;

function AUDIO_IS_SCRIPTED_MUSIC_PLAYING: BOOL;
begin
  nativeInit(UINT64($2DD39BF3E2F9C47F));
  exit(BOOL(nativeCall^));
end;

function PREPARE_MUSIC_EVENT(eventName: PChar): BOOL;
begin
  nativeInit(UINT64($1E5185B72EF5158A));
  nativePush64(UINT64(eventName));
  exit(BOOL(nativeCall^));
end;

function CANCEL_MUSIC_EVENT(eventName: PChar): BOOL;
begin
  nativeInit(UINT64($5B17A90291133DA5));
  nativePush64(UINT64(eventName));
  exit(BOOL(nativeCall^));
end;

function TRIGGER_MUSIC_EVENT(eventName: PChar): BOOL;
begin
  nativeInit(UINT64($706D57B0F50DA710));
  nativePush64(UINT64(eventName));
  exit(BOOL(nativeCall^));
end;

function IS_MUSIC_ONESHOT_PLAYING: BOOL;
begin
  nativeInit(UINT64($A097AB275061FB21));
  exit(BOOL(nativeCall^));
end;

function GET_MUSIC_PLAYTIME: cint;
begin
  nativeInit(UINT64($E7A0D23DC414507B));
  exit(cint(nativeCall^));
end;

procedure SET_GLOBAL_RADIO_SIGNAL_LEVEL(p0: Any);
begin
  nativeInit(UINT64($159B7318403A1CD8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure RECORD_BROKEN_GLASS(x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($FBE20329593DEC9D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure CLEAR_ALL_BROKEN_GLASS;
begin
  nativeInit(UINT64($B32209EFFDC04913));
  nativeCall;
end;

procedure SCRIPT_OVERRIDES_WIND_ELEVATION(p0: BOOL; p1: Any);
begin
  nativeInit(UINT64($70B8EC8FC108A634));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_WALLA_DENSITY(p0, p1: cfloat);
begin
  nativeInit(UINT64($149AEE66F0CB3A99));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PED_INTERIOR_WALLA_DENSITY(p0, p1: cfloat);
begin
  nativeInit(UINT64($8BF907833BE275DE));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure FORCE_PED_PANIC_WALLA;
begin
  nativeInit(UINT64($062D5EAD4DA2FA6A));
  nativeCall;
end;

function PREPARE_ALARM(alarmName: PChar): BOOL;
begin
  nativeInit(UINT64($9D74AE343DB65533));
  nativePush64(UINT64(alarmName));
  exit(BOOL(nativeCall^));
end;

procedure START_ALARM(alarmName: PChar; p2: BOOL);
begin
  nativeInit(UINT64($0355EF116C4C97B2));
  nativePush64(UINT64(alarmName));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure STOP_ALARM(alarmName: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($A1CADDCD98415A41));
  nativePush64(UINT64(alarmName));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure STOP_ALL_ALARMS(stop: BOOL);
begin
  nativeInit(UINT64($2F794A877ADD4C92));
  nativePush64(UINT64(stop));
  nativeCall;
end;

function IS_ALARM_PLAYING(alarmName: PChar): BOOL;
begin
  nativeInit(UINT64($226435CB96CCFC8C));
  nativePush64(UINT64(alarmName));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_DEFAULT_HORN(veh: Vehicle): Hash;
begin
  nativeInit(UINT64($02165D55000219AC));
  nativePush64(UINT64(veh));
  exit(Hash(nativeCall^));
end;

function GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(veh: Vehicle): Hash;
begin
  nativeInit(UINT64($ACB5DCCA1EC76840));
  nativePush64(UINT64(veh));
  exit(Hash(nativeCall^));
end;

procedure RESET_PED_AUDIO_FLAGS(_ped: Ped);
begin
  nativeInit(UINT64($F54BB7B61036F335));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_FOOTSTEPS_EVENTS_ENABLED(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($0653B735BFBDFE87));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CLOTH_EVENTS_ENABLED(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($29DA3CA8D8B2692D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure OVERRIDE_PLAYER_GROUND_MATERIAL(para_hash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($D2CC78CD3D0B50F9));
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure USE_FOOTSTEP_SCRIPT_SWEETENERS(_ped: Ped; p1: BOOL; para_hash: Hash);
begin
  nativeInit(UINT64($BF4DC1784BE94DFA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

procedure OVERRIDE_MICROPHONE_SETTINGS(para_hash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($75773E11BA459E90));
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FREEZE_MICROPHONE;
begin
  nativeInit(UINT64($D57AAAE0E2214D11));
  nativeCall;
end;

procedure DISTANT_COP_CAR_SIRENS(value: BOOL);
begin
  nativeInit(UINT64($552369F549563AD5));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($43FA0DFC5DF87815));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ENABLE_STUNT_JUMP_AUDIO;
begin
  nativeInit(UINT64($B81CF134AEB56FFB));
  nativeCall;
end;

procedure SET_AUDIO_FLAG(flagName: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($B9EFD5C25018725A));
  nativePush64(UINT64(flagName));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function PREPARE_SYNCHRONIZED_AUDIO_EVENT(audioEvent: PChar; p1: Any): BOOL;
begin
  nativeInit(UINT64($C7ABCACA4985A766));
  nativePush64(UINT64(audioEvent));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(sceneID: cint; audioEvent: PChar): BOOL;
begin
  nativeInit(UINT64($029FE7CD1B7E2E75));
  nativePush64(UINT64(sceneID));
  nativePush64(UINT64(audioEvent));
  exit(BOOL(nativeCall^));
end;

function PLAY_SYNCHRONIZED_AUDIO_EVENT(sceneID: cint): BOOL;
begin
  nativeInit(UINT64($8B2FD4560E55DD2D));
  nativePush64(UINT64(sceneID));
  exit(BOOL(nativeCall^));
end;

function STOP_SYNCHRONIZED_AUDIO_EVENT(sceneID: cint): BOOL;
begin
  nativeInit(UINT64($92D6A88E64A94430));
  nativePush64(UINT64(sceneID));
  exit(BOOL(nativeCall^));
end;

procedure INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(audioEvent: PChar; x, y, z: cfloat);
begin
  nativeInit(UINT64($C8EDE9BDBCCBA6D4));
  nativePush64(UINT64(audioEvent));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(audioEvent: PChar; para_entity: Entity);
begin
  nativeInit(UINT64($950A154B8DAB6185));
  nativePush64(UINT64(audioEvent));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_AUDIO_SPECIAL_EFFECT_MODE(mode: cint);
begin
  nativeInit(UINT64($12561FCBB62D5B9C));
  nativePush64(UINT64(mode));
  nativeCall;
end;

procedure SET_PORTAL_SETTINGS_OVERRIDE(p0, p1: PChar);
begin
  nativeInit(UINT64($044DBAD7A7FA2BE5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_PORTAL_SETTINGS_OVERRIDE(p0: PChar);
begin
  nativeInit(UINT64($B4BBFD9CD8B3922B));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS;
begin
  nativeInit(UINT64($E4E6DD5566D28C82));
  nativeCall;
end;

function GET_MUSIC_VOL_SLIDER: cint;
begin
  nativeInit(UINT64($3A48AB4445D499BE));
  exit(cint(nativeCall^));
end;

procedure REQUEST_TENNIS_BANKS(_ped: Ped);
begin
  nativeInit(UINT64($4ADA3F19BE4A6047));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure UNREQUEST_TENNIS_BANKS;
begin
  nativeInit(UINT64($0150B6FF25A9E2E5));
  nativeCall;
end;

procedure SET_SKIP_MINIGUN_SPIN_UP_AUDIO(p0: BOOL);
begin
  nativeInit(UINT64($BEF34B1D9624D5DD));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure STOP_CUTSCENE_AUDIO;
begin
  nativeInit(UINT64($806058BBDC136E06));
  nativeCall;
end;

function HAS_LOADED_MP_DATA_SET: BOOL;
begin
  nativeInit(UINT64($544810ED9DB6BBE6));
  exit(BOOL(nativeCall^));
end;

function HAS_LOADED_SP_DATA_SET: BOOL;
begin
  nativeInit(UINT64($5B50ABB1FE3746F4));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_HORN_SOUND_INDEX(veh: Vehicle): cint;
begin
  nativeInit(UINT64($D53F3A29BCE2580E));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_HORN_SOUND_INDEX(veh: Vehicle; value: cint);
begin
  nativeInit(UINT64($0350E7E17BA767D0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure ADD_SCRIPT_TO_RANDOM_PED(name: PChar; model: Hash; p2, p3: cfloat);
begin
  nativeInit(UINT64($4EE5367468A65CCC));
  nativePush64(UINT64(name));
  nativePush64(UINT64(model));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure REGISTER_OBJECT_SCRIPT_BRAIN(scriptName: PChar; modelHash: Hash; p2: cint; activationRange: cfloat; p4, p5: cint);
begin
  nativeInit(UINT64($0BE84C318BA6EC22));
  nativePush64(UINT64(scriptName));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p2));
  nativePush64(PUINT64(@activationRange)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

function IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($CCBA154209823057));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

procedure REGISTER_WORLD_POINT_SCRIPT_BRAIN(scriptName: PChar; activationRange: cfloat; p2: cint);
begin
  nativeInit(UINT64($3CDC7136613284BD));
  nativePush64(UINT64(scriptName));
  nativePush64(PUINT64(@activationRange)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE: BOOL;
begin
  nativeInit(UINT64($C5042CC6F5E3D450));
  exit(BOOL(nativeCall^));
end;

procedure ENABLE_SCRIPT_BRAIN_SET(brainSet: cint);
begin
  nativeInit(UINT64($67AA4D73F0CFA86B));
  nativePush64(UINT64(brainSet));
  nativeCall;
end;

procedure DISABLE_SCRIPT_BRAIN_SET(brainSet: cint);
begin
  nativeInit(UINT64($14D8518E9760F08F));
  nativePush64(UINT64(brainSet));
  nativeCall;
end;

procedure REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE;
begin
  nativeInit(UINT64($0B40ED49D7D6FF84));
  nativeCall;
end;

procedure REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE;
begin
  nativeInit(UINT64($4D953DF78EBF8158));
  nativeCall;
end;

procedure REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName: PChar);
begin
  nativeInit(UINT64($6D6840CEE8845831));
  nativePush64(UINT64(scriptName));
  nativeCall;
end;

procedure REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(scriptName: PChar);
begin
  nativeInit(UINT64($6E91B04E08773030));
  nativePush64(UINT64(scriptName));
  nativeCall;
end;

procedure RENDER_SCRIPT_CAMS(render, ease: BOOL; easeTime: cint; p3, p4: BOOL; p5: Any);
begin
  nativeInit(UINT64($07E5B515DB0636FC));
  nativePush64(UINT64(render));
  nativePush64(UINT64(ease));
  nativePush64(UINT64(easeTime));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(render: BOOL; p1: cfloat; p2: cint; p3: Any);
begin
  nativeInit(UINT64($C819F3CBB62BF692));
  nativePush64(UINT64(render));
  nativePush64(PUINT64(@p1)^);
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function CREATE_CAM(camName: PChar; p1: BOOL): Cam;
begin
  nativeInit(UINT64($C3981DCE61D9E13F));
  nativePush64(UINT64(camName));
  nativePush64(UINT64(p1));
  exit(Cam(nativeCall^));
end;

function CREATE_CAM_WITH_PARAMS(camName: PChar; posX, posY, posZ, rotX, rotY, rotZ, fov: cfloat; p8: BOOL; p9: cint): Cam;
begin
  nativeInit(UINT64($B51194800B257161));
  nativePush64(UINT64(camName));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@fov)^);
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  exit(Cam(nativeCall^));
end;

function CREATE_CAMERA(camHash: Hash; p1: BOOL): Cam;
begin
  nativeInit(UINT64($5E3CF89C6BCCA67D));
  nativePush64(UINT64(camHash));
  nativePush64(UINT64(p1));
  exit(Cam(nativeCall^));
end;

function CREATE_CAMERA_WITH_PARAMS(camHash: Hash; posX, posY, posZ, rotX, rotY, rotZ, fov: cfloat; p8: BOOL; p9: Any): Cam;
begin
  nativeInit(UINT64($6ABFA3E16460F22D));
  nativePush64(UINT64(camHash));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@fov)^);
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  exit(Cam(nativeCall^));
end;

procedure DESTROY_CAM(para_cam: Cam; bScriptHostCam: BOOL);
begin
  nativeInit(UINT64($865908C81A2C22E9));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(bScriptHostCam));
  nativeCall;
end;

procedure DESTROY_ALL_CAMS(bScriptHostCam: BOOL);
begin
  nativeInit(UINT64($8E5FB15663F79120));
  nativePush64(UINT64(bScriptHostCam));
  nativeCall;
end;

function DOES_CAM_EXIST(para_cam: Cam): BOOL;
begin
  nativeInit(UINT64($A7A932170592B50E));
  nativePush64(UINT64(para_cam));
  exit(BOOL(nativeCall^));
end;

procedure SET_CAM_ACTIVE(para_cam: Cam; active: BOOL);
begin
  nativeInit(UINT64($026FB97D0A425F84));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(active));
  nativeCall;
end;

function IS_CAM_ACTIVE(para_cam: Cam): BOOL;
begin
  nativeInit(UINT64($DFB2B516207D3534));
  nativePush64(UINT64(para_cam));
  exit(BOOL(nativeCall^));
end;

function IS_CAM_RENDERING(para_cam: Cam): BOOL;
begin
  nativeInit(UINT64($02EC0AF5C5A49B7A));
  nativePush64(UINT64(para_cam));
  exit(BOOL(nativeCall^));
end;

function GET_RENDERING_CAM: Cam;
begin
  nativeInit(UINT64($5234F9F10919EABA));
  exit(Cam(nativeCall^));
end;

function GET_CAM_COORD(para_cam: Cam): Vector3;
begin
  nativeInit(UINT64($BAC038F7459AE5AE));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^);
end;

function GET_CAM_ROT(para_cam: Cam; rotationOrder: cint): Vector3;
begin
  nativeInit(UINT64($7D304C1C955E3E12));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(rotationOrder));
  exit(PVector3(nativeCall)^);
end;

function GET_CAM_FOV(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($C3330A45CCCDB26A));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CAM_NEAR_CLIP(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($C520A34DAFBF24B1));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CAM_FAR_CLIP(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($B60A9CFEB21CA6AA));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CAM_NEAR_DOF(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($C2612D223D915A1C));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CAM_FAR_DOF(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($255F8DAFD540D397));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CAM_DOF_STRENGTH(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($06D153C0B99B6128));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_CAM_PARAMS(para_cam: Cam; posX, posY, posZ, rotX, rotY, rotZ, fieldOfView: cfloat; p8: Any; p9, p10, p11: cint);
begin
  nativeInit(UINT64($BFD8727AEA3CCEBA));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@fieldOfView)^);
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativeCall;
end;

procedure SET_CAM_COORD(para_cam: Cam; posX, posY, posZ: cfloat);
begin
  nativeInit(UINT64($4D41783FB745E42E));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativeCall;
end;

procedure SET_CAM_ROT(para_cam: Cam; rotX, rotY, rotZ: cfloat; rotationOrder: cint);
begin
  nativeInit(UINT64($85973643155D0B07));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(rotationOrder));
  nativeCall;
end;

procedure SET_CAM_FOV(para_cam: Cam; fieldOfView: cfloat);
begin
  nativeInit(UINT64($B13C14F66A00D047));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@fieldOfView)^);
  nativeCall;
end;

procedure SET_CAM_NEAR_CLIP(para_cam: Cam; nearClip: cfloat);
begin
  nativeInit(UINT64($C7848EFCCC545182));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@nearClip)^);
  nativeCall;
end;

procedure SET_CAM_FAR_CLIP(para_cam: Cam; farClip: cfloat);
begin
  nativeInit(UINT64($AE306F2A904BF86E));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@farClip)^);
  nativeCall;
end;

procedure FORCE_CAM_FAR_CLIP(para_cam: Cam; p1: cfloat);
begin
  nativeInit(UINT64($AABD62873FFB1A33));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAM_MOTION_BLUR_STRENGTH(para_cam: Cam; strength: cfloat);
begin
  nativeInit(UINT64($6F0F77FBA9A8F2E6));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@strength)^);
  nativeCall;
end;

procedure SET_CAM_NEAR_DOF(para_cam: Cam; nearDOF: cfloat);
begin
  nativeInit(UINT64($3FA4BF0A7AB7DE2C));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@nearDOF)^);
  nativeCall;
end;

procedure SET_CAM_FAR_DOF(para_cam: Cam; farDOF: cfloat);
begin
  nativeInit(UINT64($EDD91296CD01AEE0));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@farDOF)^);
  nativeCall;
end;

procedure SET_CAM_DOF_STRENGTH(para_cam: Cam; dofStrength: cfloat);
begin
  nativeInit(UINT64($5EE29B4D7D5DF897));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@dofStrength)^);
  nativeCall;
end;

procedure SET_CAM_DOF_PLANES(para_cam: Cam; p1, p2, p3, p4: cfloat);
begin
  nativeInit(UINT64($3CF48F6F96E749DC));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativeCall;
end;

procedure SET_CAM_USE_SHALLOW_DOF_MODE(para_cam: Cam; toggle: BOOL);
begin
  nativeInit(UINT64($16A96863A17552BB));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_USE_HI_DOF;
begin
  nativeInit(UINT64($A13B0222F3D94A94));
  nativeCall;
end;

procedure SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE;
begin
  nativeInit(UINT64($731A880555DA3647));
  nativeCall;
end;

procedure SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(camera: Cam; p1: cfloat);
begin
  nativeInit(UINT64($F55E4046F6F831DC));
  nativePush64(UINT64(camera));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(p0: Any; p1: cfloat);
begin
  nativeInit(UINT64($E111A7C0D200CBC5));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAM_DOF_FNUMBER_OF_LENS(camera: Cam; p1: cfloat);
begin
  nativeInit(UINT64($7DD234D6F3914C5B));
  nativePush64(UINT64(camera));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(camera: Cam; multiplier: cfloat);
begin
  nativeInit(UINT64($47B595D60664CFFA));
  nativePush64(UINT64(camera));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_CAM_DOF_FOCUS_DISTANCE_BIAS(camera: Cam; p1: cfloat);
begin
  nativeInit(UINT64($C669EEA5D031B7DE));
  nativePush64(UINT64(camera));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(camera: Cam; p1: cfloat);
begin
  nativeInit(UINT64($C3654A441402562D));
  nativePush64(UINT64(camera));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(camera: Cam; p1: cfloat);
begin
  nativeInit(UINT64($2C654B4943BDDF7C));
  nativePush64(UINT64(camera));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS(camera: Cam; state: BOOL);
begin
  nativeInit(UINT64($7CF3AF51DCFE4108));
  nativePush64(UINT64(camera));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure ATTACH_CAM_TO_ENTITY(para_cam: Cam; para_entity: Entity; xOffset, yOffset, zOffset: cfloat; isRelative: BOOL);
begin
  nativeInit(UINT64($FEDB7D269E8C60E3));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(UINT64(isRelative));
  nativeCall;
end;

procedure ATTACH_CAM_TO_PED_BONE(para_cam: Cam; _ped: Ped; boneIndex: cint; x, y, z: cfloat; heading: BOOL);
begin
  nativeInit(UINT64($61A3DBA14AB7F411));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(heading));
  nativeCall;
end;

procedure HARD_ATTACH_CAM_TO_PED_BONE(para_cam: Cam; _ped: Ped; boneIndex: cint; p3, p4, p5, p6, p7, p8: cfloat; p9: BOOL);
begin
  nativeInit(UINT64($149916F50C34A40D));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure HARD_ATTACH_CAM_TO_ENTITY(para_cam: Cam; para_entity: Entity; xRot, yRot, zRot, xOffset, yOffset, zOffset: cfloat; isRelative: BOOL);
begin
  nativeInit(UINT64($202A5ED9CE01D6E7));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(UINT64(isRelative));
  nativeCall;
end;

procedure ATTACH_CAM_TO_VEHICLE_BONE(para_cam: Cam; veh: Vehicle; boneIndex: cint; relativeRotation: BOOL; rotX, rotY, rotZ, offsetX, offsetY, offsetZ: cfloat; fixedDirection: BOOL);
begin
  nativeInit(UINT64($8DB3F12A02CAEF72));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(boneIndex));
  nativePush64(UINT64(relativeRotation));
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(UINT64(fixedDirection));
  nativeCall;
end;

procedure DETACH_CAM(para_cam: Cam);
begin
  nativeInit(UINT64($A2FABBE87F4BAD82));
  nativePush64(UINT64(para_cam));
  nativeCall;
end;

procedure SET_CAM_INHERIT_ROLL_VEHICLE(para_cam: Cam; p1: BOOL);
begin
  nativeInit(UINT64($45F1DE9C34B93AE6));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure POINT_CAM_AT_COORD(para_cam: Cam; x, y, z: cfloat);
begin
  nativeInit(UINT64($F75497BB865F0803));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure POINT_CAM_AT_ENTITY(para_cam: Cam; para_entity: Entity; p2, p3, p4: cfloat; p5: BOOL);
begin
  nativeInit(UINT64($5640BFF86B16E8DC));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure POINT_CAM_AT_PED_BONE(para_cam: Cam; _ped: Ped; boneIndex: cint; x, y, z: cfloat; p6: BOOL);
begin
  nativeInit(UINT64($68B2B5F33BA63C41));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure STOP_CAM_POINTING(para_cam: Cam);
begin
  nativeInit(UINT64($F33AB75780BA57DE));
  nativePush64(UINT64(para_cam));
  nativeCall;
end;

procedure SET_CAM_AFFECTS_AIMING(para_cam: Cam; toggle: BOOL);
begin
  nativeInit(UINT64($8C1DC7770C51DC8D));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CAM_CONTROLS_MINI_MAP_HEADING(para_cam: Cam; toggle: BOOL);
begin
  nativeInit(UINT64($661B5C8654ADD825));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CAM_IS_INSIDE_VEHICLE(para_cam: Cam; toggle: BOOL);
begin
  nativeInit(UINT64($A2767257A320FC82));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ALLOW_MOTION_BLUR_DECAY(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($271017B9BA825366));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_CAM_DEBUG_NAME(camera: Cam; name: PChar);
begin
  nativeInit(UINT64($1B93E0107865DD40));
  nativePush64(UINT64(camera));
  nativePush64(UINT64(name));
  nativeCall;
end;

function GET_DEBUG_CAM: Cam;
begin
  nativeInit(UINT64($77C3CEC46BE286F6));
  exit(Cam(nativeCall^));
end;

procedure ADD_CAM_SPLINE_NODE(camera: Cam; x, y, z, xRot, yRot, zRot: cfloat; length, smoothingStyle, rotationOrder: cint);
begin
  nativeInit(UINT64($8609C75EC438FB3B));
  nativePush64(UINT64(camera));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(length));
  nativePush64(UINT64(smoothingStyle));
  nativePush64(UINT64(rotationOrder));
  nativeCall;
end;

procedure ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(para_cam, cam2: Cam; length, p3: cint);
begin
  nativeInit(UINT64($0A9F2A468B328E74));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(cam2));
  nativePush64(UINT64(length));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure ADD_CAM_SPLINE_NODE_USING_CAMERA(para_cam, cam2: Cam; length, p3: cint);
begin
  nativeInit(UINT64($0FB82563989CF4FB));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(cam2));
  nativePush64(UINT64(length));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(para_cam: Cam; length, p2: cint);
begin
  nativeInit(UINT64($609278246A29CA34));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(length));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_CAM_SPLINE_PHASE(para_cam: Cam; p1: cfloat);
begin
  nativeInit(UINT64($242B5874F0A4E052));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function GET_CAM_SPLINE_PHASE(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($B5349E36C546509A));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CAM_SPLINE_NODE_PHASE(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($D9D0E694C8282C96));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_CAM_SPLINE_DURATION(para_cam: Cam; timeDuration: cint);
begin
  nativeInit(UINT64($1381539FEE034CDA));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(timeDuration));
  nativeCall;
end;

procedure SET_CAM_SPLINE_SMOOTHING_STYLE(para_cam: Cam; smoothingStyle: cint);
begin
  nativeInit(UINT64($D1B0F412F109EA5D));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(smoothingStyle));
  nativeCall;
end;

function GET_CAM_SPLINE_NODE_INDEX(para_cam: Cam): cint;
begin
  nativeInit(UINT64($B22B17DF858716A6));
  nativePush64(UINT64(para_cam));
  exit(cint(nativeCall^));
end;

procedure SET_CAM_SPLINE_NODE_EASE(para_cam: Cam; easingFunction, p2: cint; p3: cfloat);
begin
  nativeInit(UINT64($83B8201ED82A9A2D));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(easingFunction));
  nativePush64(UINT64(p2));
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure SET_CAM_SPLINE_NODE_VELOCITY_SCALE(para_cam: Cam; p1: cint; scale: cfloat);
begin
  nativeInit(UINT64($A6385DEB180F319F));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure OVERRIDE_CAM_SPLINE_VELOCITY(para_cam: Cam; p1: cint; p2, p3: cfloat);
begin
  nativeInit(UINT64($40B62FA033EB0346));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure OVERRIDE_CAM_SPLINE_MOTION_BLUR(para_cam: Cam; p1: cint; p2, p3: cfloat);
begin
  nativeInit(UINT64($7DCF7C708D292D55));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure SET_CAM_SPLINE_NODE_EXTRA_FLAGS(para_cam: Cam; p1, flags: cint);
begin
  nativeInit(UINT64($7BF1A54AE67AC070));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(flags));
  nativeCall;
end;

function IS_CAM_SPLINE_PAUSED(para_cam: Cam): BOOL;
begin
  nativeInit(UINT64($0290F35C0AD97864));
  nativePush64(UINT64(para_cam));
  exit(BOOL(nativeCall^));
end;

procedure SET_CAM_ACTIVE_WITH_INTERP(camTo, camFrom: Cam; duration, easeLocation, easeRotation: cint);
begin
  nativeInit(UINT64($9FBDA379383A52A4));
  nativePush64(UINT64(camTo));
  nativePush64(UINT64(camFrom));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(easeLocation));
  nativePush64(UINT64(easeRotation));
  nativeCall;
end;

function IS_CAM_INTERPOLATING(para_cam: Cam): BOOL;
begin
  nativeInit(UINT64($036F97C908C2B52C));
  nativePush64(UINT64(para_cam));
  exit(BOOL(nativeCall^));
end;

procedure SHAKE_CAM(para_cam: Cam; _type: PChar; amplitude: cfloat);
begin
  nativeInit(UINT64($6A25241C340D3822));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(_type));
  nativePush64(PUINT64(@amplitude)^);
  nativeCall;
end;

procedure ANIMATED_SHAKE_CAM(para_cam: Cam; p1, p2, p3: PChar; amplitude: cfloat);
begin
  nativeInit(UINT64($A2746EEAE3E577CD));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(PUINT64(@amplitude)^);
  nativeCall;
end;

function IS_CAM_SHAKING(para_cam: Cam): BOOL;
begin
  nativeInit(UINT64($6B24BFE83A2BE47B));
  nativePush64(UINT64(para_cam));
  exit(BOOL(nativeCall^));
end;

procedure SET_CAM_SHAKE_AMPLITUDE(para_cam: Cam; amplitude: cfloat);
begin
  nativeInit(UINT64($D93DB43B82BC0D00));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@amplitude)^);
  nativeCall;
end;

procedure STOP_CAM_SHAKING(para_cam: Cam; p1: BOOL);
begin
  nativeInit(UINT64($BDECF64367884AC3));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SHAKE_SCRIPT_GLOBAL(p0: PChar; p1: cfloat);
begin
  nativeInit(UINT64($F4C8CF9E353AFECA));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure ANIMATED_SHAKE_SCRIPT_GLOBAL(p0, p1, p2: PChar; p3: cfloat);
begin
  nativeInit(UINT64($C2EAE3FB8CDBED31));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

function IS_SCRIPT_GLOBAL_SHAKING: BOOL;
begin
  nativeInit(UINT64($C912AF078AF19212));
  exit(BOOL(nativeCall^));
end;

procedure STOP_SCRIPT_GLOBAL_SHAKING(p0: BOOL);
begin
  nativeInit(UINT64($1C9D7949FA533490));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(veh: Vehicle; p1: cint; p2: cfloat);
begin
  nativeInit(UINT64($5D96CFB59DA076A0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

function PLAY_CAM_ANIM(para_cam: Cam; animName, animDictionary: PChar; x, y, z, xRot, yRot, zRot: cfloat; p9: BOOL; p10: cint): BOOL;
begin
  nativeInit(UINT64($9A2D0FB2E7852392));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(animDictionary));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  exit(BOOL(nativeCall^));
end;

function IS_CAM_PLAYING_ANIM(para_cam: Cam; animName, animDictionary: PChar): BOOL;
begin
  nativeInit(UINT64($C90621D8A0CEECF2));
  nativePush64(UINT64(para_cam));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(animDictionary));
  exit(BOOL(nativeCall^));
end;

procedure SET_CAM_ANIM_CURRENT_PHASE(para_cam: Cam; phase: cfloat);
begin
  nativeInit(UINT64($4145A4C44FF3B5A6));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@phase)^);
  nativeCall;
end;

function GET_CAM_ANIM_CURRENT_PHASE(para_cam: Cam): cfloat;
begin
  nativeInit(UINT64($A10B2DB49E92A6B0));
  nativePush64(UINT64(para_cam));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function PLAY_SYNCHRONIZED_CAM_ANIM(p0, p1: Any; animName, animDictionary: PChar): BOOL;
begin
  nativeInit(UINT64($E32EFE9AB4A9AA0C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(animDictionary));
  exit(BOOL(nativeCall^));
end;

procedure SET_FLY_CAM_HORIZONTAL_RESPONSE(para_cam: Cam; p1, p2, p3: cfloat);
begin
  nativeInit(UINT64($503F5920162365B2));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure SET_FLY_CAM_VERTICAL_RESPONSE(para_cam: Cam; p1, p2, p3: cfloat);
begin
  nativeInit(UINT64($E827B9382CFB41BA));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure SET_FLY_CAM_MAX_HEIGHT(para_cam: Cam; height: cfloat);
begin
  nativeInit(UINT64($F9D02130ECDD1D77));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@height)^);
  nativeCall;
end;

procedure SET_FLY_CAM_COORD_AND_CONSTRAIN(para_cam: Cam; x, y, z: cfloat);
begin
  nativeInit(UINT64($C91C6C55199308CA));
  nativePush64(UINT64(para_cam));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(para_cam: Cam);
begin
  nativeInit(UINT64($C8B5C4A79CC18B94));
  nativePush64(UINT64(para_cam));
  nativeCall;
end;

function WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(para_cam: Cam): BOOL;
begin
  nativeInit(UINT64($5C48A1D6E3B33179));
  nativePush64(UINT64(para_cam));
  exit(BOOL(nativeCall^));
end;

function IS_SCREEN_FADED_OUT: BOOL;
begin
  nativeInit(UINT64($B16FCE9DDC7BA182));
  exit(BOOL(nativeCall^));
end;

function IS_SCREEN_FADED_IN: BOOL;
begin
  nativeInit(UINT64($5A859503B0C08678));
  exit(BOOL(nativeCall^));
end;

function IS_SCREEN_FADING_OUT: BOOL;
begin
  nativeInit(UINT64($797AC7CB535BA28F));
  exit(BOOL(nativeCall^));
end;

function IS_SCREEN_FADING_IN: BOOL;
begin
  nativeInit(UINT64($5C544BC6C57AC575));
  exit(BOOL(nativeCall^));
end;

procedure DO_SCREEN_FADE_IN(duration: cint);
begin
  nativeInit(UINT64($D4E8E24955024033));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure DO_SCREEN_FADE_OUT(duration: cint);
begin
  nativeInit(UINT64($891B5B39AC6302AF));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure SET_WIDESCREEN_BORDERS(p0: BOOL; p1: cint);
begin
  nativeInit(UINT64($DCD4EA924F42D01A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function ARE_WIDESCREEN_BORDERS_ACTIVE: BOOL;
begin
  nativeInit(UINT64($4879E4FE39074CDF));
  exit(BOOL(nativeCall^));
end;

function GET_GAMEPLAY_CAM_COORD: Vector3;
begin
  nativeInit(UINT64($14D6F5678D8F1B37));
  exit(PVector3(nativeCall)^);
end;

function GET_GAMEPLAY_CAM_ROT(rotationOrder: cint): Vector3;
begin
  nativeInit(UINT64($837765A25378F0BB));
  nativePush64(UINT64(rotationOrder));
  exit(PVector3(nativeCall)^);
end;

function GET_GAMEPLAY_CAM_FOV: cfloat;
begin
  nativeInit(UINT64($65019750A0324133));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(p0: cfloat);
begin
  nativeInit(UINT64($487A82C650EB7799));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(p0: cfloat);
begin
  nativeInit(UINT64($0225778816FDC28C));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

function GET_GAMEPLAY_CAM_RELATIVE_HEADING: cfloat;
begin
  nativeInit(UINT64($743607648ADD4587));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_GAMEPLAY_CAM_RELATIVE_HEADING(heading: cfloat);
begin
  nativeInit(UINT64($B4EC2312F4E5B1F1));
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

function GET_GAMEPLAY_CAM_RELATIVE_PITCH: cfloat;
begin
  nativeInit(UINT64($3A6867B4845BEDA2));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_GAMEPLAY_CAM_RELATIVE_PITCH(angle, scalingFactor: cfloat);
begin
  nativeInit(UINT64($6D0858B8EDFD2B7D));
  nativePush64(PUINT64(@angle)^);
  nativePush64(PUINT64(@scalingFactor)^);
  nativeCall;
end;

procedure RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER;
begin
  nativeInit(UINT64($7295C203DD659DFE));
  nativeCall;
end;

procedure FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(roll, pitch, yaw: cfloat);
begin
  nativeInit(UINT64($48608C3464F58AB4));
  nativePush64(PUINT64(@roll)^);
  nativePush64(PUINT64(@pitch)^);
  nativePush64(PUINT64(@yaw)^);
  nativeCall;
end;

procedure FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(p0, p1: cfloat);
begin
  nativeInit(UINT64($28B022A17B068A3A));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(yaw: cfloat);
begin
  nativeInit(UINT64($103991D4A307D472));
  nativePush64(PUINT64(@yaw)^);
  nativeCall;
end;

procedure SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(pitch: cfloat);
begin
  nativeInit(UINT64($759E13EBC1C15C5A));
  nativePush64(PUINT64(@pitch)^);
  nativeCall;
end;

procedure SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(p0: BOOL);
begin
  nativeInit(UINT64($469F2ECDEC046337));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SHAKE_GAMEPLAY_CAM(shakeName: PChar; intensity: cfloat);
begin
  nativeInit(UINT64($FD55E49555E017CF));
  nativePush64(UINT64(shakeName));
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

function IS_GAMEPLAY_CAM_SHAKING: BOOL;
begin
  nativeInit(UINT64($016C090630DF1F89));
  exit(BOOL(nativeCall^));
end;

procedure SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(amplitude: cfloat);
begin
  nativeInit(UINT64($A87E00932DB4D85D));
  nativePush64(PUINT64(@amplitude)^);
  nativeCall;
end;

procedure STOP_GAMEPLAY_CAM_SHAKING(p0: BOOL);
begin
  nativeInit(UINT64($0EF93E9F3D08C178));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(_ped: Ped);
begin
  nativeInit(UINT64($8BBACBF51DA047A8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_GAMEPLAY_CAM_RENDERING: BOOL;
begin
  nativeInit(UINT64($39B5D1B10383F0C8));
  exit(BOOL(nativeCall^));
end;

function IS_INTERPOLATING_FROM_SCRIPT_CAMS: BOOL;
begin
  nativeInit(UINT64($3044240D2E0FA842));
  exit(BOOL(nativeCall^));
end;

function IS_INTERPOLATING_TO_SCRIPT_CAMS: BOOL;
begin
  nativeInit(UINT64($705A276EBFF3133D));
  exit(BOOL(nativeCall^));
end;

procedure SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(p0: BOOL);
begin
  nativeInit(UINT64($DB90C6CCA48940F1));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE;
begin
  nativeInit(UINT64($EA7F0AD7E9BA676F));
  nativeCall;
end;

function IS_GAMEPLAY_CAM_LOOKING_BEHIND: BOOL;
begin
  nativeInit(UINT64($70FDA869F3317EA9));
  exit(BOOL(nativeCall^));
end;

procedure SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(para_entity: Entity);
begin
  nativeInit(UINT64($2AED6301F67007D5));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure DISABLE_CAM_COLLISION_FOR_OBJECT(para_entity: Entity);
begin
  nativeInit(UINT64($49482F9FCD825AAA));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE;
begin
  nativeInit(UINT64($A7092AFE81944852));
  nativeCall;
end;

procedure SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(para_entity: Entity);
begin
  nativeInit(UINT64($FD3151CD37EA2245));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE;
begin
  nativeInit(UINT64($B1381B97F70C7B30));
  nativeCall;
end;

procedure SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE;
begin
  nativeInit(UINT64($DD79DF9F4D26E1C9));
  nativeCall;
end;

function IS_SPHERE_VISIBLE(x, y, z, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($E33D59DA70B58FDF));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

function IS_FOLLOW_PED_CAM_ACTIVE: BOOL;
begin
  nativeInit(UINT64($C6D3D26810C8E0F9));
  exit(BOOL(nativeCall^));
end;

function SET_FOLLOW_PED_CAM_THIS_UPDATE(camName: PChar; p1: cint): BOOL;
begin
  nativeInit(UINT64($44A113DD6FFC48D1));
  nativePush64(UINT64(camName));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(p0, p1: BOOL);
begin
  nativeInit(UINT64($271401846BD26E92));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE;
begin
  nativeInit(UINT64($C8391C309684595A));
  nativeCall;
end;

procedure SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(minimum, maximum: cfloat);
begin
  nativeInit(UINT64($8F993D26E0CA5E8E));
  nativePush64(PUINT64(@minimum)^);
  nativePush64(PUINT64(@maximum)^);
  nativeCall;
end;

procedure SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(minimum, maximum: cfloat);
begin
  nativeInit(UINT64($A516C198B7DCA1E1));
  nativePush64(PUINT64(@minimum)^);
  nativePush64(PUINT64(@maximum)^);
  nativeCall;
end;

procedure SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(p0, distance: cfloat);
begin
  nativeInit(UINT64($DF2E1F7742402E81));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@distance)^);
  nativeCall;
end;

function _GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING: cfloat;
begin
  nativeInit(UINT64($BC456FB703431785));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function _GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING: cfloat;
begin
  nativeInit(UINT64($D4592A16D36673ED));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(p0: Vehicle; p1: cint);
begin
  nativeInit(UINT64($E9EA16D6E54CDCA4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE;
begin
  nativeInit(UINT64($DE2EF5DA284CC8DF));
  nativeCall;
end;

procedure DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE;
begin
  nativeInit(UINT64($59424BD75174C9B1));
  nativeCall;
end;

procedure BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE;
begin
  nativeInit(UINT64($9F97DA93681F87EA));
  nativeCall;
end;

function GET_FOLLOW_PED_CAM_ZOOM_LEVEL: cint;
begin
  nativeInit(UINT64($33E6C8EFD0CD93E9));
  exit(cint(nativeCall^));
end;

function GET_FOLLOW_PED_CAM_VIEW_MODE: cint;
begin
  nativeInit(UINT64($8D4D46230B2C353A));
  exit(cint(nativeCall^));
end;

procedure SET_FOLLOW_PED_CAM_VIEW_MODE(viewMode: cint);
begin
  nativeInit(UINT64($5A4F9EDF1673F704));
  nativePush64(UINT64(viewMode));
  nativeCall;
end;

function IS_FOLLOW_VEHICLE_CAM_ACTIVE: BOOL;
begin
  nativeInit(UINT64($CBBDE6D335D6D496));
  exit(BOOL(nativeCall^));
end;

procedure SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(p0: BOOL);
begin
  nativeInit(UINT64($91EF6EE6419E5B97));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(p0, p1: BOOL);
begin
  nativeInit(UINT64($9DFE13ECDC1EC196));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function SET_TABLE_GAMES_CAMERA_THIS_UPDATE(para_hash: Hash): BOOL;
begin
  nativeInit(UINT64($79C0E43EB9B944E2));
  nativePush64(UINT64(para_hash));
  exit(BOOL(nativeCall^));
end;

function GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL: cint;
begin
  nativeInit(UINT64($EE82280AB767B690));
  exit(cint(nativeCall^));
end;

procedure SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(zoomLevel: cint);
begin
  nativeInit(UINT64($19464CB6E4078C8A));
  nativePush64(UINT64(zoomLevel));
  nativeCall;
end;

function GET_FOLLOW_VEHICLE_CAM_VIEW_MODE: cint;
begin
  nativeInit(UINT64($A4FF579AC0E3AAAE));
  exit(cint(nativeCall^));
end;

procedure SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(viewMode: cint);
begin
  nativeInit(UINT64($AC253D7842768F48));
  nativePush64(UINT64(viewMode));
  nativeCall;
end;

function GET_CAM_VIEW_MODE_FOR_CONTEXT(context: cint): cint;
begin
  nativeInit(UINT64($EE778F8C7E1142E2));
  nativePush64(UINT64(context));
  exit(cint(nativeCall^));
end;

procedure SET_CAM_VIEW_MODE_FOR_CONTEXT(context, viewMode: cint);
begin
  nativeInit(UINT64($2A2173E46DAECD12));
  nativePush64(UINT64(context));
  nativePush64(UINT64(viewMode));
  nativeCall;
end;

function GET_CAM_ACTIVE_VIEW_MODE_CONTEXT: cint;
begin
  nativeInit(UINT64($19CAFA3C87F7C2FF));
  exit(cint(nativeCall^));
end;

procedure USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE;
begin
  nativeInit(UINT64($6493CF69859B116A));
  nativeCall;
end;

procedure USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(camName: PChar);
begin
  nativeInit(UINT64($425A920FDB9A0DDA));
  nativePush64(UINT64(camName));
  nativeCall;
end;

procedure FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE;
begin
  nativeInit(UINT64($0AA27680A0BD43FA));
  nativeCall;
end;

procedure SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(seatIndex: cint);
begin
  nativeInit(UINT64($5C90CAB09951A12F));
  nativePush64(UINT64(seatIndex));
  nativeCall;
end;

function IS_AIM_CAM_ACTIVE: BOOL;
begin
  nativeInit(UINT64($68EDDA28A5976D07));
  exit(BOOL(nativeCall^));
end;

function IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE: BOOL;
begin
  nativeInit(UINT64($74BD83EA840F6BC9));
  exit(BOOL(nativeCall^));
end;

function IS_FIRST_PERSON_AIM_CAM_ACTIVE: BOOL;
begin
  nativeInit(UINT64($5E346D934122613F));
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_AIM_CAM_THIS_UPDATE;
begin
  nativeInit(UINT64($1A31FE0049E542F6));
  nativeCall;
end;

function GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR: cfloat;
begin
  nativeInit(UINT64($7EC52CC40597D170));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(zoomFactor: cfloat);
begin
  nativeInit(UINT64($70894BD0915C5BCA));
  nativePush64(PUINT64(@zoomFactor)^);
  nativeCall;
end;

procedure SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(p0, p1: cfloat);
begin
  nativeInit(UINT64($CED08CBE8EBB97C7));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(p0, p1: cfloat);
begin
  nativeInit(UINT64($2F7F2B26DD3F18EE));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(p0, p1: cfloat);
begin
  nativeInit(UINT64($BCFC632DB7673BF0));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0: cfloat);
begin
  nativeInit(UINT64($0AF7B437918103B3));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(p0: cfloat);
begin
  nativeInit(UINT64($42156508606DE65E));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(p0: BOOL);
begin
  nativeInit(UINT64($4008EDF7D6E48175));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE;
begin
  nativeInit(UINT64($380B4968D1E09E55));
  nativeCall;
end;

function GET_FINAL_RENDERED_CAM_COORD: Vector3;
begin
  nativeInit(UINT64($A200EB1EE790F448));
  exit(PVector3(nativeCall)^);
end;

function GET_FINAL_RENDERED_CAM_ROT(rotationOrder: cint): Vector3;
begin
  nativeInit(UINT64($5B4E4C817FCC2DFB));
  nativePush64(UINT64(rotationOrder));
  exit(PVector3(nativeCall)^);
end;

function GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(plyr: Player; rotationOrder: cint): Vector3;
begin
  nativeInit(UINT64($26903D9CD1175F2C));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(rotationOrder));
  exit(PVector3(nativeCall)^);
end;

function GET_FINAL_RENDERED_CAM_FOV: cfloat;
begin
  nativeInit(UINT64($80EC114669DAEFF4));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(plyr: Player): cfloat;
begin
  nativeInit(UINT64($5F35F6732C3FBBA0));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FINAL_RENDERED_CAM_NEAR_CLIP: cfloat;
begin
  nativeInit(UINT64($D0082607100D7193));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FINAL_RENDERED_CAM_FAR_CLIP: cfloat;
begin
  nativeInit(UINT64($DFC8CBC606FDB0FC));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FINAL_RENDERED_CAM_NEAR_DOF: cfloat;
begin
  nativeInit(UINT64($A03502FC581F7D9B));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FINAL_RENDERED_CAM_FAR_DOF: cfloat;
begin
  nativeInit(UINT64($9780F32BCAF72431));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH: cfloat;
begin
  nativeInit(UINT64($162F9D995753DC19));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_GAMEPLAY_COORD_HINT(x, y, z: cfloat; duration, blendOutDuration, blendInDuration, p6: cint);
begin
  nativeInit(UINT64($D51ADCD2D8BC0FB3));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(blendOutDuration));
  nativePush64(UINT64(blendInDuration));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_GAMEPLAY_PED_HINT(_ped: Ped; x1, y1, z1: cfloat; p4: BOOL; duration, blendOutDuration, blendInDuration: cint);
begin
  nativeInit(UINT64($2B486269ACD548D3));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(blendOutDuration));
  nativePush64(UINT64(blendInDuration));
  nativeCall;
end;

procedure SET_GAMEPLAY_VEHICLE_HINT(veh: Vehicle; offsetX, offsetY, offsetZ: cfloat; p4: BOOL; time, easeInTime, easeOutTime: cint);
begin
  nativeInit(UINT64($A2297E18F3E71C2E));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(time));
  nativePush64(UINT64(easeInTime));
  nativePush64(UINT64(easeOutTime));
  nativeCall;
end;

procedure SET_GAMEPLAY_OBJECT_HINT(obj: GTAObject; xOffset, yOffset, zOffset: cfloat; p4: BOOL; time, easeInTime, easeOutTime: cint);
begin
  nativeInit(UINT64($83E87508A2CA2AC6));
  nativePush64(UINT64(obj));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(time));
  nativePush64(UINT64(easeInTime));
  nativePush64(UINT64(easeOutTime));
  nativeCall;
end;

procedure SET_GAMEPLAY_ENTITY_HINT(para_entity: Entity; xOffset, yOffset, zOffset: cfloat; p4: BOOL; time, easeInTime, easeOutTime, p8: cint);
begin
  nativeInit(UINT64($189E955A8313E298));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(time));
  nativePush64(UINT64(easeInTime));
  nativePush64(UINT64(easeOutTime));
  nativePush64(UINT64(p8));
  nativeCall;
end;

function IS_GAMEPLAY_HINT_ACTIVE: BOOL;
begin
  nativeInit(UINT64($E520FF1AD2785B40));
  exit(BOOL(nativeCall^));
end;

procedure STOP_GAMEPLAY_HINT(p0: BOOL);
begin
  nativeInit(UINT64($F46C581C61718916));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(p0: BOOL);
begin
  nativeInit(UINT64($CCD078C2665D2973));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure STOP_CODE_GAMEPLAY_HINT(p0: BOOL);
begin
  nativeInit(UINT64($247ACBC4ABBC9D1C));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_CODE_GAMEPLAY_HINT_ACTIVE: BOOL;
begin
  nativeInit(UINT64($BF72910D0F26F025));
  exit(BOOL(nativeCall^));
end;

procedure SET_GAMEPLAY_HINT_FOV(FOV: cfloat);
begin
  nativeInit(UINT64($513403FB9C56211F));
  nativePush64(PUINT64(@FOV)^);
  nativeCall;
end;

procedure SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(value: cfloat);
begin
  nativeInit(UINT64($F8BDBF3D573049A1));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(value: cfloat);
begin
  nativeInit(UINT64($D1F8363DFAD03848));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(xOffset: cfloat);
begin
  nativeInit(UINT64($5D7B620DAE436138));
  nativePush64(PUINT64(@xOffset)^);
  nativeCall;
end;

procedure SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(yOffset: cfloat);
begin
  nativeInit(UINT64($C92717EF615B6704));
  nativePush64(PUINT64(@yOffset)^);
  nativeCall;
end;

procedure SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($E3433EADAAF7EE40));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CINEMATIC_BUTTON_ACTIVE(p0: BOOL);
begin
  nativeInit(UINT64($51669F7D1FB53D9F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_CINEMATIC_CAM_RENDERING: BOOL;
begin
  nativeInit(UINT64($B15162CB5826E9E8));
  exit(BOOL(nativeCall^));
end;

procedure SHAKE_CINEMATIC_CAM(shakeType: PChar; amount: cfloat);
begin
  nativeInit(UINT64($DCE214D9ED58F3CF));
  nativePush64(UINT64(shakeType));
  nativePush64(PUINT64(@amount)^);
  nativeCall;
end;

function IS_CINEMATIC_CAM_SHAKING: BOOL;
begin
  nativeInit(UINT64($BBC08F6B4CB8FF0A));
  exit(BOOL(nativeCall^));
end;

procedure SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(p0: cfloat);
begin
  nativeInit(UINT64($C724C701C30B2FE7));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure STOP_CINEMATIC_CAM_SHAKING(p0: BOOL);
begin
  nativeInit(UINT64($2238E588E588A6D7));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE;
begin
  nativeInit(UINT64($ADFF1B2A555F5FBA));
  nativeCall;
end;

procedure DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE;
begin
  nativeInit(UINT64($62ECFCFDEE7885D6));
  nativeCall;
end;

procedure INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE;
begin
  nativeInit(UINT64($9E4CFFF989258472));
  nativeCall;
end;

procedure INVALIDATE_IDLE_CAM;
begin
  nativeInit(UINT64($F4F2C0D4EE209E20));
  nativeCall;
end;

function IS_CINEMATIC_IDLE_CAM_RENDERING: BOOL;
begin
  nativeInit(UINT64($CA9D2AA3E326D720));
  exit(BOOL(nativeCall^));
end;

function IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING: BOOL;
begin
  nativeInit(UINT64($4F32C0D5A90A9B40));
  exit(BOOL(nativeCall^));
end;

procedure CREATE_CINEMATIC_SHOT(p0: Hash; time: cint; p2: BOOL; para_entity: Entity);
begin
  nativeInit(UINT64($741B0129D4560F31));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(time));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

function IS_CINEMATIC_SHOT_ACTIVE(p0: Hash): BOOL;
begin
  nativeInit(UINT64($CC9F3371A7C28BC9));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure STOP_CINEMATIC_SHOT(p0: Hash);
begin
  nativeInit(UINT64($7660C6E75D3A078E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure FORCE_CINEMATIC_RENDERING_THIS_UPDATE(toggle: BOOL);
begin
  nativeInit(UINT64($A41BCD7213805AAC));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE;
begin
  nativeInit(UINT64($DC9DA9E8789F5246));
  nativeCall;
end;

procedure SET_CINEMATIC_MODE_ACTIVE(toggle: BOOL);
begin
  nativeInit(UINT64($DCF0754AC3D6FD4E));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING: BOOL;
begin
  nativeInit(UINT64($1F2300CB7FA7B7F6));
  exit(BOOL(nativeCall^));
end;

function DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE: BOOL;
begin
  nativeInit(UINT64($17FCA7199A530203));
  exit(BOOL(nativeCall^));
end;

function IS_BONNET_CINEMATIC_CAM_RENDERING: BOOL;
begin
  nativeInit(UINT64($D7360051C885628B));
  exit(BOOL(nativeCall^));
end;

function IS_CINEMATIC_CAM_INPUT_ACTIVE: BOOL;
begin
  nativeInit(UINT64($F5F1E89A970B7796));
  exit(BOOL(nativeCall^));
end;

procedure IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE;
begin
  nativeInit(UINT64($7B8A361C1813FBEF));
  nativeCall;
end;

procedure BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE;
begin
  nativeInit(UINT64($DB629FFD9285FA06));
  nativeCall;
end;

procedure STOP_CUTSCENE_CAM_SHAKING(p0: Any);
begin
  nativeInit(UINT64($324C5AA411DA7737));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(p0: cfloat);
begin
  nativeInit(UINT64($12DED8CA53D47EA5));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

function GET_FOCUS_PED_ON_SCREEN(p0: cfloat; p1: cint; p2, p3, p4, p5, p6: cfloat; p7, p8: cint): Ped;
begin
  nativeInit(UINT64($89215EC747DF244A));
  nativePush64(PUINT64(@p0)^);
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(Ped(nativeCall^));
end;

procedure DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE;
begin
  nativeInit(UINT64($5A43C76F7FC7BA5F));
  nativeCall;
end;

procedure SET_CAM_DEATH_FAIL_EFFECT_STATE(p0: cint);
begin
  nativeInit(UINT64($80C8B1846639BB19));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_FIRST_PERSON_FLASH_EFFECT_TYPE(p0: Any);
begin
  nativeInit(UINT64($5C41E6BABC9E2112));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(vehicleName: PChar);
begin
  nativeInit(UINT64($21E253A7F8DA5DFB));
  nativePush64(UINT64(vehicleName));
  nativeCall;
end;

procedure SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(vehicleModel: Hash);
begin
  nativeInit(UINT64($11FA5D3479C7DD47));
  nativePush64(UINT64(vehicleModel));
  nativeCall;
end;

function IS_ALLOWED_INDEPENDENT_CAMERA_MODES: BOOL;
begin
  nativeInit(UINT64($EAF0FA793D05C592));
  exit(BOOL(nativeCall^));
end;

procedure CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE;
begin
  nativeInit(UINT64($62374889A4D59F72));
  nativeCall;
end;

function REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER: cfloat;
begin
  nativeInit(UINT64($8BFCEB5EA1B161B6));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_CLOCK_TIME(hour, minute, second: cint);
begin
  nativeInit(UINT64($47C3B5848C3E45D8));
  nativePush64(UINT64(hour));
  nativePush64(UINT64(minute));
  nativePush64(UINT64(second));
  nativeCall;
end;

procedure PAUSE_CLOCK(toggle: BOOL);
begin
  nativeInit(UINT64($4055E40BD2DBEC1D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ADVANCE_CLOCK_TIME_TO(hour, minute, second: cint);
begin
  nativeInit(UINT64($C8CA9670B9D83B3B));
  nativePush64(UINT64(hour));
  nativePush64(UINT64(minute));
  nativePush64(UINT64(second));
  nativeCall;
end;

procedure ADD_TO_CLOCK_TIME(hours, minutes, seconds: cint);
begin
  nativeInit(UINT64($D716F30D8C8980E2));
  nativePush64(UINT64(hours));
  nativePush64(UINT64(minutes));
  nativePush64(UINT64(seconds));
  nativeCall;
end;

function GET_CLOCK_HOURS: cint;
begin
  nativeInit(UINT64($25223CA6B4D20B7F));
  exit(cint(nativeCall^));
end;

function GET_CLOCK_MINUTES: cint;
begin
  nativeInit(UINT64($13D2B8ADD79640F2));
  exit(cint(nativeCall^));
end;

function GET_CLOCK_SECONDS: cint;
begin
  nativeInit(UINT64($494E97C2EF27C470));
  exit(cint(nativeCall^));
end;

procedure SET_CLOCK_DATE(day, month, year: cint);
begin
  nativeInit(UINT64($B096419DF0D06CE7));
  nativePush64(UINT64(day));
  nativePush64(UINT64(month));
  nativePush64(UINT64(year));
  nativeCall;
end;

function GET_CLOCK_DAY_OF_WEEK: cint;
begin
  nativeInit(UINT64($D972E4BD7AEB235F));
  exit(cint(nativeCall^));
end;

function GET_CLOCK_DAY_OF_MONTH: cint;
begin
  nativeInit(UINT64($3D10BC92A4DB1D35));
  exit(cint(nativeCall^));
end;

function GET_CLOCK_MONTH: cint;
begin
  nativeInit(UINT64($BBC72712E80257A1));
  exit(cint(nativeCall^));
end;

function GET_CLOCK_YEAR: cint;
begin
  nativeInit(UINT64($961777E64BDAF717));
  exit(cint(nativeCall^));
end;

function GET_MILLISECONDS_PER_GAME_MINUTE: cint;
begin
  nativeInit(UINT64($2F8B4D1C595B11DB));
  exit(cint(nativeCall^));
end;

procedure GET_POSIX_TIME(year, month, day, hour, minute, second: pcint);
begin
  nativeInit(UINT64($DA488F299A5B164E));
  nativePush64(UINT64(year));
  nativePush64(UINT64(month));
  nativePush64(UINT64(day));
  nativePush64(UINT64(hour));
  nativePush64(UINT64(minute));
  nativePush64(UINT64(second));
  nativeCall;
end;

procedure GET_UTC_TIME(year, month, day, hour, minute, second: pcint);
begin
  nativeInit(UINT64($8117E09A19EEF4D3));
  nativePush64(UINT64(year));
  nativePush64(UINT64(month));
  nativePush64(UINT64(day));
  nativePush64(UINT64(hour));
  nativePush64(UINT64(minute));
  nativePush64(UINT64(second));
  nativeCall;
end;

procedure GET_LOCAL_TIME(year, month, day, hour, minute, second: pcint);
begin
  nativeInit(UINT64($50C7A99057A69748));
  nativePush64(UINT64(year));
  nativePush64(UINT64(month));
  nativePush64(UINT64(day));
  nativePush64(UINT64(hour));
  nativePush64(UINT64(minute));
  nativePush64(UINT64(second));
  nativeCall;
end;

procedure REQUEST_CUTSCENE(cutsceneName: PChar; flags: cint);
begin
  nativeInit(UINT64($7A86743F475D9E09));
  nativePush64(UINT64(cutsceneName));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(cutsceneName: PChar; playbackFlags, flags: cint);
begin
  nativeInit(UINT64($C23DE0E91C30B58C));
  nativePush64(UINT64(cutsceneName));
  nativePush64(UINT64(playbackFlags));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure REMOVE_CUTSCENE;
begin
  nativeInit(UINT64($440AF51A3462B86F));
  nativeCall;
end;

function HAS_CUTSCENE_LOADED: BOOL;
begin
  nativeInit(UINT64($C59F528E9AB9F339));
  exit(BOOL(nativeCall^));
end;

function HAS_THIS_CUTSCENE_LOADED(cutsceneName: PChar): BOOL;
begin
  nativeInit(UINT64($228D3D94F8A11C3C));
  nativePush64(UINT64(cutsceneName));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCRIPT_CAN_START_CUTSCENE(threadId: cint);
begin
  nativeInit(UINT64($8D9DF6ECA8768583));
  nativePush64(UINT64(threadId));
  nativeCall;
end;

function CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY: BOOL;
begin
  nativeInit(UINT64($B56BBBCC2955D9CB));
  exit(BOOL(nativeCall^));
end;

function IS_CUTSCENE_PLAYBACK_FLAG_SET(flag: cint): BOOL;
begin
  nativeInit(UINT64($71B74D2AE19338D0));
  nativePush64(UINT64(flag));
  exit(BOOL(nativeCall^));
end;

procedure SET_CUTSCENE_ENTITY_STREAMING_FLAGS(cutsceneEntName: PChar; p1, p2: cint);
begin
  nativeInit(UINT64($4C61C75BEE8184C2));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure REQUEST_CUT_FILE(cutsceneName: PChar);
begin
  nativeInit(UINT64($06A3524161C502BA));
  nativePush64(UINT64(cutsceneName));
  nativeCall;
end;

function HAS_CUT_FILE_LOADED(cutsceneName: PChar): BOOL;
begin
  nativeInit(UINT64($A1C996C2A744262E));
  nativePush64(UINT64(cutsceneName));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_CUT_FILE(cutsceneName: PChar);
begin
  nativeInit(UINT64($D00D76A7DFC9D852));
  nativePush64(UINT64(cutsceneName));
  nativeCall;
end;

function GET_CUT_FILE_CONCAT_COUNT(cutsceneName: PChar): cint;
begin
  nativeInit(UINT64($0ABC54DE641DC0FC));
  nativePush64(UINT64(cutsceneName));
  exit(cint(nativeCall^));
end;

procedure START_CUTSCENE(flags: cint);
begin
  nativeInit(UINT64($186D5CB5E7B0FF7B));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure START_CUTSCENE_AT_COORDS(x, y, z: cfloat; flags: cint);
begin
  nativeInit(UINT64($1C9ADDA3244A1FBF));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure STOP_CUTSCENE(p0: BOOL);
begin
  nativeInit(UINT64($C7272775B4DC786E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure STOP_CUTSCENE_IMMEDIATELY;
begin
  nativeInit(UINT64($D220BDD222AC4A1E));
  nativeCall;
end;

procedure SET_CUTSCENE_ORIGIN(x, y, z, p3: cfloat; p4: cint);
begin
  nativeInit(UINT64($B812B3FD1C01CF27));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure SET_CUTSCENE_ORIGIN_AND_ORIENTATION(x1, y1, z1, x2, y2, z2: cfloat; p6: cint);
begin
  nativeInit(UINT64($011883F41211432A));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

function GET_CUTSCENE_TIME: cint;
begin
  nativeInit(UINT64($E625BEABBAFFDAB9));
  exit(cint(nativeCall^));
end;

function GET_CUTSCENE_TOTAL_DURATION: cint;
begin
  nativeInit(UINT64($EE53B14A19E480D4));
  exit(cint(nativeCall^));
end;

function GET_CUTSCENE_END_TIME: cint;
begin
  nativeInit(UINT64($971D7B15BCDBEF99));
  exit(cint(nativeCall^));
end;

function GET_CUTSCENE_PLAY_DURATION: cint;
begin
  nativeInit(UINT64($5D583F71C901F2A3));
  exit(cint(nativeCall^));
end;

function WAS_CUTSCENE_SKIPPED: BOOL;
begin
  nativeInit(UINT64($40C8656EDAEDD569));
  exit(BOOL(nativeCall^));
end;

function HAS_CUTSCENE_FINISHED: BOOL;
begin
  nativeInit(UINT64($7C0A893088881D57));
  exit(BOOL(nativeCall^));
end;

function IS_CUTSCENE_ACTIVE: BOOL;
begin
  nativeInit(UINT64($991251AFC3981F84));
  exit(BOOL(nativeCall^));
end;

function IS_CUTSCENE_PLAYING: BOOL;
begin
  nativeInit(UINT64($D3C2E180A40F031E));
  exit(BOOL(nativeCall^));
end;

function GET_CUTSCENE_SECTION_PLAYING: cint;
begin
  nativeInit(UINT64($49010A6A396553D8));
  exit(cint(nativeCall^));
end;

function GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(cutsceneEntName: PChar; modelHash: Hash): Entity;
begin
  nativeInit(UINT64($0A2E9FDB9A8C62F6));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(modelHash));
  exit(Entity(nativeCall^));
end;

function GET_CUTSCENE_CONCAT_SECTION_PLAYING: cint;
begin
  nativeInit(UINT64($583DF8E3D4AFBD98));
  exit(cint(nativeCall^));
end;

function IS_CUTSCENE_AUTHORIZED(cutsceneName: PChar): BOOL;
begin
  nativeInit(UINT64($4CEBC1ED31E8925E));
  nativePush64(UINT64(cutsceneName));
  exit(BOOL(nativeCall^));
end;

function DOES_CUTSCENE_HANDLE_EXIST(cutsceneHandle: cint): cint;
begin
  nativeInit(UINT64($4FCD976DA686580C));
  nativePush64(UINT64(cutsceneHandle));
  exit(cint(nativeCall^));
end;

procedure REGISTER_ENTITY_FOR_CUTSCENE(cutscenePed: Ped; cutsceneEntName: PChar; p2: cint; modelHash: Hash; p4: cint);
begin
  nativeInit(UINT64($E40C1C56DF95C2E8));
  nativePush64(UINT64(cutscenePed));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p4));
  nativeCall;
end;

function GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(cutsceneEntName: PChar; modelHash: Hash): Entity;
begin
  nativeInit(UINT64($C0741A26499654CD));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(modelHash));
  exit(Entity(nativeCall^));
end;

procedure SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(modelHash: Hash);
begin
  nativeInit(UINT64($7F96F23FA9B73327));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure SET_CUTSCENE_TRIGGER_AREA(x1, y1, z1, x2, y2, z2: cfloat);
begin
  nativeInit(UINT64($9896CE4721BE84BA));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativeCall;
end;

function CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName: PChar; modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($645D0B458D8E17B5));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

function CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(cutsceneEntName: PChar; modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($4C6A6451C79E4662));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

function CAN_SET_EXIT_STATE_FOR_CAMERA(p0: BOOL): BOOL;
begin
  nativeInit(UINT64($B2CBCD0930DFB420));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure SET_PAD_CAN_SHAKE_DURING_CUTSCENE(toggle: BOOL);
begin
  nativeInit(UINT64($C61B86C9F61EB404));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CUTSCENE_FADE_VALUES(p0, p1, p2, p3: BOOL);
begin
  nativeInit(UINT64($8093F23ABACCC7D4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_CUTSCENE_MULTIHEAD_FADE(p0, p1, p2, p3: BOOL);
begin
  nativeInit(UINT64($20746F7B1032A3C7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(p0: BOOL);
begin
  nativeInit(UINT64($06EE9048FD080382));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_MULTIHEAD_FADE_UP: BOOL;
begin
  nativeInit(UINT64($A0FE76168A189DDB));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(p0: BOOL);
begin
  nativeInit(UINT64($2F137B508DE238F2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(p0: BOOL);
begin
  nativeInit(UINT64($E36A98D8AB3D3C66));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function CAN_USE_MOBILE_PHONE_DURING_CUTSCENE: BOOL;
begin
  nativeInit(UINT64($5EDEF0CF8C1DAB3C));
  exit(BOOL(nativeCall^));
end;

procedure SET_CUTSCENE_CAN_BE_SKIPPED(p0: BOOL);
begin
  nativeInit(UINT64($41FAA8FB2ECE8720));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE;
begin
  nativeInit(UINT64($2131046957F31B04));
  nativeCall;
end;

procedure SET_CUTSCENE_PED_COMPONENT_VARIATION(cutsceneEntName: PChar; componentId, drawableId, textureId: cint; modelHash: Hash);
begin
  nativeInit(UINT64($BA01E7B6DEEFBBC9));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(textureId));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(cutsceneEntName: PChar; _ped: Ped; modelHash: Hash);
begin
  nativeInit(UINT64($2A56C06EBEF2B0D9));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

function DOES_CUTSCENE_ENTITY_EXIST(cutsceneEntName: PChar; modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($499EF20C5DB25C59));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

procedure SET_CUTSCENE_PED_PROP_VARIATION(cutsceneEntName: PChar; componentId, drawableId, textureId: cint; modelHash: Hash);
begin
  nativeInit(UINT64($0546524ADE2E9723));
  nativePush64(UINT64(cutsceneEntName));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(textureId));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

function HAS_CUTSCENE_CUT_THIS_FRAME: BOOL;
begin
  nativeInit(UINT64($708BDD8CD795B043));
  exit(BOOL(nativeCall^));
end;

procedure DATAFILE_WATCH_REQUEST_ID(requestId: cint);
begin
  nativeInit(UINT64($AD6875BBC0FC899C));
  nativePush64(UINT64(requestId));
  nativeCall;
end;

procedure DATAFILE_CLEAR_WATCH_LIST;
begin
  nativeInit(UINT64($6CC86E78358D5119));
  nativeCall;
end;

function DATAFILE_IS_VALID_REQUEST_ID(index: cint): BOOL;
begin
  nativeInit(UINT64($FCCAE5B92A830878));
  nativePush64(UINT64(index));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_HAS_LOADED_FILE_DATA(requestId: cint): BOOL;
begin
  nativeInit(UINT64($15FF52B809DB2353));
  nativePush64(UINT64(requestId));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_HAS_VALID_FILE_DATA(requestId: cint): BOOL;
begin
  nativeInit(UINT64($F8CC1EBE0B62E29F));
  nativePush64(UINT64(requestId));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_SELECT_ACTIVE_FILE(requestId: cint; p1: Any): BOOL;
begin
  nativeInit(UINT64($22DA66936E0FFF37));
  nativePush64(UINT64(requestId));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_DELETE_REQUESTED_FILE(requestId: cint): BOOL;
begin
  nativeInit(UINT64($8F5EA1C01D65A100));
  nativePush64(UINT64(requestId));
  exit(BOOL(nativeCall^));
end;

function UGC_CREATE_CONTENT(data: PAny; dataCount: cint; contentName, description, tagsCsv, contentTypeName: PChar; publish: BOOL; p7: Any): BOOL;
begin
  nativeInit(UINT64($C84527E235FCA219));
  nativePush64(UINT64(data));
  nativePush64(UINT64(dataCount));
  nativePush64(UINT64(contentName));
  nativePush64(UINT64(description));
  nativePush64(UINT64(tagsCsv));
  nativePush64(UINT64(contentTypeName));
  nativePush64(UINT64(publish));
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function UGC_CREATE_MISSION(contentName, description, tagsCsv, contentTypeName: PChar; publish: BOOL; p5: Any): BOOL;
begin
  nativeInit(UINT64($A5EFC3E847D60507));
  nativePush64(UINT64(contentName));
  nativePush64(UINT64(description));
  nativePush64(UINT64(tagsCsv));
  nativePush64(UINT64(contentTypeName));
  nativePush64(UINT64(publish));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function UGC_UPDATE_CONTENT(contentId: PChar; data: PAny; dataCount: cint; contentName, description, tagsCsv, contentTypeName: PChar; p7: Any): BOOL;
begin
  nativeInit(UINT64($648E7A5434AF7969));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(data));
  nativePush64(UINT64(dataCount));
  nativePush64(UINT64(contentName));
  nativePush64(UINT64(description));
  nativePush64(UINT64(tagsCsv));
  nativePush64(UINT64(contentTypeName));
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function UGC_UPDATE_MISSION(contentId, contentName, description, tagsCsv, contentTypeName: PChar; p5: Any): BOOL;
begin
  nativeInit(UINT64($4645DE9980999E93));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(contentName));
  nativePush64(UINT64(description));
  nativePush64(UINT64(tagsCsv));
  nativePush64(UINT64(contentTypeName));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function UGC_SET_PLAYER_DATA(contentId: PChar; rating: cfloat; contentTypeName: PChar; p3: Any): BOOL;
begin
  nativeInit(UINT64($692D808C34A82143));
  nativePush64(UINT64(contentId));
  nativePush64(PUINT64(@rating)^);
  nativePush64(UINT64(contentTypeName));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_SELECT_UGC_DATA(p0: cint; p1: Any): BOOL;
begin
  nativeInit(UINT64($A69AC4ADE82B57A4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_SELECT_UGC_STATS(p0: cint; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($9CB0BFA7A9342C3D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_SELECT_UGC_PLAYER_DATA(p0: cint; p1: Any): BOOL;
begin
  nativeInit(UINT64($52818819057F2B40));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_SELECT_CREATOR_STATS(p0: cint; p1: Any): BOOL;
begin
  nativeInit(UINT64($01095C95CD46B624));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_LOAD_OFFLINE_UGC(filename: PChar; p1: Any): BOOL;
begin
  nativeInit(UINT64($C5238C011AF405E4));
  nativePush64(UINT64(filename));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure DATAFILE_CREATE(p0: cint);
begin
  nativeInit(UINT64($D27058A1CA2B13EE));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DATAFILE_DELETE(p0: cint);
begin
  nativeInit(UINT64($9AB9C1CFC8862DFB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DATAFILE_STORE_MISSION_HEADER(p0: cint);
begin
  nativeInit(UINT64($2ED61456317B8178));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DATAFILE_FLUSH_MISSION_HEADER;
begin
  nativeInit(UINT64($C55854C7D7274882));
  nativeCall;
end;

function DATAFILE_GET_FILE_DICT(p0: cint): PAny;
begin
  nativeInit(UINT64($906B778CA1DC72B6));
  nativePush64(UINT64(p0));
  exit(PAny(nativeCall^));
end;

function DATAFILE_START_SAVE_TO_CLOUD(filename: PChar; p1: Any): BOOL;
begin
  nativeInit(UINT64($83BCCE3224735F05));
  nativePush64(UINT64(filename));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_UPDATE_SAVE_TO_CLOUD(p0: PBOOL): BOOL;
begin
  nativeInit(UINT64($4DFDD9EB705F8140));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_IS_SAVE_PENDING: BOOL;
begin
  nativeInit(UINT64($BEDB96A7584AA8CF));
  exit(BOOL(nativeCall^));
end;

function DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(p0, p1: Any): BOOL;
begin
  nativeInit(UINT64($A6EEF01087181EDD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(p0: Any);
begin
  nativeInit(UINT64($6AD0BD5E087866CB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(p0: Any): PAny;
begin
  nativeInit(UINT64($DBF860CF1DB8E599));
  nativePush64(UINT64(p0));
  exit(PAny(nativeCall^));
end;

procedure DATADICT_SET_BOOL(objectData: PAny; key: PChar; value: BOOL);
begin
  nativeInit(UINT64($35124302A556A325));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure DATADICT_SET_INT(objectData: PAny; key: PChar; value: cint);
begin
  nativeInit(UINT64($E7E035450A7948D5));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure DATADICT_SET_FLOAT(objectData: PAny; key: PChar; value: cfloat);
begin
  nativeInit(UINT64($C27E1CC2D795105E));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure DATADICT_SET_STRING(objectData: PAny; key, value: PChar);
begin
  nativeInit(UINT64($8FF3847DADD8E30C));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure DATADICT_SET_VECTOR(objectData: PAny; key: PChar; valueX, valueY, valueZ: cfloat);
begin
  nativeInit(UINT64($4CD49B76338C7DEE));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  nativePush64(PUINT64(@valueX)^);
  nativePush64(PUINT64(@valueY)^);
  nativePush64(PUINT64(@valueZ)^);
  nativeCall;
end;

function DATADICT_CREATE_DICT(objectData: PAny; key: PChar): PAny;
begin
  nativeInit(UINT64($A358F56F10732EE1));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(PAny(nativeCall^));
end;

function DATADICT_CREATE_ARRAY(objectData: PAny; key: PChar): PAny;
begin
  nativeInit(UINT64($5B11728527CA6E5F));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(PAny(nativeCall^));
end;

function DATADICT_GET_BOOL(objectData: PAny; key: PChar): BOOL;
begin
  nativeInit(UINT64($1186940ED72FFEEC));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(BOOL(nativeCall^));
end;

function DATADICT_GET_INT(objectData: PAny; key: PChar): cint;
begin
  nativeInit(UINT64($78F06F6B1FB5A80C));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(cint(nativeCall^));
end;

function DATADICT_GET_FLOAT(objectData: PAny; key: PChar): cfloat;
begin
  nativeInit(UINT64($06610343E73B9727));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function DATADICT_GET_STRING(objectData: PAny; key: PChar): PChar;
begin
  nativeInit(UINT64($3D2FD9E763B24472));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(PChar(nativeCall^));
end;

function DATADICT_GET_VECTOR(objectData: PAny; key: PChar): Vector3;
begin
  nativeInit(UINT64($46CD3CB66E0825CC));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(PVector3(nativeCall)^);
end;

function DATADICT_GET_DICT(objectData: PAny; key: PChar): PAny;
begin
  nativeInit(UINT64($B6B9DDC412FCEEE2));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(PAny(nativeCall^));
end;

function DATADICT_GET_ARRAY(objectData: PAny; key: PChar): PAny;
begin
  nativeInit(UINT64($7A983AA9DA2659ED));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(PAny(nativeCall^));
end;

function DATADICT_GET_TYPE(objectData: PAny; key: PChar): cint;
begin
  nativeInit(UINT64($031C55ED33227371));
  nativePush64(UINT64(objectData));
  nativePush64(UINT64(key));
  exit(cint(nativeCall^));
end;

procedure DATAARRAY_ADD_BOOL(arrayData: PAny; value: BOOL);
begin
  nativeInit(UINT64($F8B0F5A43E928C76));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure DATAARRAY_ADD_INT(arrayData: PAny; value: cint);
begin
  nativeInit(UINT64($CABDB751D86FE93B));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure DATAARRAY_ADD_FLOAT(arrayData: PAny; value: cfloat);
begin
  nativeInit(UINT64($57A995FD75D37F56));
  nativePush64(UINT64(arrayData));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure DATAARRAY_ADD_STRING(arrayData: PAny; value: PChar);
begin
  nativeInit(UINT64($2F0661C155AEEEAA));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure DATAARRAY_ADD_VECTOR(arrayData: PAny; valueX, valueY, valueZ: cfloat);
begin
  nativeInit(UINT64($407F8D034F70F0C2));
  nativePush64(UINT64(arrayData));
  nativePush64(PUINT64(@valueX)^);
  nativePush64(PUINT64(@valueY)^);
  nativePush64(PUINT64(@valueZ)^);
  nativeCall;
end;

function DATAARRAY_ADD_DICT(arrayData: PAny): PAny;
begin
  nativeInit(UINT64($6889498B3E19C797));
  nativePush64(UINT64(arrayData));
  exit(PAny(nativeCall^));
end;

function DATAARRAY_GET_BOOL(arrayData: PAny; arrayIndex: cint): BOOL;
begin
  nativeInit(UINT64($50C1B2874E50C114));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(arrayIndex));
  exit(BOOL(nativeCall^));
end;

function DATAARRAY_GET_INT(arrayData: PAny; arrayIndex: cint): cint;
begin
  nativeInit(UINT64($3E5AE19425CD74BE));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(arrayIndex));
  exit(cint(nativeCall^));
end;

function DATAARRAY_GET_FLOAT(arrayData: PAny; arrayIndex: cint): cfloat;
begin
  nativeInit(UINT64($C0C527B525D7CFB5));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(arrayIndex));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function DATAARRAY_GET_STRING(arrayData: PAny; arrayIndex: cint): PChar;
begin
  nativeInit(UINT64($D3F2FFEB8D836F52));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(arrayIndex));
  exit(PChar(nativeCall^));
end;

function DATAARRAY_GET_VECTOR(arrayData: PAny; arrayIndex: cint): Vector3;
begin
  nativeInit(UINT64($8D2064E5B64A628A));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(arrayIndex));
  exit(PVector3(nativeCall)^);
end;

function DATAARRAY_GET_DICT(arrayData: PAny; arrayIndex: cint): PAny;
begin
  nativeInit(UINT64($8B5FADCC4E3A145F));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(arrayIndex));
  exit(PAny(nativeCall^));
end;

function DATAARRAY_GET_COUNT(arrayData: PAny): cint;
begin
  nativeInit(UINT64($065DB281590CEA2D));
  nativePush64(UINT64(arrayData));
  exit(cint(nativeCall^));
end;

function DATAARRAY_GET_TYPE(arrayData: PAny; arrayIndex: cint): cint;
begin
  nativeInit(UINT64($3A0014ADB172A3C5));
  nativePush64(UINT64(arrayData));
  nativePush64(UINT64(arrayIndex));
  exit(cint(nativeCall^));
end;

function DECOR_SET_TIME(para_entity: Entity; propertyName: PChar; timestamp: cint): BOOL;
begin
  nativeInit(UINT64($95AED7B8E39ECAA4));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  nativePush64(UINT64(timestamp));
  exit(BOOL(nativeCall^));
end;

function DECOR_SET_BOOL(para_entity: Entity; propertyName: PChar; value: BOOL): BOOL;
begin
  nativeInit(UINT64($6B1E8E2ED1335B71));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function DECOR_SET_FLOAT(para_entity: Entity; propertyName: PChar; value: cfloat): BOOL;
begin
  nativeInit(UINT64($211AB1DD8D0F363A));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  nativePush64(PUINT64(@value)^);
  exit(BOOL(nativeCall^));
end;

function DECOR_SET_INT(para_entity: Entity; propertyName: PChar; value: cint): BOOL;
begin
  nativeInit(UINT64($0CE3AA5E1CA19E10));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function DECOR_GET_BOOL(para_entity: Entity; propertyName: PChar): BOOL;
begin
  nativeInit(UINT64($DACE671663F2F5DB));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  exit(BOOL(nativeCall^));
end;

function DECOR_GET_FLOAT(para_entity: Entity; propertyName: PChar): cfloat;
begin
  nativeInit(UINT64($6524A2F114706F43));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function DECOR_GET_INT(para_entity: Entity; propertyName: PChar): cint;
begin
  nativeInit(UINT64($A06C969B02A97298));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  exit(cint(nativeCall^));
end;

function DECOR_EXIST_ON(para_entity: Entity; propertyName: PChar): BOOL;
begin
  nativeInit(UINT64($05661B80A8C9165F));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  exit(BOOL(nativeCall^));
end;

function DECOR_REMOVE(para_entity: Entity; propertyName: PChar): BOOL;
begin
  nativeInit(UINT64($00EE9F297C738720));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(propertyName));
  exit(BOOL(nativeCall^));
end;

procedure DECOR_REGISTER(propertyName: PChar; _type: cint);
begin
  nativeInit(UINT64($9FD90732F56403CE));
  nativePush64(UINT64(propertyName));
  nativePush64(UINT64(_type));
  nativeCall;
end;

function DECOR_IS_REGISTERED_AS_TYPE(propertyName: PChar; _type: cint): BOOL;
begin
  nativeInit(UINT64($4F14F9F870D6FBC8));
  nativePush64(UINT64(propertyName));
  nativePush64(UINT64(_type));
  exit(BOOL(nativeCall^));
end;

procedure DECOR_REGISTER_LOCK;
begin
  nativeInit(UINT64($A9D14EEA259F9248));
  nativeCall;
end;

function ARE_ANY_CCS_PENDING: BOOL;
begin
  nativeInit(UINT64($241FCA5B1AA14F75));
  exit(BOOL(nativeCall^));
end;

function IS_DLC_PRESENT(dlcHash: Hash): BOOL;
begin
  nativeInit(UINT64($812595A0644CE1DE));
  nativePush64(UINT64(dlcHash));
  exit(BOOL(nativeCall^));
end;

function DLC_CHECK_CLOUD_DATA_CORRECT: BOOL;
begin
  nativeInit(UINT64($F2E07819EF1A5289));
  exit(BOOL(nativeCall^));
end;

function GET_EXTRACONTENT_CLOUD_RESULT: cint;
begin
  nativeInit(UINT64($9489659372A81585));
  exit(cint(nativeCall^));
end;

function DLC_CHECK_COMPAT_PACK_CONFIGURATION: BOOL;
begin
  nativeInit(UINT64($A213B11DFF526300));
  exit(BOOL(nativeCall^));
end;

function GET_EVER_HAD_BAD_PACK_ORDER: BOOL;
begin
  nativeInit(UINT64($8D30F648014A92B5));
  exit(BOOL(nativeCall^));
end;

function GET_IS_LOADING_SCREEN_ACTIVE: BOOL;
begin
  nativeInit(UINT64($10D0A8F259E93EC9));
  exit(BOOL(nativeCall^));
end;

function GET_IS_INITIAL_LOADING_SCREEN_ACTIVE: BOOL;
begin
  nativeInit(UINT64($C4637A6D03C24CC3));
  exit(BOOL(nativeCall^));
end;

function HAS_CLOUD_REQUESTS_FINISHED(p0: PBOOL; unused: cint): BOOL;
begin
  nativeInit(UINT64($46E2B844905BC5F0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(unused));
  exit(BOOL(nativeCall^));
end;

procedure ON_ENTER_SP;
begin
  nativeInit(UINT64($D7C10C4A637992C9));
  nativeCall;
end;

procedure ON_ENTER_MP;
begin
  nativeInit(UINT64($0888C3502DBBEEF5));
  nativeCall;
end;

function DOES_ENTITY_EXIST(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($7239B21A38F536BA));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function DOES_ENTITY_BELONG_TO_THIS_SCRIPT(para_entity: Entity; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($DDE6DF5AE89981D2));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function DOES_ENTITY_HAVE_DRAWABLE(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($060D6E96F8B8E48D));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function DOES_ENTITY_HAVE_PHYSICS(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($DA95EA3317CC5064));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function DOES_ENTITY_HAVE_SKELETON(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($764EB96874EFFDC1));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function DOES_ENTITY_HAVE_ANIM_DIRECTOR(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($2158E81A6AF65EA9));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_ANIM_FINISHED(para_entity: Entity; animDict, animName: PChar; p3: cint): BOOL;
begin
  nativeInit(UINT64($20B711662962B472));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($95EB9964FF5C5C65));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($605F5A140F202491));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($DFD5033FDBA0A9C8));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(entity1, entity2: Entity; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($C86D67D52A707CF8));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_CLEAR_LOS_TO_ENTITY(entity1, entity2: Entity; traceType: cint): BOOL;
begin
  nativeInit(UINT64($FCDFF7B72D23A1AC));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(traceType));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(entity1, entity2: Entity; traceType: cint): BOOL;
begin
  nativeInit(UINT64($394BDE2A7BBA031E));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(traceType));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(entity1, entity2: Entity): BOOL;
begin
  nativeInit(UINT64($0267D00AF114F17A));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  exit(BOOL(nativeCall^));
end;

function HAS_ENTITY_COLLIDED_WITH_ANYTHING(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($8BAD02F0368D9E14));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function _GET_LAST_ENTITY_HIT_BY_ENTITY(para_entity: Entity): Entity;
begin
  nativeInit(UINT64($A75EE4F689B85391));
  nativePush64(UINT64(para_entity));
  exit(Entity(nativeCall^));
end;

function GET_LAST_MATERIAL_HIT_BY_ENTITY(para_entity: Entity): Hash;
begin
  nativeInit(UINT64($5C3D0A935F535C4C));
  nativePush64(UINT64(para_entity));
  exit(Hash(nativeCall^));
end;

function GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(para_entity: Entity): Vector3;
begin
  nativeInit(UINT64($E465D4AB7CA6AE72));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^);
end;

procedure FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(para_entity: Entity);
begin
  nativeInit(UINT64($40FDEDB72F8293B2));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

function GET_ENTITY_ANIM_CURRENT_TIME(para_entity: Entity; animDict, animName: PChar): cfloat;
begin
  nativeInit(UINT64($346D81500D088F42));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_ANIM_TOTAL_TIME(para_entity: Entity; animDict, animName: PChar): cfloat;
begin
  nativeInit(UINT64($50BD2730B191E360));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ANIM_DURATION(animDict, animName: PChar): cfloat;
begin
  nativeInit(UINT64($FEDDF04D62B8D790));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_ATTACHED_TO(para_entity: Entity): Entity;
begin
  nativeInit(UINT64($48C2BED9180FE123));
  nativePush64(UINT64(para_entity));
  exit(Entity(nativeCall^));
end;

function GET_ENTITY_COORDS(para_entity: Entity; alive: BOOL): Vector3;
begin
  nativeInit(UINT64($3FEF770D40960D5A));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(alive));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_FORWARD_VECTOR(para_entity: Entity): Vector3;
begin
  nativeInit(UINT64($0A794A5A57F8DF91));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_FORWARD_X(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($8BB4EF4214E0E6D5));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_FORWARD_Y(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($866A4A5FAE349510));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_HEADING(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($E83D4F9BA2A38914));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_HEADING_FROM_EULERS(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($846BF6291198A71E));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_HEALTH(para_entity: Entity): cint;
begin
  nativeInit(UINT64($EEF059FAD016D209));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

function GET_ENTITY_MAX_HEALTH(para_entity: Entity): cint;
begin
  nativeInit(UINT64($15D757606D170C3C));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

procedure SET_ENTITY_MAX_HEALTH(para_entity: Entity; value: cint);
begin
  nativeInit(UINT64($166E7CF68597D8B5));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(value));
  nativeCall;
end;

function GET_ENTITY_HEIGHT(para_entity: Entity; X, Y, Z: cfloat; atTop, inWorldCoords: BOOL): cfloat;
begin
  nativeInit(UINT64($5A504562485944DD));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@X)^);
  nativePush64(PUINT64(@Y)^);
  nativePush64(PUINT64(@Z)^);
  nativePush64(UINT64(atTop));
  nativePush64(UINT64(inWorldCoords));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_HEIGHT_ABOVE_GROUND(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($1DD55701034110E5));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure GET_ENTITY_MATRIX(para_entity: Entity; forwardVector, rightVector, upVector, position: PVector3);
begin
  nativeInit(UINT64($ECB2FC7235A7D137));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(forwardVector));
  nativePush64(UINT64(rightVector));
  nativePush64(UINT64(upVector));
  nativePush64(UINT64(position));
  nativeCall;
end;

function GET_ENTITY_MODEL(para_entity: Entity): Hash;
begin
  nativeInit(UINT64($9F47B058362C84B5));
  nativePush64(UINT64(para_entity));
  exit(Hash(nativeCall^));
end;

function GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(para_entity: Entity; posX, posY, posZ: cfloat): Vector3;
begin
  nativeInit(UINT64($2274BC1C4885E333));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  exit(PVector3(nativeCall)^);
end;

function GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(para_entity: Entity; offsetX, offsetY, offsetZ: cfloat): Vector3;
begin
  nativeInit(UINT64($1899F328B0E12848));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_PITCH(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($D45DC2893621E1FE));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure GET_ENTITY_QUATERNION(para_entity: Entity; x, y, z, w: pcfloat);
begin
  nativeInit(UINT64($7B3703D2D32DFA18));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(x));
  nativePush64(UINT64(y));
  nativePush64(UINT64(z));
  nativePush64(UINT64(w));
  nativeCall;
end;

function GET_ENTITY_ROLL(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($831E0242595560DF));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_ROTATION(para_entity: Entity; rotationOrder: cint): Vector3;
begin
  nativeInit(UINT64($AFBD61CC738D9EB9));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(rotationOrder));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_ROTATION_VELOCITY(para_entity: Entity): Vector3;
begin
  nativeInit(UINT64($213B91045D09B983));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_SCRIPT(para_entity: Entity; script: PScrHandle): PChar;
begin
  nativeInit(UINT64($A6E9C38DB51D7748));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(script));
  exit(PChar(nativeCall^));
end;

function GET_ENTITY_SPEED(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($D5037BA82E12416F));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_SPEED_VECTOR(para_entity: Entity; relative: BOOL): Vector3;
begin
  nativeInit(UINT64($9A8D700A51CB7B0D));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(relative));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_UPRIGHT_VALUE(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($95EED5A694951F9F));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ENTITY_VELOCITY(para_entity: Entity): Vector3;
begin
  nativeInit(UINT64($4805D2B1D8CF94A9));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^);
end;

function GET_OBJECT_INDEX_FROM_ENTITY_INDEX(para_entity: Entity): GTAObject;
begin
  nativeInit(UINT64($D7E3B9735C0F89D6));
  nativePush64(UINT64(para_entity));
  exit(GTAObject(nativeCall^));
end;

function GET_PED_INDEX_FROM_ENTITY_INDEX(para_entity: Entity): Ped;
begin
  nativeInit(UINT64($04A2A40C73395041));
  nativePush64(UINT64(para_entity));
  exit(Ped(nativeCall^));
end;

function GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(para_entity: Entity): Vehicle;
begin
  nativeInit(UINT64($4B53F92932ADFAC0));
  nativePush64(UINT64(para_entity));
  exit(Vehicle(nativeCall^));
end;

function GET_WORLD_POSITION_OF_ENTITY_BONE(para_entity: Entity; boneIndex: cint): Vector3;
begin
  nativeInit(UINT64($44A8FCB8ED227738));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(boneIndex));
  exit(PVector3(nativeCall)^);
end;

function GET_NEAREST_PLAYER_TO_ENTITY(para_entity: Entity): Player;
begin
  nativeInit(UINT64($7196842CB375CDB3));
  nativePush64(UINT64(para_entity));
  exit(Player(nativeCall^));
end;

function GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(para_entity: Entity; team: cint): Player;
begin
  nativeInit(UINT64($4DC9A62F844D9337));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(team));
  exit(Player(nativeCall^));
end;

function GET_NEAREST_PARTICIPANT_TO_ENTITY(para_entity: Entity): cint;
begin
  nativeInit(UINT64($FFBD7052D65BE0FF));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

function GET_ENTITY_TYPE(para_entity: Entity): cint;
begin
  nativeInit(UINT64($8ACD366038D14505));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

function GET_ENTITY_POPULATION_TYPE(para_entity: Entity): cint;
begin
  nativeInit(UINT64($F6F5161F4534EDFF));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

function IS_AN_ENTITY(handle: ScrHandle): BOOL;
begin
  nativeInit(UINT64($731EC8A916BD11A1));
  nativePush64(UINT64(handle));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_A_PED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($524AC5ECEA15343E));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_A_MISSION_ENTITY(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($0A7B270912999B3C));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_A_VEHICLE(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($6AC7003FA6E5575E));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_AN_OBJECT(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($8D68C8FD0FACA94E));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_AT_COORD(para_entity: Entity; xPos, yPos, zPos, xSize, ySize, zSize: cfloat; p7, p8: BOOL; p9: cint): BOOL;
begin
  nativeInit(UINT64($20B60995556D004F));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(PUINT64(@xSize)^);
  nativePush64(PUINT64(@ySize)^);
  nativePush64(PUINT64(@zSize)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_AT_ENTITY(entity1, entity2: Entity; xSize, ySize, zSize: cfloat; p5, p6: BOOL; p7: cint): BOOL;
begin
  nativeInit(UINT64($751B70C3D034E187));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(PUINT64(@xSize)^);
  nativePush64(PUINT64(@ySize)^);
  nativePush64(PUINT64(@zSize)^);
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_ATTACHED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($B346476EF1A64897));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_ATTACHED_TO_ANY_OBJECT(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($CF511840CEEDE0CC));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_ATTACHED_TO_ANY_PED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($B1632E9A5F988D11));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($26AA915AD89BFB4B));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_ATTACHED_TO_ENTITY(from, _to: Entity): BOOL;
begin
  nativeInit(UINT64($EFBE71898A993728));
  nativePush64(UINT64(from));
  nativePush64(UINT64(_to));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_DEAD(para_entity: Entity; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($5F9532F3B5CC2551));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_IN_AIR(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($886E37EC497200B6));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_IN_ANGLED_AREA(para_entity: Entity; x1, y1, z1, x2, y2, z2, width: cfloat; debug, includeZ: BOOL; p10: Any): BOOL;
begin
  nativeInit(UINT64($51210CED3DA1C78A));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(debug));
  nativePush64(UINT64(includeZ));
  nativePush64(UINT64(p10));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_IN_AREA(para_entity: Entity; x1, y1, z1, x2, y2, z2: cfloat; p7, p8: BOOL; p9: Any): BOOL;
begin
  nativeInit(UINT64($54736AA40E271165));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_IN_ZONE(para_entity: Entity; zone: PChar): BOOL;
begin
  nativeInit(UINT64($B6463CF6AF527071));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(zone));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_IN_WATER(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($CFB0A0D8EDD145A3));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function GET_ENTITY_SUBMERGED_LEVEL(para_entity: Entity): cfloat;
begin
  nativeInit(UINT64($E81AFC1BC4CC41CE));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($694E00132F2823ED));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_ENTITY_ON_SCREEN(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($E659E47AF827484B));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_PLAYING_ANIM(para_entity: Entity; animDict, animName: PChar; taskFlag: cint): BOOL;
begin
  nativeInit(UINT64($1F0B79228E461EC9));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(taskFlag));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_STATIC(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($1218E6886D3D8327));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_TOUCHING_ENTITY(para_entity, targetEntity: Entity): BOOL;
begin
  nativeInit(UINT64($17FFC1B2BA35A494));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(targetEntity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_TOUCHING_MODEL(para_entity: Entity; modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($0F42323798A58C8C));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_UPRIGHT(para_entity: Entity; angle: cfloat): BOOL;
begin
  nativeInit(UINT64($5333F526F6AB19AA));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@angle)^);
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_UPSIDEDOWN(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($1DBD58820FA61D71));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_VISIBLE(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($47D6F43D77935C75));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_VISIBLE_TO_SCRIPT(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($D796CB5BA8F20E32));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_OCCLUDED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($E31C2C72B8692B64));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function WOULD_ENTITY_BE_OCCLUDED(entityModelHash: Hash; x, y, z: cfloat; p4: BOOL): BOOL;
begin
  nativeInit(UINT64($EE5D2A122E09EC42));
  nativePush64(UINT64(entityModelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function IS_ENTITY_WAITING_FOR_WORLD_COLLISION(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($D05BFF0C0A12C68F));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(para_entity: Entity; forceType: cint; x, y, z: cfloat; p5, isDirectionRel, isForceRel, p8: BOOL);
begin
  nativeInit(UINT64($18FF00FC7EFF559E));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(forceType));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p5));
  nativePush64(UINT64(isDirectionRel));
  nativePush64(UINT64(isForceRel));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure APPLY_FORCE_TO_ENTITY(para_entity: Entity; forceFlags: cint; x, y, z, offX, offY, offZ: cfloat; boneIndex: cint; isDirectionRel, ignoreUpVec, isForceRel, p12, p13: BOOL);
begin
  nativeInit(UINT64($C5F68BE9613E2D18));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(forceFlags));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@offX)^);
  nativePush64(PUINT64(@offY)^);
  nativePush64(PUINT64(@offZ)^);
  nativePush64(UINT64(boneIndex));
  nativePush64(UINT64(isDirectionRel));
  nativePush64(UINT64(ignoreUpVec));
  nativePush64(UINT64(isForceRel));
  nativePush64(UINT64(p12));
  nativePush64(UINT64(p13));
  nativeCall;
end;

procedure ATTACH_ENTITY_TO_ENTITY(entity1, entity2: Entity; boneIndex: cint; xPos, yPos, zPos, xRot, yRot, zRot: cfloat; p9, useSoftPinning, collision, isPed: BOOL; vertexIndex: cint; fixedRot: BOOL; p15: Any);
begin
  nativeInit(UINT64($6B9BBD38AB0796DF));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(p9));
  nativePush64(UINT64(useSoftPinning));
  nativePush64(UINT64(collision));
  nativePush64(UINT64(isPed));
  nativePush64(UINT64(vertexIndex));
  nativePush64(UINT64(fixedRot));
  nativePush64(UINT64(p15));
  nativeCall;
end;

procedure ATTACH_ENTITY_BONE_TO_ENTITY_BONE(entity1, entity2: Entity; boneIndex1, boneIndex2: cint; p4, p5: BOOL);
begin
  nativeInit(UINT64($5C48B75732C8456C));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(boneIndex1));
  nativePush64(UINT64(boneIndex2));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(entity1, entity2: Entity; boneIndex1, boneIndex2: cint; p4, p5: BOOL);
begin
  nativeInit(UINT64($FD1695C5D3B05439));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(boneIndex1));
  nativePush64(UINT64(boneIndex2));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(entity1, entity2: Entity; boneIndex1, boneIndex2: cint; xPos1, yPos1, zPos1, xPos2, yPos2, zPos2, xRot, yRot, zRot, breakForce: cfloat; fixedRot, p15, collision, p17: BOOL; p18: cint);
begin
  nativeInit(UINT64($C3675780C92F90F9));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(boneIndex1));
  nativePush64(UINT64(boneIndex2));
  nativePush64(PUINT64(@xPos1)^);
  nativePush64(PUINT64(@yPos1)^);
  nativePush64(PUINT64(@zPos1)^);
  nativePush64(PUINT64(@xPos2)^);
  nativePush64(PUINT64(@yPos2)^);
  nativePush64(PUINT64(@zPos2)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@breakForce)^);
  nativePush64(UINT64(fixedRot));
  nativePush64(UINT64(p15));
  nativePush64(UINT64(collision));
  nativePush64(UINT64(p17));
  nativePush64(UINT64(p18));
  nativeCall;
end;

procedure ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS(firstEntityIndex, secondEntityIndex: Entity; firstEntityBoneIndex, secondEntityBoneIndex: cint; secondEntityOffsetX, secondEntityOffsetY, secondEntityOffsetZ, firstEntityOffsetX, firstEntityOffsetY, firstEntityOffsetZ, vecRotationX, vecRotationY, vecRotationZ, physicalStrength: cfloat; constrainRotation, doInitialWarp, collideWithEntity, addInitialSeperation: BOOL; rotOrder: cint; invMassScaleA, invMassScaleB: cfloat);
begin
  nativeInit(UINT64($168A09D1B25B0BA4));
  nativePush64(UINT64(firstEntityIndex));
  nativePush64(UINT64(secondEntityIndex));
  nativePush64(UINT64(firstEntityBoneIndex));
  nativePush64(UINT64(secondEntityBoneIndex));
  nativePush64(PUINT64(@secondEntityOffsetX)^);
  nativePush64(PUINT64(@secondEntityOffsetY)^);
  nativePush64(PUINT64(@secondEntityOffsetZ)^);
  nativePush64(PUINT64(@firstEntityOffsetX)^);
  nativePush64(PUINT64(@firstEntityOffsetY)^);
  nativePush64(PUINT64(@firstEntityOffsetZ)^);
  nativePush64(PUINT64(@vecRotationX)^);
  nativePush64(PUINT64(@vecRotationY)^);
  nativePush64(PUINT64(@vecRotationZ)^);
  nativePush64(PUINT64(@physicalStrength)^);
  nativePush64(UINT64(constrainRotation));
  nativePush64(UINT64(doInitialWarp));
  nativePush64(UINT64(collideWithEntity));
  nativePush64(UINT64(addInitialSeperation));
  nativePush64(UINT64(rotOrder));
  nativePush64(PUINT64(@invMassScaleA)^);
  nativePush64(PUINT64(@invMassScaleB)^);
  nativeCall;
end;

procedure PROCESS_ENTITY_ATTACHMENTS(para_entity: Entity);
begin
  nativeInit(UINT64($F4080490ADC51C6F));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

function GET_ENTITY_BONE_INDEX_BY_NAME(para_entity: Entity; boneName: PChar): cint;
begin
  nativeInit(UINT64($FB71170B7E76ACBA));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(boneName));
  exit(cint(nativeCall^));
end;

procedure CLEAR_ENTITY_LAST_DAMAGE_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($A72CD9CA74A5ECBA));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure DELETE_ENTITY(entity: PEntity);
begin
  nativeInit(UINT64($AE3CBE5BF394C9C9));
  nativePush64(UINT64(entity));
  nativeCall;
end;

procedure DETACH_ENTITY(para_entity: Entity; dynamic, collision: BOOL);
begin
  nativeInit(UINT64($961AC54BF0613F5D));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(dynamic));
  nativePush64(UINT64(collision));
  nativeCall;
end;

procedure FREEZE_ENTITY_POSITION(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($428CA6DBD1094446));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($3910051CCECDB00C));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function PLAY_ENTITY_ANIM(para_entity: Entity; animName, animDict: PChar; p3: cfloat; loop, stayInAnim, p6: BOOL; delta: cfloat; bitset: Any): BOOL;
begin
  nativeInit(UINT64($7FB218262B810701));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(animDict));
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(loop));
  nativePush64(UINT64(stayInAnim));
  nativePush64(UINT64(p6));
  nativePush64(PUINT64(@delta)^);
  nativePush64(UINT64(bitset));
  exit(BOOL(nativeCall^));
end;

function PLAY_SYNCHRONIZED_ENTITY_ANIM(para_entity: Entity; syncedScene: cint; animation, propName: PChar; p4, p5: cfloat; p6: Any; p7: cfloat): BOOL;
begin
  nativeInit(UINT64($C77720A12FE14A86));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(syncedScene));
  nativePush64(UINT64(animation));
  nativePush64(UINT64(propName));
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  nativePush64(PUINT64(@p7)^);
  exit(BOOL(nativeCall^));
end;

function PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2: cfloat; y2: Any; z2: cfloat; p6, p7: PChar; p8, p9: cfloat; p10: Any; p11: cfloat): BOOL;
begin
  nativeInit(UINT64($B9C54555ED30FBC4));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(UINT64(y2));
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(UINT64(p10));
  nativePush64(PUINT64(@p11)^);
  exit(BOOL(nativeCall^));
end;

function STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(x1, y1, z1, x2: cfloat; y2: Any; z2: cfloat): BOOL;
begin
  nativeInit(UINT64($11E79CAB7183B6F5));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(UINT64(y2));
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function STOP_ENTITY_ANIM(para_entity: Entity; animation, animGroup: PChar; p3: cfloat): BOOL;
begin
  nativeInit(UINT64($28004F88151E03E0));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animation));
  nativePush64(UINT64(animGroup));
  nativePush64(PUINT64(@p3)^);
  exit(BOOL(nativeCall^));
end;

function STOP_SYNCHRONIZED_ENTITY_ANIM(para_entity: Entity; p1: cfloat; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($43D3807C077261E3));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@p1)^);
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function HAS_ANIM_EVENT_FIRED(para_entity: Entity; actionHash: Hash): BOOL;
begin
  nativeInit(UINT64($EAF4CD9EA3E7E922));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(actionHash));
  exit(BOOL(nativeCall^));
end;

function FIND_ANIM_EVENT_PHASE(animDictionary, animName, p2: PChar; p3, p4: PAny): BOOL;
begin
  nativeInit(UINT64($07F1BE2BCCAA27A7));
  nativePush64(UINT64(animDictionary));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

procedure SET_ENTITY_ANIM_CURRENT_TIME(para_entity: Entity; animDictionary, animName: PChar; time: cfloat);
begin
  nativeInit(UINT64($4487C259F0F70977));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animDictionary));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@time)^);
  nativeCall;
end;

procedure SET_ENTITY_ANIM_SPEED(para_entity: Entity; animDictionary, animName: PChar; speedMultiplier: cfloat);
begin
  nativeInit(UINT64($28D1A16553C51776));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animDictionary));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@speedMultiplier)^);
  nativeCall;
end;

procedure SET_ENTITY_AS_MISSION_ENTITY(para_entity: Entity; p1, p2: BOOL);
begin
  nativeInit(UINT64($AD738C3085FE7E11));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_ENTITY_AS_NO_LONGER_NEEDED(entity: PEntity);
begin
  nativeInit(UINT64($B736A491E64A32CF));
  nativePush64(UINT64(entity));
  nativeCall;
end;

procedure SET_PED_AS_NO_LONGER_NEEDED(_ped: PPed);
begin
  nativeInit(UINT64($2595DD4236549CE3));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_VEHICLE_AS_NO_LONGER_NEEDED(veh: PVehicle);
begin
  nativeInit(UINT64($629BFA74418D6239));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_OBJECT_AS_NO_LONGER_NEEDED(obj: PGTAObject);
begin
  nativeInit(UINT64($3AE22DEB5BA5A3E6));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure SET_ENTITY_CAN_BE_DAMAGED(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($1760FFA8AB074D66));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_ENTITY_CAN_BE_DAMAGED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($D95CC5D2AB15A09F));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(para_entity: Entity; bCanBeDamaged: BOOL; relGroup: cint);
begin
  nativeInit(UINT64($E22D8FDE858B8119));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(bCanBeDamaged));
  nativePush64(UINT64(relGroup));
  nativeCall;
end;

procedure SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($352E2B5CF420BF3B));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($D3997889736FD899));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_COLLISION(para_entity: Entity; toggle, keepPhysics: BOOL);
begin
  nativeInit(UINT64($1A9205C1B9EE827F));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(keepPhysics));
  nativeCall;
end;

function GET_ENTITY_COLLISION_DISABLED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($CCF1E97BEFDAE480));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_ENTITY_COMPLETELY_DISABLE_COLLISION(para_entity: Entity; toggle, keepPhysics: BOOL);
begin
  nativeInit(UINT64($9EBC85ED0FFFE51C));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(keepPhysics));
  nativeCall;
end;

procedure SET_ENTITY_COORDS(para_entity: Entity; xPos, yPos, zPos: cfloat; xAxis, yAxis, zAxis, clearArea: BOOL);
begin
  nativeInit(UINT64($06843DA7060A026B));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  nativePush64(UINT64(clearArea));
  nativeCall;
end;

procedure SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(para_entity: Entity; xPos, yPos, zPos: cfloat; alive, deadFlag, ragdollFlag, clearArea: BOOL);
begin
  nativeInit(UINT64($621873ECE1178967));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(UINT64(alive));
  nativePush64(UINT64(deadFlag));
  nativePush64(UINT64(ragdollFlag));
  nativePush64(UINT64(clearArea));
  nativeCall;
end;

procedure SET_ENTITY_COORDS_NO_OFFSET(para_entity: Entity; xPos, yPos, zPos: cfloat; xAxis, yAxis, zAxis: BOOL);
begin
  nativeInit(UINT64($239A3351AC1DA385));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  nativeCall;
end;

procedure SET_ENTITY_DYNAMIC(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($1718DE8E3F2823CA));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_HEADING(para_entity: Entity; heading: cfloat);
begin
  nativeInit(UINT64($8E2530AA8ADA980E));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

procedure SET_ENTITY_HEALTH(para_entity: Entity; health: cint; instigator: Entity; weaponType: Hash);
begin
  nativeInit(UINT64($6B76DC1F3AE6E6A3));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(health));
  nativePush64(UINT64(instigator));
  nativePush64(UINT64(weaponType));
  nativeCall;
end;

procedure SET_ENTITY_INVINCIBLE(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($3882114BDE571AD4));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_IS_TARGET_PRIORITY(para_entity: Entity; p1: BOOL; p2: cfloat);
begin
  nativeInit(UINT64($EA02E132F5C68722));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure SET_ENTITY_LIGHTS(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($7CFBA6A80BDF3874));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_LOAD_COLLISION_FLAG(para_entity: Entity; toggle: BOOL; p2: Any);
begin
  nativeInit(UINT64($0DC7CABAB1E9B67E));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function HAS_COLLISION_LOADED_AROUND_ENTITY(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($E9676F61BC0B3321));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_ENTITY_MAX_SPEED(para_entity: Entity; speed: cfloat);
begin
  nativeInit(UINT64($0E46A3FCBDE2A1B1));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($79F020FF9EDC0748));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(para_entity: Entity; p1: BOOL; p2: Any);
begin
  nativeInit(UINT64($7022BD828FA0B082));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_ENTITY_PROOFS(para_entity: Entity; bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, waterProof: BOOL);
begin
  nativeInit(UINT64($FAEE099C6F890BB8));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(bulletProof));
  nativePush64(UINT64(fireProof));
  nativePush64(UINT64(explosionProof));
  nativePush64(UINT64(collisionProof));
  nativePush64(UINT64(meleeProof));
  nativePush64(UINT64(steamProof));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(waterProof));
  nativeCall;
end;

function GET_ENTITY_PROOFS(para_entity: Entity; bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof: PBOOL): BOOL;
begin
  nativeInit(UINT64($BE8CD9BE829BBEBF));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(bulletProof));
  nativePush64(UINT64(fireProof));
  nativePush64(UINT64(explosionProof));
  nativePush64(UINT64(collisionProof));
  nativePush64(UINT64(meleeProof));
  nativePush64(UINT64(steamProof));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(drownProof));
  exit(BOOL(nativeCall^));
end;

procedure SET_ENTITY_QUATERNION(para_entity: Entity; x, y, z, w: cfloat);
begin
  nativeInit(UINT64($77B21BE7AC540F07));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@w)^);
  nativeCall;
end;

procedure SET_ENTITY_RECORDS_COLLISIONS(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($0A50A1EEDAD01E65));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_ROTATION(para_entity: Entity; pitch, roll, yaw: cfloat; rotationOrder: cint; p5: BOOL);
begin
  nativeInit(UINT64($8524A8B0171D5E07));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@pitch)^);
  nativePush64(PUINT64(@roll)^);
  nativePush64(PUINT64(@yaw)^);
  nativePush64(UINT64(rotationOrder));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure SET_ENTITY_VISIBLE(para_entity: Entity; toggle, p2: BOOL);
begin
  nativeInit(UINT64($EA1C610A04DB6BBB));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_ENTITY_WATER_REFLECTION_FLAG(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($C34BC448DA29F5E9));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_MIRROR_REFLECTION_FLAG(para_entity: Entity; p1: BOOL);
begin
  nativeInit(UINT64($E66377CDDADA4810));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_ENTITY_VELOCITY(para_entity: Entity; x, y, z: cfloat);
begin
  nativeInit(UINT64($1C99BB7B6E96D16F));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_ENTITY_ANGULAR_VELOCITY(para_entity: Entity; x, y, z: cfloat);
begin
  nativeInit(UINT64($8339643499D1222E));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_ENTITY_HAS_GRAVITY(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($4A4722448F18EEF5));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_LOD_DIST(para_entity: Entity; value: cint);
begin
  nativeInit(UINT64($5927F96A78577363));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(value));
  nativeCall;
end;

function GET_ENTITY_LOD_DIST(para_entity: Entity): cint;
begin
  nativeInit(UINT64($4159C2762B5791D6));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

procedure SET_ENTITY_ALPHA(para_entity: Entity; alphaLevel: cint; skin: BOOL);
begin
  nativeInit(UINT64($44A0870B7E92D7C0));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(alphaLevel));
  nativePush64(UINT64(skin));
  nativeCall;
end;

function GET_ENTITY_ALPHA(para_entity: Entity): cint;
begin
  nativeInit(UINT64($5A47B3B5E63E94C6));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

procedure RESET_ENTITY_ALPHA(para_entity: Entity);
begin
  nativeInit(UINT64($9B1E824FFBB7027A));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure RESET_PICKUP_ENTITY_GLOW(para_entity: Entity);
begin
  nativeInit(UINT64($490861B88F4FD846));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_PICKUP_COLLIDES_WITH_PROJECTILES(p0, p1: Any);
begin
  nativeInit(UINT64($CEA7C8E1B48FF68C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_ENTITY_SORT_BIAS(para_entity: Entity; p1: cfloat);
begin
  nativeInit(UINT64($5C3B791D580E0BC2));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_ENTITY_ALWAYS_PRERENDER(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($ACAD101E1FB66689));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_RENDER_SCORCHED(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($730F5F8D3F0F2050));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_TRAFFICLIGHT_OVERRIDE(para_entity: Entity; state: cint);
begin
  nativeInit(UINT64($57C5DB656185EAC4));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_ENTITY_IS_IN_VEHICLE(para_entity: Entity);
begin
  nativeInit(UINT64($78E8E3A640178255));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure CREATE_MODEL_SWAP(x, y, z, radius: cfloat; originalModel, newModel: Hash; p6: BOOL);
begin
  nativeInit(UINT64($92C47782FDA8B2A3));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(originalModel));
  nativePush64(UINT64(newModel));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure REMOVE_MODEL_SWAP(x, y, z, radius: cfloat; originalModel, newModel: Hash; p6: BOOL);
begin
  nativeInit(UINT64($033C0F9A64E229AE));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(originalModel));
  nativePush64(UINT64(newModel));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure CREATE_MODEL_HIDE(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL);
begin
  nativeInit(UINT64($8A97BCA30A0CE478));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL);
begin
  nativeInit(UINT64($3A52AE588830BF7F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure REMOVE_MODEL_HIDE(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL);
begin
  nativeInit(UINT64($D9E3006FB3CBD765));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure CREATE_FORCED_OBJECT(x, y, z: cfloat; p3: Any; modelHash: Hash; p5: BOOL);
begin
  nativeInit(UINT64($150E808B375A385A));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p3));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure REMOVE_FORCED_OBJECT(x, y, z, p3: cfloat; modelHash: Hash);
begin
  nativeInit(UINT64($61B6775E83C0DB6F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure SET_ENTITY_NO_COLLISION_ENTITY(entity1, entity2: Entity; thisFrameOnly: BOOL);
begin
  nativeInit(UINT64($A53ED5520C07654A));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativePush64(UINT64(thisFrameOnly));
  nativeCall;
end;

procedure SET_ENTITY_MOTION_BLUR(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($295D82A8559F9150));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CAN_AUTO_VAULT_ON_ENTITY(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($E12ABE5E3A389A6C));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CAN_CLIMB_ON_ENTITY(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($A80AE305E0A3044F));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($DC6F8601FAF2E893));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_NOWEAPONDECALS(para_entity: Entity; p1: BOOL);
begin
  nativeInit(UINT64($2C2E3DC128F44309));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(para_entity: Entity; p1: BOOL);
begin
  nativeInit(UINT64($1A092BB0C3808B96));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_ENTITY_BONE_ROTATION(para_entity: Entity; boneIndex: cint): Vector3;
begin
  nativeInit(UINT64($CE6294A232D03786));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(boneIndex));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_BONE_POSTION(para_entity: Entity; boneIndex: cint): Vector3;
begin
  nativeInit(UINT64($46F8696933A63C9B));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(boneIndex));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_BONE_OBJECT_ROTATION(para_entity: Entity; boneIndex: cint): Vector3;
begin
  nativeInit(UINT64($BD8D32550E5CEBFE));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(boneIndex));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_BONE_OBJECT_POSTION(para_entity: Entity; boneIndex: cint): Vector3;
begin
  nativeInit(UINT64($CF1247CC86961FD6));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(boneIndex));
  exit(PVector3(nativeCall)^);
end;

function GET_ENTITY_BONE_COUNT(para_entity: Entity): cint;
begin
  nativeInit(UINT64($B328DCC3A3AA401B));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

procedure ENABLE_ENTITY_BULLET_COLLISION(para_entity: Entity);
begin
  nativeInit(UINT64($6CE177D014502E8A));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(entity1, entity2: Entity);
begin
  nativeInit(UINT64($B17BC6453F6CF5AC));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativeCall;
end;

procedure SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(entity1, entity2: Entity);
begin
  nativeInit(UINT64($68B562E124CC0AEF));
  nativePush64(UINT64(entity1));
  nativePush64(UINT64(entity2));
  nativeCall;
end;

procedure SET_ALLOW_MIGRATE_TO_SPECTATOR(para_entity: Entity; p1: Any);
begin
  nativeInit(UINT64($36F32DE87082343E));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(para_entity: Entity; modelHash: Hash): Entity;
begin
  nativeInit(UINT64($1F922734E259BD26));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(modelHash));
  exit(Entity(nativeCall^));
end;

procedure SET_PICK_UP_BY_CARGOBOB_DISABLED(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($D7B80E7C3BEFC396));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DECISION_MAKER(_ped: Ped; name: Hash);
begin
  nativeInit(UINT64($B604A2942ADED0EE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure CLEAR_DECISION_MAKER_EVENT_RESPONSE(name: Hash; eventType: cint);
begin
  nativeInit(UINT64($4FC9381A7AEE8968));
  nativePush64(UINT64(name));
  nativePush64(UINT64(eventType));
  nativeCall;
end;

procedure BLOCK_DECISION_MAKER_EVENT(name: Hash; eventType: cint);
begin
  nativeInit(UINT64($E42FCDFD0E4196F7));
  nativePush64(UINT64(name));
  nativePush64(UINT64(eventType));
  nativeCall;
end;

procedure UNBLOCK_DECISION_MAKER_EVENT(name: Hash; eventType: cint);
begin
  nativeInit(UINT64($D7CD9CF34F2C99E8));
  nativePush64(UINT64(name));
  nativePush64(UINT64(eventType));
  nativeCall;
end;

function ADD_SHOCKING_EVENT_AT_POSITION(eventType: cint; x, y, z, duration: cfloat): cint;
begin
  nativeInit(UINT64($D9F8455409B525E9));
  nativePush64(UINT64(eventType));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@duration)^);
  exit(cint(nativeCall^));
end;

function ADD_SHOCKING_EVENT_FOR_ENTITY(eventType: cint; para_entity: Entity; duration: cfloat): cint;
begin
  nativeInit(UINT64($7FD8F3BE76F89422));
  nativePush64(UINT64(eventType));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@duration)^);
  exit(cint(nativeCall^));
end;

function IS_SHOCKING_EVENT_IN_SPHERE(eventType: cint; x, y, z, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($1374ABB7C15BAB92));
  nativePush64(UINT64(eventType));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

function REMOVE_SHOCKING_EVENT(event: ScrHandle): BOOL;
begin
  nativeInit(UINT64($2CDA538C44C6CCE5));
  nativePush64(UINT64(event));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_ALL_SHOCKING_EVENTS(p0: BOOL);
begin
  nativeInit(UINT64($EAABE8FDFA21274C));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS;
begin
  nativeInit(UINT64($340F1415B68AEADE));
  nativeCall;
end;

procedure SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME;
begin
  nativeInit(UINT64($2F9A292AD0A3BD89));
  nativeCall;
end;

procedure SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(eventType: cint);
begin
  nativeInit(UINT64($3FD2EC8BF1F1CF30));
  nativePush64(UINT64(eventType));
  nativeCall;
end;

procedure SUPPRESS_AGITATION_EVENTS_NEXT_FRAME;
begin
  nativeInit(UINT64($5F3B7749C112D552));
  nativeCall;
end;

function GET_NUM_TATTOO_SHOP_DLC_ITEMS(character: cint): cint;
begin
  nativeInit(UINT64($278F76C3B0A8F109));
  nativePush64(UINT64(character));
  exit(cint(nativeCall^));
end;

function GET_TATTOO_SHOP_DLC_ITEM_DATA(characterType, decorationIndex: cint; outComponent: PAny): BOOL;
begin
  nativeInit(UINT64($FF56381874F82086));
  nativePush64(UINT64(characterType));
  nativePush64(UINT64(decorationIndex));
  nativePush64(UINT64(outComponent));
  exit(BOOL(nativeCall^));
end;

function GET_TATTOO_SHOP_DLC_ITEM_INDEX(overlayHash: Hash; p1: Any; character: cint): cint;
begin
  nativeInit(UINT64($10144267DD22866C));
  nativePush64(UINT64(overlayHash));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(character));
  exit(cint(nativeCall^));
end;

procedure INIT_SHOP_PED_COMPONENT(outComponent: PAny);
begin
  nativeInit(UINT64($1E8C308FD312C036));
  nativePush64(UINT64(outComponent));
  nativeCall;
end;

procedure INIT_SHOP_PED_PROP(outProp: PAny);
begin
  nativeInit(UINT64($EB0A2B758F7B850F));
  nativePush64(UINT64(outProp));
  nativeCall;
end;

function SETUP_SHOP_PED_APPAREL_QUERY(p0, p1, p2, p3: cint): cint;
begin
  nativeInit(UINT64($50F457823CE6EB5F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(cint(nativeCall^));
end;

function SETUP_SHOP_PED_APPAREL_QUERY_TU(character, p1, p2: cint; p3: BOOL; p4, componentId: cint): cint;
begin
  nativeInit(UINT64($9BDF59818B1E38C1));
  nativePush64(UINT64(character));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(componentId));
  exit(cint(nativeCall^));
end;

procedure GET_SHOP_PED_QUERY_COMPONENT(componentId: cint; outComponent: PAny);
begin
  nativeInit(UINT64($249E310B2D920699));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(outComponent));
  nativeCall;
end;

function GET_SHOP_PED_QUERY_COMPONENT_INDEX(componentHash: Hash): cint;
begin
  nativeInit(UINT64($96E2929292A4DB77));
  nativePush64(UINT64(componentHash));
  exit(cint(nativeCall^));
end;

procedure GET_SHOP_PED_COMPONENT(componentHash: Hash; outComponent: PAny);
begin
  nativeInit(UINT64($74C0E2A57EC66760));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(outComponent));
  nativeCall;
end;

procedure GET_SHOP_PED_QUERY_PROP(componentId: cint; outProp: PAny);
begin
  nativeInit(UINT64($DE44A00999B2837D));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(outProp));
  nativeCall;
end;

function GET_SHOP_PED_QUERY_PROP_INDEX(componentHash: Hash): cint;
begin
  nativeInit(UINT64($6CEBE002E58DEE97));
  nativePush64(UINT64(componentHash));
  exit(cint(nativeCall^));
end;

procedure GET_SHOP_PED_PROP(componentHash: Hash; outProp: PAny);
begin
  nativeInit(UINT64($5D5CAFF661DDF6FC));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(outProp));
  nativeCall;
end;

function GET_HASH_NAME_FOR_COMPONENT(para_entity: Entity; componentId, drawableVariant, textureVariant: cint): Hash;
begin
  nativeInit(UINT64($0368B3A838070348));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableVariant));
  nativePush64(UINT64(textureVariant));
  exit(Hash(nativeCall^));
end;

function GET_HASH_NAME_FOR_PROP(para_entity: Entity; componentId, propIndex, propTextureIndex: cint): Hash;
begin
  nativeInit(UINT64($5D6160275CAEC8DD));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(propIndex));
  nativePush64(UINT64(propTextureIndex));
  exit(Hash(nativeCall^));
end;

function GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(componentHash: Hash): cint;
begin
  nativeInit(UINT64($C17AD0E5752BECDA));
  nativePush64(UINT64(componentHash));
  exit(cint(nativeCall^));
end;

function GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(propHash: Hash): cint;
begin
  nativeInit(UINT64($D40AAC51E8E4C663));
  nativePush64(UINT64(propHash));
  exit(cint(nativeCall^));
end;

procedure GET_VARIANT_COMPONENT(componentHash: Hash; variantComponentIndex: cint; nameHash: PHash; enumValue, componentType: pcint);
begin
  nativeInit(UINT64($6E11F282F11863B6));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(variantComponentIndex));
  nativePush64(UINT64(nameHash));
  nativePush64(UINT64(enumValue));
  nativePush64(UINT64(componentType));
  nativeCall;
end;

procedure GET_VARIANT_PROP(componentHash: Hash; variantPropIndex: cint; nameHash: PHash; enumValue, anchorPoint: pcint);
begin
  nativeInit(UINT64($D81B7F27BC773E66));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(variantPropIndex));
  nativePush64(UINT64(nameHash));
  nativePush64(UINT64(enumValue));
  nativePush64(UINT64(anchorPoint));
  nativeCall;
end;

function GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(componentHash: Hash): cint;
begin
  nativeInit(UINT64($C6B9DB42C04DD8C3));
  nativePush64(UINT64(componentHash));
  exit(cint(nativeCall^));
end;

function GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(componentHash: Hash): cint;
begin
  nativeInit(UINT64($017568A8182D98A6));
  nativePush64(UINT64(componentHash));
  exit(cint(nativeCall^));
end;

procedure GET_FORCED_COMPONENT(componentHash: Hash; forcedComponentIndex: cint; nameHash: PHash; enumValue, componentType: pcint);
begin
  nativeInit(UINT64($6C93ED8C2F74859B));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(forcedComponentIndex));
  nativePush64(UINT64(nameHash));
  nativePush64(UINT64(enumValue));
  nativePush64(UINT64(componentType));
  nativeCall;
end;

procedure GET_FORCED_PROP(componentHash: Hash; forcedPropIndex: cint; nameHash: PHash; enumValue, anchorPoint: pcint);
begin
  nativeInit(UINT64($E1CA84EBF72E691D));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(forcedPropIndex));
  nativePush64(UINT64(nameHash));
  nativePush64(UINT64(enumValue));
  nativePush64(UINT64(anchorPoint));
  nativeCall;
end;

function DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(componentHash, restrictionTagHash: Hash; componentId: cint): BOOL;
begin
  nativeInit(UINT64($341DE7ED1D2A1BFD));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(restrictionTagHash));
  nativePush64(UINT64(componentId));
  exit(BOOL(nativeCall^));
end;

function DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(_ped: Ped; componentId: cint; restrictionTagHash: Hash): BOOL;
begin
  nativeInit(UINT64($7796B21B76221BC5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(restrictionTagHash));
  exit(BOOL(nativeCall^));
end;

function DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(_ped: Ped; componentId: cint; restrictionTagHash: Hash): BOOL;
begin
  nativeInit(UINT64($D726BAB4554DA580));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(restrictionTagHash));
  exit(BOOL(nativeCall^));
end;

function SETUP_SHOP_PED_OUTFIT_QUERY(character: cint; p1: BOOL): cint;
begin
  nativeInit(UINT64($F3FBE2D50A6A8C28));
  nativePush64(UINT64(character));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

procedure GET_SHOP_PED_QUERY_OUTFIT(outfitIndex: cint; outfit: PAny);
begin
  nativeInit(UINT64($6D793F03A631FE56));
  nativePush64(UINT64(outfitIndex));
  nativePush64(UINT64(outfit));
  nativeCall;
end;

procedure GET_SHOP_PED_OUTFIT(p0: Any; p1: PAny);
begin
  nativeInit(UINT64($B7952076E444979D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_SHOP_PED_OUTFIT_LOCATE(p0: Any): cint;
begin
  nativeInit(UINT64($073CA26B079F956E));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function GET_SHOP_PED_OUTFIT_PROP_VARIANT(outfitHash: Hash; variantIndex: cint; outPropVariant: PAny): BOOL;
begin
  nativeInit(UINT64($A9F9C2E0FDE11CBB));
  nativePush64(UINT64(outfitHash));
  nativePush64(UINT64(variantIndex));
  nativePush64(UINT64(outPropVariant));
  exit(BOOL(nativeCall^));
end;

function GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(outfitHash: Hash; variantIndex: cint; outComponentVariant: PAny): BOOL;
begin
  nativeInit(UINT64($19F2A026EDF0013F));
  nativePush64(UINT64(outfitHash));
  nativePush64(UINT64(variantIndex));
  nativePush64(UINT64(outComponentVariant));
  exit(BOOL(nativeCall^));
end;

function GET_NUM_DLC_VEHICLES: cint;
begin
  nativeInit(UINT64($A7A866D21CD2329B));
  exit(cint(nativeCall^));
end;

function GET_DLC_VEHICLE_MODEL(dlcVehicleIndex: cint): Hash;
begin
  nativeInit(UINT64($ECC01B7C5763333C));
  nativePush64(UINT64(dlcVehicleIndex));
  exit(Hash(nativeCall^));
end;

function GET_DLC_VEHICLE_DATA(dlcVehicleIndex: cint; outData: PAny): BOOL;
begin
  nativeInit(UINT64($33468EDC08E371F6));
  nativePush64(UINT64(dlcVehicleIndex));
  nativePush64(UINT64(outData));
  exit(BOOL(nativeCall^));
end;

function GET_DLC_VEHICLE_FLAGS(dlcVehicleIndex: cint): cint;
begin
  nativeInit(UINT64($5549EE11FA22FCF2));
  nativePush64(UINT64(dlcVehicleIndex));
  exit(cint(nativeCall^));
end;

function GET_NUM_DLC_WEAPONS: cint;
begin
  nativeInit(UINT64($EE47635F352DA367));
  exit(cint(nativeCall^));
end;

function GET_NUM_DLC_WEAPONS_SP: cint;
begin
  nativeInit(UINT64($4160B65AE085B5A9));
  exit(cint(nativeCall^));
end;

function GET_DLC_WEAPON_DATA(dlcWeaponIndex: cint; outData: PAny): BOOL;
begin
  nativeInit(UINT64($79923CD21BECE14E));
  nativePush64(UINT64(dlcWeaponIndex));
  nativePush64(UINT64(outData));
  exit(BOOL(nativeCall^));
end;

function GET_DLC_WEAPON_DATA_SP(dlcWeaponIndex: cint; outData: PAny): BOOL;
begin
  nativeInit(UINT64($310836EE7129BA33));
  nativePush64(UINT64(dlcWeaponIndex));
  nativePush64(UINT64(outData));
  exit(BOOL(nativeCall^));
end;

function GET_NUM_DLC_WEAPON_COMPONENTS(dlcWeaponIndex: cint): cint;
begin
  nativeInit(UINT64($405425358A7D61FE));
  nativePush64(UINT64(dlcWeaponIndex));
  exit(cint(nativeCall^));
end;

function GET_NUM_DLC_WEAPON_COMPONENTS_SP(dlcWeaponIndex: cint): cint;
begin
  nativeInit(UINT64($AD2A7A6DFF55841B));
  nativePush64(UINT64(dlcWeaponIndex));
  exit(cint(nativeCall^));
end;

function GET_DLC_WEAPON_COMPONENT_DATA(dlcWeaponIndex, dlcWeapCompIndex: cint; ComponentDataPtr: PAny): BOOL;
begin
  nativeInit(UINT64($6CF598A2957C2BF8));
  nativePush64(UINT64(dlcWeaponIndex));
  nativePush64(UINT64(dlcWeapCompIndex));
  nativePush64(UINT64(ComponentDataPtr));
  exit(BOOL(nativeCall^));
end;

function GET_DLC_WEAPON_COMPONENT_DATA_SP(dlcWeaponIndex, dlcWeapCompIndex: cint; ComponentDataPtr: PAny): BOOL;
begin
  nativeInit(UINT64($31D5E073B6F93CDC));
  nativePush64(UINT64(dlcWeaponIndex));
  nativePush64(UINT64(dlcWeapCompIndex));
  nativePush64(UINT64(ComponentDataPtr));
  exit(BOOL(nativeCall^));
end;

function IS_CONTENT_ITEM_LOCKED(itemHash: Hash): BOOL;
begin
  nativeInit(UINT64($D4D7B033C3AA243C));
  nativePush64(UINT64(itemHash));
  exit(BOOL(nativeCall^));
end;

function IS_DLC_VEHICLE_MOD(para_hash: Hash): BOOL;
begin
  nativeInit(UINT64($0564B9FF9631B82C));
  nativePush64(UINT64(para_hash));
  exit(BOOL(nativeCall^));
end;

function GET_DLC_VEHICLE_MOD_LOCK_HASH(para_hash: Hash): Hash;
begin
  nativeInit(UINT64($C098810437312FFF));
  nativePush64(UINT64(para_hash));
  exit(Hash(nativeCall^));
end;

procedure EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(para_hash: Hash);
begin
  nativeInit(UINT64($6BEDF5769AC2DC07));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

procedure REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(para_hash: Hash);
begin
  nativeInit(UINT64($3C1978285B036B25));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

function START_SCRIPT_FIRE(X, Y, Z: cfloat; maxChildren: cint; isGasFire: BOOL): FireId;
begin
  nativeInit(UINT64($6B83617E04503888));
  nativePush64(PUINT64(@X)^);
  nativePush64(PUINT64(@Y)^);
  nativePush64(PUINT64(@Z)^);
  nativePush64(UINT64(maxChildren));
  nativePush64(UINT64(isGasFire));
  exit(FireId(nativeCall^));
end;

procedure REMOVE_SCRIPT_FIRE(fireHandle: FireId);
begin
  nativeInit(UINT64($7FF548385680673F));
  nativePush64(UINT64(fireHandle));
  nativeCall;
end;

function START_ENTITY_FIRE(para_entity: Entity): FireId;
begin
  nativeInit(UINT64($F6A9D9708F6F23DF));
  nativePush64(UINT64(para_entity));
  exit(FireId(nativeCall^));
end;

procedure STOP_ENTITY_FIRE(para_entity: Entity);
begin
  nativeInit(UINT64($7F0DD2EBBB651AFF));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

function IS_ENTITY_ON_FIRE(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($28D3FED7190D3A0B));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function GET_NUMBER_OF_FIRES_IN_RANGE(x, y, z, radius: cfloat): cint;
begin
  nativeInit(UINT64($50CAD495A460B305));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(cint(nativeCall^));
end;

procedure SET_FLAMMABILITY_MULTIPLIER(p0: cfloat);
begin
  nativeInit(UINT64($8F390AC4155099BA));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure STOP_FIRE_IN_RANGE(x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($056A8A219B8E829F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

function GET_CLOSEST_FIRE_POS(outPosition: PVector3; x, y, z: cfloat): BOOL;
begin
  nativeInit(UINT64($352A9F6BCF90081F));
  nativePush64(UINT64(outPosition));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(BOOL(nativeCall^));
end;

procedure ADD_EXPLOSION(x, y, z: cfloat; explosionType: cint; damageScale: cfloat; isAudible, isInvisible: BOOL; cameraShake: cfloat; noDamage: BOOL);
begin
  nativeInit(UINT64($E3AD2BDBAEE269AC));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@damageScale)^);
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(PUINT64(@cameraShake)^);
  nativePush64(UINT64(noDamage));
  nativeCall;
end;

procedure ADD_OWNED_EXPLOSION(_ped: Ped; x, y, z: cfloat; explosionType: cint; damageScale: cfloat; isAudible, isInvisible: BOOL; cameraShake: cfloat);
begin
  nativeInit(UINT64($172AA1B624FA1013));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@damageScale)^);
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(PUINT64(@cameraShake)^);
  nativeCall;
end;

procedure ADD_EXPLOSION_WITH_USER_VFX(x, y, z: cfloat; explosionType: cint; explosionFx: Hash; damageScale: cfloat; isAudible, isInvisible: BOOL; cameraShake: cfloat);
begin
  nativeInit(UINT64($36DD3FE58B5E5212));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(explosionType));
  nativePush64(UINT64(explosionFx));
  nativePush64(PUINT64(@damageScale)^);
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(PUINT64(@cameraShake)^);
  nativeCall;
end;

function IS_EXPLOSION_IN_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2: cfloat): BOOL;
begin
  nativeInit(UINT64($2E2EBA0EE7CED0E0));
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function IS_EXPLOSION_ACTIVE_IN_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2: cfloat): BOOL;
begin
  nativeInit(UINT64($6070104B699B2EF4));
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function IS_EXPLOSION_IN_SPHERE(explosionType: cint; x, y, z, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($AB0F816885B0E483));
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

function GET_OWNER_OF_EXPLOSION_IN_SPHERE(explosionType: cint; x, y, z, radius: cfloat): Entity;
begin
  nativeInit(UINT64($B3CD51E3DB86F176));
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(Entity(nativeCall^));
end;

function IS_EXPLOSION_IN_ANGLED_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2, width: cfloat): BOOL;
begin
  nativeInit(UINT64($A079A6C51525DC4B));
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  exit(BOOL(nativeCall^));
end;

function GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(explosionType: cint; x1, y1, z1, x2, y2, z2, radius: cfloat): Entity;
begin
  nativeInit(UINT64($14BA4BA137AF6CEC));
  nativePush64(UINT64(explosionType));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@radius)^);
  exit(Entity(nativeCall^));
end;

procedure SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(enabled: BOOL);
begin
  nativeInit(UINT64($175B6BFC15CDD0C5));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure DRAW_DEBUG_LINE(x1, y1, z1, x2, y2, z2: cfloat; r, g, b, alpha: cint);
begin
  nativeInit(UINT64($7FDFADE676AA3CB0));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_DEBUG_LINE_WITH_TWO_COLOURS(x1, y1, z1, x2, y2, z2: cfloat; r1, g1, b1, r2, g2, b2, alpha1, alpha2: cint);
begin
  nativeInit(UINT64($D8B9A8AC5608FF94));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(r1));
  nativePush64(UINT64(g1));
  nativePush64(UINT64(b1));
  nativePush64(UINT64(r2));
  nativePush64(UINT64(g2));
  nativePush64(UINT64(b2));
  nativePush64(UINT64(alpha1));
  nativePush64(UINT64(alpha2));
  nativeCall;
end;

procedure DRAW_DEBUG_SPHERE(x, y, z, radius: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($AAD68E1AB39DA632));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_DEBUG_BOX(x1, y1, z1, x2, y2, z2: cfloat; r, g, b, alpha: cint);
begin
  nativeInit(UINT64($083A2CA4F2E573BD));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_DEBUG_CROSS(x, y, z, size: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($73B1189623049839));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@size)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_DEBUG_TEXT(text: PChar; x, y, z: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($3903E216620488E8));
  nativePush64(UINT64(text));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_DEBUG_TEXT_2D(text: PChar; x, y, z: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($A3BB2E9555C05A8F));
  nativePush64(UINT64(text));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_LINE(x1, y1, z1, x2, y2, z2: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($6B7256074AE34680));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($AC26716048436851));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_TEXTURED_POLY(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; red, green, blue, alpha: cint; textureDict, textureName: PChar; u1, v1, w1, u2, v2, w2, u3, v3, w3: cfloat);
begin
  nativeInit(UINT64($29280002282F1928));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(PUINT64(@u1)^);
  nativePush64(PUINT64(@v1)^);
  nativePush64(PUINT64(@w1)^);
  nativePush64(PUINT64(@u2)^);
  nativePush64(PUINT64(@v2)^);
  nativePush64(PUINT64(@w2)^);
  nativePush64(PUINT64(@u3)^);
  nativePush64(PUINT64(@v3)^);
  nativePush64(PUINT64(@w3)^);
  nativeCall;
end;

procedure DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(x1, y1, z1, x2, y2, z2, x3, y3, z3, red1, green1, blue1: cfloat; alpha1: cint; red2, green2, blue2: cfloat; alpha2: cint; red3, green3, blue3: cfloat; alpha3: cint; textureDict, textureName: PChar; u1, v1, w1, u2, v2, w2, u3, v3, w3: cfloat);
begin
  nativeInit(UINT64($736D7AA1B750856B));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(PUINT64(@red1)^);
  nativePush64(PUINT64(@green1)^);
  nativePush64(PUINT64(@blue1)^);
  nativePush64(UINT64(alpha1));
  nativePush64(PUINT64(@red2)^);
  nativePush64(PUINT64(@green2)^);
  nativePush64(PUINT64(@blue2)^);
  nativePush64(UINT64(alpha2));
  nativePush64(PUINT64(@red3)^);
  nativePush64(PUINT64(@green3)^);
  nativePush64(PUINT64(@blue3)^);
  nativePush64(UINT64(alpha3));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(PUINT64(@u1)^);
  nativePush64(PUINT64(@v1)^);
  nativePush64(PUINT64(@w1)^);
  nativePush64(PUINT64(@u2)^);
  nativePush64(PUINT64(@v2)^);
  nativePush64(PUINT64(@w2)^);
  nativePush64(PUINT64(@u3)^);
  nativePush64(PUINT64(@v3)^);
  nativePush64(PUINT64(@w3)^);
  nativeCall;
end;

procedure DRAW_BOX(x1, y1, z1, x2, y2, z2: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($D3A9971CADAC7252));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure SET_BACKFACECULLING(toggle: BOOL);
begin
  nativeInit(UINT64($23BA6B0C2AD7B0D3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DEPTHWRITING(toggle: BOOL);
begin
  nativeInit(UINT64($C5C8F970D4EDFF71));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function BEGIN_TAKE_MISSION_CREATOR_PHOTO: BOOL;
begin
  nativeInit(UINT64($1DD2139A9A20DCE8));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO: cint;
begin
  nativeInit(UINT64($90A78ECAA4E78453));
  exit(cint(nativeCall^));
end;

procedure FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO;
begin
  nativeInit(UINT64($0A46AF8A78DC5E0A));
  nativeCall;
end;

function LOAD_MISSION_CREATOR_PHOTO(p0: PAny; p1, p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($4862437A486F91B0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(p0: PAny): cint;
begin
  nativeInit(UINT64($1670F8D05056F257));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW: BOOL;
begin
  nativeInit(UINT64($7FA5D82B8F58EC06));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW: cint;
begin
  nativeInit(UINT64($5B0316762AFD4A64));
  exit(cint(nativeCall^));
end;

procedure FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW;
begin
  nativeInit(UINT64($346EF3ECAAAB149E));
  nativeCall;
end;

function BEGIN_TAKE_HIGH_QUALITY_PHOTO: BOOL;
begin
  nativeInit(UINT64($A67C35C56EB1BD9D));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO: cint;
begin
  nativeInit(UINT64($0D6CA79EEEBD8CA3));
  exit(cint(nativeCall^));
end;

procedure FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO;
begin
  nativeInit(UINT64($D801CC02177FA3F1));
  nativeCall;
end;

procedure SET_TAKEN_PHOTO_IS_MUGSHOT(toggle: BOOL);
begin
  nativeInit(UINT64($1BBC135A4D25EDDE));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(p0: Any; p1: cint);
begin
  nativeInit(UINT64($F3F776ADA161E47D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(p0: Any);
begin
  nativeInit(UINT64($ADD6627C4D325458));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function SAVE_HIGH_QUALITY_PHOTO(unused: cint): BOOL;
begin
  nativeInit(UINT64($3DEC726C25A11BAC));
  nativePush64(UINT64(unused));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO: cint;
begin
  nativeInit(UINT64($0C0C4E81E1AC60A0));
  exit(cint(nativeCall^));
end;

function BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0: Any): BOOL;
begin
  nativeInit(UINT64($759650634F07B6B4));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(p0: cint): cint;
begin
  nativeInit(UINT64($CB82A0BF0E3E3265));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure FREE_MEMORY_FOR_LOW_QUALITY_PHOTO;
begin
  nativeInit(UINT64($6A12D88881435DCA));
  nativeCall;
end;

procedure DRAW_LOW_QUALITY_PHOTO_TO_PHONE(p0, p1: BOOL);
begin
  nativeInit(UINT64($1072F115DAB0717E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_MAXIMUM_NUMBER_OF_PHOTOS: cint;
begin
  nativeInit(UINT64($34D23450F028B0BF));
  exit(cint(nativeCall^));
end;

function GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS: cint;
begin
  nativeInit(UINT64($DC54A7AF8B3A14EF));
  exit(cint(nativeCall^));
end;

function GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS: cint;
begin
  nativeInit(UINT64($473151EBC762C6DA));
  exit(cint(nativeCall^));
end;

function QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(p0: Any): BOOL;
begin
  nativeInit(UINT64($2A893980E96B659A));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_SORTED_LIST_OPERATION(p0: Any): cint;
begin
  nativeInit(UINT64($F5BED327CEA362B1));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure CLEAR_STATUS_OF_SORTED_LIST_OPERATION;
begin
  nativeInit(UINT64($4AF92ACD3141D96C));
  nativeCall;
end;

function DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(p0: Any): BOOL;
begin
  nativeInit(UINT64($E791DF1F73ED2C8B));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function LOAD_HIGH_QUALITY_PHOTO(p0: Any): BOOL;
begin
  nativeInit(UINT64($EC72C258667BE5EA));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(p0: cint): cint;
begin
  nativeInit(UINT64($40AFB081F8ADD4EE));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure DRAW_LIGHT_WITH_RANGEEX(x, y, z: cfloat; r, g, b: cint; range, intensity, shadow: cfloat);
begin
  nativeInit(UINT64($F49E9A9716A04595));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(PUINT64(@range)^);
  nativePush64(PUINT64(@intensity)^);
  nativePush64(PUINT64(@shadow)^);
  nativeCall;
end;

procedure DRAW_LIGHT_WITH_RANGE(posX, posY, posZ: cfloat; colorR, colorG, colorB: cint; range, intensity: cfloat);
begin
  nativeInit(UINT64($F2A1B2771A01DBD4));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(UINT64(colorR));
  nativePush64(UINT64(colorG));
  nativePush64(UINT64(colorB));
  nativePush64(PUINT64(@range)^);
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

procedure DRAW_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ: cfloat; colorR, colorG, colorB: cint; distance, brightness, hardness, radius, falloff: cfloat);
begin
  nativeInit(UINT64($D0F64B265C8C8B33));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@dirX)^);
  nativePush64(PUINT64(@dirY)^);
  nativePush64(PUINT64(@dirZ)^);
  nativePush64(UINT64(colorR));
  nativePush64(UINT64(colorG));
  nativePush64(UINT64(colorB));
  nativePush64(PUINT64(@distance)^);
  nativePush64(PUINT64(@brightness)^);
  nativePush64(PUINT64(@hardness)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@falloff)^);
  nativeCall;
end;

procedure DRAW_SHADOWED_SPOT_LIGHT(posX, posY, posZ, dirX, dirY, dirZ: cfloat; colorR, colorG, colorB: cint; distance, brightness, roundness, radius, falloff: cfloat; shadowId: cint);
begin
  nativeInit(UINT64($5BCA583A583194DB));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@dirX)^);
  nativePush64(PUINT64(@dirY)^);
  nativePush64(PUINT64(@dirZ)^);
  nativePush64(UINT64(colorR));
  nativePush64(UINT64(colorG));
  nativePush64(UINT64(colorB));
  nativePush64(PUINT64(@distance)^);
  nativePush64(PUINT64(@brightness)^);
  nativePush64(PUINT64(@roundness)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@falloff)^);
  nativePush64(UINT64(shadowId));
  nativeCall;
end;

procedure FADE_UP_PED_LIGHT(p0: cfloat);
begin
  nativeInit(UINT64($C9B18B4619F48F7B));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure UPDATE_LIGHTS_ON_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($DEADC0DEDEADC0DE));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(p0: Any);
begin
  nativeInit(UINT64($9641588DAB93B4B5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE: cfloat;
begin
  nativeInit(UINT64($393BD2275CEB7793));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure DRAW_MARKER(_type: cint; posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ: cfloat; red, green, blue, alpha: cint; bobUpAndDown, faceCamera: BOOL; p19: cint; rotate: BOOL; textureDict, textureName: PChar; drawOnEnts: BOOL);
begin
  nativeInit(UINT64($28477EC23D892089));
  nativePush64(UINT64(_type));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@dirX)^);
  nativePush64(PUINT64(@dirY)^);
  nativePush64(PUINT64(@dirZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@scaleX)^);
  nativePush64(PUINT64(@scaleY)^);
  nativePush64(PUINT64(@scaleZ)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(bobUpAndDown));
  nativePush64(UINT64(faceCamera));
  nativePush64(UINT64(p19));
  nativePush64(UINT64(rotate));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(drawOnEnts));
  nativeCall;
end;

procedure DRAW_MARKER_EX(_type: cint; posX, posY, posZ, dirX, dirY, dirZ, rotX, rotY, rotZ, scaleX, scaleY, scaleZ: cfloat; red, green, blue, alpha: cint; bobUpAndDown, faceCamera: BOOL; p19: Any; rotate: BOOL; textureDict, textureName: PChar; drawOnEnts, p24, p25: BOOL);
begin
  nativeInit(UINT64($E82728F0DE75D13A));
  nativePush64(UINT64(_type));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@dirX)^);
  nativePush64(PUINT64(@dirY)^);
  nativePush64(PUINT64(@dirZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@scaleX)^);
  nativePush64(PUINT64(@scaleY)^);
  nativePush64(PUINT64(@scaleZ)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(bobUpAndDown));
  nativePush64(UINT64(faceCamera));
  nativePush64(UINT64(p19));
  nativePush64(UINT64(rotate));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(drawOnEnts));
  nativePush64(UINT64(p24));
  nativePush64(UINT64(p25));
  nativeCall;
end;

procedure DRAW_MARKER_SPHERE(x, y, z, radius: cfloat; red, green, blue: cint; alpha: cfloat);
begin
  nativeInit(UINT64($799017F9E3B10112));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(PUINT64(@alpha)^);
  nativeCall;
end;

function CREATE_CHECKPOINT(_type: cint; posX1, posY1, posZ1, posX2, posY2, posZ2, diameter: cfloat; red, green, blue, alpha, reserved: cint): cint;
begin
  nativeInit(UINT64($0134F0835AB6BFCB));
  nativePush64(UINT64(_type));
  nativePush64(PUINT64(@posX1)^);
  nativePush64(PUINT64(@posY1)^);
  nativePush64(PUINT64(@posZ1)^);
  nativePush64(PUINT64(@posX2)^);
  nativePush64(PUINT64(@posY2)^);
  nativePush64(PUINT64(@posZ2)^);
  nativePush64(PUINT64(@diameter)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(reserved));
  exit(cint(nativeCall^));
end;

procedure SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(checkpoint: cint; scale: cfloat);
begin
  nativeInit(UINT64($4B5B4DA5D79F1943));
  nativePush64(UINT64(checkpoint));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(checkpoint: cint; scale: cfloat);
begin
  nativeInit(UINT64($44621483FF966526));
  nativePush64(UINT64(checkpoint));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_CHECKPOINT_CYLINDER_HEIGHT(checkpoint: cint; nearHeight, farHeight, radius: cfloat);
begin
  nativeInit(UINT64($2707AAE9D9297D89));
  nativePush64(UINT64(checkpoint));
  nativePush64(PUINT64(@nearHeight)^);
  nativePush64(PUINT64(@farHeight)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure SET_CHECKPOINT_RGBA(checkpoint, red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($7167371E8AD747F7));
  nativePush64(UINT64(checkpoint));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure SET_CHECKPOINT_RGBA2(checkpoint, red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($B9EA40907C680580));
  nativePush64(UINT64(checkpoint));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(checkpoint: cint; posX, posY, posZ, unkX, unkY, unkZ: cfloat);
begin
  nativeInit(UINT64($F51D36185993515D));
  nativePush64(UINT64(checkpoint));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@unkX)^);
  nativePush64(PUINT64(@unkY)^);
  nativePush64(PUINT64(@unkZ)^);
  nativeCall;
end;

procedure SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(checkpoint: cint);
begin
  nativeInit(UINT64($FCF6788FC4860CD4));
  nativePush64(UINT64(checkpoint));
  nativeCall;
end;

procedure SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(checkpoint: cint);
begin
  nativeInit(UINT64($615D3925E87A3B26));
  nativePush64(UINT64(checkpoint));
  nativeCall;
end;

procedure SET_CHECKPOINT_FORCE_DIRECTION(checkpoint: cint);
begin
  nativeInit(UINT64($DB1EA9411C8911EC));
  nativePush64(UINT64(checkpoint));
  nativeCall;
end;

procedure SET_CHECKPOINT_DIRECTION(checkpoint: cint; posX, posY, posZ: cfloat);
begin
  nativeInit(UINT64($3C788E7F6438754D));
  nativePush64(UINT64(checkpoint));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativeCall;
end;

procedure DELETE_CHECKPOINT(checkpoint: cint);
begin
  nativeInit(UINT64($F5ED37F54CD4D52E));
  nativePush64(UINT64(checkpoint));
  nativeCall;
end;

procedure DONT_RENDER_IN_GAME_UI(p0: BOOL);
begin
  nativeInit(UINT64($22A249A53034450A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure FORCE_RENDER_IN_GAME_UI(toggle: BOOL);
begin
  nativeInit(UINT64($DC459CFA0CCE245B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure REQUEST_STREAMED_TEXTURE_DICT(textureDict: PChar; p1: BOOL);
begin
  nativeInit(UINT64($DFA2EF8E04127DD5));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function HAS_STREAMED_TEXTURE_DICT_LOADED(textureDict: PChar): BOOL;
begin
  nativeInit(UINT64($0145F696AAAAD2E4));
  nativePush64(UINT64(textureDict));
  exit(BOOL(nativeCall^));
end;

procedure SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(textureDict: PChar);
begin
  nativeInit(UINT64($BE2CACCF5A8AA805));
  nativePush64(UINT64(textureDict));
  nativeCall;
end;

procedure DRAW_RECT(x, y, width, height: cfloat; r, g, b, a: cint; p8: BOOL);
begin
  nativeInit(UINT64($3A618A217E5154F0));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(toggle: BOOL);
begin
  nativeInit(UINT64($C6372ECD45D73BCD));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_SCRIPT_GFX_DRAW_ORDER(drawOrder: cint);
begin
  nativeInit(UINT64($61BB1D9B3A95D802));
  nativePush64(UINT64(drawOrder));
  nativeCall;
end;

procedure SET_SCRIPT_GFX_ALIGN(horizontalAlign, verticalAlign: cint);
begin
  nativeInit(UINT64($B8A850F20A067EB6));
  nativePush64(UINT64(horizontalAlign));
  nativePush64(UINT64(verticalAlign));
  nativeCall;
end;

procedure RESET_SCRIPT_GFX_ALIGN;
begin
  nativeInit(UINT64($E3A3DB414A373DAB));
  nativeCall;
end;

procedure SET_SCRIPT_GFX_ALIGN_PARAMS(x, y, w, h: cfloat);
begin
  nativeInit(UINT64($F5A2C681787E579D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@w)^);
  nativePush64(PUINT64(@h)^);
  nativeCall;
end;

procedure GET_SCRIPT_GFX_ALIGN_POSITION(x, y: cfloat; calculatedX, calculatedY: pcfloat);
begin
  nativeInit(UINT64($6DD8F5AA635EB4B2));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(UINT64(calculatedX));
  nativePush64(UINT64(calculatedY));
  nativeCall;
end;

function GET_SAFE_ZONE_SIZE: cfloat;
begin
  nativeInit(UINT64($BAF107B6BB2C97F0));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure DRAW_SPRITE(textureDict, textureName: PChar; screenX, screenY, width, height, heading: cfloat; red, green, blue, alpha: cint; p11: BOOL; p12: Any);
begin
  nativeInit(UINT64($E7FFAE5EBF23D890));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(PUINT64(@screenX)^);
  nativePush64(PUINT64(@screenY)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativeCall;
end;

procedure DRAW_SPRITE_ARX(textureDict, textureName: PChar; x, y, width, height, p6: cfloat; red, green, blue, alpha: cint; p11, p12: Any);
begin
  nativeInit(UINT64($2D3B147AFAD49DE0));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativeCall;
end;

procedure DRAW_SPRITE_NAMED_RENDERTARGET(textureDict, textureName: PChar; screenX, screenY, width, height, heading: cfloat; red, green, blue, alpha: cint; p11: Any);
begin
  nativeInit(UINT64($2BC54A8188768488));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(PUINT64(@screenX)^);
  nativePush64(PUINT64(@screenY)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(p11));
  nativeCall;
end;

procedure DRAW_SPRITE_ARX_WITH_UV(textureDict, textureName: PChar; x, y, width, height, u1, v1, u2, v2, heading: cfloat; red, green, blue, alpha: cint; p15: Any);
begin
  nativeInit(UINT64($95812F9B26074726));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  nativePush64(PUINT64(@u1)^);
  nativePush64(PUINT64(@v1)^);
  nativePush64(PUINT64(@u2)^);
  nativePush64(PUINT64(@v2)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(p15));
  nativeCall;
end;

function ADD_ENTITY_ICON(para_entity: Entity; icon: PChar): cint;
begin
  nativeInit(UINT64($9CD43EEE12BF4DD0));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(icon));
  exit(cint(nativeCall^));
end;

procedure SET_ENTITY_ICON_VISIBILITY(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($E0E8BEECCA96BA31));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_ICON_COLOR(para_entity: Entity; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($1D5F595CCAE2E238));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure SET_DRAW_ORIGIN(x, y, z: cfloat; p3: BOOL);
begin
  nativeInit(UINT64($AA0008F3BBB8F416));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure CLEAR_DRAW_ORIGIN;
begin
  nativeInit(UINT64($FF0B610F6BE0D7AF));
  nativeCall;
end;

function SET_BINK_MOVIE(name: PChar): cint;
begin
  nativeInit(UINT64($338D9F609FD632DB));
  nativePush64(UINT64(name));
  exit(cint(nativeCall^));
end;

procedure PLAY_BINK_MOVIE(binkMovie: cint);
begin
  nativeInit(UINT64($70D2CC8A542A973C));
  nativePush64(UINT64(binkMovie));
  nativeCall;
end;

procedure STOP_BINK_MOVIE(binkMovie: cint);
begin
  nativeInit(UINT64($63606A61DE68898A));
  nativePush64(UINT64(binkMovie));
  nativeCall;
end;

procedure RELEASE_BINK_MOVIE(binkMovie: cint);
begin
  nativeInit(UINT64($04D950EEFA4EED8C));
  nativePush64(UINT64(binkMovie));
  nativeCall;
end;

procedure DRAW_BINK_MOVIE(binkMovie: cint; p1, p2, p3, p4, p5: cfloat; r, g, b, a: cint);
begin
  nativeInit(UINT64($7118E83EEB9F7238));
  nativePush64(UINT64(binkMovie));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativeCall;
end;

procedure SET_BINK_MOVIE_TIME(binkMovie: cint; progress: cfloat);
begin
  nativeInit(UINT64($0CB6B3446855B57A));
  nativePush64(UINT64(binkMovie));
  nativePush64(PUINT64(@progress)^);
  nativeCall;
end;

function GET_BINK_MOVIE_TIME(binkMovie: cint): cfloat;
begin
  nativeInit(UINT64($8E17DDD6B9D5BF29));
  nativePush64(UINT64(binkMovie));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_BINK_MOVIE_VOLUME(binkMovie: cint; value: cfloat);
begin
  nativeInit(UINT64($AFF33B1178172223));
  nativePush64(UINT64(binkMovie));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure ATTACH_TV_AUDIO_TO_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($845BAD77CC770633));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_BINK_MOVIE_AUDIO_FRONTEND(binkMovie: cint; p1: BOOL);
begin
  nativeInit(UINT64($F816F2933752322D));
  nativePush64(UINT64(binkMovie));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_TV_AUDIO_FRONTEND(toggle: BOOL);
begin
  nativeInit(UINT64($113D2C5DC57E1774));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BINK_SHOULD_SKIP(binkMovie: cint; bShouldSkip: BOOL);
begin
  nativeInit(UINT64($6805D58CAA427B72));
  nativePush64(UINT64(binkMovie));
  nativePush64(UINT64(bShouldSkip));
  nativeCall;
end;

function LOAD_MOVIE_MESH_SET(movieMeshSetName: PChar): cint;
begin
  nativeInit(UINT64($B66064452270E8F1));
  nativePush64(UINT64(movieMeshSetName));
  exit(cint(nativeCall^));
end;

procedure RELEASE_MOVIE_MESH_SET(movieMeshSet: cint);
begin
  nativeInit(UINT64($EB119AA014E89183));
  nativePush64(UINT64(movieMeshSet));
  nativeCall;
end;

function QUERY_MOVIE_MESH_SET_STATE(p0: Any): cint;
begin
  nativeInit(UINT64($9B6E70C5CEEF4EEB));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure GET_SCREEN_RESOLUTION(x, y: pcint);
begin
  nativeInit(UINT64($888D57E407E63624));
  nativePush64(UINT64(x));
  nativePush64(UINT64(y));
  nativeCall;
end;

procedure GET_ACTUAL_SCREEN_RESOLUTION(x, y: pcint);
begin
  nativeInit(UINT64($873C9F3104101DD3));
  nativePush64(UINT64(x));
  nativePush64(UINT64(y));
  nativeCall;
end;

function GET_ASPECT_RATIO(b: BOOL): cfloat;
begin
  nativeInit(UINT64($F1307EF624A80D87));
  nativePush64(UINT64(b));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_SCREEN_ASPECT_RATIO: cfloat;
begin
  nativeInit(UINT64($B2EBE8CBC58B90E9));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_IS_WIDESCREEN: BOOL;
begin
  nativeInit(UINT64($30CF4BDA4FCB1905));
  exit(BOOL(nativeCall^));
end;

function GET_IS_HIDEF: BOOL;
begin
  nativeInit(UINT64($84ED31191CC5D2C9));
  exit(BOOL(nativeCall^));
end;

procedure ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9;
begin
  nativeInit(UINT64($EFABC7722293DA7C));
  nativeCall;
end;

procedure SET_NIGHTVISION(toggle: BOOL);
begin
  nativeInit(UINT64($18F621F7A5B1F85D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_REQUESTINGNIGHTVISION: BOOL;
begin
  nativeInit(UINT64($35FB78DC42B7BD21));
  exit(BOOL(nativeCall^));
end;

function GET_USINGNIGHTVISION: BOOL;
begin
  nativeInit(UINT64($2202A3F42C8E5F79));
  exit(BOOL(nativeCall^));
end;

procedure SET_EXPOSURETWEAK(toggle: BOOL);
begin
  nativeInit(UINT64($EF398BEEE4EF45F9));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FORCE_EXPOSURE_READBACK(toggle: BOOL);
begin
  nativeInit(UINT64($814AF7DCAACC597B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure OVERRIDE_NIGHTVISION_LIGHT_RANGE(p0: cfloat);
begin
  nativeInit(UINT64($43FA7CBE20DAB219));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_NOISEOVERIDE(toggle: BOOL);
begin
  nativeInit(UINT64($E787BF1C5CF823C9));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_NOISINESSOVERIDE(value: cfloat);
begin
  nativeInit(UINT64($CB6A7C3BB17A0C67));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function GET_SCREEN_COORD_FROM_WORLD_COORD(worldX, worldY, worldZ: cfloat; screenX, screenY: pcfloat): BOOL;
begin
  nativeInit(UINT64($34E82F05DF2974F5));
  nativePush64(PUINT64(@worldX)^);
  nativePush64(PUINT64(@worldY)^);
  nativePush64(PUINT64(@worldZ)^);
  nativePush64(UINT64(screenX));
  nativePush64(UINT64(screenY));
  exit(BOOL(nativeCall^));
end;

function GET_TEXTURE_RESOLUTION(textureDict, textureName: PChar): Vector3;
begin
  nativeInit(UINT64($35736EE65BD00C11));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  exit(PVector3(nativeCall)^);
end;

function OVERRIDE_PED_CREW_LOGO_TEXTURE(_ped: Ped; txd, txn: PChar): BOOL;
begin
  nativeInit(UINT64($95EB5E34F821BABE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(txd));
  nativePush64(UINT64(txn));
  exit(BOOL(nativeCall^));
end;

procedure SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(p0: cfloat);
begin
  nativeInit(UINT64($E2892E7E55D7073A));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_FLASH(p0, p1, fadeIn, duration, fadeOut: cfloat);
begin
  nativeInit(UINT64($0AB84296FED9CFC6));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@fadeIn)^);
  nativePush64(PUINT64(@duration)^);
  nativePush64(PUINT64(@fadeOut)^);
  nativeCall;
end;

procedure DISABLE_OCCLUSION_THIS_FRAME;
begin
  nativeInit(UINT64($3669F1B198DCAA4F));
  nativeCall;
end;

procedure SET_ARTIFICIAL_LIGHTS_STATE(state: BOOL);
begin
  nativeInit(UINT64($1268615ACE24D504));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(toggle: BOOL);
begin
  nativeInit(UINT64($E2B187C0939B3D32));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_HDTEX_THIS_FRAME;
begin
  nativeInit(UINT64($C35A6D07C93802B2));
  nativeCall;
end;

function CREATE_TRACKED_POINT: cint;
begin
  nativeInit(UINT64($E2C9439ED45DEA60));
  exit(cint(nativeCall^));
end;

procedure SET_TRACKED_POINT_INFO(point: cint; x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($164ECBB3CF750CB0));
  nativePush64(UINT64(point));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

function IS_TRACKED_POINT_VISIBLE(point: cint): BOOL;
begin
  nativeInit(UINT64($C45CCDAAC9221CA8));
  nativePush64(UINT64(point));
  exit(BOOL(nativeCall^));
end;

procedure DESTROY_TRACKED_POINT(point: cint);
begin
  nativeInit(UINT64($B25DC90BAD56CA42));
  nativePush64(UINT64(point));
  nativeCall;
end;

function SET_GRASS_CULL_SPHERE(p0, p1, p2, p3: cfloat): cint;
begin
  nativeInit(UINT64($BE197EAA669238F4));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  exit(cint(nativeCall^));
end;

procedure REMOVE_GRASS_CULL_SPHERE(handle: cint);
begin
  nativeInit(UINT64($61F95E5BB3E0A8C6));
  nativePush64(UINT64(handle));
  nativeCall;
end;

procedure PROCGRASS_ENABLE_CULLSPHERE(handle: cint; x, y, z, scale: cfloat);
begin
  nativeInit(UINT64($AE51BC858F32BA66));
  nativePush64(UINT64(handle));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure PROCGRASS_DISABLE_CULLSPHERE(handle: cint);
begin
  nativeInit(UINT64($649C97D52332341A));
  nativePush64(UINT64(handle));
  nativeCall;
end;

function PROCGRASS_IS_CULLSPHERE_ENABLED(handle: cint): BOOL;
begin
  nativeInit(UINT64($2C42340F916C5930));
  nativePush64(UINT64(handle));
  exit(BOOL(nativeCall^));
end;

procedure PROCGRASS_ENABLE_AMBSCALESCAN;
begin
  nativeInit(UINT64($14FC5833464340A8));
  nativeCall;
end;

procedure PROCGRASS_DISABLE_AMBSCALESCAN;
begin
  nativeInit(UINT64($0218BA067D249DEA));
  nativeCall;
end;

procedure DISABLE_PROCOBJ_CREATION;
begin
  nativeInit(UINT64($1612C45F9E3E0D44));
  nativeCall;
end;

procedure ENABLE_PROCOBJ_CREATION;
begin
  nativeInit(UINT64($5DEBD9C4DC995692));
  nativeCall;
end;

procedure GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(x, y, z: cfloat; p3: Any; p4, p5, p6, scale: cfloat);
begin
  nativeInit(UINT64($AAE9BE70EC7C69AB));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p3));
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(x, y, z, radius, p4, p5, p6: cfloat);
begin
  nativeInit(UINT64($6D955F6A9E0295B1));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativeCall;
end;

procedure GRASSBATCH_DISABLE_FLATTENING;
begin
  nativeInit(UINT64($302C91AB2D477F7E));
  nativeCall;
end;

procedure CASCADE_SHADOWS_INIT_SESSION;
begin
  nativeInit(UINT64($03FC694AE06C5A20));
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_CASCADE_BOUNDS(p0: Any; p1: BOOL; p2, p3, p4, p5: cfloat; p6: BOOL; p7: cfloat);
begin
  nativeInit(UINT64($D2936CAB8B58FCBD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  nativePush64(PUINT64(@p7)^);
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(p0: cfloat);
begin
  nativeInit(UINT64($5F0F3F56635809EF));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(p0: cfloat);
begin
  nativeInit(UINT64($5E9DAF5A20F15908));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(p0: cfloat);
begin
  nativeInit(UINT64($36F6626459D91457));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_BOUND_POSITION(p0: Any);
begin
  nativeInit(UINT64($259BA6D4E6F808F1));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(toggle: BOOL);
begin
  nativeInit(UINT64($80ECBC0C856D3B0B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(p0: BOOL);
begin
  nativeInit(UINT64($25FC3E33A31AD0C9));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(_type: PChar);
begin
  nativeInit(UINT64($B11D94BC55F41932));
  nativePush64(UINT64(_type));
  nativeCall;
end;

procedure CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE;
begin
  nativeInit(UINT64($27CB772218215325));
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_AIRCRAFT_MODE(p0: BOOL);
begin
  nativeInit(UINT64($6DDBF9DFFC4AC080));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(p0: BOOL);
begin
  nativeInit(UINT64($D39D13C9FEBF0511));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(p0: cfloat);
begin
  nativeInit(UINT64($02AC28F3A01FA04A));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure CASCADE_SHADOWS_ENABLE_FREEZER(p0: BOOL);
begin
  nativeInit(UINT64($0AE73D8DF3A762B2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(p0: Any);
begin
  nativeInit(UINT64($CA465D9CC0D231BA));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure GOLF_TRAIL_SET_ENABLED(toggle: BOOL);
begin
  nativeInit(UINT64($A51C4B86B71652AE));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure GOLF_TRAIL_SET_PATH(p0, p1, p2, p3, p4, p5, p6, p7: cfloat; p8: BOOL);
begin
  nativeInit(UINT64($312342E1A4874F3F));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure GOLF_TRAIL_SET_RADIUS(p0, p1, p2: cfloat);
begin
  nativeInit(UINT64($2485D34E50A22E84));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure GOLF_TRAIL_SET_COLOUR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11: cint);
begin
  nativeInit(UINT64($12995F2E53FFA601));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativeCall;
end;

procedure GOLF_TRAIL_SET_TESSELLATION(p0, p1: cint);
begin
  nativeInit(UINT64($DBAA5EC848BA2D46));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(p0: BOOL);
begin
  nativeInit(UINT64($C0416B061F2B7E5E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure GOLF_TRAIL_SET_FIXED_CONTROL_POINT(_type: cint; xPos, yPos, zPos, p4: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($B1BB03742917A5D6));
  nativePush64(UINT64(_type));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure GOLF_TRAIL_SET_SHADER_PARAMS(p0, p1, p2, p3, p4: cfloat);
begin
  nativeInit(UINT64($9CFDD90B2B844BF7));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativeCall;
end;

procedure GOLF_TRAIL_SET_FACING(p0: BOOL);
begin
  nativeInit(UINT64($06F761EA47C1D3ED));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function GOLF_TRAIL_GET_MAX_HEIGHT: cfloat;
begin
  nativeInit(UINT64($A4819F5E23E2FFAD));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(p0: cint): Vector3;
begin
  nativeInit(UINT64($A4664972A9B8F8BA));
  nativePush64(UINT64(p0));
  exit(PVector3(nativeCall)^);
end;

procedure SET_SEETHROUGH(toggle: BOOL);
begin
  nativeInit(UINT64($7E08924259E08CE0));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_USINGSEETHROUGH: BOOL;
begin
  nativeInit(UINT64($44B80ABAB9D80BD3));
  exit(BOOL(nativeCall^));
end;

procedure SEETHROUGH_RESET;
begin
  nativeInit(UINT64($70A64C0234EF522C));
  nativeCall;
end;

procedure SEETHROUGH_SET_FADE_STARTDISTANCE(distance: cfloat);
begin
  nativeInit(UINT64($A78DE25577300BA1));
  nativePush64(PUINT64(@distance)^);
  nativeCall;
end;

procedure SEETHROUGH_SET_FADE_ENDDISTANCE(distance: cfloat);
begin
  nativeInit(UINT64($9D75795B9DC6EBBF));
  nativePush64(PUINT64(@distance)^);
  nativeCall;
end;

function SEETHROUGH_GET_MAX_THICKNESS: cfloat;
begin
  nativeInit(UINT64($43DBAE39626CE83F));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SEETHROUGH_SET_MAX_THICKNESS(thickness: cfloat);
begin
  nativeInit(UINT64($0C8FAC83902A62DF));
  nativePush64(PUINT64(@thickness)^);
  nativeCall;
end;

procedure SEETHROUGH_SET_NOISE_MIN(amount: cfloat);
begin
  nativeInit(UINT64($FF5992E1C9E65D05));
  nativePush64(PUINT64(@amount)^);
  nativeCall;
end;

procedure SEETHROUGH_SET_NOISE_MAX(amount: cfloat);
begin
  nativeInit(UINT64($FEBFBFDFB66039DE));
  nativePush64(PUINT64(@amount)^);
  nativeCall;
end;

procedure SEETHROUGH_SET_HILIGHT_INTENSITY(intensity: cfloat);
begin
  nativeInit(UINT64($19E50EB6E33E1D28));
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

procedure SEETHROUGH_SET_HIGHLIGHT_NOISE(noise: cfloat);
begin
  nativeInit(UINT64($1636D7FC127B10D2));
  nativePush64(PUINT64(@noise)^);
  nativeCall;
end;

procedure SEETHROUGH_SET_HEATSCALE(index: cint; heatScale: cfloat);
begin
  nativeInit(UINT64($D7D0B00177485411));
  nativePush64(UINT64(index));
  nativePush64(PUINT64(@heatScale)^);
  nativeCall;
end;

procedure SEETHROUGH_SET_COLOR_NEAR(red, green, blue: cint);
begin
  nativeInit(UINT64($1086127B3A63505E));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativeCall;
end;

procedure SET_MOTIONBLUR_MAX_VEL_SCALER(p0: cfloat);
begin
  nativeInit(UINT64($B3C641F3630BF6DA));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

function GET_MOTIONBLUR_MAX_VEL_SCALER: cfloat;
begin
  nativeInit(UINT64($E59343E9E96529E7));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_FORCE_MOTIONBLUR(toggle: BOOL);
begin
  nativeInit(UINT64($6A51F78772175A51));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure TOGGLE_PLAYER_DAMAGE_OVERLAY(toggle: BOOL);
begin
  nativeInit(UINT64($E63D7C6EECECB66B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure RESET_ADAPTATION(p0: cint);
begin
  nativeInit(UINT64($E3E2C1B4C59DBC77));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function TRIGGER_SCREENBLUR_FADE_IN(transitionTime: cfloat): BOOL;
begin
  nativeInit(UINT64($A328A24AAA6B7FDC));
  nativePush64(PUINT64(@transitionTime)^);
  exit(BOOL(nativeCall^));
end;

function TRIGGER_SCREENBLUR_FADE_OUT(transitionTime: cfloat): BOOL;
begin
  nativeInit(UINT64($EFACC8AEF94430D5));
  nativePush64(PUINT64(@transitionTime)^);
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_SCREENBLUR_FADE;
begin
  nativeInit(UINT64($DE81239437E8C5A8));
  nativeCall;
end;

function GET_SCREENBLUR_FADE_CURRENT_TIME: cfloat;
begin
  nativeInit(UINT64($5CCABFFCA31DDE33));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function IS_SCREENBLUR_FADE_RUNNING: BOOL;
begin
  nativeInit(UINT64($7B226C785A52A0A9));
  exit(BOOL(nativeCall^));
end;

procedure TOGGLE_PAUSED_RENDERPHASES(toggle: BOOL);
begin
  nativeInit(UINT64($DFC252D8A3E15AB7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_TOGGLE_PAUSED_RENDERPHASES_STATUS: BOOL;
begin
  nativeInit(UINT64($EB3DAC2C86001E5E));
  exit(BOOL(nativeCall^));
end;

procedure RESET_PAUSED_RENDERPHASES;
begin
  nativeInit(UINT64($E1C8709406F2C41C));
  nativeCall;
end;

procedure GRAB_PAUSEMENU_OWNERSHIP;
begin
  nativeInit(UINT64($851CD923176EBA7C));
  nativeCall;
end;

procedure SET_HIDOF_OVERRIDE(p0, p1: BOOL; nearplaneOut, nearplaneIn, farplaneOut, farplaneIn: cfloat);
begin
  nativeInit(UINT64($BA3D65906822BED5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@nearplaneOut)^);
  nativePush64(PUINT64(@nearplaneIn)^);
  nativePush64(PUINT64(@farplaneOut)^);
  nativePush64(PUINT64(@farplaneIn)^);
  nativeCall;
end;

procedure SET_LOCK_ADAPTIVE_DOF_DISTANCE(p0: BOOL);
begin
  nativeInit(UINT64($B569F41F3E7E83A4));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function PHONEPHOTOEDITOR_TOGGLE(p0: BOOL): BOOL;
begin
  nativeInit(UINT64($7AC24EAB6D74118D));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function PHONEPHOTOEDITOR_IS_ACTIVE: BOOL;
begin
  nativeInit(UINT64($BCEDB009461DA156));
  exit(BOOL(nativeCall^));
end;

function PHONEPHOTOEDITOR_SET_FRAME_TXD(textureDict: PChar; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($27FEB5254759CDE3));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function START_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName: PChar; xPos, yPos, zPos, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis: BOOL): BOOL;
begin
  nativeInit(UINT64($25129531F77B9ED3));
  nativePush64(UINT64(effectName));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  exit(BOOL(nativeCall^));
end;

function START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(effectName: PChar; xPos, yPos, zPos, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis, p11: BOOL): BOOL;
begin
  nativeInit(UINT64($F56B8137DF10135D));
  nativePush64(UINT64(effectName));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  nativePush64(UINT64(p11));
  exit(BOOL(nativeCall^));
end;

function START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName: PChar; _ped: Ped; offsetX, offsetY, offsetZ, rotX, rotY, rotZ: cfloat; boneIndex: cint; scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
begin
  nativeInit(UINT64($0E7E72961BA18619));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(axisX));
  nativePush64(UINT64(axisY));
  nativePush64(UINT64(axisZ));
  exit(BOOL(nativeCall^));
end;

function START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(effectName: PChar; _ped: Ped; offsetX, offsetY, offsetZ, rotX, rotY, rotZ: cfloat; boneIndex: cint; scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
begin
  nativeInit(UINT64($A41B6A43642AC2CF));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(axisX));
  nativePush64(UINT64(axisY));
  nativePush64(UINT64(axisZ));
  exit(BOOL(nativeCall^));
end;

function START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
begin
  nativeInit(UINT64($0D53A3B8DA0809D2));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(axisX));
  nativePush64(UINT64(axisY));
  nativePush64(UINT64(axisZ));
  exit(BOOL(nativeCall^));
end;

function START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; offsetX, offsetY, offsetZ, rotX, rotY, rotZ, scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
begin
  nativeInit(UINT64($C95EB1DB6E92113D));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(axisX));
  nativePush64(UINT64(axisY));
  nativePush64(UINT64(axisZ));
  exit(BOOL(nativeCall^));
end;

function START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(effectName: PChar; para_entity: Entity; offsetX, offsetY, offsetZ, rotX, rotY, rotZ: cfloat; boneIndex: cint; scale: cfloat; axisX, axisY, axisZ: BOOL): BOOL;
begin
  nativeInit(UINT64($02B1F2A72E0F5325));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(axisX));
  nativePush64(UINT64(axisY));
  nativePush64(UINT64(axisZ));
  exit(BOOL(nativeCall^));
end;

procedure SET_PARTICLE_FX_NON_LOOPED_COLOUR(r, g, b: cfloat);
begin
  nativeInit(UINT64($26143A59EF48B262));
  nativePush64(PUINT64(@r)^);
  nativePush64(PUINT64(@g)^);
  nativePush64(PUINT64(@b)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_NON_LOOPED_ALPHA(alpha: cfloat);
begin
  nativeInit(UINT64($77168D722C58B2FC));
  nativePush64(PUINT64(@alpha)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_NON_LOOPED_SCALE(scale: cfloat);
begin
  nativeInit(UINT64($B7EF5850C39FABCA));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(p0, p1, scale: cfloat);
begin
  nativeInit(UINT64($1E2E01C00837D26E));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(toggle: BOOL);
begin
  nativeInit(UINT64($8CDE909A0370BB3A));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function START_PARTICLE_FX_LOOPED_AT_COORD(effectName: PChar; x, y, z, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis, p11: BOOL): cint;
begin
  nativeInit(UINT64($E184F4F0DC5910E7));
  nativePush64(UINT64(effectName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  nativePush64(UINT64(p11));
  exit(cint(nativeCall^));
end;

function START_PARTICLE_FX_LOOPED_ON_PED_BONE(effectName: PChar; _ped: Ped; xOffset, yOffset, zOffset, xRot, yRot, zRot: cfloat; boneIndex: cint; scale: cfloat; xAxis, yAxis, zAxis: BOOL): cint;
begin
  nativeInit(UINT64($F28DA9F38CD1787C));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  exit(cint(nativeCall^));
end;

function START_PARTICLE_FX_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis: BOOL): cint;
begin
  nativeInit(UINT64($1AE42C1660FD6517));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  exit(cint(nativeCall^));
end;

function START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot: cfloat; boneIndex: cint; scale: cfloat; xAxis, yAxis, zAxis: BOOL): cint;
begin
  nativeInit(UINT64($C6EB449E33977F0B));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  exit(cint(nativeCall^));
end;

function START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot, scale: cfloat; xAxis, yAxis, zAxis: BOOL; r, g, b, a: cfloat): cint;
begin
  nativeInit(UINT64($6F60E89A7B64EE1D));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  nativePush64(PUINT64(@r)^);
  nativePush64(PUINT64(@g)^);
  nativePush64(PUINT64(@b)^);
  nativePush64(PUINT64(@a)^);
  exit(cint(nativeCall^));
end;

function START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(effectName: PChar; para_entity: Entity; xOffset, yOffset, zOffset, xRot, yRot, zRot: cfloat; boneIndex: cint; scale: cfloat; xAxis, yAxis, zAxis: BOOL; r, g, b, a: cfloat): cint;
begin
  nativeInit(UINT64($DDE23F30CC5A0F03));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(xAxis));
  nativePush64(UINT64(yAxis));
  nativePush64(UINT64(zAxis));
  nativePush64(PUINT64(@r)^);
  nativePush64(PUINT64(@g)^);
  nativePush64(PUINT64(@b)^);
  nativePush64(PUINT64(@a)^);
  exit(cint(nativeCall^));
end;

procedure STOP_PARTICLE_FX_LOOPED(ptfxHandle: cint; p1: BOOL);
begin
  nativeInit(UINT64($8F75998877616996));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_PARTICLE_FX(ptfxHandle: cint; p1: BOOL);
begin
  nativeInit(UINT64($C401503DFE8D53CF));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_PARTICLE_FX_FROM_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($B8FEAEEBCC127425));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure REMOVE_PARTICLE_FX_IN_RANGE(X, Y, Z, radius: cfloat);
begin
  nativeInit(UINT64($DD19FA1C6D657305));
  nativePush64(PUINT64(@X)^);
  nativePush64(PUINT64(@Y)^);
  nativePush64(PUINT64(@Z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(p0, p1: Any);
begin
  nativeInit(UINT64($BA0127DA25FD54C9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function DOES_PARTICLE_FX_LOOPED_EXIST(ptfxHandle: cint): BOOL;
begin
  nativeInit(UINT64($74AFEF0D2E1E409B));
  nativePush64(UINT64(ptfxHandle));
  exit(BOOL(nativeCall^));
end;

procedure SET_PARTICLE_FX_LOOPED_OFFSETS(ptfxHandle: cint; x, y, z, rotX, rotY, rotZ: cfloat);
begin
  nativeInit(UINT64($F7DDEBEC43483C43));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_LOOPED_EVOLUTION(ptfxHandle: cint; propertyName: PChar; amount: cfloat; noNetwork: BOOL);
begin
  nativeInit(UINT64($5F0C4B5B1C393BE2));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(UINT64(propertyName));
  nativePush64(PUINT64(@amount)^);
  nativePush64(UINT64(noNetwork));
  nativeCall;
end;

procedure SET_PARTICLE_FX_LOOPED_COLOUR(ptfxHandle: cint; r, g, b: cfloat; p4: BOOL);
begin
  nativeInit(UINT64($7F8F65877F88783B));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(PUINT64(@r)^);
  nativePush64(PUINT64(@g)^);
  nativePush64(PUINT64(@b)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure SET_PARTICLE_FX_LOOPED_ALPHA(ptfxHandle: cint; alpha: cfloat);
begin
  nativeInit(UINT64($726845132380142E));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(PUINT64(@alpha)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_LOOPED_SCALE(ptfxHandle: cint; scale: cfloat);
begin
  nativeInit(UINT64($B44250AAA456492D));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(ptfxHandle: cint; range: cfloat);
begin
  nativeInit(UINT64($DCB194B85EF7B541));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(PUINT64(@range)^);
  nativeCall;
end;

procedure _SET_PARTICLE_FX_LOOPED_CAMERA_BIAS(ptfxHandle: cint; p1: cfloat);
begin
  nativeInit(UINT64($4100BF0346A8D2C3));
  nativePush64(UINT64(ptfxHandle));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(p0: BOOL);
begin
  nativeInit(UINT64($EEC4047028426510));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($ACEE6F360FC1F6B6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PARTICLE_FX_SHOOTOUT_BOAT(p0: Any);
begin
  nativeInit(UINT64($96EF97DAEB89BEF5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CLEAR_PARTICLE_FX_SHOOTOUT_BOAT;
begin
  nativeInit(UINT64($2A251AA48B2B46DB));
  nativeCall;
end;

procedure SET_PARTICLE_FX_BLOOD_SCALE(p0: Any);
begin
  nativeInit(UINT64($908311265D42A820));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DISABLE_IN_WATER_PTFX(toggle: BOOL);
begin
  nativeInit(UINT64($CFD16F0DB5A3535C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_DOWNWASH_PTFX(toggle: BOOL);
begin
  nativeInit(UINT64($5F6DF3D92271E8A1));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(scale: cfloat);
begin
  nativeInit(UINT64($2B40A97646381508));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure ENABLE_CLOWN_BLOOD_VFX(toggle: BOOL);
begin
  nativeInit(UINT64($D821490579791273));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ENABLE_ALIEN_BLOOD_VFX(toggle: BOOL);
begin
  nativeInit(UINT64($9DCE1F0F78260875));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PARTICLE_FX_BULLET_IMPACT_SCALE(scale: cfloat);
begin
  nativeInit(UINT64($27E32866E9A5C416));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(p0: cfloat);
begin
  nativeInit(UINT64($BB90E12CAC1DAB25));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(p0: BOOL);
begin
  nativeInit(UINT64($CA4AE345A153D573));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(p0: cfloat);
begin
  nativeInit(UINT64($54E22EA2C1956A8D));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(p0: cfloat);
begin
  nativeInit(UINT64($949F397A288B28B3));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(p0: PChar);
begin
  nativeInit(UINT64($BA3D194057C79A7B));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_SKIDMARK_RANGE_SCALE(scale: cfloat);
begin
  nativeInit(UINT64($5DBF05DB5926D089));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(p0: Any);
begin
  nativeInit(UINT64($C6730E0D14E50703));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure REGISTER_POSTFX_BULLET_IMPACT(weaponWorldPosX, weaponWorldPosY, weaponWorldPosZ, intensity: cfloat);
begin
  nativeInit(UINT64($170911F37F646F29));
  nativePush64(PUINT64(@weaponWorldPosX)^);
  nativePush64(PUINT64(@weaponWorldPosY)^);
  nativePush64(PUINT64(@weaponWorldPosZ)^);
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

procedure FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(p0: BOOL);
begin
  nativeInit(UINT64($9B079E5221D984D3));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure USE_PARTICLE_FX_ASSET(name: PChar);
begin
  nativeInit(UINT64($6C38AF3693A69A91));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure SET_PARTICLE_FX_OVERRIDE(oldAsset, newAsset: PChar);
begin
  nativeInit(UINT64($EA1E2D93F6F75ED9));
  nativePush64(UINT64(oldAsset));
  nativePush64(UINT64(newAsset));
  nativeCall;
end;

procedure RESET_PARTICLE_FX_OVERRIDE(name: PChar);
begin
  nativeInit(UINT64($89C8553DD3274AAE));
  nativePush64(UINT64(name));
  nativeCall;
end;

function _START_VEHICLE_PARTICLE_FX_LOOPED(veh: Vehicle; effectName: PChar; frontBack, leftRight, localOnly: BOOL): cint;
begin
  nativeInit(UINT64($DF269BE2909E181A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(frontBack));
  nativePush64(UINT64(leftRight));
  nativePush64(UINT64(localOnly));
  exit(cint(nativeCall^));
end;

procedure SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(p0: BOOL);
begin
  nativeInit(UINT64($A46B73FAA3460AE1));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(p0: cfloat);
begin
  nativeInit(UINT64($F78B803082D4386F));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure WASH_DECALS_IN_RANGE(x, y, z, range, p4: cfloat);
begin
  nativeInit(UINT64($9C30613D50A6ADEF));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@range)^);
  nativePush64(PUINT64(@p4)^);
  nativeCall;
end;

procedure WASH_DECALS_FROM_VEHICLE(veh: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($5B712761429DBC14));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure FADE_DECALS_IN_RANGE(x, y, z, p3, p4: cfloat);
begin
  nativeInit(UINT64($D77EDADB0420E6E0));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativeCall;
end;

procedure REMOVE_DECALS_IN_RANGE(x, y, z, range: cfloat);
begin
  nativeInit(UINT64($5D6B2D4830A67C62));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@range)^);
  nativeCall;
end;

procedure REMOVE_DECALS_FROM_OBJECT(obj: GTAObject);
begin
  nativeInit(UINT64($CCF71CBDDF5B6CB9));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure REMOVE_DECALS_FROM_OBJECT_FACING(obj: GTAObject; x, y, z: cfloat);
begin
  nativeInit(UINT64($A6F6F70FDC6D144C));
  nativePush64(UINT64(obj));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure REMOVE_DECALS_FROM_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($E91F1B65F2B48D57));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function ADD_DECAL(decalType: cint; posX, posY, posZ, p4, p5, p6, p7, p8, p9, width, height, rCoef, gCoef, bCoef, opacity, timeout: cfloat; p17, p18, p19: BOOL): cint;
begin
  nativeInit(UINT64($B302244A1839BDAD));
  nativePush64(UINT64(decalType));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  nativePush64(PUINT64(@rCoef)^);
  nativePush64(PUINT64(@gCoef)^);
  nativePush64(PUINT64(@bCoef)^);
  nativePush64(PUINT64(@opacity)^);
  nativePush64(PUINT64(@timeout)^);
  nativePush64(UINT64(p17));
  nativePush64(UINT64(p18));
  nativePush64(UINT64(p19));
  exit(cint(nativeCall^));
end;

function ADD_PETROL_DECAL(x, y, z, groundLvl, width, transparency: cfloat): cint;
begin
  nativeInit(UINT64($4F5212C7AD880DF8));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@groundLvl)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@transparency)^);
  exit(cint(nativeCall^));
end;

function ADD_OIL_DECAL(x, y, z, groundLvl, width, transparency: cfloat): cint;
begin
  nativeInit(UINT64($126D7F89FE859A5E));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@groundLvl)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@transparency)^);
  exit(cint(nativeCall^));
end;

procedure START_PETROL_TRAIL_DECALS(p0: cfloat);
begin
  nativeInit(UINT64($99AC7F0D8B9C893D));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure ADD_PETROL_TRAIL_DECAL_INFO(x, y, z, p3: cfloat);
begin
  nativeInit(UINT64($967278682CB6967A));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure END_PETROL_TRAIL_DECALS;
begin
  nativeInit(UINT64($0A123435A26C36CD));
  nativeCall;
end;

procedure REMOVE_DECAL(decal: cint);
begin
  nativeInit(UINT64($ED3F346429CCD659));
  nativePush64(UINT64(decal));
  nativeCall;
end;

function IS_DECAL_ALIVE(decal: cint): BOOL;
begin
  nativeInit(UINT64($C694D74949CAFD0C));
  nativePush64(UINT64(decal));
  exit(BOOL(nativeCall^));
end;

function GET_DECAL_WASH_LEVEL(decal: cint): cfloat;
begin
  nativeInit(UINT64($323F647679A09103));
  nativePush64(UINT64(decal));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME;
begin
  nativeInit(UINT64($D9454B5752C857DC));
  nativeCall;
end;

procedure SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME;
begin
  nativeInit(UINT64($27CFB1B1E078CB2D));
  nativeCall;
end;

procedure SET_DISABLE_DECAL_RENDERING_THIS_FRAME;
begin
  nativeInit(UINT64($4B5CFC83122DF602));
  nativeCall;
end;

function GET_IS_PETROL_DECAL_IN_RANGE(xCoord, yCoord, zCoord, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($2F09F7976C512404));
  nativePush64(PUINT64(@xCoord)^);
  nativePush64(PUINT64(@yCoord)^);
  nativePush64(PUINT64(@zCoord)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

procedure PATCH_DECAL_DIFFUSE_MAP(decalType: cint; textureDict, textureName: PChar);
begin
  nativeInit(UINT64($8A35C742130C6080));
  nativePush64(UINT64(decalType));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativeCall;
end;

procedure UNPATCH_DECAL_DIFFUSE_MAP(decalType: cint);
begin
  nativeInit(UINT64($B7ED70C49521A61D));
  nativePush64(UINT64(decalType));
  nativeCall;
end;

procedure MOVE_VEHICLE_DECALS(p0, p1: Any);
begin
  nativeInit(UINT64($84C8D7C2D30D3280));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function ADD_VEHICLE_CREW_EMBLEM(veh: Vehicle; _ped: Ped; boneIndex: cint; x1, x2, x3, y1, y2, y3, z1, z2, z3, scale: cfloat; p13: Any; alpha: cint): BOOL;
begin
  nativeInit(UINT64($428BDCB9DA58DA53));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(p13));
  nativePush64(UINT64(alpha));
  exit(BOOL(nativeCall^));
end;

function ABORT_VEHICLE_CREW_EMBLEM_REQUEST(p0: pcint): BOOL;
begin
  nativeInit(UINT64($82ACC484FFA3B05F));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_VEHICLE_CREW_EMBLEM(veh: Vehicle; p1: cint);
begin
  nativeInit(UINT64($D2300034310557E4));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(veh: Vehicle; p1: cint): cint;
begin
  nativeInit(UINT64($FE26117A5841B2FF));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function DOES_VEHICLE_HAVE_CREW_EMBLEM(veh: Vehicle; p1: cint): BOOL;
begin
  nativeInit(UINT64($060D935D3981A275));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_COMPOSITE_SHOTGUN_DECALS(toggle: BOOL);
begin
  nativeInit(UINT64($0E4299C549F0D1F1));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_SCUFF_DECALS(toggle: BOOL);
begin
  nativeInit(UINT64($02369D5C8A51FDCF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DECAL_BULLET_IMPACT_RANGE_SCALE(p0: cfloat);
begin
  nativeInit(UINT64($46D1A61A21F566FC));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure OVERRIDE_INTERIOR_SMOKE_NAME(name: PChar);
begin
  nativeInit(UINT64($2A2A52824DB96700));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure OVERRIDE_INTERIOR_SMOKE_LEVEL(level: cfloat);
begin
  nativeInit(UINT64($1600FD8CF72EBC12));
  nativePush64(PUINT64(@level)^);
  nativeCall;
end;

procedure OVERRIDE_INTERIOR_SMOKE_END;
begin
  nativeInit(UINT64($EFB55E7C25D3B3BE));
  nativeCall;
end;

procedure REGISTER_NOIR_LENS_EFFECT;
begin
  nativeInit(UINT64($A44FF770DFBC5DAE));
  nativeCall;
end;

procedure DISABLE_VEHICLE_DISTANTLIGHTS(toggle: BOOL);
begin
  nativeInit(UINT64($C9F98AC1884E73A2));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(p0: BOOL);
begin
  nativeInit(UINT64($03300B57FCAC6DDB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure REQUEST_EARLY_LIGHT_CHECK;
begin
  nativeInit(UINT64($98EDF76A7271E4F2));
  nativeCall;
end;

procedure USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(toggle: BOOL);
begin
  nativeInit(UINT64($AEEDAD1420C65CC0));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure _FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE(toggle: BOOL);
begin
  nativeInit(UINT64($A342A3763B3AFB6C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(toggle: BOOL);
begin
  nativeInit(UINT64($4CC7F0FEA5283FE0));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_REGION_VFX(p0: Any);
begin
  nativeInit(UINT64($EFD97FF47B745B8D));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _FORCE_GROUND_SNOW_PASS(toggle: BOOL);
begin
  nativeInit(UINT64($6E9EF3A33C8899F8));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure PRESET_INTERIOR_AMBIENT_CACHE(timecycleModifierName: PChar);
begin
  nativeInit(UINT64($D7021272EB0A451E));
  nativePush64(UINT64(timecycleModifierName));
  nativeCall;
end;

procedure SET_TIMECYCLE_MODIFIER(modifierName: PChar);
begin
  nativeInit(UINT64($2C933ABF17A1DF41));
  nativePush64(UINT64(modifierName));
  nativeCall;
end;

procedure SET_TIMECYCLE_MODIFIER_STRENGTH(strength: cfloat);
begin
  nativeInit(UINT64($82E7FFCD5B2326B3));
  nativePush64(PUINT64(@strength)^);
  nativeCall;
end;

procedure SET_TRANSITION_TIMECYCLE_MODIFIER(modifierName: PChar; transition: cfloat);
begin
  nativeInit(UINT64($3BCF567485E1971C));
  nativePush64(UINT64(modifierName));
  nativePush64(PUINT64(@transition)^);
  nativeCall;
end;

procedure SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(strength: cfloat);
begin
  nativeInit(UINT64($1CBA05AE7BD7EE05));
  nativePush64(PUINT64(@strength)^);
  nativeCall;
end;

procedure CLEAR_TIMECYCLE_MODIFIER;
begin
  nativeInit(UINT64($0F07E7745A236711));
  nativeCall;
end;

function GET_TIMECYCLE_MODIFIER_INDEX: cint;
begin
  nativeInit(UINT64($FDF3D97C674AFB66));
  exit(cint(nativeCall^));
end;

function GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX: cint;
begin
  nativeInit(UINT64($459FD2C8D0AB78BC));
  exit(cint(nativeCall^));
end;

function GET_IS_TIMECYCLE_TRANSITIONING_OUT: BOOL;
begin
  nativeInit(UINT64($98D18905BF723B99));
  exit(BOOL(nativeCall^));
end;

procedure PUSH_TIMECYCLE_MODIFIER;
begin
  nativeInit(UINT64($58F735290861E6B4));
  nativeCall;
end;

procedure POP_TIMECYCLE_MODIFIER;
begin
  nativeInit(UINT64($3C8938D7D872211E));
  nativeCall;
end;

procedure SET_CURRENT_PLAYER_TCMODIFIER(modifierName: PChar);
begin
  nativeInit(UINT64($BBF327DED94E4DEB));
  nativePush64(UINT64(modifierName));
  nativeCall;
end;

procedure SET_PLAYER_TCMODIFIER_TRANSITION(value: cfloat);
begin
  nativeInit(UINT64($BDEB86F4D5809204));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_NEXT_PLAYER_TCMODIFIER(modifierName: PChar);
begin
  nativeInit(UINT64($BF59707B3E5ED531));
  nativePush64(UINT64(modifierName));
  nativeCall;
end;

procedure ADD_TCMODIFIER_OVERRIDE(modifierName1, modifierName2: PChar);
begin
  nativeInit(UINT64($1A8E2C8B9CF4549C));
  nativePush64(UINT64(modifierName1));
  nativePush64(UINT64(modifierName2));
  nativeCall;
end;

procedure CLEAR_ALL_TCMODIFIER_OVERRIDES(p0: PChar);
begin
  nativeInit(UINT64($15E33297C3E8DC60));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_EXTRA_TCMODIFIER(modifierName: PChar);
begin
  nativeInit(UINT64($5096FD9CCB49056D));
  nativePush64(UINT64(modifierName));
  nativeCall;
end;

procedure CLEAR_EXTRA_TCMODIFIER;
begin
  nativeInit(UINT64($92CCC17A7A2285DA));
  nativeCall;
end;

function GET_EXTRA_TCMODIFIER: cint;
begin
  nativeInit(UINT64($BB0527EC6341496D));
  exit(cint(nativeCall^));
end;

procedure ENABLE_MOON_CYCLE_OVERRIDE(strength: cfloat);
begin
  nativeInit(UINT64($2C328AF17210F009));
  nativePush64(PUINT64(@strength)^);
  nativeCall;
end;

procedure DISABLE_MOON_CYCLE_OVERRIDE;
begin
  nativeInit(UINT64($2BF72AD5B41AA739));
  nativeCall;
end;

function REQUEST_SCALEFORM_MOVIE(scaleformName: PChar): cint;
begin
  nativeInit(UINT64($11FE353CF9733E6F));
  nativePush64(UINT64(scaleformName));
  exit(cint(nativeCall^));
end;

function REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(scaleformName: PChar): cint;
begin
  nativeInit(UINT64($65E7E78842E74CDB));
  nativePush64(UINT64(scaleformName));
  exit(cint(nativeCall^));
end;

function REQUEST_SCALEFORM_MOVIE_INSTANCE(scaleformName: PChar): cint;
begin
  nativeInit(UINT64($C514489CFB8AF806));
  nativePush64(UINT64(scaleformName));
  exit(cint(nativeCall^));
end;

function REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(scaleformName: PChar): cint;
begin
  nativeInit(UINT64($BD06C611BB9048C2));
  nativePush64(UINT64(scaleformName));
  exit(cint(nativeCall^));
end;

function HAS_SCALEFORM_MOVIE_LOADED(scaleformHandle: cint): BOOL;
begin
  nativeInit(UINT64($85F01B8D5B90570E));
  nativePush64(UINT64(scaleformHandle));
  exit(BOOL(nativeCall^));
end;

function IS_ACTIVE_SCALEFORM_MOVIE_DELETING(val: cint): BOOL;
begin
  nativeInit(UINT64($2FCB133CA50A49EB));
  nativePush64(UINT64(val));
  exit(BOOL(nativeCall^));
end;

function IS_SCALEFORM_MOVIE_DELETING(val: cint): BOOL;
begin
  nativeInit(UINT64($86255B1FC929E33E));
  nativePush64(UINT64(val));
  exit(BOOL(nativeCall^));
end;

function HAS_SCALEFORM_MOVIE_FILENAME_LOADED(scaleformName: PChar): BOOL;
begin
  nativeInit(UINT64($0C1C5D756FB5F337));
  nativePush64(UINT64(scaleformName));
  exit(BOOL(nativeCall^));
end;

function HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(scaleformHandle: cint): BOOL;
begin
  nativeInit(UINT64($8217150E1217EBFD));
  nativePush64(UINT64(scaleformHandle));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(scaleformHandle: pcint);
begin
  nativeInit(UINT64($1D132D614DD86811));
  nativePush64(UINT64(scaleformHandle));
  nativeCall;
end;

procedure SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(scaleform: cint; toggle: BOOL);
begin
  nativeInit(UINT64($6D8EB211944DCE08));
  nativePush64(UINT64(scaleform));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(scaleformHandle: cint; toggle: BOOL);
begin
  nativeInit(UINT64($32F34FF7F617643B));
  nativePush64(UINT64(scaleformHandle));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(scaleformHandle: cint; toggle: BOOL);
begin
  nativeInit(UINT64($E6A9F00D4240B519));
  nativePush64(UINT64(scaleformHandle));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DRAW_SCALEFORM_MOVIE(scaleformHandle: cint; x, y, width, height: cfloat; red, green, blue, alpha, p9: cint);
begin
  nativeInit(UINT64($54972ADAF0294A93));
  nativePush64(UINT64(scaleformHandle));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure DRAW_SCALEFORM_MOVIE_FULLSCREEN(scaleform, red, green, blue, alpha, p5: cint);
begin
  nativeInit(UINT64($0DF606929C105BE1));
  nativePush64(UINT64(scaleform));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(scaleform1, scaleform2, red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($CF537FDE4FBD4CE5));
  nativePush64(UINT64(scaleform1));
  nativePush64(UINT64(scaleform2));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure DRAW_SCALEFORM_MOVIE_3D(scaleform: cint; posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ: cfloat; rotationOrder: cint);
begin
  nativeInit(UINT64($87D51D72255D4E78));
  nativePush64(UINT64(scaleform));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@scaleX)^);
  nativePush64(PUINT64(@scaleY)^);
  nativePush64(PUINT64(@scaleZ)^);
  nativePush64(UINT64(rotationOrder));
  nativeCall;
end;

procedure DRAW_SCALEFORM_MOVIE_3D_SOLID(scaleform: cint; posX, posY, posZ, rotX, rotY, rotZ, p7, p8, p9, scaleX, scaleY, scaleZ: cfloat; rotationOrder: cint);
begin
  nativeInit(UINT64($1CE592FDC749D6F5));
  nativePush64(UINT64(scaleform));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@scaleX)^);
  nativePush64(PUINT64(@scaleY)^);
  nativePush64(PUINT64(@scaleZ)^);
  nativePush64(UINT64(rotationOrder));
  nativeCall;
end;

procedure CALL_SCALEFORM_MOVIE_METHOD(scaleform: cint; method: PChar);
begin
  nativeInit(UINT64($FBD96D87AC96D533));
  nativePush64(UINT64(scaleform));
  nativePush64(UINT64(method));
  nativeCall;
end;

procedure CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(scaleform: cint; methodName: PChar; param1, param2, param3, param4, param5: cfloat);
begin
  nativeInit(UINT64($D0837058AE2E4BEE));
  nativePush64(UINT64(scaleform));
  nativePush64(UINT64(methodName));
  nativePush64(PUINT64(@param1)^);
  nativePush64(PUINT64(@param2)^);
  nativePush64(PUINT64(@param3)^);
  nativePush64(PUINT64(@param4)^);
  nativePush64(PUINT64(@param5)^);
  nativeCall;
end;

procedure CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(scaleform: cint; methodName, param1, param2, param3, param4, param5: PChar);
begin
  nativeInit(UINT64($51BC1ED3CC44E8F7));
  nativePush64(UINT64(scaleform));
  nativePush64(UINT64(methodName));
  nativePush64(UINT64(param1));
  nativePush64(UINT64(param2));
  nativePush64(UINT64(param3));
  nativePush64(UINT64(param4));
  nativePush64(UINT64(param5));
  nativeCall;
end;

procedure CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform: cint; methodName: PChar; floatParam1, floatParam2, floatParam3, floatParam4, floatParam5: cfloat; stringParam1, stringParam2, stringParam3, stringParam4, stringParam5: PChar);
begin
  nativeInit(UINT64($EF662D8D57E290B1));
  nativePush64(UINT64(scaleform));
  nativePush64(UINT64(methodName));
  nativePush64(PUINT64(@floatParam1)^);
  nativePush64(PUINT64(@floatParam2)^);
  nativePush64(PUINT64(@floatParam3)^);
  nativePush64(PUINT64(@floatParam4)^);
  nativePush64(PUINT64(@floatParam5)^);
  nativePush64(UINT64(stringParam1));
  nativePush64(UINT64(stringParam2));
  nativePush64(UINT64(stringParam3));
  nativePush64(UINT64(stringParam4));
  nativePush64(UINT64(stringParam5));
  nativeCall;
end;

function BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(hudComponent: cint; methodName: PChar): BOOL;
begin
  nativeInit(UINT64($98C494FD5BDFBFD5));
  nativePush64(UINT64(hudComponent));
  nativePush64(UINT64(methodName));
  exit(BOOL(nativeCall^));
end;

function BEGIN_SCALEFORM_MOVIE_METHOD(scaleform: cint; methodName: PChar): BOOL;
begin
  nativeInit(UINT64($F6E48914C7A8694E));
  nativePush64(UINT64(scaleform));
  nativePush64(UINT64(methodName));
  exit(BOOL(nativeCall^));
end;

function BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(methodName: PChar): BOOL;
begin
  nativeInit(UINT64($AB58C27C2E6123C6));
  nativePush64(UINT64(methodName));
  exit(BOOL(nativeCall^));
end;

function BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(methodName: PChar): BOOL;
begin
  nativeInit(UINT64($B9449845F73F5E9C));
  nativePush64(UINT64(methodName));
  exit(BOOL(nativeCall^));
end;

procedure END_SCALEFORM_MOVIE_METHOD;
begin
  nativeInit(UINT64($C6796A8FFA375E53));
  nativeCall;
end;

function END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE: cint;
begin
  nativeInit(UINT64($C50AA39A577AF886));
  exit(cint(nativeCall^));
end;

function IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(methodReturn: cint): BOOL;
begin
  nativeInit(UINT64($768FF8961BA904D6));
  nativePush64(UINT64(methodReturn));
  exit(BOOL(nativeCall^));
end;

function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(methodReturn: cint): cint;
begin
  nativeInit(UINT64($2DE7EFA66B906036));
  nativePush64(UINT64(methodReturn));
  exit(cint(nativeCall^));
end;

function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(methodReturn: cint): BOOL;
begin
  nativeInit(UINT64($D80A80346A45D761));
  nativePush64(UINT64(methodReturn));
  exit(BOOL(nativeCall^));
end;

function GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(methodReturn: cint): PChar;
begin
  nativeInit(UINT64($E1E258829A885245));
  nativePush64(UINT64(methodReturn));
  exit(PChar(nativeCall^));
end;

procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(value: cint);
begin
  nativeInit(UINT64($C3D0841A0CC546A6));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(value: cfloat);
begin
  nativeInit(UINT64($D69736AAE04DB51A));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(value: BOOL);
begin
  nativeInit(UINT64($C58424BA936EB458));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_SCALEFORM_STRING(componentType: PChar);
begin
  nativeInit(UINT64($80338406F3475E55));
  nativePush64(UINT64(componentType));
  nativeCall;
end;

procedure END_TEXT_COMMAND_SCALEFORM_STRING;
begin
  nativeInit(UINT64($362E2D3FE93A9959));
  nativeCall;
end;

procedure END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING;
begin
  nativeInit(UINT64($AE4E8157D9ECF087));
  nativeCall;
end;

procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(str: PChar);
begin
  nativeInit(UINT64($77FE3402004CD1B0));
  nativePush64(UINT64(str));
  nativeCall;
end;

procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(str: PChar);
begin
  nativeInit(UINT64($BA7148484BD90365));
  nativePush64(UINT64(str));
  nativeCall;
end;

procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(str: PChar);
begin
  nativeInit(UINT64($E83A3E3557A56640));
  nativePush64(UINT64(str));
  nativeCall;
end;

function DOES_LATEST_BRIEF_STRING_EXIST(p0: cint): BOOL;
begin
  nativeInit(UINT64($5E657EF1099EDD65));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(value: cint);
begin
  nativeInit(UINT64($EC52C631A1831C03));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent: cint);
begin
  nativeInit(UINT64($9304881D6F6537EA));
  nativePush64(UINT64(hudComponent));
  nativeCall;
end;

function HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(hudComponent: cint): BOOL;
begin
  nativeInit(UINT64($DF6E5987D2B4D140));
  nativePush64(UINT64(hudComponent));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(hudComponent: cint);
begin
  nativeInit(UINT64($F44A5456AC3F4F97));
  nativePush64(UINT64(hudComponent));
  nativeCall;
end;

function PASS_KEYBOARD_INPUT_TO_SCALEFORM(scaleformHandle: cint): BOOL;
begin
  nativeInit(UINT64($D1C7CB175E012964));
  nativePush64(UINT64(scaleformHandle));
  exit(BOOL(nativeCall^));
end;

procedure SET_TV_CHANNEL(channel: cint);
begin
  nativeInit(UINT64($BAABBB23EB6E484E));
  nativePush64(UINT64(channel));
  nativeCall;
end;

function GET_TV_CHANNEL: cint;
begin
  nativeInit(UINT64($FC1E275A90D39995));
  exit(cint(nativeCall^));
end;

procedure SET_TV_VOLUME(volume: cfloat);
begin
  nativeInit(UINT64($2982BF73F66E9DDC));
  nativePush64(PUINT64(@volume)^);
  nativeCall;
end;

function GET_TV_VOLUME: cfloat;
begin
  nativeInit(UINT64($2170813D3DD8661B));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure DRAW_TV_CHANNEL(xPos, yPos, xScale, yScale, rotation: cfloat; red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($FDDC2B4ED3C69DF0));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@xScale)^);
  nativePush64(PUINT64(@yScale)^);
  nativePush64(PUINT64(@rotation)^);
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure SET_TV_CHANNEL_PLAYLIST(tvChannel: cint; playlistName: PChar; restart: BOOL);
begin
  nativeInit(UINT64($F7B38B8305F1FE8B));
  nativePush64(UINT64(tvChannel));
  nativePush64(UINT64(playlistName));
  nativePush64(UINT64(restart));
  nativeCall;
end;

procedure SET_TV_CHANNEL_PLAYLIST_AT_HOUR(tvChannel: cint; playlistName: PChar; hour: cint);
begin
  nativeInit(UINT64($2201C576FACAEBE8));
  nativePush64(UINT64(tvChannel));
  nativePush64(UINT64(playlistName));
  nativePush64(UINT64(hour));
  nativeCall;
end;

procedure _SET_TV_CHANNEL_PLAYLIST_DIRTY(tvChannel: cint; p1: BOOL);
begin
  nativeInit(UINT64($EE831F15A8D0D94A));
  nativePush64(UINT64(tvChannel));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure CLEAR_TV_CHANNEL_PLAYLIST(tvChannel: cint);
begin
  nativeInit(UINT64($BEB3D46BB7F043C0));
  nativePush64(UINT64(tvChannel));
  nativeCall;
end;

function IS_PLAYLIST_ON_CHANNEL(tvChannel: cint; p1: Any): BOOL;
begin
  nativeInit(UINT64($1F710BFF7DAE6261));
  nativePush64(UINT64(tvChannel));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function IS_TVSHOW_CURRENTLY_PLAYING(videoCliphash: Hash): BOOL;
begin
  nativeInit(UINT64($0AD973CA1E077B60));
  nativePush64(UINT64(videoCliphash));
  exit(BOOL(nativeCall^));
end;

procedure ENABLE_MOVIE_KEYFRAME_WAIT(toggle: BOOL);
begin
  nativeInit(UINT64($74C180030FDE4B69));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_TV_PLAYER_WATCHING_THIS_FRAME(p0: Any);
begin
  nativeInit(UINT64($D1C55B110E4DF534));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function GET_CURRENT_TV_CLIP_NAMEHASH: Hash;
begin
  nativeInit(UINT64($30432A0118736E00));
  exit(Hash(nativeCall^));
end;

procedure ENABLE_MOVIE_SUBTITLES(toggle: BOOL);
begin
  nativeInit(UINT64($873FA65C778AD970));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function UI3DSCENE_IS_AVAILABLE: BOOL;
begin
  nativeInit(UINT64($D3A10FC7FD8D98CD));
  exit(BOOL(nativeCall^));
end;

function UI3DSCENE_PUSH_PRESET(presetName: PChar): BOOL;
begin
  nativeInit(UINT64($F1CEA8A4198D8E9A));
  nativePush64(UINT64(presetName));
  exit(BOOL(nativeCall^));
end;

function UI3DSCENE_ASSIGN_PED_TO_SLOT(presetName: PChar; _ped: Ped; slot: cint; posX, posY, posZ: cfloat): BOOL;
begin
  nativeInit(UINT64($98C4FE6EC34154CA));
  nativePush64(UINT64(presetName));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(slot));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  exit(BOOL(nativeCall^));
end;

procedure UI3DSCENE_CLEAR_PATCHED_DATA;
begin
  nativeInit(UINT64($7A42B2E236E71415));
  nativeCall;
end;

procedure UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(toggle: BOOL);
begin
  nativeInit(UINT64($108BE26959A9D9BB));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure TERRAINGRID_ACTIVATE(toggle: BOOL);
begin
  nativeInit(UINT64($A356990E161C9E65));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure TERRAINGRID_SET_PARAMS(x, y, z, forwardX, forwardY, forwardZ, sizeX, sizeY, sizeZ, gridScale, glowIntensity, normalHeight, heightDiff: cfloat);
begin
  nativeInit(UINT64($1C4FC5752BCD8E48));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@forwardX)^);
  nativePush64(PUINT64(@forwardY)^);
  nativePush64(PUINT64(@forwardZ)^);
  nativePush64(PUINT64(@sizeX)^);
  nativePush64(PUINT64(@sizeY)^);
  nativePush64(PUINT64(@sizeZ)^);
  nativePush64(PUINT64(@gridScale)^);
  nativePush64(PUINT64(@glowIntensity)^);
  nativePush64(PUINT64(@normalHeight)^);
  nativePush64(PUINT64(@heightDiff)^);
  nativeCall;
end;

procedure TERRAINGRID_SET_COLOURS(lowR, lowG, lowB, lowAlpha, r, g, b, alpha, highR, highG, highB, highAlpha: cint);
begin
  nativeInit(UINT64($5CE62918F8D703C7));
  nativePush64(UINT64(lowR));
  nativePush64(UINT64(lowG));
  nativePush64(UINT64(lowB));
  nativePush64(UINT64(lowAlpha));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(highR));
  nativePush64(UINT64(highG));
  nativePush64(UINT64(highB));
  nativePush64(UINT64(highAlpha));
  nativeCall;
end;

procedure ANIMPOSTFX_PLAY(effectName: PChar; duration: cint; looped: BOOL);
begin
  nativeInit(UINT64($2206BF9A37B7F724));
  nativePush64(UINT64(effectName));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(looped));
  nativeCall;
end;

procedure ANIMPOSTFX_STOP(effectName: PChar);
begin
  nativeInit(UINT64($068E835A1D0DC0E3));
  nativePush64(UINT64(effectName));
  nativeCall;
end;

function ANIMPOSTFX_GET_CURRENT_TIME(effectName: PChar): cfloat;
begin
  nativeInit(UINT64($E35B38A27E8E7179));
  nativePush64(UINT64(effectName));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function ANIMPOSTFX_IS_RUNNING(effectName: PChar): BOOL;
begin
  nativeInit(UINT64($36AD3E690DA5ACEB));
  nativePush64(UINT64(effectName));
  exit(BOOL(nativeCall^));
end;

procedure ANIMPOSTFX_STOP_ALL;
begin
  nativeInit(UINT64($B4EDDC19532BFB85));
  nativeCall;
end;

procedure ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(effectName: PChar);
begin
  nativeInit(UINT64($D2209BE128B5418C));
  nativePush64(UINT64(effectName));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(str: PChar);
begin
  nativeInit(UINT64($ABA17D7CE615ADBF));
  nativePush64(UINT64(str));
  nativeCall;
end;

procedure END_TEXT_COMMAND_BUSYSPINNER_ON(busySpinnerType: cint);
begin
  nativeInit(UINT64($BD12F8228410D9B4));
  nativePush64(UINT64(busySpinnerType));
  nativeCall;
end;

procedure BUSYSPINNER_OFF;
begin
  nativeInit(UINT64($10D373323E5B9C0D));
  nativeCall;
end;

procedure PRELOAD_BUSYSPINNER;
begin
  nativeInit(UINT64($C65AB383CD91DF98));
  nativeCall;
end;

function BUSYSPINNER_IS_ON: BOOL;
begin
  nativeInit(UINT64($D422FCC5F239A915));
  exit(BOOL(nativeCall^));
end;

function BUSYSPINNER_IS_DISPLAYING: BOOL;
begin
  nativeInit(UINT64($B2A592B04648A9CB));
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_PAUSEMENU_SPINNER(p0: BOOL);
begin
  nativeInit(UINT64($9245E81072704B8A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_MOUSE_CURSOR_THIS_FRAME;
begin
  nativeInit(UINT64($AAE7CE1D63167423));
  nativeCall;
end;

procedure SET_MOUSE_CURSOR_STYLE(spriteId: cint);
begin
  nativeInit(UINT64($8DB8CFFD58B62552));
  nativePush64(UINT64(spriteId));
  nativeCall;
end;

procedure SET_MOUSE_CURSOR_VISIBLE(toggle: BOOL);
begin
  nativeInit(UINT64($98215325A695E78A));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS: BOOL;
begin
  nativeInit(UINT64($3D9ACB1EB139E702));
  exit(BOOL(nativeCall^));
end;

function GET_MOUSE_EVENT(scaleformHandle: cint; p1, p2, p3: PAny): BOOL;
begin
  nativeInit(UINT64($632B2940C67F4EA9));
  nativePush64(UINT64(scaleformHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure THEFEED_ONLY_SHOW_TOOLTIPS(toggle: BOOL);
begin
  nativeInit(UINT64($6F1554B0CC2089FA));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure THEFEED_SET_SCRIPTED_MENU_HEIGHT(pos: cfloat);
begin
  nativeInit(UINT64($55598D21339CB998));
  nativePush64(PUINT64(@pos)^);
  nativeCall;
end;

procedure THEFEED_HIDE;
begin
  nativeInit(UINT64($32888337579A5970));
  nativeCall;
end;

procedure THEFEED_HIDE_THIS_FRAME;
begin
  nativeInit(UINT64($25F87B30C382FCA7));
  nativeCall;
end;

procedure THEFEED_SHOW;
begin
  nativeInit(UINT64($15CFA549788D35EF));
  nativeCall;
end;

procedure THEFEED_FLUSH_QUEUE;
begin
  nativeInit(UINT64($A8FDB297A8D25FBA));
  nativeCall;
end;

procedure THEFEED_REMOVE_ITEM(notificationId: cint);
begin
  nativeInit(UINT64($BE4390CB40B3E627));
  nativePush64(UINT64(notificationId));
  nativeCall;
end;

procedure THEFEED_FORCE_RENDER_ON;
begin
  nativeInit(UINT64($A13C11E1B5C06BFC));
  nativeCall;
end;

procedure THEFEED_FORCE_RENDER_OFF;
begin
  nativeInit(UINT64($583049884A2EEE3C));
  nativeCall;
end;

procedure THEFEED_PAUSE;
begin
  nativeInit(UINT64($FDB423997FA30340));
  nativeCall;
end;

procedure THEFEED_RESUME;
begin
  nativeInit(UINT64($E1CD1E48E025E661));
  nativeCall;
end;

function THEFEED_IS_PAUSED: BOOL;
begin
  nativeInit(UINT64($A9CBFD40B3FA3010));
  exit(BOOL(nativeCall^));
end;

procedure THEFEED_REPORT_LOGO_ON;
begin
  nativeInit(UINT64($D4438C0564490E63));
  nativeCall;
end;

procedure THEFEED_REPORT_LOGO_OFF;
begin
  nativeInit(UINT64($B695E2CD0A2DA9EE));
  nativeCall;
end;

function THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID: cint;
begin
  nativeInit(UINT64($82352748437638CA));
  exit(cint(nativeCall^));
end;

procedure THEFEED_AUTO_POST_GAMETIPS_ON;
begin
  nativeInit(UINT64($56C8B608CFD49854));
  nativeCall;
end;

procedure THEFEED_AUTO_POST_GAMETIPS_OFF;
begin
  nativeInit(UINT64($ADED7F5748ACAFE6));
  nativeCall;
end;

procedure THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(hudColorIndex: cint);
begin
  nativeInit(UINT64($92F0DA1E27DB96DC));
  nativePush64(UINT64(hudColorIndex));
  nativeCall;
end;

procedure THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($17430B918701C342));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(count: cint);
begin
  nativeInit(UINT64($17AD8C9706BDD88A));
  nativePush64(UINT64(count));
  nativeCall;
end;

procedure THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(toggle: BOOL);
begin
  nativeInit(UINT64($4A0C7C9BB10ABB36));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure THEFEED_RESET_ALL_PARAMETERS;
begin
  nativeInit(UINT64($FDD85225B2DEA55E));
  nativeCall;
end;

procedure THEFEED_FREEZE_NEXT_POST;
begin
  nativeInit(UINT64($FDEC055AB549E328));
  nativeCall;
end;

procedure THEFEED_CLEAR_FROZEN_POST;
begin
  nativeInit(UINT64($80FE4F3AB4E1B62A));
  nativeCall;
end;

procedure THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(p0: BOOL);
begin
  nativeInit(UINT64($BAE4F9B97CD43B30));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure THEFEED_UPDATE_ITEM_TEXTURE(txdString1, txnString1, txdString2, txnString2: PChar);
begin
  nativeInit(UINT64($317EBA71D7543F52));
  nativePush64(UINT64(txdString1));
  nativePush64(UINT64(txnString1));
  nativePush64(UINT64(txdString2));
  nativePush64(UINT64(txnString2));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_THEFEED_POST(text: PChar);
begin
  nativeInit(UINT64($202709F4C58A0424));
  nativePush64(UINT64(text));
  nativeCall;
end;

function END_TEXT_COMMAND_THEFEED_POST_STATS(statTitle: PChar; iconEnum: cint; stepVal: BOOL; barValue: cint; isImportant: BOOL; pictureTextureDict, pictureTextureName: PChar): cint;
begin
  nativeInit(UINT64($2B7E9A4EAAA93C89));
  nativePush64(UINT64(statTitle));
  nativePush64(UINT64(iconEnum));
  nativePush64(UINT64(stepVal));
  nativePush64(UINT64(barValue));
  nativePush64(UINT64(isImportant));
  nativePush64(UINT64(pictureTextureDict));
  nativePush64(UINT64(pictureTextureName));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar): cint;
begin
  nativeInit(UINT64($1CCD9A37359072CF));
  nativePush64(UINT64(txdName));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(flash));
  nativePush64(UINT64(iconType));
  nativePush64(UINT64(sender));
  nativePush64(UINT64(subject));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar): cint;
begin
  nativeInit(UINT64($C6F580E4C94926AC));
  nativePush64(UINT64(txdName));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(flash));
  nativePush64(UINT64(iconType));
  nativePush64(UINT64(sender));
  nativePush64(UINT64(subject));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar; duration: cfloat): cint;
begin
  nativeInit(UINT64($1E6611149DB3DB6B));
  nativePush64(UINT64(txdName));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(flash));
  nativePush64(UINT64(iconType));
  nativePush64(UINT64(sender));
  nativePush64(UINT64(subject));
  nativePush64(PUINT64(@duration)^);
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(txdName, textureName: PChar; flash: BOOL; iconType: cint; sender, subject: PChar; duration: cfloat; clanTag: PChar): cint;
begin
  nativeInit(UINT64($5CBF7BADE20DB93E));
  nativePush64(UINT64(txdName));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(flash));
  nativePush64(UINT64(iconType));
  nativePush64(UINT64(sender));
  nativePush64(UINT64(subject));
  nativePush64(PUINT64(@duration)^);
  nativePush64(UINT64(clanTag));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(txdName, textureName: PChar; flash: BOOL; iconType1: cint; sender, subject: PChar; duration: cfloat; clanTag: PChar; iconType2, p9: cint): cint;
begin
  nativeInit(UINT64($531B84E7DA981FB6));
  nativePush64(UINT64(txdName));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(flash));
  nativePush64(UINT64(iconType1));
  nativePush64(UINT64(sender));
  nativePush64(UINT64(subject));
  nativePush64(PUINT64(@duration)^);
  nativePush64(UINT64(clanTag));
  nativePush64(UINT64(iconType2));
  nativePush64(UINT64(p9));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_TICKER(blink, p1: BOOL): cint;
begin
  nativeInit(UINT64($2ED7843F8F801023));
  nativePush64(UINT64(blink));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(blink, p1: BOOL): cint;
begin
  nativeInit(UINT64($44FA03975424A0EE));
  nativePush64(UINT64(blink));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(blink, p1: BOOL): cint;
begin
  nativeInit(UINT64($378E809BF61EC840));
  nativePush64(UINT64(blink));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_AWARD(textureDict, textureName: PChar; rpBonus, colorOverlay: cint; titleLabel: PChar): cint;
begin
  nativeInit(UINT64($AA295B6F28BD587D));
  nativePush64(UINT64(textureDict));
  nativePush64(UINT64(textureName));
  nativePush64(UINT64(rpBonus));
  nativePush64(UINT64(colorOverlay));
  nativePush64(UINT64(titleLabel));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_CREWTAG(p0, p1: BOOL; p2: pcint; p3: cint; isLeader, unk0: BOOL; clanDesc, R, G, B: cint): cint;
begin
  nativeInit(UINT64($97C9E4E7024A8F2C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(isLeader));
  nativePush64(UINT64(unk0));
  nativePush64(UINT64(clanDesc));
  nativePush64(UINT64(R));
  nativePush64(UINT64(G));
  nativePush64(UINT64(B));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(p0, p1: BOOL; p2: pcint; p3: cint; isLeader, unk0: BOOL; clanDesc: cint; playerName: PChar; R, G, B: cint): cint;
begin
  nativeInit(UINT64($137BC35589E34E1E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(isLeader));
  nativePush64(UINT64(unk0));
  nativePush64(UINT64(clanDesc));
  nativePush64(UINT64(playerName));
  nativePush64(UINT64(R));
  nativePush64(UINT64(G));
  nativePush64(UINT64(B));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_UNLOCK(gxtLabel1: PChar; p1: cint; gxtLabel2: PChar): cint;
begin
  nativeInit(UINT64($33EE12743CCD6343));
  nativePush64(UINT64(gxtLabel1));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(gxtLabel2));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(gxtLabel1: PChar; p1: cint; gxtLabel2: PChar; p3: cint): cint;
begin
  nativeInit(UINT64($C8F3AAF93D0600BF));
  nativePush64(UINT64(gxtLabel1));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(gxtLabel2));
  nativePush64(UINT64(p3));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(p0, p1, p2, p3, p4, p5: Any): cint;
begin
  nativeInit(UINT64($7AE0589093A2E088));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_MPTICKER(blink, p1: BOOL): cint;
begin
  nativeInit(UINT64($F020C96915705B3A));
  nativePush64(UINT64(blink));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(p0, p1, p2: PChar; p3, p4: BOOL): cint;
begin
  nativeInit(UINT64($8EFCCF6EC66D85E4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(txdName1, textureName1: PChar; count1: cint; txdName2, textureName2: PChar; count2, hudColor1, hudColor2: cint): cint;
begin
  nativeInit(UINT64($B6871B0555B02996));
  nativePush64(UINT64(txdName1));
  nativePush64(UINT64(textureName1));
  nativePush64(UINT64(count1));
  nativePush64(UINT64(txdName2));
  nativePush64(UINT64(textureName2));
  nativePush64(UINT64(count2));
  nativePush64(UINT64(hudColor1));
  nativePush64(UINT64(hudColor2));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_REPLAY(_type, image: cint; text: PChar): cint;
begin
  nativeInit(UINT64($D202B92CBF1D816F));
  nativePush64(UINT64(_type));
  nativePush64(UINT64(image));
  nativePush64(UINT64(text));
  exit(cint(nativeCall^));
end;

function END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(_type: cint; button, text: PChar): cint;
begin
  nativeInit(UINT64($DD6CB2CCE7C2735C));
  nativePush64(UINT64(_type));
  nativePush64(UINT64(button));
  nativePush64(UINT64(text));
  exit(cint(nativeCall^));
end;

procedure BEGIN_TEXT_COMMAND_PRINT(GxtEntry: PChar);
begin
  nativeInit(UINT64($B87A37EEB7FAA67D));
  nativePush64(UINT64(GxtEntry));
  nativeCall;
end;

procedure END_TEXT_COMMAND_PRINT(duration: cint; drawImmediately: BOOL);
begin
  nativeInit(UINT64($9D77056A530643F6));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(drawImmediately));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(text: PChar);
begin
  nativeInit(UINT64($853648FD1063A213));
  nativePush64(UINT64(text));
  nativeCall;
end;

function END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED: BOOL;
begin
  nativeInit(UINT64($8A9BA1AB3E237613));
  exit(BOOL(nativeCall^));
end;

procedure BEGIN_TEXT_COMMAND_DISPLAY_TEXT(text: PChar);
begin
  nativeInit(UINT64($25FBB336DF1804CB));
  nativePush64(UINT64(text));
  nativeCall;
end;

procedure END_TEXT_COMMAND_DISPLAY_TEXT(x, y: cfloat; p2: cint);
begin
  nativeInit(UINT64($CD015E5BB0D96A57));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(text: PChar);
begin
  nativeInit(UINT64($54CE8AC98E120CAB));
  nativePush64(UINT64(text));
  nativeCall;
end;

function END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(p0: BOOL): cfloat;
begin
  nativeInit(UINT64($85F061DA64ED2F67));
  nativePush64(UINT64(p0));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(entry: PChar);
begin
  nativeInit(UINT64($521FB041D93DD0E4));
  nativePush64(UINT64(entry));
  nativeCall;
end;

function END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y: cfloat): cint;
begin
  nativeInit(UINT64($9040DFB09BE75706));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  exit(cint(nativeCall^));
end;

procedure BEGIN_TEXT_COMMAND_DISPLAY_HELP(inputType: PChar);
begin
  nativeInit(UINT64($8509B634FBE7DA11));
  nativePush64(UINT64(inputType));
  nativeCall;
end;

procedure END_TEXT_COMMAND_DISPLAY_HELP(p0: cint; loop, beep: BOOL; shape: cint);
begin
  nativeInit(UINT64($238FFE5C7B0498A6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(loop));
  nativePush64(UINT64(beep));
  nativePush64(UINT64(shape));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(labelName: PChar);
begin
  nativeInit(UINT64($0A24DA3A41B718F5));
  nativePush64(UINT64(labelName));
  nativeCall;
end;

function END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(p0: cint): BOOL;
begin
  nativeInit(UINT64($10BDDBFC529428DD));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure BEGIN_TEXT_COMMAND_SET_BLIP_NAME(textLabel: PChar);
begin
  nativeInit(UINT64($F9113A30DE5C6670));
  nativePush64(UINT64(textLabel));
  nativeCall;
end;

procedure END_TEXT_COMMAND_SET_BLIP_NAME(para_blip: Blip);
begin
  nativeInit(UINT64($BC38B49BCB83BC9B));
  nativePush64(UINT64(para_blip));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0: PChar);
begin
  nativeInit(UINT64($23D69E0465570028));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(p0: BOOL);
begin
  nativeInit(UINT64($CFDBDF5AE59BA0F4));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_CLEAR_PRINT(text: PChar);
begin
  nativeInit(UINT64($E124FA80A759019C));
  nativePush64(UINT64(text));
  nativeCall;
end;

procedure END_TEXT_COMMAND_CLEAR_PRINT;
begin
  nativeInit(UINT64($FCC75460ABA29378));
  nativeCall;
end;

procedure BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(gxtEntry: PChar);
begin
  nativeInit(UINT64($8F9EE5687F8EECCD));
  nativePush64(UINT64(gxtEntry));
  nativeCall;
end;

procedure END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(p0: cint);
begin
  nativeInit(UINT64($A86911979638106F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_INTEGER(value: cint);
begin
  nativeInit(UINT64($03B504CF259931BC));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_FLOAT(value: cfloat; decimalPlaces: cint);
begin
  nativeInit(UINT64($E7DCB5B874BCD96E));
  nativePush64(PUINT64(@value)^);
  nativePush64(UINT64(decimalPlaces));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(labelName: PChar);
begin
  nativeInit(UINT64($C63CD5D2920ACBE7));
  nativePush64(UINT64(labelName));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(gxtEntryHash: Hash);
begin
  nativeInit(UINT64($17299B63C7683A2B));
  nativePush64(UINT64(gxtEntryHash));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(para_blip: Blip);
begin
  nativeInit(UINT64($80EAD8E2E1D5D52E));
  nativePush64(UINT64(para_blip));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text: PChar);
begin
  nativeInit(UINT64($6C188BE134E074AA));
  nativePush64(UINT64(text));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_TIME(timestamp, flags: cint);
begin
  nativeInit(UINT64($1115F16B8AB9E8BF));
  nativePush64(UINT64(timestamp));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_FORMATTED_INTEGER(value: cint; commaSeparated: BOOL);
begin
  nativeInit(UINT64($0E4C749FF9DE9CC4));
  nativePush64(UINT64(value));
  nativePush64(UINT64(commaSeparated));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(p0: PChar; p1: cint);
begin
  nativeInit(UINT64($761B77454205A61D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(website: PChar);
begin
  nativeInit(UINT64($94CF4AC034C9C986));
  nativePush64(UINT64(website));
  nativeCall;
end;

procedure ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(str: PChar);
begin
  nativeInit(UINT64($5F68520888E69014));
  nativePush64(UINT64(str));
  nativeCall;
end;

procedure SET_COLOUR_OF_NEXT_TEXT_COMPONENT(hudColor: cint);
begin
  nativeInit(UINT64($39BBF623FC803EAC));
  nativePush64(UINT64(hudColor));
  nativeCall;
end;

function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(text: PChar; position, length: cint): PChar;
begin
  nativeInit(UINT64($169BD9382084C8C0));
  nativePush64(UINT64(text));
  nativePush64(UINT64(position));
  nativePush64(UINT64(length));
  exit(PChar(nativeCall^));
end;

function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text: PChar; position, length, maxLength: cint): PChar;
begin
  nativeInit(UINT64($B2798643312205C5));
  nativePush64(UINT64(text));
  nativePush64(UINT64(position));
  nativePush64(UINT64(length));
  nativePush64(UINT64(maxLength));
  exit(PChar(nativeCall^));
end;

function GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(text: PChar; startPosition, endPosition: cint): PChar;
begin
  nativeInit(UINT64($CE94AEBA5D82908A));
  nativePush64(UINT64(text));
  nativePush64(UINT64(startPosition));
  nativePush64(UINT64(endPosition));
  exit(PChar(nativeCall^));
end;

function GET_FILENAME_FOR_AUDIO_CONVERSATION(labelName: PChar): PChar;
begin
  nativeInit(UINT64($7B5280EBA9840C72));
  nativePush64(UINT64(labelName));
  exit(PChar(nativeCall^));
end;

procedure CLEAR_PRINTS;
begin
  nativeInit(UINT64($CC33FA791322B9D9));
  nativeCall;
end;

procedure CLEAR_BRIEF;
begin
  nativeInit(UINT64($9D292F73ADBD9313));
  nativeCall;
end;

procedure CLEAR_ALL_HELP_MESSAGES;
begin
  nativeInit(UINT64($6178F68A87A4D3A0));
  nativeCall;
end;

procedure CLEAR_THIS_PRINT(p0: PChar);
begin
  nativeInit(UINT64($CF708001E1E536DD));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CLEAR_SMALL_PRINTS;
begin
  nativeInit(UINT64($2CEA2839313C09AC));
  nativeCall;
end;

function DOES_TEXT_BLOCK_EXIST(gxt: PChar): BOOL;
begin
  nativeInit(UINT64($1C7302E725259789));
  nativePush64(UINT64(gxt));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_ADDITIONAL_TEXT(gxt: PChar; slot: cint);
begin
  nativeInit(UINT64($71A78003C8E71424));
  nativePush64(UINT64(gxt));
  nativePush64(UINT64(slot));
  nativeCall;
end;

procedure REQUEST_ADDITIONAL_TEXT_FOR_DLC(gxt: PChar; slot: cint);
begin
  nativeInit(UINT64($6009F9F1AE90D8A6));
  nativePush64(UINT64(gxt));
  nativePush64(UINT64(slot));
  nativeCall;
end;

function HAS_ADDITIONAL_TEXT_LOADED(slot: cint): BOOL;
begin
  nativeInit(UINT64($02245FE4BED318B8));
  nativePush64(UINT64(slot));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_ADDITIONAL_TEXT(p0: cint; p1: BOOL);
begin
  nativeInit(UINT64($2A179DF17CCF04CD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_STREAMING_ADDITIONAL_TEXT(p0: cint): BOOL;
begin
  nativeInit(UINT64($8B6817B71B85EBF0));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function HAS_THIS_ADDITIONAL_TEXT_LOADED(gxt: PChar; slot: cint): BOOL;
begin
  nativeInit(UINT64($ADBF060E2B30C5BC));
  nativePush64(UINT64(gxt));
  nativePush64(UINT64(slot));
  exit(BOOL(nativeCall^));
end;

function IS_MESSAGE_BEING_DISPLAYED: BOOL;
begin
  nativeInit(UINT64($7984C03AA5CC2F41));
  exit(BOOL(nativeCall^));
end;

function DOES_TEXT_LABEL_EXIST(gxt: PChar): BOOL;
begin
  nativeInit(UINT64($AC09CA973C564252));
  nativePush64(UINT64(gxt));
  exit(BOOL(nativeCall^));
end;

function GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(str: PChar; length: cint): PChar;
begin
  nativeInit(UINT64($98C3CF913D895111));
  nativePush64(UINT64(str));
  nativePush64(UINT64(length));
  exit(PChar(nativeCall^));
end;

function GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(gxt: PChar): cint;
begin
  nativeInit(UINT64($801BD273D3A23F74));
  nativePush64(UINT64(gxt));
  exit(cint(nativeCall^));
end;

function GET_LENGTH_OF_LITERAL_STRING(str: PChar): cint;
begin
  nativeInit(UINT64($F030907CCBB8A9FD));
  nativePush64(UINT64(str));
  exit(cint(nativeCall^));
end;

function GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(str: PChar): cint;
begin
  nativeInit(UINT64($43E4111189E54F0E));
  nativePush64(UINT64(str));
  exit(cint(nativeCall^));
end;

function GET_STREET_NAME_FROM_HASH_KEY(para_hash: Hash): PChar;
begin
  nativeInit(UINT64($D0EF8A959B8A4CB9));
  nativePush64(UINT64(para_hash));
  exit(PChar(nativeCall^));
end;

function IS_HUD_PREFERENCE_SWITCHED_ON: BOOL;
begin
  nativeInit(UINT64($1930DFA731813EC4));
  exit(BOOL(nativeCall^));
end;

function IS_RADAR_PREFERENCE_SWITCHED_ON: BOOL;
begin
  nativeInit(UINT64($9EB6522EA68F22FE));
  exit(BOOL(nativeCall^));
end;

function IS_SUBTITLE_PREFERENCE_SWITCHED_ON: BOOL;
begin
  nativeInit(UINT64($AD6DACA4BA53E0A4));
  exit(BOOL(nativeCall^));
end;

procedure DISPLAY_HUD(toggle: BOOL);
begin
  nativeInit(UINT64($A6294919E56FF02A));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME;
begin
  nativeInit(UINT64($7669F9E39DC17063));
  nativeCall;
end;

procedure DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME;
begin
  nativeInit(UINT64($402F9ED62087E898));
  nativeCall;
end;

procedure DISPLAY_RADAR(toggle: BOOL);
begin
  nativeInit(UINT64($A0EBB943C300E693));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FAKE_SPECTATOR_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($CD74233600C4EA6B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_FAKE_SPECTATOR_MODE: BOOL;
begin
  nativeInit(UINT64($C2D2AD9EAAE265B8));
  exit(BOOL(nativeCall^));
end;

function IS_HUD_HIDDEN: BOOL;
begin
  nativeInit(UINT64($A86478C6958735C5));
  exit(BOOL(nativeCall^));
end;

function IS_RADAR_HIDDEN: BOOL;
begin
  nativeInit(UINT64($157F93B036700462));
  exit(BOOL(nativeCall^));
end;

function IS_MINIMAP_RENDERING: BOOL;
begin
  nativeInit(UINT64($AF754F20EB5CD51A));
  exit(BOOL(nativeCall^));
end;

procedure USE_VEHICLE_TARGETING_RETICULE(p0: Any);
begin
  nativeInit(UINT64($0C698D8F099174C7));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES(enable: BOOL);
begin
  nativeInit(UINT64($1BC0EA2912708625));
  nativePush64(UINT64(enable));
  nativeCall;
end;

procedure ADD_VALID_VEHICLE_HIT_HASH(p0: Any);
begin
  nativeInit(UINT64($E4C3B169876D33D7));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CLEAR_VALID_VEHICLE_HIT_HASHES;
begin
  nativeInit(UINT64($EB81A3DADD503187));
  nativeCall;
end;

procedure SET_BLIP_ROUTE(para_blip: Blip; enabled: BOOL);
begin
  nativeInit(UINT64($4F7D8A9BFB0B43E9));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure CLEAR_ALL_BLIP_ROUTES;
begin
  nativeInit(UINT64($D12882D3FF82BF11));
  nativeCall;
end;

procedure SET_BLIP_ROUTE_COLOUR(para_blip: Blip; colour: cint);
begin
  nativeInit(UINT64($837155CD2F63DA09));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(colour));
  nativeCall;
end;

procedure SET_FORCE_SHOW_GPS(toggle: BOOL);
begin
  nativeInit(UINT64($2790F4B17D098E26));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_USE_SET_DESTINATION_IN_PAUSE_MAP(toggle: BOOL);
begin
  nativeInit(UINT64($6CDD58146A436083));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLOCK_WANTED_FLASH(disabled: BOOL);
begin
  nativeInit(UINT64($D1942374085C8469));
  nativePush64(UINT64(disabled));
  nativeCall;
end;

procedure ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(p0: BOOL);
begin
  nativeInit(UINT64($60296AF4BA14ABC5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(p0: cint);
begin
  nativeInit(UINT64($57D760D55F54E071));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_RADAR_ZOOM_PRECISE(zoom: cfloat);
begin
  nativeInit(UINT64($BD12C5EEE184C337));
  nativePush64(PUINT64(@zoom)^);
  nativeCall;
end;

procedure SET_RADAR_ZOOM(zoomLevel: cint);
begin
  nativeInit(UINT64($096EF57A0C999BBA));
  nativePush64(UINT64(zoomLevel));
  nativeCall;
end;

procedure SET_RADAR_ZOOM_TO_BLIP(para_blip: Blip; zoom: cfloat);
begin
  nativeInit(UINT64($F98E4B3E56AFC7B1));
  nativePush64(UINT64(para_blip));
  nativePush64(PUINT64(@zoom)^);
  nativeCall;
end;

procedure SET_RADAR_ZOOM_TO_DISTANCE(zoom: cfloat);
begin
  nativeInit(UINT64($CB7CC0D58405AD41));
  nativePush64(PUINT64(@zoom)^);
  nativeCall;
end;

procedure UPDATE_RADAR_ZOOM_TO_BLIP;
begin
  nativeInit(UINT64($D2049635DEB9C375));
  nativeCall;
end;

procedure GET_HUD_COLOUR(hudColorIndex: cint; r, g, b, a: pcint);
begin
  nativeInit(UINT64($7C9C91AB74A0360F));
  nativePush64(UINT64(hudColorIndex));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativeCall;
end;

procedure SET_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a: cint);
begin
  nativeInit(UINT64($D68A5FF8A3A89874));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativeCall;
end;

procedure SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(r, g, b, a: cint);
begin
  nativeInit(UINT64($16A304E6CB2BFAB9));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativeCall;
end;

procedure REPLACE_HUD_COLOUR(hudColorIndex, hudColorIndex2: cint);
begin
  nativeInit(UINT64($1CCC708F0F850613));
  nativePush64(UINT64(hudColorIndex));
  nativePush64(UINT64(hudColorIndex2));
  nativeCall;
end;

procedure REPLACE_HUD_COLOUR_WITH_RGBA(hudColorIndex, r, g, b, a: cint);
begin
  nativeInit(UINT64($F314CF4F0211894E));
  nativePush64(UINT64(hudColorIndex));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativeCall;
end;

procedure SET_ABILITY_BAR_VISIBILITY(visible: BOOL);
begin
  nativeInit(UINT64($1DFEDD15019315A9));
  nativePush64(UINT64(visible));
  nativeCall;
end;

procedure SET_ALLOW_ABILITY_BAR(toggle: BOOL);
begin
  nativeInit(UINT64($889329C80FE5963C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FLASH_ABILITY_BAR(millisecondsToFlash: cint);
begin
  nativeInit(UINT64($02CFBA0C9E9275CE));
  nativePush64(UINT64(millisecondsToFlash));
  nativeCall;
end;

procedure SET_ABILITY_BAR_VALUE(p0, p1: cfloat);
begin
  nativeInit(UINT64($9969599CCFF5D85E));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure FLASH_WANTED_DISPLAY(p0: BOOL);
begin
  nativeInit(UINT64($A18AFB39081B6A1F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure FORCE_OFF_WANTED_STAR_FLASH(toggle: BOOL);
begin
  nativeInit(UINT64($BA8D65C1C65702E5));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CUSTOM_MP_HUD_COLOR(hudColorId: cint);
begin
  nativeInit(UINT64($2ACCB195F3CCD9DE));
  nativePush64(UINT64(hudColorId));
  nativeCall;
end;

function GET_RENDERED_CHARACTER_HEIGHT(size: cfloat; font: cint): cfloat;
begin
  nativeInit(UINT64($DB88A37483346780));
  nativePush64(PUINT64(@size)^);
  nativePush64(UINT64(font));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_TEXT_SCALE(scale, size: cfloat);
begin
  nativeInit(UINT64($07C837F9A01C34C9));
  nativePush64(PUINT64(@scale)^);
  nativePush64(PUINT64(@size)^);
  nativeCall;
end;

procedure SET_TEXT_COLOUR(red, green, blue, alpha: cint);
begin
  nativeInit(UINT64($BE6B23FFA53FB442));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure SET_TEXT_CENTRE(align: BOOL);
begin
  nativeInit(UINT64($C02F4DBFB51D988B));
  nativePush64(UINT64(align));
  nativeCall;
end;

procedure SET_TEXT_RIGHT_JUSTIFY(toggle: BOOL);
begin
  nativeInit(UINT64($6B3C4650BC8BEE47));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_TEXT_JUSTIFICATION(justifyType: cint);
begin
  nativeInit(UINT64($4E096588B13FFECA));
  nativePush64(UINT64(justifyType));
  nativeCall;
end;

procedure SET_TEXT_LINE_HEIGHT_MULT(lineHeightMult: cfloat);
begin
  nativeInit(UINT64($9F4624F76E6953D1));
  nativePush64(PUINT64(@lineHeightMult)^);
  nativeCall;
end;

procedure SET_TEXT_WRAP(start, _end: cfloat);
begin
  nativeInit(UINT64($63145D9C883A1A70));
  nativePush64(PUINT64(@start)^);
  nativePush64(PUINT64(@_end)^);
  nativeCall;
end;

procedure SET_TEXT_LEADING(p0: cint);
begin
  nativeInit(UINT64($A50ABC31E3CDFAFF));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_TEXT_PROPORTIONAL(p0: BOOL);
begin
  nativeInit(UINT64($038C1F517D7FDCF8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_TEXT_FONT(fontType: cint);
begin
  nativeInit(UINT64($66E0276CC5F6B9DA));
  nativePush64(UINT64(fontType));
  nativeCall;
end;

procedure SET_TEXT_DROP_SHADOW;
begin
  nativeInit(UINT64($1CA3E9EAC9D93E5E));
  nativeCall;
end;

procedure SET_TEXT_DROPSHADOW(distance, r, g, b, a: cint);
begin
  nativeInit(UINT64($465C84BC39F1C351));
  nativePush64(UINT64(distance));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativeCall;
end;

procedure SET_TEXT_OUTLINE;
begin
  nativeInit(UINT64($2513DFB0FB8400FE));
  nativeCall;
end;

procedure SET_TEXT_EDGE(p0, r, g, b, a: cint);
begin
  nativeInit(UINT64($441603240D202FA6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(a));
  nativeCall;
end;

procedure SET_TEXT_RENDER_ID(renderId: cint);
begin
  nativeInit(UINT64($5F15302936E07111));
  nativePush64(UINT64(renderId));
  nativeCall;
end;

function GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID: cint;
begin
  nativeInit(UINT64($52F0982D7FD156B6));
  exit(cint(nativeCall^));
end;

function REGISTER_NAMED_RENDERTARGET(name: PChar; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($57D9C12635E25CE3));
  nativePush64(UINT64(name));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function IS_NAMED_RENDERTARGET_REGISTERED(name: PChar): BOOL;
begin
  nativeInit(UINT64($78DCDC15C9F116B4));
  nativePush64(UINT64(name));
  exit(BOOL(nativeCall^));
end;

function RELEASE_NAMED_RENDERTARGET(name: PChar): BOOL;
begin
  nativeInit(UINT64($E9F6FFE837354DD4));
  nativePush64(UINT64(name));
  exit(BOOL(nativeCall^));
end;

procedure LINK_NAMED_RENDERTARGET(modelHash: Hash);
begin
  nativeInit(UINT64($F6C09E276AEB3F2D));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

function GET_NAMED_RENDERTARGET_RENDER_ID(name: PChar): cint;
begin
  nativeInit(UINT64($1A6478B61C6BDC3B));
  nativePush64(UINT64(name));
  exit(cint(nativeCall^));
end;

function IS_NAMED_RENDERTARGET_LINKED(modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($113750538FA31298));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_HELP(toggle: BOOL);
begin
  nativeInit(UINT64($8DFCED7A656F8802));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_HELP_MESSAGE_ON_SCREEN: BOOL;
begin
  nativeInit(UINT64($DAD37F45428801AE));
  exit(BOOL(nativeCall^));
end;

function HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME: BOOL;
begin
  nativeInit(UINT64($214CD562A939246A));
  exit(BOOL(nativeCall^));
end;

function IS_HELP_MESSAGE_BEING_DISPLAYED: BOOL;
begin
  nativeInit(UINT64($4D79439A6B55AC67));
  exit(BOOL(nativeCall^));
end;

function IS_HELP_MESSAGE_FADING_OUT: BOOL;
begin
  nativeInit(UINT64($327EDEEEAC55C369));
  exit(BOOL(nativeCall^));
end;

procedure SET_HELP_MESSAGE_STYLE(style, hudColor, alpha, p3, p4: cint);
begin
  nativeInit(UINT64($B9C362BABECDDC7A));
  nativePush64(UINT64(style));
  nativePush64(UINT64(hudColor));
  nativePush64(UINT64(alpha));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

function GET_STANDARD_BLIP_ENUM_ID: cint;
begin
  nativeInit(UINT64($4A9923385BDB9DAD));
  exit(cint(nativeCall^));
end;

function GET_WAYPOINT_BLIP_ENUM_ID: cint;
begin
  nativeInit(UINT64($186E5D252FA50E7D));
  exit(cint(nativeCall^));
end;

function GET_NUMBER_OF_ACTIVE_BLIPS: cint;
begin
  nativeInit(UINT64($9A3FF3DE163034E8));
  exit(cint(nativeCall^));
end;

function GET_NEXT_BLIP_INFO_ID(blipSprite: cint): Blip;
begin
  nativeInit(UINT64($14F96AA50D6FBEA7));
  nativePush64(UINT64(blipSprite));
  exit(Blip(nativeCall^));
end;

function GET_FIRST_BLIP_INFO_ID(blipSprite: cint): Blip;
begin
  nativeInit(UINT64($1BEDE233E6CD2A1F));
  nativePush64(UINT64(blipSprite));
  exit(Blip(nativeCall^));
end;

function GET_CLOSEST_BLIP_INFO_ID(blipSprite: cint): Blip;
begin
  nativeInit(UINT64($D484BF71050CA1EE));
  nativePush64(UINT64(blipSprite));
  exit(Blip(nativeCall^));
end;

function GET_BLIP_INFO_ID_COORD(para_blip: Blip): Vector3;
begin
  nativeInit(UINT64($FA7C7F0AADF25D09));
  nativePush64(UINT64(para_blip));
  exit(PVector3(nativeCall)^);
end;

function GET_BLIP_INFO_ID_DISPLAY(para_blip: Blip): cint;
begin
  nativeInit(UINT64($1E314167F701DC3B));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

function GET_BLIP_INFO_ID_TYPE(para_blip: Blip): cint;
begin
  nativeInit(UINT64($BE9B0959FFD0779B));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

function GET_BLIP_INFO_ID_ENTITY_INDEX(para_blip: Blip): Entity;
begin
  nativeInit(UINT64($4BA4E2553AFEDC2C));
  nativePush64(UINT64(para_blip));
  exit(Entity(nativeCall^));
end;

function GET_BLIP_INFO_ID_PICKUP_INDEX(para_blip: Blip): Pickup;
begin
  nativeInit(UINT64($9B6786E4C03DD382));
  nativePush64(UINT64(para_blip));
  exit(Pickup(nativeCall^));
end;

function GET_BLIP_FROM_ENTITY(para_entity: Entity): Blip;
begin
  nativeInit(UINT64($BC8DBDCA2436F7E8));
  nativePush64(UINT64(para_entity));
  exit(Blip(nativeCall^));
end;

function ADD_BLIP_FOR_RADIUS(posX, posY, posZ, radius: cfloat): Blip;
begin
  nativeInit(UINT64($46818D79B1F7499A));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@radius)^);
  exit(Blip(nativeCall^));
end;

function ADD_BLIP_FOR_AREA(x, y, z, width, height: cfloat): Blip;
begin
  nativeInit(UINT64($CE5D0E5E315DB238));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@height)^);
  exit(Blip(nativeCall^));
end;

function ADD_BLIP_FOR_ENTITY(para_entity: Entity): Blip;
begin
  nativeInit(UINT64($5CDE92C702A8FCE7));
  nativePush64(UINT64(para_entity));
  exit(Blip(nativeCall^));
end;

function ADD_BLIP_FOR_PICKUP(para_pickup: Pickup): Blip;
begin
  nativeInit(UINT64($BE339365C863BD36));
  nativePush64(UINT64(para_pickup));
  exit(Blip(nativeCall^));
end;

function ADD_BLIP_FOR_COORD(x, y, z: cfloat): Blip;
begin
  nativeInit(UINT64($5A039BB0BCA604B6));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(Blip(nativeCall^));
end;

procedure TRIGGER_SONAR_BLIP(posX, posY, posZ, radius: cfloat; p4: cint);
begin
  nativeInit(UINT64($72DD432F3CDFC0EE));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure ALLOW_SONAR_BLIPS(toggle: BOOL);
begin
  nativeInit(UINT64($60734CC207C9833C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_COORDS(para_blip: Blip; posX, posY, posZ: cfloat);
begin
  nativeInit(UINT64($AE2AF67E9D9AF65D));
  nativePush64(UINT64(para_blip));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativeCall;
end;

function GET_BLIP_COORDS(para_blip: Blip): Vector3;
begin
  nativeInit(UINT64($586AFE3FF72D996E));
  nativePush64(UINT64(para_blip));
  exit(PVector3(nativeCall)^);
end;

procedure SET_BLIP_SPRITE(para_blip: Blip; spriteId: cint);
begin
  nativeInit(UINT64($DF735600A4696DAF));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(spriteId));
  nativeCall;
end;

function GET_BLIP_SPRITE(para_blip: Blip): cint;
begin
  nativeInit(UINT64($1FC877464A04FC4F));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

procedure SET_COP_BLIP_SPRITE(p0: cint; p1: cfloat);
begin
  nativeInit(UINT64($9FCB3CBFB3EAD69A));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_COP_BLIP_SPRITE_AS_STANDARD;
begin
  nativeInit(UINT64($B7B873520C84C118));
  nativeCall;
end;

procedure SET_BLIP_NAME_FROM_TEXT_FILE(para_blip: Blip; gxtEntry: PChar);
begin
  nativeInit(UINT64($EAA0FFE120D92784));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(gxtEntry));
  nativeCall;
end;

procedure SET_BLIP_NAME_TO_PLAYER_NAME(para_blip: Blip; plyr: Player);
begin
  nativeInit(UINT64($127DE7B20C60A6A3));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_BLIP_ALPHA(para_blip: Blip; alpha: cint);
begin
  nativeInit(UINT64($45FF974EEE1C8734));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

function GET_BLIP_ALPHA(para_blip: Blip): cint;
begin
  nativeInit(UINT64($970F608F0EE6C885));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

procedure SET_BLIP_FADE(para_blip: Blip; opacity, duration: cint);
begin
  nativeInit(UINT64($2AEE8F8390D2298C));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(opacity));
  nativePush64(UINT64(duration));
  nativeCall;
end;

function GET_BLIP_FADE_DIRECTION(para_blip: Blip): cint;
begin
  nativeInit(UINT64($2C173AE2BDB9385E));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

procedure SET_BLIP_ROTATION(para_blip: Blip; rotation: cint);
begin
  nativeInit(UINT64($F87683CDF73C3F6E));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(rotation));
  nativeCall;
end;

procedure SET_BLIP_ROTATION_WITH_FLOAT(para_blip: Blip; heading: cfloat);
begin
  nativeInit(UINT64($A8B6AFDAC320AC87));
  nativePush64(UINT64(para_blip));
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

function GET_BLIP_ROTATION(para_blip: Blip): cint;
begin
  nativeInit(UINT64($003E92BA477F9D7F));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

procedure SET_BLIP_FLASH_TIMER(para_blip: Blip; duration: cint);
begin
  nativeInit(UINT64($D3CD6FD297AE87CC));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure SET_BLIP_FLASH_INTERVAL(para_blip: Blip; p1: Any);
begin
  nativeInit(UINT64($AA51DB313C010A7E));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_BLIP_COLOUR(para_blip: Blip; color: cint);
begin
  nativeInit(UINT64($03D7FB09E75D6B7E));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure SET_BLIP_SECONDARY_COLOUR(para_blip: Blip; r, g, b: cint);
begin
  nativeInit(UINT64($14892474891E09EB));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

function GET_BLIP_COLOUR(para_blip: Blip): cint;
begin
  nativeInit(UINT64($DF729E8D20CF7327));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

function GET_BLIP_HUD_COLOUR(para_blip: Blip): cint;
begin
  nativeInit(UINT64($729B5F1EFBC0AAEE));
  nativePush64(UINT64(para_blip));
  exit(cint(nativeCall^));
end;

function IS_BLIP_SHORT_RANGE(para_blip: Blip): BOOL;
begin
  nativeInit(UINT64($DA5F8727EB75B926));
  nativePush64(UINT64(para_blip));
  exit(BOOL(nativeCall^));
end;

function IS_BLIP_ON_MINIMAP(para_blip: Blip): BOOL;
begin
  nativeInit(UINT64($E41CA53051197A27));
  nativePush64(UINT64(para_blip));
  exit(BOOL(nativeCall^));
end;

function DOES_BLIP_HAVE_GPS_ROUTE(para_blip: Blip): BOOL;
begin
  nativeInit(UINT64($DD2238F57B977751));
  nativePush64(UINT64(para_blip));
  exit(BOOL(nativeCall^));
end;

procedure SET_BLIP_HIDDEN_ON_LEGEND(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($54318C915D27E4CE));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_HIGH_DETAIL(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($E2590BC29220CEBB));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_AS_MISSION_CREATOR_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($24AC0137444F9FD5));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_MISSION_CREATOR_BLIP(para_blip: Blip): BOOL;
begin
  nativeInit(UINT64($26F49BF3381D933D));
  nativePush64(UINT64(para_blip));
  exit(BOOL(nativeCall^));
end;

function GET_NEW_SELECTED_MISSION_CREATOR_BLIP: Blip;
begin
  nativeInit(UINT64($5C90988E7C8E1AF4));
  exit(Blip(nativeCall^));
end;

function IS_HOVERING_OVER_MISSION_CREATOR_BLIP: BOOL;
begin
  nativeInit(UINT64($4167EFE0527D706E));
  exit(BOOL(nativeCall^));
end;

procedure SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(toggle: BOOL);
begin
  nativeInit(UINT64($F1A6C18B35BCADE6));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_CONTACT_INSTRUCTIONAL_BUTTON(toggle: BOOL);
begin
  nativeInit(UINT64($C772A904CDE1186F));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure RELOAD_MAP_MENU;
begin
  nativeInit(UINT64($2916A928514C9827));
  nativeCall;
end;

procedure SET_BLIP_MARKER_LONG_DISTANCE(p0, p1: Any);
begin
  nativeInit(UINT64($B552929B85FC27EC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_BLIP_FLASHES(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($B14552383D39CE3E));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_FLASHES_ALTERNATE(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($2E8D9498C56DD0D1));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_BLIP_FLASHING(para_blip: Blip): BOOL;
begin
  nativeInit(UINT64($A5E41FD83AD6CEF0));
  nativePush64(UINT64(para_blip));
  exit(BOOL(nativeCall^));
end;

procedure SET_BLIP_AS_SHORT_RANGE(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($BE8BE4FE60E27B72));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_SCALE(para_blip: Blip; scale: cfloat);
begin
  nativeInit(UINT64($D38744167B2FA257));
  nativePush64(UINT64(para_blip));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_BLIP_SCALE_2D(para_blip: Blip; xScale, yScale: cfloat);
begin
  nativeInit(UINT64($CD6524439909C979));
  nativePush64(UINT64(para_blip));
  nativePush64(PUINT64(@xScale)^);
  nativePush64(PUINT64(@yScale)^);
  nativeCall;
end;

procedure SET_BLIP_PRIORITY(para_blip: Blip; priority: cint);
begin
  nativeInit(UINT64($AE9FC9EF6A9FAC79));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(priority));
  nativeCall;
end;

procedure SET_BLIP_DISPLAY(para_blip: Blip; displayId: cint);
begin
  nativeInit(UINT64($9029B2F3DA924928));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(displayId));
  nativeCall;
end;

procedure SET_BLIP_CATEGORY(para_blip: Blip; index: cint);
begin
  nativeInit(UINT64($234CDD44D996FD9A));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure REMOVE_BLIP(blip: PBlip);
begin
  nativeInit(UINT64($86A652570E5F25DD));
  nativePush64(UINT64(blip));
  nativeCall;
end;

procedure SET_BLIP_AS_FRIENDLY(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($6F6F290102C02AB4));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure PULSE_BLIP(para_blip: Blip);
begin
  nativeInit(UINT64($742D6FD43115AF73));
  nativePush64(UINT64(para_blip));
  nativeCall;
end;

procedure SHOW_NUMBER_ON_BLIP(para_blip: Blip; number: cint);
begin
  nativeInit(UINT64($A3C0B359DCB848B6));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(number));
  nativeCall;
end;

procedure HIDE_NUMBER_ON_BLIP(para_blip: Blip);
begin
  nativeInit(UINT64($532CFF637EF80148));
  nativePush64(UINT64(para_blip));
  nativeCall;
end;

procedure SHOW_HEIGHT_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($75A16C3DA34F1245));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_TICK_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($74513EA3E505181E));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_GOLD_TICK_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($CAC2031EBF79B1A8));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_FOR_SALE_ICON_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($19BD6E3C0E16A8FA));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_HEADING_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($5FBCA48327B914DF));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_OUTLINE_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($B81656BC81FE24D1));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_FRIEND_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($23C3EB807312F01A));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_CREW_INDICATOR_ON_BLIP(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($DCFB5D4DB8BF367E));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($C4278F70131BAA6D));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_SHORT_HEIGHT_THRESHOLD(p0, p1: Any);
begin
  nativeInit(UINT64($4B5B620C9B59ED34));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(para_blip: Blip; p1: Any);
begin
  nativeInit(UINT64($2C9F302398E13141));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_BLIP_AS_MINIMAL_ON_EDGE(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($2B6D467DAB714E8D));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RADIUS_BLIP_EDGE(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($25615540D894B814));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function DOES_BLIP_EXIST(para_blip: Blip): BOOL;
begin
  nativeInit(UINT64($A6DB27D19ECBB7DA));
  nativePush64(UINT64(para_blip));
  exit(BOOL(nativeCall^));
end;

procedure SET_WAYPOINT_OFF;
begin
  nativeInit(UINT64($A7E4E2D361C2627F));
  nativeCall;
end;

procedure DELETE_WAYPOINTS_FROM_THIS_PLAYER;
begin
  nativeInit(UINT64($D8E694757BCEA8E9));
  nativeCall;
end;

procedure REFRESH_WAYPOINT;
begin
  nativeInit(UINT64($81FA173F170560D1));
  nativeCall;
end;

function IS_WAYPOINT_ACTIVE: BOOL;
begin
  nativeInit(UINT64($1DD1F58F493F1DA5));
  exit(BOOL(nativeCall^));
end;

procedure SET_NEW_WAYPOINT(x, y: cfloat);
begin
  nativeInit(UINT64($FE43368D2AA4F2FC));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativeCall;
end;

procedure SET_BLIP_BRIGHT(para_blip: Blip; toggle: BOOL);
begin
  nativeInit(UINT64($B203913733F27884));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BLIP_SHOW_CONE(para_blip: Blip; toggle: BOOL; hudColorIndex: cint);
begin
  nativeInit(UINT64($13127EC3665E8EE1));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(hudColorIndex));
  nativeCall;
end;

procedure REMOVE_COP_BLIP_FROM_PED(_ped: Ped);
begin
  nativeInit(UINT64($C594B315EDF2D4AF));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SETUP_FAKE_CONE_DATA(para_blip: Blip; p1, p2, p3, p4, p5, p6: cfloat; p7: Any; p8: cint);
begin
  nativeInit(UINT64($F83D0FEBE75E62C9));
  nativePush64(UINT64(para_blip));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure REMOVE_FAKE_CONE_DATA(para_blip: Blip);
begin
  nativeInit(UINT64($35A3CD97B2C0A6D2));
  nativePush64(UINT64(para_blip));
  nativeCall;
end;

procedure CLEAR_FAKE_CONE_ARRAY;
begin
  nativeInit(UINT64($8410C5E0CD847B9D));
  nativeCall;
end;

procedure _SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE(para_blip: Blip; blipChangeParam46: cint; blipChangeParam47: BOOL);
begin
  nativeInit(UINT64($25D984CFB64ED6DE));
  nativePush64(UINT64(para_blip));
  nativePush64(UINT64(blipChangeParam46));
  nativePush64(UINT64(blipChangeParam47));
  nativeCall;
end;

function SET_MINIMAP_COMPONENT(componentId: cint; toggle: BOOL; overrideColor: cint): BOOL;
begin
  nativeInit(UINT64($75A9A10948D1DEA6));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(overrideColor));
  exit(BOOL(nativeCall^));
end;

procedure SET_MINIMAP_SONAR_SWEEP(toggle: BOOL);
begin
  nativeInit(UINT64($6B50FC8749632EC1));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHOW_ACCOUNT_PICKER;
begin
  nativeInit(UINT64($60E892BA4F5BDCA4));
  nativeCall;
end;

function GET_MAIN_PLAYER_BLIP_ID: Blip;
begin
  nativeInit(UINT64($DCD4EC3F419D02FA));
  exit(Blip(nativeCall^));
end;

procedure SET_PM_WARNINGSCREEN_ACTIVE(p0: BOOL);
begin
  nativeInit(UINT64($41350B4FC28E3941));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure HIDE_LOADING_ON_FADE_THIS_FRAME;
begin
  nativeInit(UINT64($4B0311D3CDC4648F));
  nativeCall;
end;

procedure SET_RADAR_AS_INTERIOR_THIS_FRAME(interior: Hash; x, y: cfloat; z, zoom: cint);
begin
  nativeInit(UINT64($59E727A1C9D3E31A));
  nativePush64(UINT64(interior));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(UINT64(z));
  nativePush64(UINT64(zoom));
  nativeCall;
end;

procedure SET_INSIDE_VERY_SMALL_INTERIOR(toggle: BOOL);
begin
  nativeInit(UINT64($504DFE62A1692296));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_INSIDE_VERY_LARGE_INTERIOR(toggle: BOOL);
begin
  nativeInit(UINT64($7EC8ABA5E74B3D7A));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RADAR_AS_EXTERIOR_THIS_FRAME;
begin
  nativeInit(UINT64($E81B7D2A3DAB2D81));
  nativeCall;
end;

procedure SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(x, y: cfloat);
begin
  nativeInit(UINT64($77E2DD177910E1CF));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativeCall;
end;

procedure SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(x, y: cfloat; p2: Any);
begin
  nativeInit(UINT64($A17784FCA9548D15));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_PAUSEMAP_IN_INTERIOR_MODE: BOOL;
begin
  nativeInit(UINT64($9049FE339D5F6F6F));
  exit(BOOL(nativeCall^));
end;

procedure HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME;
begin
  nativeInit(UINT64($5FBAE526203990C9));
  nativeCall;
end;

procedure HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME;
begin
  nativeInit(UINT64($20FE7FDFEEAD38C0));
  nativeCall;
end;

procedure SET_USE_ISLAND_MAP(toggle: BOOL);
begin
  nativeInit(UINT64($5E1460624D194A38));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure _SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR;
begin
  nativeInit(UINT64($35CCE12EAECB4A51));
  nativeCall;
end;

procedure DONT_TILT_MINIMAP_THIS_FRAME;
begin
  nativeInit(UINT64($6D14BFDC33B34F55));
  nativeCall;
end;

procedure DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME;
begin
  nativeInit(UINT64($89DA85D949CE57A0));
  nativeCall;
end;

procedure DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME;
begin
  nativeInit(UINT64($55F5A5F07134DE60));
  nativeCall;
end;

procedure SET_WIDESCREEN_FORMAT(p0: Any);
begin
  nativeInit(UINT64($C3B07BA00A83B0F1));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DISPLAY_AREA_NAME(toggle: BOOL);
begin
  nativeInit(UINT64($276B6CE369C33678));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISPLAY_CASH(toggle: BOOL);
begin
  nativeInit(UINT64($96DEC8D5430208B7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure USE_FAKE_MP_CASH(toggle: BOOL);
begin
  nativeInit(UINT64($170F541E1CADD1DE));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CHANGE_FAKE_MP_CASH(cash, bank: cint);
begin
  nativeInit(UINT64($0772DF77852C2E30));
  nativePush64(UINT64(cash));
  nativePush64(UINT64(bank));
  nativeCall;
end;

procedure DISPLAY_AMMO_THIS_FRAME(display: BOOL);
begin
  nativeInit(UINT64($A5E78BA2B1331C55));
  nativePush64(UINT64(display));
  nativeCall;
end;

procedure DISPLAY_SNIPER_SCOPE_THIS_FRAME;
begin
  nativeInit(UINT64($73115226F4814E62));
  nativeCall;
end;

procedure HIDE_HUD_AND_RADAR_THIS_FRAME;
begin
  nativeInit(UINT64($719FF505F097FD20));
  nativeCall;
end;

procedure ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(allow: BOOL);
begin
  nativeInit(UINT64($E67C6DFD386EA5E7));
  nativePush64(UINT64(allow));
  nativeCall;
end;

procedure SET_MULTIPLAYER_WALLET_CASH;
begin
  nativeInit(UINT64($C2D15BEF167E27BC));
  nativeCall;
end;

procedure REMOVE_MULTIPLAYER_WALLET_CASH;
begin
  nativeInit(UINT64($95CF81BD06EE1887));
  nativeCall;
end;

procedure SET_MULTIPLAYER_BANK_CASH;
begin
  nativeInit(UINT64($DD21B55DF695CD0A));
  nativeCall;
end;

procedure REMOVE_MULTIPLAYER_BANK_CASH;
begin
  nativeInit(UINT64($C7C6789AA1CFEDD0));
  nativeCall;
end;

procedure SET_MULTIPLAYER_HUD_CASH(p0: cint; p1: BOOL);
begin
  nativeInit(UINT64($FD1D220394BCB824));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_MULTIPLAYER_HUD_CASH;
begin
  nativeInit(UINT64($968F270E39141ECA));
  nativeCall;
end;

procedure HIDE_HELP_TEXT_THIS_FRAME;
begin
  nativeInit(UINT64($D46923FC481CA285));
  nativeCall;
end;

function IS_IME_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($801879A9B4F4B2FB));
  exit(BOOL(nativeCall^));
end;

procedure DISPLAY_HELP_TEXT_THIS_FRAME(message: PChar; p1: BOOL);
begin
  nativeInit(UINT64($960C9FF8F616E41C));
  nativePush64(UINT64(message));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure HUD_FORCE_WEAPON_WHEEL(show: BOOL);
begin
  nativeInit(UINT64($EB354E5376BC81A7));
  nativePush64(UINT64(show));
  nativeCall;
end;

procedure HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL;
begin
  nativeInit(UINT64($488043841BBE156F));
  nativeCall;
end;

procedure HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME;
begin
  nativeInit(UINT64($0AFC4AF510774B47));
  nativeCall;
end;

function HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED: Hash;
begin
  nativeInit(UINT64($A48931185F0536FE));
  exit(Hash(nativeCall^));
end;

procedure HUD_SET_WEAPON_WHEEL_TOP_SLOT(weaponHash: Hash);
begin
  nativeInit(UINT64($72C1056D678BB7D8));
  nativePush64(UINT64(weaponHash));
  nativeCall;
end;

function HUD_GET_WEAPON_WHEEL_TOP_SLOT(weaponTypeIndex: cint): Hash;
begin
  nativeInit(UINT64($A13E93403F26C812));
  nativePush64(UINT64(weaponTypeIndex));
  exit(Hash(nativeCall^));
end;

procedure HUD_SHOWING_CHARACTER_SWITCH_SELECTION(toggle: BOOL);
begin
  nativeInit(UINT64($14C9FDCC41F81F63));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_GPS_FLAGS(p0: cint; p1: cfloat);
begin
  nativeInit(UINT64($5B440763A4C8D15B));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure CLEAR_GPS_FLAGS;
begin
  nativeInit(UINT64($21986729D6A3A830));
  nativeCall;
end;

procedure SET_RACE_TRACK_RENDER(toggle: BOOL);
begin
  nativeInit(UINT64($1EAC5F91BCBC5073));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CLEAR_GPS_RACE_TRACK;
begin
  nativeInit(UINT64($7AA5B4CE533C858B));
  nativeCall;
end;

procedure START_GPS_CUSTOM_ROUTE(hudColor: cint; displayOnFoot, followPlayer: BOOL);
begin
  nativeInit(UINT64($DB34E8D56FC13B08));
  nativePush64(UINT64(hudColor));
  nativePush64(UINT64(displayOnFoot));
  nativePush64(UINT64(followPlayer));
  nativeCall;
end;

procedure ADD_POINT_TO_GPS_CUSTOM_ROUTE(x, y, z: cfloat);
begin
  nativeInit(UINT64($311438A071DD9B1A));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_GPS_CUSTOM_ROUTE_RENDER(toggle: BOOL; radarThickness, mapThickness: cint);
begin
  nativeInit(UINT64($900086F371220B6F));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(radarThickness));
  nativePush64(UINT64(mapThickness));
  nativeCall;
end;

procedure CLEAR_GPS_CUSTOM_ROUTE;
begin
  nativeInit(UINT64($E6DE0561D9232A64));
  nativeCall;
end;

procedure START_GPS_MULTI_ROUTE(hudColor: cint; routeFromPlayer, displayOnFoot: BOOL);
begin
  nativeInit(UINT64($3D3D15AF7BCAAF83));
  nativePush64(UINT64(hudColor));
  nativePush64(UINT64(routeFromPlayer));
  nativePush64(UINT64(displayOnFoot));
  nativeCall;
end;

procedure ADD_POINT_TO_GPS_MULTI_ROUTE(x, y, z: cfloat);
begin
  nativeInit(UINT64($A905192A6781C41B));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_GPS_MULTI_ROUTE_RENDER(toggle: BOOL);
begin
  nativeInit(UINT64($3DDA37128DD1ACA8));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CLEAR_GPS_MULTI_ROUTE;
begin
  nativeInit(UINT64($67EEDEA1B9BAFD94));
  nativeCall;
end;

procedure CLEAR_GPS_PLAYER_WAYPOINT;
begin
  nativeInit(UINT64($FF4FB7C8CDFA3DA7));
  nativeCall;
end;

procedure SET_GPS_FLASHES(toggle: BOOL);
begin
  nativeInit(UINT64($320D0E0D936A0E9B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_ICON_COLOUR(color: cint);
begin
  nativeInit(UINT64($7B21E0BB01E8224A));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure FLASH_MINIMAP_DISPLAY;
begin
  nativeInit(UINT64($F2DD778C22B15BDA));
  nativeCall;
end;

procedure FLASH_MINIMAP_DISPLAY_WITH_COLOR(hudColorIndex: cint);
begin
  nativeInit(UINT64($6B1DE27EE78E6A19));
  nativePush64(UINT64(hudColorIndex));
  nativeCall;
end;

procedure TOGGLE_STEALTH_RADAR(toggle: BOOL);
begin
  nativeInit(UINT64($6AFDFB93754950C7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MINIMAP_IN_SPECTATOR_MODE(toggle: BOOL; _ped: Ped);
begin
  nativeInit(UINT64($1A5CD7752DD28CD3));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_MISSION_NAME(p0: BOOL; name: PChar);
begin
  nativeInit(UINT64($5F28ECF5FC84772F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure SET_MISSION_NAME_FOR_UGC_MISSION(p0: BOOL; name: PChar);
begin
  nativeInit(UINT64($E45087D85F468BC2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(p0: BOOL; p1, p2, p3, p4, p5, p6, p7, p8: PChar);
begin
  nativeInit(UINT64($817B86108EB94E51));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure SET_MINIMAP_BLOCK_WAYPOINT(toggle: BOOL);
begin
  nativeInit(UINT64($58FADDED207897DC));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MINIMAP_IN_PROLOGUE(toggle: BOOL);
begin
  nativeInit(UINT64($9133955F1A2DA957));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MINIMAP_HIDE_FOW(toggle: BOOL);
begin
  nativeInit(UINT64($F8DEE0A5600CBB93));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_MINIMAP_FOW_DISCOVERY_RATIO: cfloat;
begin
  nativeInit(UINT64($E0130B41D3CF4574));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(x, y, z: cfloat): BOOL;
begin
  nativeInit(UINT64($6E31B91145873922));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_MINIMAP_FOW_DO_NOT_UPDATE(p0: BOOL);
begin
  nativeInit(UINT64($62E849B7EB28E770));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_MINIMAP_FOW_REVEAL_COORDINATE(x, y, z: cfloat);
begin
  nativeInit(UINT64($0923DBF87DFF735E));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_MINIMAP_GOLF_COURSE(hole: cint);
begin
  nativeInit(UINT64($71BDB63DBAF8DA59));
  nativePush64(UINT64(hole));
  nativeCall;
end;

procedure SET_MINIMAP_GOLF_COURSE_OFF;
begin
  nativeInit(UINT64($35EDD5B2E3FF01C0));
  nativeCall;
end;

procedure LOCK_MINIMAP_ANGLE(angle: cint);
begin
  nativeInit(UINT64($299FAEBB108AE05B));
  nativePush64(UINT64(angle));
  nativeCall;
end;

procedure UNLOCK_MINIMAP_ANGLE;
begin
  nativeInit(UINT64($8183455E16C42E3A));
  nativeCall;
end;

procedure LOCK_MINIMAP_POSITION(x, y: cfloat);
begin
  nativeInit(UINT64($1279E861A329E73F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativeCall;
end;

procedure UNLOCK_MINIMAP_POSITION;
begin
  nativeInit(UINT64($3E93E06DB8EF1F30));
  nativeCall;
end;

procedure SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(altitude: cfloat; p1: BOOL; p2: Any);
begin
  nativeInit(UINT64($D201F3FF917A506D));
  nativePush64(PUINT64(@altitude)^);
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_HEALTH_HUD_DISPLAY_VALUES(health, capacity: cint; wasAdded: BOOL);
begin
  nativeInit(UINT64($3F5CC444DCAAA8F2));
  nativePush64(UINT64(health));
  nativePush64(UINT64(capacity));
  nativePush64(UINT64(wasAdded));
  nativeCall;
end;

procedure SET_MAX_HEALTH_HUD_DISPLAY(maximumValue: cint);
begin
  nativeInit(UINT64($975D66A0BC17064C));
  nativePush64(UINT64(maximumValue));
  nativeCall;
end;

procedure SET_MAX_ARMOUR_HUD_DISPLAY(maximumValue: cint);
begin
  nativeInit(UINT64($06A320535F5F0248));
  nativePush64(UINT64(maximumValue));
  nativeCall;
end;

procedure SET_BIGMAP_ACTIVE(toggleBigMap, showFullMap: BOOL);
begin
  nativeInit(UINT64($231C8F89D0539D8F));
  nativePush64(UINT64(toggleBigMap));
  nativePush64(UINT64(showFullMap));
  nativeCall;
end;

function IS_HUD_COMPONENT_ACTIVE(id: cint): BOOL;
begin
  nativeInit(UINT64($BC4C9EA5391ECC0D));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

function IS_SCRIPTED_HUD_COMPONENT_ACTIVE(id: cint): BOOL;
begin
  nativeInit(UINT64($DD100EB17A94FF65));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

procedure HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id: cint);
begin
  nativeInit(UINT64($E374C498D8BADC14));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(id: cint);
begin
  nativeInit(UINT64($4F38DCA127DAAEA2));
  nativePush64(UINT64(id));
  nativeCall;
end;

function IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(id: cint): BOOL;
begin
  nativeInit(UINT64($09C0403ED9A751C2));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

procedure HIDE_HUD_COMPONENT_THIS_FRAME(id: cint);
begin
  nativeInit(UINT64($6806C51AD12B83B8));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure SHOW_HUD_COMPONENT_THIS_FRAME(id: cint);
begin
  nativeInit(UINT64($0B4DF1FA60C0E664));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure HIDE_STREET_AND_CAR_NAMES_THIS_FRAME;
begin
  nativeInit(UINT64($A4DEDE28B1814289));
  nativeCall;
end;

procedure RESET_RETICULE_VALUES;
begin
  nativeInit(UINT64($12782CE0A636E9F0));
  nativeCall;
end;

procedure RESET_HUD_COMPONENT_VALUES(id: cint);
begin
  nativeInit(UINT64($450930E616475D0D));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure SET_HUD_COMPONENT_POSITION(id: cint; x, y: cfloat);
begin
  nativeInit(UINT64($AABB1F56E2A17CED));
  nativePush64(UINT64(id));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativeCall;
end;

function GET_HUD_COMPONENT_POSITION(id: cint): Vector3;
begin
  nativeInit(UINT64($223CA69A8C4417FD));
  nativePush64(UINT64(id));
  exit(PVector3(nativeCall)^);
end;

procedure CLEAR_REMINDER_MESSAGE;
begin
  nativeInit(UINT64($B57D8DD645CFA2CF));
  nativeCall;
end;

function GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(worldX, worldY, worldZ: cfloat; screenX, screenY: pcfloat): cint;
begin
  nativeInit(UINT64($F9904D11F1ACBEC3));
  nativePush64(PUINT64(@worldX)^);
  nativePush64(PUINT64(@worldY)^);
  nativePush64(PUINT64(@worldZ)^);
  nativePush64(UINT64(screenX));
  nativePush64(UINT64(screenY));
  exit(cint(nativeCall^));
end;

procedure OPEN_REPORTUGC_MENU;
begin
  nativeInit(UINT64($523A590C1A3CC0D3));
  nativeCall;
end;

procedure FORCE_CLOSE_REPORTUGC_MENU;
begin
  nativeInit(UINT64($EE4C0E6DBC6F2C6F));
  nativeCall;
end;

function IS_REPORTUGC_MENU_OPEN: BOOL;
begin
  nativeInit(UINT64($9135584D09A3437E));
  exit(BOOL(nativeCall^));
end;

function IS_FLOATING_HELP_TEXT_ON_SCREEN(hudIndex: cint): BOOL;
begin
  nativeInit(UINT64($2432784ACA090DA4));
  nativePush64(UINT64(hudIndex));
  exit(BOOL(nativeCall^));
end;

procedure SET_FLOATING_HELP_TEXT_SCREEN_POSITION(hudIndex: cint; x, y: cfloat);
begin
  nativeInit(UINT64($7679CC1BCEBE3D4C));
  nativePush64(UINT64(hudIndex));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativeCall;
end;

procedure SET_FLOATING_HELP_TEXT_WORLD_POSITION(hudIndex: cint; x, y, z: cfloat);
begin
  nativeInit(UINT64($784BA7E0ECEB4178));
  nativePush64(UINT64(hudIndex));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_FLOATING_HELP_TEXT_TO_ENTITY(hudIndex: cint; para_entity: Entity; offsetX, offsetY: cfloat);
begin
  nativeInit(UINT64($B094BC1DB4018240));
  nativePush64(UINT64(hudIndex));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativeCall;
end;

procedure SET_FLOATING_HELP_TEXT_STYLE(hudIndex, p1, p2, p3, p4, p5: cint);
begin
  nativeInit(UINT64($788E7FD431BD67F1));
  nativePush64(UINT64(hudIndex));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure CLEAR_FLOATING_HELP(hudIndex: cint; p1: BOOL);
begin
  nativeInit(UINT64($50085246ABD3FEFA));
  nativePush64(UINT64(hudIndex));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(plyr: Player; username: PChar; pointedClanTag, isRockstarClan: BOOL; clanTag: PChar; clanFlag, r, g, b: cint);
begin
  nativeInit(UINT64($6DD05E9D83EFA4C9));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(username));
  nativePush64(UINT64(pointedClanTag));
  nativePush64(UINT64(isRockstarClan));
  nativePush64(UINT64(clanTag));
  nativePush64(UINT64(clanFlag));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

function IS_MP_GAMER_TAG_MOVIE_ACTIVE: BOOL;
begin
  nativeInit(UINT64($6E0EB3EB47C8D7AA));
  exit(BOOL(nativeCall^));
end;

function CREATE_FAKE_MP_GAMER_TAG(_ped: Ped; username: PChar; pointedClanTag, isRockstarClan: BOOL; clanTag: PChar; clanFlag: cint): cint;
begin
  nativeInit(UINT64($BFEFE3321A3F5015));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(username));
  nativePush64(UINT64(pointedClanTag));
  nativePush64(UINT64(isRockstarClan));
  nativePush64(UINT64(clanTag));
  nativePush64(UINT64(clanFlag));
  exit(cint(nativeCall^));
end;

procedure REMOVE_MP_GAMER_TAG(gamerTagId: cint);
begin
  nativeInit(UINT64($31698AA80E0223F8));
  nativePush64(UINT64(gamerTagId));
  nativeCall;
end;

function IS_MP_GAMER_TAG_ACTIVE(gamerTagId: cint): BOOL;
begin
  nativeInit(UINT64($4E929E7A5796FD26));
  nativePush64(UINT64(gamerTagId));
  exit(BOOL(nativeCall^));
end;

function IS_MP_GAMER_TAG_FREE(gamerTagId: cint): BOOL;
begin
  nativeInit(UINT64($595B5178E412E199));
  nativePush64(UINT64(gamerTagId));
  exit(BOOL(nativeCall^));
end;

procedure SET_MP_GAMER_TAG_VISIBILITY(gamerTagId, component: cint; toggle: BOOL; p3: Any);
begin
  nativeInit(UINT64($63BB75ABEDC1F6A0));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(component));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_ALL_MP_GAMER_TAGS_VISIBILITY(gamerTagId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($EE76FF7E6A0166B0));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(gamerTagId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($A67F9C46D612B6F1));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(gamerTagId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($D29EC58C2F6B5014));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MP_GAMER_TAGS_POINT_HEALTH(gamerTagId, value, maximumValue: cint);
begin
  nativeInit(UINT64($1563FE35E9928E67));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(value));
  nativePush64(UINT64(maximumValue));
  nativeCall;
end;

procedure SET_MP_GAMER_TAG_COLOUR(gamerTagId, component, hudColorIndex: cint);
begin
  nativeInit(UINT64($613ED644950626AE));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(component));
  nativePush64(UINT64(hudColorIndex));
  nativeCall;
end;

procedure SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(gamerTagId, hudColorIndex: cint);
begin
  nativeInit(UINT64($3158C77A7E888AB4));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(hudColorIndex));
  nativeCall;
end;

procedure SET_MP_GAMER_TAG_ALPHA(gamerTagId, component, alpha: cint);
begin
  nativeInit(UINT64($D48FE545CD46F857));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(component));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure SET_MP_GAMER_TAG_WANTED_LEVEL(gamerTagId, wantedlvl: cint);
begin
  nativeInit(UINT64($CF228E2AA03099C3));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(wantedlvl));
  nativeCall;
end;

procedure SET_MP_GAMER_TAG_NUM_PACKAGES(gamerTagId, p1: cint);
begin
  nativeInit(UINT64($9C16459B2324B2CF));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_MP_GAMER_TAG_NAME(gamerTagId: cint; str: PChar);
begin
  nativeInit(UINT64($DEA2B8283BAA3944));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(str));
  nativeCall;
end;

function IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(gamerTagId: cint): BOOL;
begin
  nativeInit(UINT64($EB709A36958ABE0D));
  nativePush64(UINT64(gamerTagId));
  exit(BOOL(nativeCall^));
end;

procedure SET_MP_GAMER_TAG_BIG_TEXT(gamerTagId: cint; str: PChar);
begin
  nativeInit(UINT64($7B7723747CCB55B6));
  nativePush64(UINT64(gamerTagId));
  nativePush64(UINT64(str));
  nativeCall;
end;

function GET_CURRENT_WEBPAGE_ID: cint;
begin
  nativeInit(UINT64($01A358D9128B7A86));
  exit(cint(nativeCall^));
end;

function GET_CURRENT_WEBSITE_ID: cint;
begin
  nativeInit(UINT64($97D47996FC48CBAD));
  exit(cint(nativeCall^));
end;

function GET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex: cint): cint;
begin
  nativeInit(UINT64($E3B05614DCE1D014));
  nativePush64(UINT64(flagIndex));
  exit(cint(nativeCall^));
end;

procedure RESET_GLOBAL_ACTIONSCRIPT_FLAG(flagIndex: cint);
begin
  nativeInit(UINT64($B99C4E4D9499DF29));
  nativePush64(UINT64(flagIndex));
  nativeCall;
end;

function IS_WARNING_MESSAGE_READY_FOR_CONTROL: BOOL;
begin
  nativeInit(UINT64($AF42195A42C63BBA));
  exit(BOOL(nativeCall^));
end;

procedure SET_WARNING_MESSAGE(titleMsg: PChar; flags: cint; promptMsg: PChar; p3: BOOL; p4: cint; p5, p6: PChar; showBackground: BOOL; errorCode: cint);
begin
  nativeInit(UINT64($7B1776B3B53F8D74));
  nativePush64(UINT64(titleMsg));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(promptMsg));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(showBackground));
  nativePush64(UINT64(errorCode));
  nativeCall;
end;

procedure SET_WARNING_MESSAGE_WITH_HEADER(entryHeader, entryLine1: PChar; instructionalKey: cint; entryLine2: PChar; p4: BOOL; p5: Any; showBackground, p7: PAny; p8: BOOL; p9: Any);
begin
  nativeInit(UINT64($DC38CC1E35B6A5D7));
  nativePush64(UINT64(entryHeader));
  nativePush64(UINT64(entryLine1));
  nativePush64(UINT64(instructionalKey));
  nativePush64(UINT64(entryLine2));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(showBackground));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(entryHeader, entryLine1: PChar; instructionalKey: cint; entryLine2: PChar; p4: BOOL; p5, additionalIntInfo: Any; additionalTextInfoLine1, additionalTextInfoLine2: PChar; showBackground: BOOL; errorCode: cint);
begin
  nativeInit(UINT64($701919482C74B5AB));
  nativePush64(UINT64(entryHeader));
  nativePush64(UINT64(entryLine1));
  nativePush64(UINT64(instructionalKey));
  nativePush64(UINT64(entryLine2));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(additionalIntInfo));
  nativePush64(UINT64(additionalTextInfoLine1));
  nativePush64(UINT64(additionalTextInfoLine2));
  nativePush64(UINT64(showBackground));
  nativePush64(UINT64(errorCode));
  nativeCall;
end;

procedure SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(entryHeader, entryLine1: PChar; flags: cint; entryLine2: PChar; p4: BOOL; p5: Any; p6, p7: PAny; showBg: BOOL; p9, p10: Any);
begin
  nativeInit(UINT64($38B55259C2E078ED));
  nativePush64(UINT64(entryHeader));
  nativePush64(UINT64(entryLine1));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(entryLine2));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(showBg));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativeCall;
end;

procedure SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(labelTitle, labelMessage: PChar; p2, p3: cint; labelMessage2: PChar; p5: BOOL; p6, p7: cint; p8, p9: PChar; background: BOOL; errorCode: cint);
begin
  nativeInit(UINT64($15803FEC3B9A872B));
  nativePush64(UINT64(labelTitle));
  nativePush64(UINT64(labelMessage));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(labelMessage2));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(background));
  nativePush64(UINT64(errorCode));
  nativeCall;
end;

function GET_WARNING_SCREEN_MESSAGE_HASH: Hash;
begin
  nativeInit(UINT64($81DF9ABA6C83DFF9));
  exit(Hash(nativeCall^));
end;

function SET_WARNING_MESSAGE_OPTION_ITEMS(index: cint; name: PChar; cash, rp, lvl, colour: cint): BOOL;
begin
  nativeInit(UINT64($0C5A80A9E096D529));
  nativePush64(UINT64(index));
  nativePush64(UINT64(name));
  nativePush64(UINT64(cash));
  nativePush64(UINT64(rp));
  nativePush64(UINT64(lvl));
  nativePush64(UINT64(colour));
  exit(BOOL(nativeCall^));
end;

function SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(p0: Any): BOOL;
begin
  nativeInit(UINT64($DAF87174BE7454FF));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_WARNING_MESSAGE_OPTION_ITEMS;
begin
  nativeInit(UINT64($6EF54AB721DC6242));
  nativeCall;
end;

function IS_WARNING_MESSAGE_ACTIVE: BOOL;
begin
  nativeInit(UINT64($E18B138FABC53103));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE;
begin
  nativeInit(UINT64($7792424AA0EAC32E));
  nativeCall;
end;

procedure CUSTOM_MINIMAP_SET_ACTIVE(toggle: BOOL);
begin
  nativeInit(UINT64($5354C5BA2EA868A4));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CUSTOM_MINIMAP_SET_BLIP_OBJECT(spriteId: cint);
begin
  nativeInit(UINT64($1EAE6DD17B7A5EFA));
  nativePush64(UINT64(spriteId));
  nativeCall;
end;

function CUSTOM_MINIMAP_CREATE_BLIP(x, y, z: cfloat): cint;
begin
  nativeInit(UINT64($551DF99658DB6EE8));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(cint(nativeCall^));
end;

procedure CUSTOM_MINIMAP_CLEAR_BLIPS;
begin
  nativeInit(UINT64($2708FC083123F9FF));
  nativeCall;
end;

function FORCE_SONAR_BLIPS_THIS_FRAME: BOOL;
begin
  nativeInit(UINT64($1121BFA1A1A522A8));
  exit(BOOL(nativeCall^));
end;

function GET_NORTH_BLID_INDEX: Blip;
begin
  nativeInit(UINT64($3F0CF9CB7E589B88));
  exit(Blip(nativeCall^));
end;

procedure DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(toggle: BOOL);
begin
  nativeInit(UINT64($82CEDC33687E1F50));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DRAW_FRONTEND_BACKGROUND_THIS_FRAME;
begin
  nativeInit(UINT64($211C4EF450086857));
  nativeCall;
end;

procedure DRAW_HUD_OVER_FADE_THIS_FRAME;
begin
  nativeInit(UINT64($BF4F34A85CA2970C));
  nativeCall;
end;

procedure ACTIVATE_FRONTEND_MENU(menuhash: Hash; togglePause: BOOL; component: cint);
begin
  nativeInit(UINT64($EF01D36B9C9D0C7B));
  nativePush64(UINT64(menuhash));
  nativePush64(UINT64(togglePause));
  nativePush64(UINT64(component));
  nativeCall;
end;

procedure RESTART_FRONTEND_MENU(menuHash: Hash; p1: cint);
begin
  nativeInit(UINT64($10706DC6AD2D49C0));
  nativePush64(UINT64(menuHash));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_CURRENT_FRONTEND_MENU_VERSION: Hash;
begin
  nativeInit(UINT64($2309595AD6145265));
  exit(Hash(nativeCall^));
end;

procedure SET_PAUSE_MENU_ACTIVE(toggle: BOOL);
begin
  nativeInit(UINT64($DF47FC56C71569CF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_FRONTEND_THIS_FRAME;
begin
  nativeInit(UINT64($6D3465A73092F0E6));
  nativeCall;
end;

procedure SUPPRESS_FRONTEND_RENDERING_THIS_FRAME;
begin
  nativeInit(UINT64($BA751764F0821256));
  nativeCall;
end;

procedure ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME;
begin
  nativeInit(UINT64($CC3FDDED67BCFC63));
  nativeCall;
end;

procedure SET_FRONTEND_ACTIVE(active: BOOL);
begin
  nativeInit(UINT64($745711A75AB09277));
  nativePush64(UINT64(active));
  nativeCall;
end;

function IS_PAUSE_MENU_ACTIVE: BOOL;
begin
  nativeInit(UINT64($B0034A223497FFCB));
  exit(BOOL(nativeCall^));
end;

function IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN: BOOL;
begin
  nativeInit(UINT64($2F057596F2BD0061));
  exit(BOOL(nativeCall^));
end;

function GET_PAUSE_MENU_STATE: cint;
begin
  nativeInit(UINT64($272ACD84970869C5));
  exit(cint(nativeCall^));
end;

function GET_PAUSE_MENU_POSITION: Vector3;
begin
  nativeInit(UINT64($5BFF36D6ED83E0AE));
  exit(PVector3(nativeCall)^);
end;

function IS_PAUSE_MENU_RESTARTING: BOOL;
begin
  nativeInit(UINT64($1C491717107431C7));
  exit(BOOL(nativeCall^));
end;

procedure FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(p0: PChar);
begin
  nativeInit(UINT64($2162C446DFDF38FD));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PAUSE_MENUCEPTION_GO_DEEPER(page: cint);
begin
  nativeInit(UINT64($77F16B447824DA6C));
  nativePush64(UINT64(page));
  nativeCall;
end;

procedure PAUSE_MENUCEPTION_THE_KICK;
begin
  nativeInit(UINT64($CDCA26E80FAECB8F));
  nativeCall;
end;

procedure PAUSE_TOGGLE_FULLSCREEN_MAP(p0: Any);
begin
  nativeInit(UINT64($2DE6C5E2E996F178));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PAUSE_MENU_ACTIVATE_CONTEXT(contextHash: Hash);
begin
  nativeInit(UINT64($DD564BDD0472C936));
  nativePush64(UINT64(contextHash));
  nativeCall;
end;

procedure PAUSE_MENU_DEACTIVATE_CONTEXT(contextHash: Hash);
begin
  nativeInit(UINT64($444D8CF241EC25C5));
  nativePush64(UINT64(contextHash));
  nativeCall;
end;

function PAUSE_MENU_IS_CONTEXT_ACTIVE(contextHash: Hash): BOOL;
begin
  nativeInit(UINT64($84698AB38D0C6636));
  nativePush64(UINT64(contextHash));
  exit(BOOL(nativeCall^));
end;

function PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE: BOOL;
begin
  nativeInit(UINT64($2A25ADC48F87841F));
  exit(BOOL(nativeCall^));
end;

function PAUSE_MENU_GET_HAIR_COLOUR_INDEX: cint;
begin
  nativeInit(UINT64($DE03620F8703A9DF));
  exit(cint(nativeCall^));
end;

function PAUSE_MENU_GET_MOUSE_HOVER_INDEX: cint;
begin
  nativeInit(UINT64($359AF31A4B52F5ED));
  exit(cint(nativeCall^));
end;

function PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID: cint;
begin
  nativeInit(UINT64($13C4B962653A5280));
  exit(cint(nativeCall^));
end;

function PAUSE_MENU_GET_MOUSE_CLICK_EVENT(p0, p1, p2: PAny): BOOL;
begin
  nativeInit(UINT64($C8E1071177A23BE5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

procedure PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(p0: cint);
begin
  nativeInit(UINT64($4895BDEA16E7C080));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PAUSE_MENU_SET_BUSY_SPINNER(p0: BOOL; position, spinnerIndex: cint);
begin
  nativeInit(UINT64($C78E239AC5B2DDB9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(position));
  nativePush64(UINT64(spinnerIndex));
  nativeCall;
end;

procedure PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(p0: BOOL);
begin
  nativeInit(UINT64($F06EBB91A81E09E3));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_FRONTEND_READY_FOR_CONTROL: BOOL;
begin
  nativeInit(UINT64($3BAB9A4E4F2FF5C7));
  exit(BOOL(nativeCall^));
end;

procedure TAKE_CONTROL_OF_FRONTEND;
begin
  nativeInit(UINT64($EC9264727EEC0F28));
  nativeCall;
end;

procedure RELEASE_CONTROL_OF_FRONTEND;
begin
  nativeInit(UINT64($14621BB1DF14E2B2));
  nativeCall;
end;

function CODE_WANTS_SCRIPT_TO_TAKE_CONTROL: BOOL;
begin
  nativeInit(UINT64($66E7CB63C97B7D20));
  exit(BOOL(nativeCall^));
end;

function GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL: cint;
begin
  nativeInit(UINT64($593FEAE1F73392D4));
  exit(cint(nativeCall^));
end;

function IS_NAVIGATING_MENU_CONTENT: BOOL;
begin
  nativeInit(UINT64($4E3CD0EF8A489541));
  exit(BOOL(nativeCall^));
end;

function HAS_MENU_TRIGGER_EVENT_OCCURRED: BOOL;
begin
  nativeInit(UINT64($F284AC67940C6812));
  exit(BOOL(nativeCall^));
end;

function HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED: BOOL;
begin
  nativeInit(UINT64($2E22FEFA0100275E));
  exit(BOOL(nativeCall^));
end;

procedure SET_SAVEGAME_LIST_UNIQUE_ID(p0: Any);
begin
  nativeInit(UINT64($0CF54F20DE43879C));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure GET_MENU_TRIGGER_EVENT_DETAILS(lastItemMenuId, selectedItemUniqueId: pcint);
begin
  nativeInit(UINT64($36C1451A88A09630));
  nativePush64(UINT64(lastItemMenuId));
  nativePush64(UINT64(selectedItemUniqueId));
  nativeCall;
end;

procedure GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(lastItemMenuId, selectedItemMenuId, selectedItemUniqueId: pcint);
begin
  nativeInit(UINT64($7E17BE53E1AAABAF));
  nativePush64(UINT64(lastItemMenuId));
  nativePush64(UINT64(selectedItemMenuId));
  nativePush64(UINT64(selectedItemUniqueId));
  nativeCall;
end;

function GET_PM_PLAYER_CREW_COLOR(r, g, b: pcint): BOOL;
begin
  nativeInit(UINT64($A238192F33110615));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  exit(BOOL(nativeCall^));
end;

function GET_MENU_PED_INT_STAT(p0: Any; p1: PAny): BOOL;
begin
  nativeInit(UINT64($EF4CED81CEBEDC6D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function GET_CHARACTER_MENU_PED_INT_STAT(p0: Any; p1: PAny; p2: Any): BOOL;
begin
  nativeInit(UINT64($CA6B2F7CE32AB653));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function GET_MENU_PED_MASKED_INT_STAT(statHash: Hash; outValue: pcint; mask: cint; p3: BOOL): BOOL;
begin
  nativeInit(UINT64($90A6526CF0381030));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(mask));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function GET_CHARACTER_MENU_PED_MASKED_INT_STAT(statHash: Hash; outValue: PAny; p2, mask: cint; p4: BOOL): BOOL;
begin
  nativeInit(UINT64($24A49BEAF468DC90));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(mask));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function GET_MENU_PED_FLOAT_STAT(statHash: Hash; outValue: pcfloat): BOOL;
begin
  nativeInit(UINT64($5FBD7095FE7AE57F));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  exit(BOOL(nativeCall^));
end;

function GET_CHARACTER_MENU_PED_FLOAT_STAT(statHash: cfloat; outValue: pcfloat; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($8F08017F9D7C47BD));
  nativePush64(PUINT64(@statHash)^);
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function GET_MENU_PED_BOOL_STAT(statHash: Hash; outValue: PBOOL): BOOL;
begin
  nativeInit(UINT64($052991E59076E4E4));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_PED_IN_PAUSE_MENU;
begin
  nativeInit(UINT64($5E62BE5DC58E9E06));
  nativeCall;
end;

procedure GIVE_PED_TO_PAUSE_MENU(_ped: Ped; p1: cint);
begin
  nativeInit(UINT64($AC0BFBDC3BE00E14));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PAUSE_MENU_PED_LIGHTING(state: BOOL);
begin
  nativeInit(UINT64($3CA6050692BC61B0));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_PAUSE_MENU_PED_SLEEP_STATE(state: BOOL);
begin
  nativeInit(UINT64($ECF128344E9FF9F1));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure OPEN_ONLINE_POLICIES_MENU;
begin
  nativeInit(UINT64($805D7CBB36FD6C4C));
  nativeCall;
end;

function ARE_ONLINE_POLICIES_UP_TO_DATE: BOOL;
begin
  nativeInit(UINT64($F13FE2A80C05C561));
  exit(BOOL(nativeCall^));
end;

function IS_ONLINE_POLICIES_MENU_ACTIVE: BOOL;
begin
  nativeInit(UINT64($6F72CD94F7B5B68C));
  exit(BOOL(nativeCall^));
end;

procedure OPEN_SOCIAL_CLUB_MENU(menu: Hash);
begin
  nativeInit(UINT64($75D3691713C3B05A));
  nativePush64(UINT64(menu));
  nativeCall;
end;

procedure CLOSE_SOCIAL_CLUB_MENU;
begin
  nativeInit(UINT64($D2B32BE3FC1626C6));
  nativeCall;
end;

procedure SET_SOCIAL_CLUB_TOUR(name: PChar);
begin
  nativeInit(UINT64($9E778248D6685FE0));
  nativePush64(UINT64(name));
  nativeCall;
end;

function IS_SOCIAL_CLUB_ACTIVE: BOOL;
begin
  nativeInit(UINT64($C406BE343FC4B9AF));
  exit(BOOL(nativeCall^));
end;

procedure SET_TEXT_INPUT_BOX_ENABLED(p0: BOOL);
begin
  nativeInit(UINT64($1185A8087587322C));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure FORCE_CLOSE_TEXT_INPUT_BOX;
begin
  nativeInit(UINT64($8817605C2BA76200));
  nativeCall;
end;

procedure SET_ALLOW_COMMA_ON_TEXT_INPUT(p0: Any);
begin
  nativeInit(UINT64($577599CCED639CA2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(gxtEntryHash: Hash);
begin
  nativeInit(UINT64($6A1738B4323FE2D9));
  nativePush64(UINT64(gxtEntryHash));
  nativeCall;
end;

function IS_MP_TEXT_CHAT_TYPING: BOOL;
begin
  nativeInit(UINT64($B118AF58B5F332A1));
  exit(BOOL(nativeCall^));
end;

procedure CLOSE_MP_TEXT_CHAT;
begin
  nativeInit(UINT64($1AC8F4AD40E22127));
  nativeCall;
end;

procedure MP_TEXT_CHAT_IS_TEAM_JOB(p0: Any);
begin
  nativeInit(UINT64($7C226D5346D4D10A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure OVERRIDE_MP_TEXT_CHAT_COLOR(p0, hudColor: cint);
begin
  nativeInit(UINT64($F47E567B3630DD12));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(hudColor));
  nativeCall;
end;

procedure MP_TEXT_CHAT_DISABLE(toggle: BOOL);
begin
  nativeInit(UINT64($1DB21A44B09E8BA3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(toggle: BOOL);
begin
  nativeInit(UINT64($CEF214315D276FD1));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_HAS_AI_BLIP(_ped: Ped; hasCone: BOOL);
begin
  nativeInit(UINT64($D30C50DF888D58B5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(hasCone));
  nativeCall;
end;

procedure SET_PED_HAS_AI_BLIP_WITH_COLOUR(_ped: Ped; hasCone: BOOL; color: cint);
begin
  nativeInit(UINT64($B13DCB4C6FAAD238));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(hasCone));
  nativePush64(UINT64(color));
  nativeCall;
end;

function DOES_PED_HAVE_AI_BLIP(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($15B8ECF844EE67ED));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_AI_BLIP_GANG_ID(_ped: Ped; gangId: cint);
begin
  nativeInit(UINT64($E52B8E7F85D39A08));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(gangId));
  nativeCall;
end;

procedure SET_PED_AI_BLIP_HAS_CONE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($3EED80DFF7325CAA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_AI_BLIP_FORCED_ON(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($0C4BBF625CA98C4E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_AI_BLIP_NOTICE_RANGE(_ped: Ped; range: cfloat);
begin
  nativeInit(UINT64($97C65887D4B37FA9));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@range)^);
  nativeCall;
end;

procedure SET_PED_AI_BLIP_SPRITE(_ped: Ped; spriteId: cint);
begin
  nativeInit(UINT64($FCFACD0DB9D7A57D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(spriteId));
  nativeCall;
end;

function GET_AI_PED_PED_BLIP_INDEX(_ped: Ped): Blip;
begin
  nativeInit(UINT64($7CD934010E115C2C));
  nativePush64(UINT64(_ped));
  exit(Blip(nativeCall^));
end;

function GET_AI_PED_VEHICLE_BLIP_INDEX(_ped: Ped): Blip;
begin
  nativeInit(UINT64($56176892826A4FE8));
  nativePush64(UINT64(_ped));
  exit(Blip(nativeCall^));
end;

function HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE: BOOL;
begin
  nativeInit(UINT64($A277800A9EAE340E));
  exit(BOOL(nativeCall^));
end;

procedure SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT;
begin
  nativeInit(UINT64($2632482FD6B9AB87));
  nativeCall;
end;

procedure SET_PLAYER_IS_IN_DIRECTOR_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($808519373FD336A3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DIRECTOR_MODE_AVAILABLE(toggle: BOOL);
begin
  nativeInit(UINT64($04655F9D075D0AE5));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure HIDE_HUDMARKERS_THIS_FRAME;
begin
  nativeInit(UINT64($243296A510B562B6));
  nativeCall;
end;

function GET_INTERIOR_HEADING(para_interior: Interior): cfloat;
begin
  nativeInit(UINT64($F49B58631D9E22D9));
  nativePush64(UINT64(para_interior));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure GET_INTERIOR_LOCATION_AND_NAMEHASH(para_interior: Interior; position: PVector3; nameHash: PHash);
begin
  nativeInit(UINT64($252BDC06B73FA6EA));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(position));
  nativePush64(UINT64(nameHash));
  nativeCall;
end;

function GET_INTERIOR_GROUP_ID(para_interior: Interior): cint;
begin
  nativeInit(UINT64($E4A84ABF135EF91A));
  nativePush64(UINT64(para_interior));
  exit(cint(nativeCall^));
end;

function GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(para_interior: Interior; x, y, z: cfloat): Vector3;
begin
  nativeInit(UINT64($9E3B3E6D66F6E22F));
  nativePush64(UINT64(para_interior));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(PVector3(nativeCall)^);
end;

function IS_INTERIOR_SCENE: BOOL;
begin
  nativeInit(UINT64($BC72B5D7A1CBD54D));
  exit(BOOL(nativeCall^));
end;

function IS_VALID_INTERIOR(para_interior: Interior): BOOL;
begin
  nativeInit(UINT64($26B0E73D7EAAF4D3));
  nativePush64(UINT64(para_interior));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_ROOM_FOR_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($B365FC0C4E27FFA7));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure FORCE_ROOM_FOR_ENTITY(para_entity: Entity; para_interior: Interior; roomHashKey: Hash);
begin
  nativeInit(UINT64($52923C4710DD9907));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(roomHashKey));
  nativeCall;
end;

function GET_ROOM_KEY_FROM_ENTITY(para_entity: Entity): Hash;
begin
  nativeInit(UINT64($47C2A06D4F5F424B));
  nativePush64(UINT64(para_entity));
  exit(Hash(nativeCall^));
end;

function GET_KEY_FOR_ENTITY_IN_ROOM(para_entity: Entity): Hash;
begin
  nativeInit(UINT64($399685DB942336BC));
  nativePush64(UINT64(para_entity));
  exit(Hash(nativeCall^));
end;

function GET_INTERIOR_FROM_ENTITY(para_entity: Entity): Interior;
begin
  nativeInit(UINT64($2107BA504071A6BB));
  nativePush64(UINT64(para_entity));
  exit(Interior(nativeCall^));
end;

procedure RETAIN_ENTITY_IN_INTERIOR(para_entity: Entity; para_interior: Interior);
begin
  nativeInit(UINT64($82EBB79E258FA2B7));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(para_interior));
  nativeCall;
end;

procedure CLEAR_INTERIOR_STATE_OF_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($85D5422B2039A70D));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure FORCE_ACTIVATING_TRACKING_ON_ENTITY(p0, p1: Any);
begin
  nativeInit(UINT64($38C1CB1CB119A016));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure FORCE_ROOM_FOR_GAME_VIEWPORT(interiorID: cint; roomHashKey: Hash);
begin
  nativeInit(UINT64($920D853F3E17F1DA));
  nativePush64(UINT64(interiorID));
  nativePush64(UINT64(roomHashKey));
  nativeCall;
end;

procedure SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(roomName: PChar);
begin
  nativeInit(UINT64($AF348AFCB575A441));
  nativePush64(UINT64(roomName));
  nativeCall;
end;

procedure SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(roomHashKey: Hash);
begin
  nativeInit(UINT64($405DC2AEF6AF95B9));
  nativePush64(UINT64(roomHashKey));
  nativeCall;
end;

function GET_ROOM_KEY_FOR_GAME_VIEWPORT: Hash;
begin
  nativeInit(UINT64($A6575914D2A0B450));
  exit(Hash(nativeCall^));
end;

procedure CLEAR_ROOM_FOR_GAME_VIEWPORT;
begin
  nativeInit(UINT64($23B59D8912F94246));
  nativeCall;
end;

function GET_INTERIOR_FROM_PRIMARY_VIEW: Interior;
begin
  nativeInit(UINT64($E7D267EC6CA966C3));
  exit(Interior(nativeCall^));
end;

function GET_INTERIOR_AT_COORDS(x, y, z: cfloat): Interior;
begin
  nativeInit(UINT64($B0F7F8663821D9C3));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(Interior(nativeCall^));
end;

procedure ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(para_pickup: Pickup; roomName: PChar);
begin
  nativeInit(UINT64($3F6167F351168730));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(roomName));
  nativeCall;
end;

procedure PIN_INTERIOR_IN_MEMORY(para_interior: Interior);
begin
  nativeInit(UINT64($2CA429C029CCF247));
  nativePush64(UINT64(para_interior));
  nativeCall;
end;

procedure UNPIN_INTERIOR(para_interior: Interior);
begin
  nativeInit(UINT64($261CCE7EED010641));
  nativePush64(UINT64(para_interior));
  nativeCall;
end;

function IS_INTERIOR_READY(para_interior: Interior): BOOL;
begin
  nativeInit(UINT64($6726BDCCC1932F0E));
  nativePush64(UINT64(para_interior));
  exit(BOOL(nativeCall^));
end;

function SET_INTERIOR_IN_USE(para_interior: Interior): BOOL;
begin
  nativeInit(UINT64($4C2330E61D3DEB56));
  nativePush64(UINT64(para_interior));
  exit(BOOL(nativeCall^));
end;

function GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z: cfloat; interiorType: PChar): Interior;
begin
  nativeInit(UINT64($05B7A89BD78797FC));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(interiorType));
  exit(Interior(nativeCall^));
end;

function GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(x, y, z: cfloat; typeHash: Hash): Interior;
begin
  nativeInit(UINT64($F0F77ADB9F67E79D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(typeHash));
  exit(Interior(nativeCall^));
end;

procedure ACTIVATE_INTERIOR_GROUPS_USING_CAMERA;
begin
  nativeInit(UINT64($483ACA1176CA93F1));
  nativeCall;
end;

function IS_COLLISION_MARKED_OUTSIDE(x, y, z: cfloat): BOOL;
begin
  nativeInit(UINT64($EEA5AC2EDA7C33E8));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(BOOL(nativeCall^));
end;

function GET_INTERIOR_FROM_COLLISION(x, y, z: cfloat): Interior;
begin
  nativeInit(UINT64($EC4CF9FCB29A4424));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(Interior(nativeCall^));
end;

procedure ENABLE_STADIUM_PROBES_THIS_FRAME(toggle: BOOL);
begin
  nativeInit(UINT64($7ECDF98587E92DEC));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ACTIVATE_INTERIOR_ENTITY_SET(para_interior: Interior; entitySetName: PChar);
begin
  nativeInit(UINT64($55E86AF2712B36A1));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(entitySetName));
  nativeCall;
end;

procedure DEACTIVATE_INTERIOR_ENTITY_SET(para_interior: Interior; entitySetName: PChar);
begin
  nativeInit(UINT64($420BD37289EEE162));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(entitySetName));
  nativeCall;
end;

function IS_INTERIOR_ENTITY_SET_ACTIVE(para_interior: Interior; entitySetName: PChar): BOOL;
begin
  nativeInit(UINT64($35F7DD45E8C0A16D));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(entitySetName));
  exit(BOOL(nativeCall^));
end;

procedure SET_INTERIOR_ENTITY_SET_TINT_INDEX(para_interior: Interior; entitySetName: PChar; color: cint);
begin
  nativeInit(UINT64($C1F1920BAF281317));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(entitySetName));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure REFRESH_INTERIOR(para_interior: Interior);
begin
  nativeInit(UINT64($41F37C3427C75AE0));
  nativePush64(UINT64(para_interior));
  nativeCall;
end;

procedure ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(mapObjectHash: Hash);
begin
  nativeInit(UINT64($A97F257D0151A6AB));
  nativePush64(UINT64(mapObjectHash));
  nativeCall;
end;

procedure ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(mapObjectHash: Hash);
begin
  nativeInit(UINT64($50C375537449F369));
  nativePush64(UINT64(mapObjectHash));
  nativeCall;
end;

procedure DISABLE_INTERIOR(para_interior: Interior; toggle: BOOL);
begin
  nativeInit(UINT64($6170941419D7D8EC));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_INTERIOR_DISABLED(para_interior: Interior): BOOL;
begin
  nativeInit(UINT64($BC5115A5A939DD15));
  nativePush64(UINT64(para_interior));
  exit(BOOL(nativeCall^));
end;

procedure CAP_INTERIOR(para_interior: Interior; toggle: BOOL);
begin
  nativeInit(UINT64($D9175F941610DB54));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_INTERIOR_CAPPED(para_interior: Interior): BOOL;
begin
  nativeInit(UINT64($92BAC8ACF88CEC26));
  nativePush64(UINT64(para_interior));
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_METRO_SYSTEM(toggle: BOOL);
begin
  nativeInit(UINT64($9E6542F0CE8E70A3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_IS_EXTERIOR_ONLY(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($7241CCB7D020DB69));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function CREATE_ITEMSET(p0: BOOL): ScrHandle;
begin
  nativeInit(UINT64($35AD299F50D91B24));
  nativePush64(UINT64(p0));
  exit(ScrHandle(nativeCall^));
end;

procedure DESTROY_ITEMSET(itemset: ScrHandle);
begin
  nativeInit(UINT64($DE18220B1C183EDA));
  nativePush64(UINT64(itemset));
  nativeCall;
end;

function IS_ITEMSET_VALID(itemset: ScrHandle): BOOL;
begin
  nativeInit(UINT64($B1B1EA596344DFAB));
  nativePush64(UINT64(itemset));
  exit(BOOL(nativeCall^));
end;

function ADD_TO_ITEMSET(item, itemset: ScrHandle): BOOL;
begin
  nativeInit(UINT64($E3945201F14637DD));
  nativePush64(UINT64(item));
  nativePush64(UINT64(itemset));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_FROM_ITEMSET(item, itemset: ScrHandle);
begin
  nativeInit(UINT64($25E68244B0177686));
  nativePush64(UINT64(item));
  nativePush64(UINT64(itemset));
  nativeCall;
end;

function GET_ITEMSET_SIZE(itemset: ScrHandle): cint;
begin
  nativeInit(UINT64($D9127E83ABF7C631));
  nativePush64(UINT64(itemset));
  exit(cint(nativeCall^));
end;

function GET_INDEXED_ITEM_IN_ITEMSET(index: cint; itemset: ScrHandle): ScrHandle;
begin
  nativeInit(UINT64($7A197E2521EE2BAB));
  nativePush64(UINT64(index));
  nativePush64(UINT64(itemset));
  exit(ScrHandle(nativeCall^));
end;

function IS_IN_ITEMSET(item, itemset: ScrHandle): BOOL;
begin
  nativeInit(UINT64($2D0FC594D1E9C107));
  nativePush64(UINT64(item));
  nativePush64(UINT64(itemset));
  exit(BOOL(nativeCall^));
end;

procedure CLEAN_ITEMSET(itemset: ScrHandle);
begin
  nativeInit(UINT64($41BC0D722FC04221));
  nativePush64(UINT64(itemset));
  nativeCall;
end;

function LOBBY_AUTO_MULTIPLAYER_MENU: BOOL;
begin
  nativeInit(UINT64($F2CA003F167E21D2));
  exit(BOOL(nativeCall^));
end;

function LOBBY_AUTO_MULTIPLAYER_FREEMODE: BOOL;
begin
  nativeInit(UINT64($EF7D17BC6C85264C));
  exit(BOOL(nativeCall^));
end;

procedure LOBBY_SET_AUTO_MULTIPLAYER(toggle: BOOL);
begin
  nativeInit(UINT64($B0C56BD3D808D863));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function LOBBY_AUTO_MULTIPLAYER_EVENT: BOOL;
begin
  nativeInit(UINT64($8AA464D4E0F6ACCD));
  exit(BOOL(nativeCall^));
end;

procedure LOBBY_SET_AUTO_MULTIPLAYER_EVENT(toggle: BOOL);
begin
  nativeInit(UINT64($FC309E94546FCDB5));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB: BOOL;
begin
  nativeInit(UINT64($C6DC823253FBB366));
  exit(BOOL(nativeCall^));
end;

procedure LOBBY_SET_AUTO_MP_RANDOM_JOB(toggle: BOOL);
begin
  nativeInit(UINT64($C7E7181C09F33B69));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(toggle: BOOL);
begin
  nativeInit(UINT64($FA1E0E893D915215));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function LOCALIZATION_GET_SYSTEM_LANGUAGE: cint;
begin
  nativeInit(UINT64($497420E022796B3F));
  exit(cint(nativeCall^));
end;

function GET_CURRENT_LANGUAGE: cint;
begin
  nativeInit(UINT64($2BDD44CC428A7EAE));
  exit(cint(nativeCall^));
end;

function LOCALIZATION_GET_SYSTEM_DATE_TYPE: cint;
begin
  nativeInit(UINT64($A8AE43AEC1A61314));
  exit(cint(nativeCall^));
end;

function GET_ALLOCATED_STACK_SIZE: cint;
begin
  nativeInit(UINT64($8B3CA62B1EF19B62));
  exit(cint(nativeCall^));
end;

function GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(stackSize: cint): cint;
begin
  nativeInit(UINT64($FEAD16FC8F9DFC0F));
  nativePush64(UINT64(stackSize));
  exit(cint(nativeCall^));
end;

procedure SET_RANDOM_SEED(seed: cint);
begin
  nativeInit(UINT64($444D98F98C11F3EC));
  nativePush64(UINT64(seed));
  nativeCall;
end;

procedure SET_TIME_SCALE(timeScale: cfloat);
begin
  nativeInit(UINT64($1D408577D440E81E));
  nativePush64(PUINT64(@timeScale)^);
  nativeCall;
end;

procedure SET_MISSION_FLAG(toggle: BOOL);
begin
  nativeInit(UINT64($C4301E5121A0ED73));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_MISSION_FLAG: BOOL;
begin
  nativeInit(UINT64($A33CDCCDA663159E));
  exit(BOOL(nativeCall^));
end;

procedure SET_RANDOM_EVENT_FLAG(toggle: BOOL);
begin
  nativeInit(UINT64($971927086CFD2158));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_RANDOM_EVENT_FLAG: BOOL;
begin
  nativeInit(UINT64($D2D57F1D764117B1));
  exit(BOOL(nativeCall^));
end;

function GET_CONTENT_TO_LOAD: PChar;
begin
  nativeInit(UINT64($24DA7D7667FD7B09));
  exit(PChar(nativeCall^));
end;

procedure ACTIVITY_FEED_CREATE(p0, p1: PChar);
begin
  nativeInit(UINT64($4DCDF92BF64236CD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(p0: PChar);
begin
  nativeInit(UINT64($31125FD509D9043F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(p0: PChar);
begin
  nativeInit(UINT64($EBD3205A207939ED));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ACTIVITY_FEED_ADD_INT_TO_CAPTION(p0: Any);
begin
  nativeInit(UINT64($97E7E2C04245115B));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ACTIVITY_FEED_LARGE_IMAGE_URL(p0: PChar);
begin
  nativeInit(UINT64($916CA67D26FD1E37));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(p0, p1: PChar);
begin
  nativeInit(UINT64($EB078CA2B5E82ADD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(p0: PChar);
begin
  nativeInit(UINT64($703CC7F60CBB2B57));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ACTIVITY_FEED_POST;
begin
  nativeInit(UINT64($8951EB9C6906D3C8));
  nativeCall;
end;

procedure ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(p0: PChar);
begin
  nativeInit(UINT64($BA4B8D83BDC75551));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function HAS_RESUMED_FROM_SUSPEND: BOOL;
begin
  nativeInit(UINT64($E8B9C0EC9E183F35));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCRIPT_HIGH_PRIO(toggle: BOOL);
begin
  nativeInit(UINT64($65D2EBB47E1CEC21));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_THIS_IS_A_TRIGGER_SCRIPT(toggle: BOOL);
begin
  nativeInit(UINT64($6F2135B6129620C1));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(p0: PChar);
begin
  nativeInit(UINT64($8D74E26F54B4E5C3));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(p0, p1: PAny; p2: Any; p3: BOOL): BOOL;
begin
  nativeInit(UINT64($B335F761606DB47C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function GET_PREV_WEATHER_TYPE_HASH_NAME: Hash;
begin
  nativeInit(UINT64($564B884A05EC45A3));
  exit(Hash(nativeCall^));
end;

function GET_NEXT_WEATHER_TYPE_HASH_NAME: Hash;
begin
  nativeInit(UINT64($711327CD09C8F162));
  exit(Hash(nativeCall^));
end;

function IS_PREV_WEATHER_TYPE(weatherType: PChar): BOOL;
begin
  nativeInit(UINT64($44F28F86433B10A9));
  nativePush64(UINT64(weatherType));
  exit(BOOL(nativeCall^));
end;

function IS_NEXT_WEATHER_TYPE(weatherType: PChar): BOOL;
begin
  nativeInit(UINT64($2FAA3A30BEC0F25D));
  nativePush64(UINT64(weatherType));
  exit(BOOL(nativeCall^));
end;

procedure SET_WEATHER_TYPE_PERSIST(weatherType: PChar);
begin
  nativeInit(UINT64($704983DF373B198F));
  nativePush64(UINT64(weatherType));
  nativeCall;
end;

procedure SET_WEATHER_TYPE_NOW_PERSIST(weatherType: PChar);
begin
  nativeInit(UINT64($ED712CA327900C8A));
  nativePush64(UINT64(weatherType));
  nativeCall;
end;

procedure SET_WEATHER_TYPE_NOW(weatherType: PChar);
begin
  nativeInit(UINT64($29B487C359E19889));
  nativePush64(UINT64(weatherType));
  nativeCall;
end;

procedure SET_WEATHER_TYPE_OVERTIME_PERSIST(weatherType: PChar; time: cfloat);
begin
  nativeInit(UINT64($FB5045B7C42B75BF));
  nativePush64(UINT64(weatherType));
  nativePush64(PUINT64(@time)^);
  nativeCall;
end;

procedure SET_RANDOM_WEATHER_TYPE;
begin
  nativeInit(UINT64($8B05F884CF7E8020));
  nativeCall;
end;

procedure CLEAR_WEATHER_TYPE_PERSIST;
begin
  nativeInit(UINT64($CCC39339BEF76CF5));
  nativeCall;
end;

procedure CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(milliseconds: cint);
begin
  nativeInit(UINT64($0CF97F497FE7D048));
  nativePush64(UINT64(milliseconds));
  nativeCall;
end;

procedure GET_CURR_WEATHER_STATE(weatherType1, weatherType2: PHash; percentWeather2: pcfloat);
begin
  nativeInit(UINT64($F3BBE884A14BB413));
  nativePush64(UINT64(weatherType1));
  nativePush64(UINT64(weatherType2));
  nativePush64(UINT64(percentWeather2));
  nativeCall;
end;

procedure SET_CURR_WEATHER_STATE(weatherType1, weatherType2: Hash; percentWeather2: cfloat);
begin
  nativeInit(UINT64($578C752848ECFA0C));
  nativePush64(UINT64(weatherType1));
  nativePush64(UINT64(weatherType2));
  nativePush64(PUINT64(@percentWeather2)^);
  nativeCall;
end;

procedure SET_OVERRIDE_WEATHER(weatherType: PChar);
begin
  nativeInit(UINT64($A43D5C6FE51ADBEF));
  nativePush64(UINT64(weatherType));
  nativeCall;
end;

procedure SET_OVERRIDE_WEATHEREX(weatherType: PChar; p1: BOOL);
begin
  nativeInit(UINT64($1178E104409FE58C));
  nativePush64(UINT64(weatherType));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure CLEAR_OVERRIDE_WEATHER;
begin
  nativeInit(UINT64($338D2E3477711050));
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(amplitude: cfloat);
begin
  nativeInit(UINT64($B8F87EAD7533B176));
  nativePush64(PUINT64(@amplitude)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(minAmplitude: cfloat);
begin
  nativeInit(UINT64($C3EAD29AB273ECE8));
  nativePush64(PUINT64(@minAmplitude)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(maxAmplitude: cfloat);
begin
  nativeInit(UINT64($A7A1127490312C36));
  nativePush64(PUINT64(@maxAmplitude)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(minAmplitude: cfloat);
begin
  nativeInit(UINT64($31727907B2C43C55));
  nativePush64(PUINT64(@minAmplitude)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(amplitude: cfloat);
begin
  nativeInit(UINT64($405591EC8FD9096D));
  nativePush64(PUINT64(@amplitude)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(minAmplitude: cfloat);
begin
  nativeInit(UINT64($F751B16FB32ABC1D));
  nativePush64(PUINT64(@minAmplitude)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(maxAmplitude: cfloat);
begin
  nativeInit(UINT64($B3E6360DDE733E82));
  nativePush64(PUINT64(@maxAmplitude)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_RIPPLEBUMPINESS(bumpiness: cfloat);
begin
  nativeInit(UINT64($7C9C0B1EEB1F9072));
  nativePush64(PUINT64(@bumpiness)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(minBumpiness: cfloat);
begin
  nativeInit(UINT64($6216B116083A7CB4));
  nativePush64(PUINT64(@minBumpiness)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(maxBumpiness: cfloat);
begin
  nativeInit(UINT64($9F5E6BB6B34540DA));
  nativePush64(PUINT64(@maxBumpiness)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_RIPPLEDISTURB(disturb: cfloat);
begin
  nativeInit(UINT64($B9854DFDE0D833D6));
  nativePush64(PUINT64(@disturb)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_SET_STRENGTH(strength: cfloat);
begin
  nativeInit(UINT64($C54A08C85AE4D410));
  nativePush64(PUINT64(@strength)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_FADE_IN(p0: cfloat);
begin
  nativeInit(UINT64($A8434F1DFF41D6E7));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure WATER_OVERRIDE_FADE_OUT(p0: cfloat);
begin
  nativeInit(UINT64($C3C221ADDDE31A11));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_WIND(speed: cfloat);
begin
  nativeInit(UINT64($AC3A74E8384A9919));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SET_WIND_SPEED(speed: cfloat);
begin
  nativeInit(UINT64($EE09ECEDBABE47FC));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

function GET_WIND_SPEED: cfloat;
begin
  nativeInit(UINT64($A8CF1CC0AFCD3F12));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_WIND_DIRECTION(direction: cfloat);
begin
  nativeInit(UINT64($EB0F4468467B4528));
  nativePush64(PUINT64(@direction)^);
  nativeCall;
end;

function GET_WIND_DIRECTION: Vector3;
begin
  nativeInit(UINT64($1F400FEF721170DA));
  exit(PVector3(nativeCall)^);
end;

procedure SET_RAIN(intensity: cfloat);
begin
  nativeInit(UINT64($643E26EA6E024D92));
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

function GET_RAIN_LEVEL: cfloat;
begin
  nativeInit(UINT64($96695E368AD855F3));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_SNOW(level: cfloat);
begin
  nativeInit(UINT64($7F06937B0CDCBC1A));
  nativePush64(PUINT64(@level)^);
  nativeCall;
end;

function GET_SNOW_LEVEL: cfloat;
begin
  nativeInit(UINT64($C5868A966E5BE3AE));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure FORCE_LIGHTNING_FLASH;
begin
  nativeInit(UINT64($F6062E089251C898));
  nativeCall;
end;

procedure SET_CLOUD_SETTINGS_OVERRIDE(p0: PChar);
begin
  nativeInit(UINT64($02DEAAC8F8EA7FE7));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PRELOAD_CLOUD_HAT(name: PChar);
begin
  nativeInit(UINT64($11B56FBBF7224868));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure LOAD_CLOUD_HAT(name: PChar; transitionTime: cfloat);
begin
  nativeInit(UINT64($FC4842A34657BFCB));
  nativePush64(UINT64(name));
  nativePush64(PUINT64(@transitionTime)^);
  nativeCall;
end;

procedure UNLOAD_CLOUD_HAT(name: PChar; p1: cfloat);
begin
  nativeInit(UINT64($A74802FB8D0B7814));
  nativePush64(UINT64(name));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure UNLOAD_ALL_CLOUD_HATS;
begin
  nativeInit(UINT64($957E790EA1727B64));
  nativeCall;
end;

procedure SET_CLOUDS_ALPHA(opacity: cfloat);
begin
  nativeInit(UINT64($F36199225D6D8C86));
  nativePush64(PUINT64(@opacity)^);
  nativeCall;
end;

function GET_CLOUDS_ALPHA: cfloat;
begin
  nativeInit(UINT64($20AC25E781AE4A84));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_GAME_TIMER: cint;
begin
  nativeInit(UINT64($9CD27B0045628463));
  exit(cint(nativeCall^));
end;

function GET_FRAME_TIME: cfloat;
begin
  nativeInit(UINT64($15C40837039FFAF7));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_SYSTEM_TIME_STEP: cfloat;
begin
  nativeInit(UINT64($E599A503B3837E1B));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FRAME_COUNT: cint;
begin
  nativeInit(UINT64($FC8202EFC642E6F2));
  exit(cint(nativeCall^));
end;

function GET_RANDOM_FLOAT_IN_RANGE(startRange, endRange: cfloat): cfloat;
begin
  nativeInit(UINT64($313CE5879CEB6FCD));
  nativePush64(PUINT64(@startRange)^);
  nativePush64(PUINT64(@endRange)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_RANDOM_INT_IN_RANGE(startRange, endRange: cint): cint;
begin
  nativeInit(UINT64($D53343AA4FB7DD28));
  nativePush64(UINT64(startRange));
  nativePush64(UINT64(endRange));
  exit(cint(nativeCall^));
end;

function GET_RANDOM_MWC_INT_IN_RANGE(startRange, endRange: cint): cint;
begin
  nativeInit(UINT64($F2D49816A804D134));
  nativePush64(UINT64(startRange));
  nativePush64(UINT64(endRange));
  exit(cint(nativeCall^));
end;

function GET_GROUND_Z_FOR_3D_COORD(x, y, z: cfloat; groundZ: pcfloat; ignoreWater, p5: BOOL): BOOL;
begin
  nativeInit(UINT64($C906A7DAB05C8D2B));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(groundZ));
  nativePush64(UINT64(ignoreWater));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(x, y, z: cfloat; groundZ: pcfloat; normal: PVector3): BOOL;
begin
  nativeInit(UINT64($8BDC7BFC57A81E76));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(groundZ));
  nativePush64(UINT64(normal));
  exit(BOOL(nativeCall^));
end;

function GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(x, y, z: cfloat; groundZ: pcfloat; p4, p5: BOOL): BOOL;
begin
  nativeInit(UINT64($9E82F0F362881B29));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(groundZ));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function ASIN(p0: cfloat): cfloat;
begin
  nativeInit(UINT64($C843060B5765DCE7));
  nativePush64(PUINT64(@p0)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function ACOS(p0: cfloat): cfloat;
begin
  nativeInit(UINT64($1D08B970013C34B6));
  nativePush64(PUINT64(@p0)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function TAN(p0: cfloat): cfloat;
begin
  nativeInit(UINT64($632106CC96E82E91));
  nativePush64(PUINT64(@p0)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function ATAN(p0: cfloat): cfloat;
begin
  nativeInit(UINT64($A9D1795CD5043663));
  nativePush64(PUINT64(@p0)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function ATAN2(p0, p1: cfloat): cfloat;
begin
  nativeInit(UINT64($8927CBF9D22261A4));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_DISTANCE_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2: cfloat; useZ: BOOL): cfloat;
begin
  nativeInit(UINT64($F1B760881820C952));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(useZ));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_ANGLE_BETWEEN_2D_VECTORS(x1, y1, x2, y2: cfloat): cfloat;
begin
  nativeInit(UINT64($186FC4BE848E1C92));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_HEADING_FROM_VECTOR_2D(dx, dy: cfloat): cfloat;
begin
  nativeInit(UINT64($2FFB6B224F4B2926));
  nativePush64(PUINT64(@dx)^);
  nativePush64(PUINT64(@dy)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_RATIO_OF_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; clamp: BOOL): cfloat;
begin
  nativeInit(UINT64($7F8F6405F4777AF6));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(UINT64(clamp));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CLOSEST_POINT_ON_LINE(x1, y1, z1, x2, y2, z2, x3, y3, z3: cfloat; clamp: BOOL): Vector3;
begin
  nativeInit(UINT64($21C235BC64831E5A));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(UINT64(clamp));
  exit(PVector3(nativeCall)^);
end;

function GET_LINE_PLANE_INTERSECTION(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11: cfloat; p12: pcfloat): BOOL;
begin
  nativeInit(UINT64($F56DFB7B61BE7276));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@p10)^);
  nativePush64(PUINT64(@p11)^);
  nativePush64(UINT64(p12));
  exit(BOOL(nativeCall^));
end;

function GET_POINT_AREA_OVERLAP(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13: Any): BOOL;
begin
  nativeInit(UINT64($A0AD167E4B39D9A2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativePush64(UINT64(p13));
  exit(BOOL(nativeCall^));
end;

procedure SET_BIT(address: pcint; offset: cint);
begin
  nativeInit(UINT64($933D6A9EEC1BACD0));
  nativePush64(UINT64(address));
  nativePush64(UINT64(offset));
  nativeCall;
end;

procedure CLEAR_BIT(address: pcint; offset: cint);
begin
  nativeInit(UINT64($E80492A9AC099A93));
  nativePush64(UINT64(address));
  nativePush64(UINT64(offset));
  nativeCall;
end;

function GET_HASH_KEY(str: PChar): Hash;
begin
  nativeInit(UINT64($D24D37CC275948CC));
  nativePush64(UINT64(str));
  exit(Hash(nativeCall^));
end;

procedure SLERP_NEAR_QUATERNION(t, x, y, z, w, x1, y1, z1, w1: cfloat; outX, outY, outZ, outW: pcfloat);
begin
  nativeInit(UINT64($F2F6A2FA49278625));
  nativePush64(PUINT64(@t)^);
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@w)^);
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@w1)^);
  nativePush64(UINT64(outX));
  nativePush64(UINT64(outY));
  nativePush64(UINT64(outZ));
  nativePush64(UINT64(outW));
  nativeCall;
end;

function IS_AREA_OCCUPIED(p0, p1, p2, p3, p4, p5: cfloat; p6, p7, p8, p9, p10: BOOL; p11: Any; p12: BOOL): BOOL;
begin
  nativeInit(UINT64($A61B4DF533DCB56E));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  exit(BOOL(nativeCall^));
end;

function IS_AREA_OCCUPIED_SLOW(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12: Any): BOOL;
begin
  nativeInit(UINT64($39455BF4F4F55186));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  exit(BOOL(nativeCall^));
end;

function IS_POSITION_OCCUPIED(x, y, z, range: cfloat; p4, checkVehicles, checkPeds, p7, p8: BOOL; ignoreEntity: Entity; p10: BOOL): BOOL;
begin
  nativeInit(UINT64($ADCDE75E1C60F32D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@range)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(checkVehicles));
  nativePush64(UINT64(checkPeds));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(ignoreEntity));
  nativePush64(UINT64(p10));
  exit(BOOL(nativeCall^));
end;

function IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(p0, p1, p2, p3, p4, p5: cfloat; p6: Any): BOOL;
begin
  nativeInit(UINT64($E54E209C35FFA18D));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_AREA(X, Y, Z, radius: cfloat; p4, ignoreCopCars, ignoreObjects, p7: BOOL);
begin
  nativeInit(UINT64($A56F01F3765B93A0));
  nativePush64(PUINT64(@X)^);
  nativePush64(PUINT64(@Y)^);
  nativePush64(PUINT64(@Z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(ignoreCopCars));
  nativePush64(UINT64(ignoreObjects));
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius: cfloat; p4, p5, p6, p7: BOOL);
begin
  nativeInit(UINT64($957838AAF91BD12D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure CLEAR_AREA_OF_VEHICLES(x, y, z, radius: cfloat; p4, p5, p6, p7, p8, p9: BOOL; p10: Any);
begin
  nativeInit(UINT64($01C7B9B38428AEB6));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativeCall;
end;

procedure CLEAR_ANGLED_AREA_OF_VEHICLES(x1, y1, z1, x2, y2, z2, width: cfloat; p7, p8, p9, p10, p11: BOOL; p12, p13: Any);
begin
  nativeInit(UINT64($11DB3500F042A8AA));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativePush64(UINT64(p13));
  nativeCall;
end;

procedure CLEAR_AREA_OF_OBJECTS(x, y, z, radius: cfloat; flags: cint);
begin
  nativeInit(UINT64($DD9B9B385AAC7F5B));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure CLEAR_AREA_OF_PEDS(x, y, z, radius: cfloat; flags: cint);
begin
  nativeInit(UINT64($BE31FD6CE464AC59));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure CLEAR_AREA_OF_COPS(x, y, z, radius: cfloat; flags: cint);
begin
  nativeInit(UINT64($04F8FC8FCF58F88D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure CLEAR_AREA_OF_PROJECTILES(x, y, z, radius: cfloat; flags: cint);
begin
  nativeInit(UINT64($0A1CB9094635D1A6));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure CLEAR_SCENARIO_SPAWN_HISTORY;
begin
  nativeInit(UINT64($7EC6F9A478A6A512));
  nativeCall;
end;

procedure SET_SAVE_MENU_ACTIVE(ignoreVehicle: BOOL);
begin
  nativeInit(UINT64($C9BF75D28165FF77));
  nativePush64(UINT64(ignoreVehicle));
  nativeCall;
end;

function GET_STATUS_OF_MANUAL_SAVE: cint;
begin
  nativeInit(UINT64($397BAA01068BAA96));
  exit(cint(nativeCall^));
end;

procedure SET_CREDITS_ACTIVE(toggle: BOOL);
begin
  nativeInit(UINT64($B938B7E6D3C0620C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CREDITS_FADE_OUT_WITH_SCREEN(toggle: BOOL);
begin
  nativeInit(UINT64($B51B9AB9EF81868C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function HAVE_CREDITS_REACHED_END: BOOL;
begin
  nativeInit(UINT64($075F1D57402C93BA));
  exit(BOOL(nativeCall^));
end;

function ARE_CREDITS_RUNNING: BOOL;
begin
  nativeInit(UINT64($D19C0826DC20CF1C));
  exit(BOOL(nativeCall^));
end;

procedure TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(scriptName: PChar);
begin
  nativeInit(UINT64($9DC711BC69C548DF));
  nativePush64(UINT64(scriptName));
  nativeCall;
end;

procedure NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME;
begin
  nativeInit(UINT64($9243BAC96D64C050));
  nativeCall;
end;

function ADD_HOSPITAL_RESTART(x, y, z, p3: cfloat; p4: Any): cint;
begin
  nativeInit(UINT64($1F464EF988465A81));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  exit(cint(nativeCall^));
end;

procedure DISABLE_HOSPITAL_RESTART(hospitalIndex: cint; toggle: BOOL);
begin
  nativeInit(UINT64($C8535819C450EBA8));
  nativePush64(UINT64(hospitalIndex));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function ADD_POLICE_RESTART(p0, p1, p2, p3: cfloat; p4: Any): cint;
begin
  nativeInit(UINT64($452736765B31FC4B));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  exit(cint(nativeCall^));
end;

procedure DISABLE_POLICE_RESTART(policeIndex: cint; toggle: BOOL);
begin
  nativeInit(UINT64($23285DED6EBD7EA3));
  nativePush64(UINT64(policeIndex));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RESTART_COORD_OVERRIDE(x, y, z, heading: cfloat);
begin
  nativeInit(UINT64($706B5EDCAA7FA663));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

procedure CLEAR_RESTART_COORD_OVERRIDE;
begin
  nativeInit(UINT64($A2716D40842EAF79));
  nativeCall;
end;

procedure PAUSE_DEATH_ARREST_RESTART(toggle: BOOL);
begin
  nativeInit(UINT64($2C2B3493FBF51C71));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure IGNORE_NEXT_RESTART(toggle: BOOL);
begin
  nativeInit(UINT64($21FFB63D8C615361));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FADE_OUT_AFTER_DEATH(toggle: BOOL);
begin
  nativeInit(UINT64($4A18E01DF2C87B86));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FADE_OUT_AFTER_ARREST(toggle: BOOL);
begin
  nativeInit(UINT64($1E0B4DC0D990A4E7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FADE_IN_AFTER_DEATH_ARREST(toggle: BOOL);
begin
  nativeInit(UINT64($DA66D2796BA33F12));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FADE_IN_AFTER_LOAD(toggle: BOOL);
begin
  nativeInit(UINT64($F3D78F59DFE18D79));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function REGISTER_SAVE_HOUSE(x, y, z, p3: cfloat; p4: PChar; p5, p6: Any): cint;
begin
  nativeInit(UINT64($C0714D0A7EEECA54));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(cint(nativeCall^));
end;

procedure SET_SAVE_HOUSE(savehouseHandle: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($4F548CABEAE553BC));
  nativePush64(UINT64(savehouseHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function OVERRIDE_SAVE_HOUSE(p0: BOOL; p1, p2, p3, p4: cfloat; p5: BOOL; p6, p7: cfloat): BOOL;
begin
  nativeInit(UINT64($1162EA8AE9D24EEA));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(UINT64(p5));
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  exit(BOOL(nativeCall^));
end;

function GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(p0: PVector3; p1: pcfloat; fadeInAfterLoad, p3: PBOOL): BOOL;
begin
  nativeInit(UINT64($A4A0065E39C9F25C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(fadeInAfterLoad));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure DO_AUTO_SAVE;
begin
  nativeInit(UINT64($50EEAAD86232EE55));
  nativeCall;
end;

function GET_IS_AUTO_SAVE_OFF: BOOL;
begin
  nativeInit(UINT64($6E04F06094C87047));
  exit(BOOL(nativeCall^));
end;

function IS_AUTO_SAVE_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($69240733738C19A0));
  exit(BOOL(nativeCall^));
end;

function HAS_CODE_REQUESTED_AUTOSAVE: BOOL;
begin
  nativeInit(UINT64($2107A3773771186D));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_CODE_REQUESTED_AUTOSAVE;
begin
  nativeInit(UINT64($06462A961E94B67C));
  nativeCall;
end;

procedure BEGIN_REPLAY_STATS(p0, p1: Any);
begin
  nativeInit(UINT64($E0E500246FF73D66));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ADD_REPLAY_STAT_VALUE(value: Any);
begin
  nativeInit(UINT64($69FE6DC87BD2A5E9));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure END_REPLAY_STATS;
begin
  nativeInit(UINT64($A23E821FBDF8A5F2));
  nativeCall;
end;

function HAVE_REPLAY_STATS_BEEN_STORED: BOOL;
begin
  nativeInit(UINT64($D642319C54AADEB6));
  exit(BOOL(nativeCall^));
end;

function GET_REPLAY_STAT_MISSION_ID: cint;
begin
  nativeInit(UINT64($5B1F2E327B6B6FE1));
  exit(cint(nativeCall^));
end;

function GET_REPLAY_STAT_MISSION_TYPE: cint;
begin
  nativeInit(UINT64($2B626A0150E4D449));
  exit(cint(nativeCall^));
end;

function GET_REPLAY_STAT_COUNT: cint;
begin
  nativeInit(UINT64($DC9274A7EF6B2867));
  exit(cint(nativeCall^));
end;

function GET_REPLAY_STAT_AT_INDEX(index: cint): cint;
begin
  nativeInit(UINT64($8098C8D6597AAE18));
  nativePush64(UINT64(index));
  exit(cint(nativeCall^));
end;

procedure CLEAR_REPLAY_STATS;
begin
  nativeInit(UINT64($1B1AB132A16FDA55));
  nativeCall;
end;

function QUEUE_MISSION_REPEAT_LOAD: BOOL;
begin
  nativeInit(UINT64($72DE52178C291CB5));
  exit(BOOL(nativeCall^));
end;

function QUEUE_MISSION_REPEAT_SAVE: BOOL;
begin
  nativeInit(UINT64($44A0BDC559B35F6E));
  exit(BOOL(nativeCall^));
end;

function QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST: BOOL;
begin
  nativeInit(UINT64($EB2104E905C6F2E9));
  exit(BOOL(nativeCall^));
end;

function GET_STATUS_OF_MISSION_REPEAT_SAVE: cint;
begin
  nativeInit(UINT64($2B5E102E4A42F2BF));
  exit(cint(nativeCall^));
end;

function IS_MEMORY_CARD_IN_USE: BOOL;
begin
  nativeInit(UINT64($8A75CE2956274ADD));
  exit(BOOL(nativeCall^));
end;

procedure SHOOT_SINGLE_BULLET_BETWEEN_COORDS(x1, y1, z1, x2, y2, z2: cfloat; damage: cint; p7: BOOL; weaponHash: Hash; ownerPed: Ped; isAudible, isInvisible: BOOL; speed: cfloat);
begin
  nativeInit(UINT64($867654CBC7606F2C));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(damage));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ownerPed));
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(x1, y1, z1, x2, y2, z2: cfloat; damage: cint; p7: BOOL; weaponHash: Hash; ownerPed: Ped; isAudible, isInvisible: BOOL; speed: cfloat; para_entity: Entity; p14: Any);
begin
  nativeInit(UINT64($E3A7742E0B7A2F8B));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(damage));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ownerPed));
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p14));
  nativeCall;
end;

procedure SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(x1, y1, z1, x2, y2, z2: cfloat; damage: cint; p7: BOOL; weaponHash: Hash; ownerPed: Ped; isAudible, isInvisible: BOOL; speed: cfloat; para_entity: Entity; p14, p15: BOOL; targetEntity: Entity; p17: BOOL; p18, p19, p20: Any);
begin
  nativeInit(UINT64($BFE5756E7407064A));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(damage));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ownerPed));
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p14));
  nativePush64(UINT64(p15));
  nativePush64(UINT64(targetEntity));
  nativePush64(UINT64(p17));
  nativePush64(UINT64(p18));
  nativePush64(UINT64(p19));
  nativePush64(UINT64(p20));
  nativeCall;
end;

procedure GET_MODEL_DIMENSIONS(modelHash: Hash; minimum, maximum: PVector3);
begin
  nativeInit(UINT64($03E8D3D5F549087A));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(minimum));
  nativePush64(UINT64(maximum));
  nativeCall;
end;

procedure SET_FAKE_WANTED_LEVEL(fakeWantedLevel: cint);
begin
  nativeInit(UINT64($1454F2448DE30163));
  nativePush64(UINT64(fakeWantedLevel));
  nativeCall;
end;

function GET_FAKE_WANTED_LEVEL: cint;
begin
  nativeInit(UINT64($4C9296CBCD1B971E));
  exit(cint(nativeCall^));
end;

procedure USING_MISSION_CREATOR(toggle: BOOL);
begin
  nativeInit(UINT64($F14878FC50BEC6EE));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ALLOW_MISSION_CREATOR_WARP(toggle: BOOL);
begin
  nativeInit(UINT64($DEA36202FC3382DF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MINIGAME_IN_PROGRESS(toggle: BOOL);
begin
  nativeInit(UINT64($19E00D7322C6F85B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_MINIGAME_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($2B4A15E44DE0F478));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_A_MINIGAME_SCRIPT: BOOL;
begin
  nativeInit(UINT64($7B30F65D7B710098));
  exit(BOOL(nativeCall^));
end;

function IS_SNIPER_INVERTED: BOOL;
begin
  nativeInit(UINT64($61A23B7EDA9BDA24));
  exit(BOOL(nativeCall^));
end;

function SHOULD_USE_METRIC_MEASUREMENTS: BOOL;
begin
  nativeInit(UINT64($D3D15555431AB793));
  exit(BOOL(nativeCall^));
end;

function GET_PROFILE_SETTING(profileSetting: cint): cint;
begin
  nativeInit(UINT64($C488FF2356EA7791));
  nativePush64(UINT64(profileSetting));
  exit(cint(nativeCall^));
end;

function ARE_STRINGS_EQUAL(string1, string2: PChar): BOOL;
begin
  nativeInit(UINT64($0C515FAB3FF9EA92));
  nativePush64(UINT64(string1));
  nativePush64(UINT64(string2));
  exit(BOOL(nativeCall^));
end;

function COMPARE_STRINGS(str1, str2: PChar; matchCase: BOOL; maxLength: cint): cint;
begin
  nativeInit(UINT64($1E34710ECD4AB0EB));
  nativePush64(UINT64(str1));
  nativePush64(UINT64(str2));
  nativePush64(UINT64(matchCase));
  nativePush64(UINT64(maxLength));
  exit(cint(nativeCall^));
end;

function ABSI(value: cint): cint;
begin
  nativeInit(UINT64($F0D31AD191A74F87));
  nativePush64(UINT64(value));
  exit(cint(nativeCall^));
end;

function ABSF(value: cfloat): cfloat;
begin
  nativeInit(UINT64($73D57CFFDD12C355));
  nativePush64(PUINT64(@value)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function IS_SNIPER_BULLET_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
begin
  nativeInit(UINT64($FEFCF11B01287125));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function IS_PROJECTILE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($5270A8FBC098C3F8));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function IS_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; _type: cint; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($2E0DC353342C4A6D));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(_type));
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function IS_PROJECTILE_TYPE_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; p7: Any; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($F0BC12401061DEA0));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function IS_PROJECTILE_TYPE_WITHIN_DISTANCE(x, y, z: cfloat; projectileHash: Hash; radius: cfloat; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($34318593248C8FB2));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(projectileHash));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; projectileHash: Hash; projectilePos: PVector3; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($8D7A43EC6A5FEA45));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(projectileHash));
  nativePush64(UINT64(projectilePos));
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA(vecAngledAreaPoint1X, vecAngledAreaPoint1Y, vecAngledAreaPoint1Z, vecAngledAreaPoint2X, vecAngledAreaPoint2Y, vecAngledAreaPoint2Z, distanceOfOppositeFace: cfloat; weaponType: Hash; positionOut: PVector3; bIsPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($3DA8C28346B62CED));
  nativePush64(PUINT64(@vecAngledAreaPoint1X)^);
  nativePush64(PUINT64(@vecAngledAreaPoint1Y)^);
  nativePush64(PUINT64(@vecAngledAreaPoint1Z)^);
  nativePush64(PUINT64(@vecAngledAreaPoint2X)^);
  nativePush64(PUINT64(@vecAngledAreaPoint2Y)^);
  nativePush64(PUINT64(@vecAngledAreaPoint2Z)^);
  nativePush64(PUINT64(@distanceOfOppositeFace)^);
  nativePush64(UINT64(weaponType));
  nativePush64(UINT64(positionOut));
  nativePush64(UINT64(bIsPlayer));
  exit(BOOL(nativeCall^));
end;

function GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(_ped: Ped; weaponHash: Hash; distance: cfloat; outCoords: PVector3; p4: BOOL): BOOL;
begin
  nativeInit(UINT64($DFB4138EEFED7B81));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(PUINT64(@distance)^);
  nativePush64(UINT64(outCoords));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(_ped: Ped; weaponHash: Hash; distance: cfloat; outCoords: PVector3; outProjectile: PGTAObject; p5: BOOL): BOOL;
begin
  nativeInit(UINT64($82FDE6A57EE4EE44));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(PUINT64(@distance)^);
  nativePush64(UINT64(outCoords));
  nativePush64(UINT64(outProjectile));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function IS_BULLET_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($1A8B5F3C01E2B477));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function IS_BULLET_IN_AREA(x, y, z, radius: cfloat; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($3F2023999AD51C1F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function IS_BULLET_IN_BOX(x1, y1, z1, x2, y2, z2: cfloat; ownedByPlayer: BOOL): BOOL;
begin
  nativeInit(UINT64($DE0F6D7450D37351));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(ownedByPlayer));
  exit(BOOL(nativeCall^));
end;

function HAS_BULLET_IMPACTED_IN_AREA(x, y, z, p3: cfloat; p4, p5: BOOL): BOOL;
begin
  nativeInit(UINT64($9870ACFB89A90995));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function HAS_BULLET_IMPACTED_IN_BOX(p0, p1, p2, p3, p4, p5: cfloat; p6, p7: BOOL): BOOL;
begin
  nativeInit(UINT64($DC8C5D7CFEAB8394));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function IS_ORBIS_VERSION: BOOL;
begin
  nativeInit(UINT64($A72BC0B675B1519E));
  exit(BOOL(nativeCall^));
end;

function IS_DURANGO_VERSION: BOOL;
begin
  nativeInit(UINT64($4D982ADB1978442D));
  exit(BOOL(nativeCall^));
end;

function IS_XBOX360_VERSION: BOOL;
begin
  nativeInit(UINT64($F6201B4DAF662A9D));
  exit(BOOL(nativeCall^));
end;

function IS_PS3_VERSION: BOOL;
begin
  nativeInit(UINT64($CCA1072C29D096C2));
  exit(BOOL(nativeCall^));
end;

function IS_PC_VERSION: BOOL;
begin
  nativeInit(UINT64($48AF36444B965238));
  exit(BOOL(nativeCall^));
end;

function IS_STEAM_VERSION: BOOL;
begin
  nativeInit(UINT64($0A27B2B6282F7169));
  exit(BOOL(nativeCall^));
end;

function IS_AUSSIE_VERSION: BOOL;
begin
  nativeInit(UINT64($9F1935CA1F724008));
  exit(BOOL(nativeCall^));
end;

function IS_JAPANESE_VERSION: BOOL;
begin
  nativeInit(UINT64($B8C0BB75D8A77DB3));
  exit(BOOL(nativeCall^));
end;

function IS_XBOX_PLATFORM: BOOL;
begin
  nativeInit(UINT64($138679CA01E21F53));
  exit(BOOL(nativeCall^));
end;

function IS_SCARLETT_VERSION: BOOL;
begin
  nativeInit(UINT64($C545AB1CF97ABB34));
  exit(BOOL(nativeCall^));
end;

function IS_SCE_PLATFORM: BOOL;
begin
  nativeInit(UINT64($F911E695C1EB8518));
  exit(BOOL(nativeCall^));
end;

function IS_PROSPERO_VERSION: BOOL;
begin
  nativeInit(UINT64($807ABE1AB65C24D2));
  exit(BOOL(nativeCall^));
end;

function IS_STRING_NULL(str: PChar): BOOL;
begin
  nativeInit(UINT64($F22B6C47C6EAB066));
  nativePush64(UINT64(str));
  exit(BOOL(nativeCall^));
end;

function IS_STRING_NULL_OR_EMPTY(str: PChar): BOOL;
begin
  nativeInit(UINT64($CA042B6957743895));
  nativePush64(UINT64(str));
  exit(BOOL(nativeCall^));
end;

function STRING_TO_INT(str: PChar; outInteger: pcint): BOOL;
begin
  nativeInit(UINT64($5A5F40FE637EB584));
  nativePush64(UINT64(str));
  nativePush64(UINT64(outInteger));
  exit(BOOL(nativeCall^));
end;

procedure SET_BITS_IN_RANGE(_var: pcint; rangeStart, rangeEnd, p3: cint);
begin
  nativeInit(UINT64($8EF07E15701D61ED));
  nativePush64(UINT64(_var));
  nativePush64(UINT64(rangeStart));
  nativePush64(UINT64(rangeEnd));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function GET_BITS_IN_RANGE(_var, rangeStart, rangeEnd: cint): cint;
begin
  nativeInit(UINT64($53158863FCC0893A));
  nativePush64(UINT64(_var));
  nativePush64(UINT64(rangeStart));
  nativePush64(UINT64(rangeEnd));
  exit(cint(nativeCall^));
end;

function ADD_STUNT_JUMP(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, camX, camY, camZ: cfloat; p15, p16, p17: cint): cint;
begin
  nativeInit(UINT64($1A992DA297A4630C));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(PUINT64(@x4)^);
  nativePush64(PUINT64(@y4)^);
  nativePush64(PUINT64(@z4)^);
  nativePush64(PUINT64(@camX)^);
  nativePush64(PUINT64(@camY)^);
  nativePush64(PUINT64(@camZ)^);
  nativePush64(UINT64(p15));
  nativePush64(UINT64(p16));
  nativePush64(UINT64(p17));
  exit(cint(nativeCall^));
end;

function ADD_STUNT_JUMP_ANGLED(x1, y1, z1, x2, y2, z2, radius1, x3, y3, z3, x4, y4, z4, radius2, camX, camY, camZ: cfloat; p17, p18, p19: cint): cint;
begin
  nativeInit(UINT64($BBE5D803A5360CBF));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@radius1)^);
  nativePush64(PUINT64(@x3)^);
  nativePush64(PUINT64(@y3)^);
  nativePush64(PUINT64(@z3)^);
  nativePush64(PUINT64(@x4)^);
  nativePush64(PUINT64(@y4)^);
  nativePush64(PUINT64(@z4)^);
  nativePush64(PUINT64(@radius2)^);
  nativePush64(PUINT64(@camX)^);
  nativePush64(PUINT64(@camY)^);
  nativePush64(PUINT64(@camZ)^);
  nativePush64(UINT64(p17));
  nativePush64(UINT64(p18));
  nativePush64(UINT64(p19));
  exit(cint(nativeCall^));
end;

procedure TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(toggle: BOOL);
begin
  nativeInit(UINT64($FB80AB299D2EE1BD));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DELETE_STUNT_JUMP(p0: cint);
begin
  nativeInit(UINT64($DC518000E39DAE1F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ENABLE_STUNT_JUMP_SET(p0: cint);
begin
  nativeInit(UINT64($E369A5783B866016));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DISABLE_STUNT_JUMP_SET(p0: cint);
begin
  nativeInit(UINT64($A5272EBEDD4747F6));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_STUNT_JUMPS_CAN_TRIGGER(toggle: BOOL);
begin
  nativeInit(UINT64($D79185689F8FD5DF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_STUNT_JUMP_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($7A3F19700A4D0525));
  exit(BOOL(nativeCall^));
end;

function IS_STUNT_JUMP_MESSAGE_SHOWING: BOOL;
begin
  nativeInit(UINT64($2272B0A1343129F4));
  exit(BOOL(nativeCall^));
end;

function GET_NUM_SUCCESSFUL_STUNT_JUMPS: cint;
begin
  nativeInit(UINT64($996DD1E1E02F1008));
  exit(cint(nativeCall^));
end;

function GET_TOTAL_SUCCESSFUL_STUNT_JUMPS: cint;
begin
  nativeInit(UINT64($6856EC3D35C81EA4));
  exit(cint(nativeCall^));
end;

procedure CANCEL_STUNT_JUMP;
begin
  nativeInit(UINT64($E6B7B0ACD4E4B75E));
  nativeCall;
end;

procedure SET_GAME_PAUSED(toggle: BOOL);
begin
  nativeInit(UINT64($577D1284D6873711));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_THIS_SCRIPT_CAN_BE_PAUSED(toggle: BOOL);
begin
  nativeInit(UINT64($AA391C728106F7AF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(toggle: BOOL);
begin
  nativeInit(UINT64($B98236CAAECEF897));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(para_hash: Hash; amount: cint): BOOL;
begin
  nativeInit(UINT64($071E2A839DE82D90));
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(para_hash: Hash): BOOL;
begin
  nativeInit(UINT64($557E43C447E700A8));
  nativePush64(UINT64(para_hash));
  exit(BOOL(nativeCall^));
end;

procedure OVERRIDE_FREEZE_FLAGS(p0: BOOL);
begin
  nativeInit(UINT64($FA3FFB0EEBC288A3));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_INSTANCE_PRIORITY_MODE(p0: cint);
begin
  nativeInit(UINT64($9BAE5AD2508DF078));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_INSTANCE_PRIORITY_HINT(flag: cint);
begin
  nativeInit(UINT64($C5F0A8EBD3F361CE));
  nativePush64(UINT64(flag));
  nativeCall;
end;

function IS_FRONTEND_FADING: BOOL;
begin
  nativeInit(UINT64($7EA2B6AF97ECA6ED));
  exit(BOOL(nativeCall^));
end;

procedure POPULATE_NOW;
begin
  nativeInit(UINT64($7472BB270D7B4F3E));
  nativeCall;
end;

function GET_INDEX_OF_CURRENT_LEVEL: cint;
begin
  nativeInit(UINT64($CBAD6729F7B1F4FC));
  exit(cint(nativeCall^));
end;

procedure SET_GRAVITY_LEVEL(level: cint);
begin
  nativeInit(UINT64($740E14FAD5842351));
  nativePush64(UINT64(level));
  nativeCall;
end;

procedure START_SAVE_DATA(p0: PAny; p1: Any; p2: BOOL);
begin
  nativeInit(UINT64($A9575F812C6A7997));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure STOP_SAVE_DATA;
begin
  nativeInit(UINT64($74E20C9145FB66FD));
  nativeCall;
end;

function GET_SIZE_OF_SAVE_DATA(p0: BOOL): cint;
begin
  nativeInit(UINT64($A09F896CE912481F));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure REGISTER_INT_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($34C9EE5986258415));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_INT64_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($A735353C77334EA0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_ENUM_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($10C2FA78D0E128A1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_FLOAT_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($7CAEC29ECB5DFEBB));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_BOOL_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($C8F4131414C835A1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_TEXT_LABEL_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($EDB1232C5BEAE62F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_TEXT_LABEL_15_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($6F7794F28C6B2535));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_TEXT_LABEL_23_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($48F069265A0E4BEC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_TEXT_LABEL_31_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($8269816F6CFD40F8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure REGISTER_TEXT_LABEL_63_TO_SAVE(p0: PAny; name: PChar);
begin
  nativeInit(UINT64($FAA457EF263E8763));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure START_SAVE_STRUCT_WITH_SIZE(p0: PAny; size: cint; structName: PChar);
begin
  nativeInit(UINT64($BF737600CDDBEADD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(size));
  nativePush64(UINT64(structName));
  nativeCall;
end;

procedure STOP_SAVE_STRUCT;
begin
  nativeInit(UINT64($EB1774DF12BB9F12));
  nativeCall;
end;

procedure START_SAVE_ARRAY_WITH_SIZE(p0: PAny; size: cint; arrayName: PChar);
begin
  nativeInit(UINT64($60FE567DF1B1AF9D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(size));
  nativePush64(UINT64(arrayName));
  nativeCall;
end;

procedure STOP_SAVE_ARRAY;
begin
  nativeInit(UINT64($04456F95153C6BE4));
  nativeCall;
end;

procedure COPY_SCRIPT_STRUCT(dst, src: PAny; size: cint);
begin
  nativeInit(UINT64($213AEB2B90CBA7AC));
  nativePush64(UINT64(dst));
  nativePush64(UINT64(src));
  nativePush64(UINT64(size));
  nativeCall;
end;

procedure ENABLE_DISPATCH_SERVICE(dispatchService: cint; toggle: BOOL);
begin
  nativeInit(UINT64($DC0F817884CDD856));
  nativePush64(UINT64(dispatchService));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(dispatchService: cint; toggle: BOOL);
begin
  nativeInit(UINT64($9B2BD3773123EA2F));
  nativePush64(UINT64(dispatchService));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(dispatchService: cint): cint;
begin
  nativeInit(UINT64($EB4A0C2D56441717));
  nativePush64(UINT64(dispatchService));
  exit(cint(nativeCall^));
end;

function CREATE_INCIDENT(dispatchService: cint; x, y, z: cfloat; numUnits: cint; radius: cfloat; outIncidentID: pcint; p7, p8: Any): BOOL;
begin
  nativeInit(UINT64($3F892CAF67444AE7));
  nativePush64(UINT64(dispatchService));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(numUnits));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(outIncidentID));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(BOOL(nativeCall^));
end;

function CREATE_INCIDENT_WITH_ENTITY(dispatchService: cint; _ped: Ped; numUnits: cint; radius: cfloat; outIncidentID: pcint; p5, p6: Any): BOOL;
begin
  nativeInit(UINT64($05983472F0494E60));
  nativePush64(UINT64(dispatchService));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(numUnits));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(outIncidentID));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(BOOL(nativeCall^));
end;

procedure DELETE_INCIDENT(incidentId: cint);
begin
  nativeInit(UINT64($556C1AA270D5A207));
  nativePush64(UINT64(incidentId));
  nativeCall;
end;

function IS_INCIDENT_VALID(incidentId: cint): BOOL;
begin
  nativeInit(UINT64($C8BC6461E629BEAA));
  nativePush64(UINT64(incidentId));
  exit(BOOL(nativeCall^));
end;

procedure SET_INCIDENT_REQUESTED_UNITS(incidentId, dispatchService, numUnits: cint);
begin
  nativeInit(UINT64($B08B85D860E7BA3C));
  nativePush64(UINT64(incidentId));
  nativePush64(UINT64(dispatchService));
  nativePush64(UINT64(numUnits));
  nativeCall;
end;

procedure SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(incidentId: cint; p1: cfloat);
begin
  nativeInit(UINT64($D261BA3E7E998072));
  nativePush64(UINT64(incidentId));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function FIND_SPAWN_POINT_IN_DIRECTION(posX, posY, posZ, fwdVecX, fwdVecY, fwdVecZ, distance: cfloat; spawnPoint: PVector3): BOOL;
begin
  nativeInit(UINT64($6874E2190B0C1972));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@fwdVecX)^);
  nativePush64(PUINT64(@fwdVecY)^);
  nativePush64(PUINT64(@fwdVecZ)^);
  nativePush64(PUINT64(@distance)^);
  nativePush64(UINT64(spawnPoint));
  exit(BOOL(nativeCall^));
end;

function ADD_POP_MULTIPLIER_AREA(x1, y1, z1, x2, y2, z2, p6, p7: cfloat; p8, p9: BOOL): cint;
begin
  nativeInit(UINT64($67F6413D3220E18D));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  exit(cint(nativeCall^));
end;

function DOES_POP_MULTIPLIER_AREA_EXIST(id: cint): BOOL;
begin
  nativeInit(UINT64($1327E2FE9746BAEE));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_POP_MULTIPLIER_AREA(id: cint; p1: BOOL);
begin
  nativeInit(UINT64($B129E447A2EDA4BF));
  nativePush64(UINT64(id));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_POP_MULTIPLIER_AREA_NETWORKED(id: cint): BOOL;
begin
  nativeInit(UINT64($1312F4B242609CE3));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

function ADD_POP_MULTIPLIER_SPHERE(x, y, z, radius, pedMultiplier, vehicleMultiplier: cfloat; p6, p7: BOOL): cint;
begin
  nativeInit(UINT64($32C7A7E8C43A1F80));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@pedMultiplier)^);
  nativePush64(PUINT64(@vehicleMultiplier)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  exit(cint(nativeCall^));
end;

function DOES_POP_MULTIPLIER_SPHERE_EXIST(id: cint): BOOL;
begin
  nativeInit(UINT64($171BAFB3C60389F4));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_POP_MULTIPLIER_SPHERE(id: cint; p1: BOOL);
begin
  nativeInit(UINT64($E6869BECDD8F2403));
  nativePush64(UINT64(id));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ENABLE_TENNIS_MODE(_ped: Ped; toggle, p2: BOOL);
begin
  nativeInit(UINT64($28A04B411933F8A6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_TENNIS_MODE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($5D5479D115290C3F));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure PLAY_TENNIS_SWING_ANIM(_ped: Ped; animDict, animName: PChar; p3, p4: cfloat; p5: BOOL);
begin
  nativeInit(UINT64($E266ED23311F24D4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(UINT64(p5));
  nativeCall;
end;

function GET_TENNIS_SWING_ANIM_COMPLETE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($17DF68D720AA77F8));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($19BFED045C647C49));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_TENNIS_SWING_ANIM_SWUNG(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($E95B0C7D5BA3B96B));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure PLAY_TENNIS_DIVE_ANIM(_ped: Ped; p1: cint; p2, p3, p4: cfloat; p5: BOOL);
begin
  nativeInit(UINT64($8FA9C42FC5D7C64B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(_ped: Ped; p1: PChar; p2: cfloat);
begin
  nativeInit(UINT64($54F157E0336A3822));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure RESET_DISPATCH_SPAWN_LOCATION;
begin
  nativeInit(UINT64($5896F2BD5683A4E1));
  nativeCall;
end;

procedure SET_DISPATCH_SPAWN_LOCATION(x, y, z: cfloat);
begin
  nativeInit(UINT64($D10F442036302D50));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure RESET_DISPATCH_IDEAL_SPAWN_DISTANCE;
begin
  nativeInit(UINT64($77A84429DD9F0A15));
  nativeCall;
end;

procedure SET_DISPATCH_IDEAL_SPAWN_DISTANCE(distance: cfloat);
begin
  nativeInit(UINT64($6FE601A64180D423));
  nativePush64(PUINT64(@distance)^);
  nativeCall;
end;

procedure RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0: Any);
begin
  nativeInit(UINT64($EB2DB0CAD13154B3));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(p0: Any; p1: cfloat);
begin
  nativeInit(UINT64($44F7CBC1BEB3327D));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(p0: Any; p1: cfloat);
begin
  nativeInit(UINT64($48838ED9937A15D1));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(x1, y1, z1, x2, y2, z2, width: cfloat): cint;
begin
  nativeInit(UINT64($918C7B2D2FF3928B));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  exit(cint(nativeCall^));
end;

function ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(x1, y1, x2, y2: cfloat): cint;
begin
  nativeInit(UINT64($2D4259F1FEB81DA9));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  exit(cint(nativeCall^));
end;

procedure REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(p0: cint);
begin
  nativeInit(UINT64($264AC28B01B353A5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure RESET_DISPATCH_SPAWN_BLOCKING_AREAS;
begin
  nativeInit(UINT64($AC7BFD5C1D83EA75));
  nativeCall;
end;

procedure RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN;
begin
  nativeInit(UINT64($D9F692D349249528));
  nativeCall;
end;

procedure SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(p0, p1: cint);
begin
  nativeInit(UINT64($E532EC1A63231B4F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ADD_TACTICAL_NAV_MESH_POINT(x, y, z: cfloat);
begin
  nativeInit(UINT64($B8721407EE9C3FF6));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure CLEAR_TACTICAL_NAV_MESH_POINTS;
begin
  nativeInit(UINT64($B3CD58CCA6CDA852));
  nativeCall;
end;

procedure SET_RIOT_MODE_ENABLED(toggle: BOOL);
begin
  nativeInit(UINT64($2587A48BC88DFADF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(p0: cint; windowTitle: PChar; p2: PAny; defaultText, defaultConcat1, defaultConcat2, defaultConcat3, defaultConcat4, defaultConcat5, defaultConcat6, defaultConcat7: PChar; maxInputLength: cint);
begin
  nativeInit(UINT64($CA78CFA0366592FE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(windowTitle));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(defaultText));
  nativePush64(UINT64(defaultConcat1));
  nativePush64(UINT64(defaultConcat2));
  nativePush64(UINT64(defaultConcat3));
  nativePush64(UINT64(defaultConcat4));
  nativePush64(UINT64(defaultConcat5));
  nativePush64(UINT64(defaultConcat6));
  nativePush64(UINT64(defaultConcat7));
  nativePush64(UINT64(maxInputLength));
  nativeCall;
end;

procedure DISPLAY_ONSCREEN_KEYBOARD(p0: cint; windowTitle, p2, defaultText, defaultConcat1, defaultConcat2, defaultConcat3: PChar; maxInputLength: cint);
begin
  nativeInit(UINT64($00DC833F2568DBF6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(windowTitle));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(defaultText));
  nativePush64(UINT64(defaultConcat1));
  nativePush64(UINT64(defaultConcat2));
  nativePush64(UINT64(defaultConcat3));
  nativePush64(UINT64(maxInputLength));
  nativeCall;
end;

function UPDATE_ONSCREEN_KEYBOARD: cint;
begin
  nativeInit(UINT64($0CF2B696BBF945AE));
  exit(cint(nativeCall^));
end;

function GET_ONSCREEN_KEYBOARD_RESULT: PChar;
begin
  nativeInit(UINT64($8362B09B91893647));
  exit(PChar(nativeCall^));
end;

procedure CANCEL_ONSCREEN_KEYBOARD;
begin
  nativeInit(UINT64($58A39BE597CE99CD));
  nativeCall;
end;

procedure NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(p0: cint);
begin
  nativeInit(UINT64($3ED1438C1F5C6612));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ACTION_MANAGER_ENABLE_ACTION(para_hash: Hash; enable: BOOL);
begin
  nativeInit(UINT64($A6A12939F16D85BE));
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(enable));
  nativeCall;
end;

function GET_REAL_WORLD_TIME: cint;
begin
  nativeInit(UINT64($3F60413F5DF65748));
  exit(cint(nativeCall^));
end;

procedure SUPRESS_RANDOM_EVENT_THIS_FRAME(eventType: cint; suppress: BOOL);
begin
  nativeInit(UINT64($1EAE0A6E978894A2));
  nativePush64(UINT64(eventType));
  nativePush64(UINT64(suppress));
  nativeCall;
end;

procedure SET_EXPLOSIVE_AMMO_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($A66C71C98D5F2CFB));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_FIRE_AMMO_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($11879CDD803D30F4));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_EXPLOSIVE_MELEE_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($FF1BED81BFDC0FE0));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_SUPER_JUMP_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($57FFF03E423A4C0B));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_BEAST_JUMP_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($438822C279B73B93));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_FORCED_JUMP_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($A1183BCFEE0F93D1));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function HAS_GAME_INSTALLED_THIS_SESSION: BOOL;
begin
  nativeInit(UINT64($6FDDF453C0C756EC));
  exit(BOOL(nativeCall^));
end;

procedure SET_TICKER_JOHNMARSTON_IS_DONE;
begin
  nativeInit(UINT64($FB00CA71DA386228));
  nativeCall;
end;

function ARE_PROFILE_SETTINGS_VALID: BOOL;
begin
  nativeInit(UINT64($5AA3BEFA29F03AD4));
  exit(BOOL(nativeCall^));
end;

procedure PREVENT_ARREST_STATE_THIS_FRAME;
begin
  nativeInit(UINT64($E3D969D2785FFB5E));
  nativeCall;
end;

procedure FORCE_GAME_STATE_PLAYING;
begin
  nativeInit(UINT64($C0AA53F866B3134D));
  nativeCall;
end;

procedure SCRIPT_RACE_INIT(p0, p1: cint; p2, p3: Any);
begin
  nativeInit(UINT64($0A60017F841A54F2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SCRIPT_RACE_SHUTDOWN;
begin
  nativeInit(UINT64($1FF6BF9A63E5757F));
  nativeCall;
end;

procedure SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(plyr: Player; p1, p2, p3: Any);
begin
  nativeInit(UINT64($1BB299305C3E8C13));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(plyr: Player; p1, p2: pcint): BOOL;
begin
  nativeInit(UINT64($8EF5573A1F801A5C));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

procedure START_END_USER_BENCHMARK;
begin
  nativeInit(UINT64($92790862E36C2ADA));
  nativeCall;
end;

procedure STOP_END_USER_BENCHMARK;
begin
  nativeInit(UINT64($C7DB36C24634F52B));
  nativeCall;
end;

procedure RESET_END_USER_BENCHMARK;
begin
  nativeInit(UINT64($437138B6A830166A));
  nativeCall;
end;

procedure SAVE_END_USER_BENCHMARK;
begin
  nativeInit(UINT64($37DEB0AA183FB6D8));
  nativeCall;
end;

function UI_STARTED_END_USER_BENCHMARK: BOOL;
begin
  nativeInit(UINT64($EA2F2061875EED90));
  exit(BOOL(nativeCall^));
end;

function LANDING_SCREEN_STARTED_END_USER_BENCHMARK: BOOL;
begin
  nativeInit(UINT64($3BBBD13E5041A79E));
  exit(BOOL(nativeCall^));
end;

function IS_COMMANDLINE_END_USER_BENCHMARK: BOOL;
begin
  nativeInit(UINT64($A049A5BE0F04F2F8));
  exit(BOOL(nativeCall^));
end;

function GET_BENCHMARK_ITERATIONS: cint;
begin
  nativeInit(UINT64($4750FC27570311EC));
  exit(cint(nativeCall^));
end;

function GET_BENCHMARK_PASS: cint;
begin
  nativeInit(UINT64($1B2366C3F2A5C8DF));
  exit(cint(nativeCall^));
end;

procedure RESTART_GAME;
begin
  nativeInit(UINT64($E574A662ACAEFBB1));
  nativeCall;
end;

procedure QUIT_GAME;
begin
  nativeInit(UINT64($EB6891F03362FB12));
  nativeCall;
end;

function HAS_ASYNC_INSTALL_FINISHED: BOOL;
begin
  nativeInit(UINT64($14832BF2ABA53FC5));
  exit(BOOL(nativeCall^));
end;

procedure CLEANUP_ASYNC_INSTALL;
begin
  nativeInit(UINT64($C79AE21974B01FB2));
  nativeCall;
end;

function PLM_IS_IN_CONSTRAINED_MODE: BOOL;
begin
  nativeInit(UINT64($684A41975F077262));
  exit(BOOL(nativeCall^));
end;

function PLM_GET_CONSTRAINED_DURATION_MS: cint;
begin
  nativeInit(UINT64($ABB2FA71C83A1B72));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_IS_IN_ANIMAL_FORM(toggle: BOOL);
begin
  nativeInit(UINT64($4EBB7E87AA0DBED4));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_IS_PLAYER_IN_ANIMAL_FORM: BOOL;
begin
  nativeInit(UINT64($9689123E3F213AA5));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_IS_REPEATING_A_MISSION(toggle: BOOL);
begin
  nativeInit(UINT64($9D8D44ADBBA61EF2));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_SCREEN_DIMMING_THIS_FRAME;
begin
  nativeInit(UINT64($23227DF0B2115469));
  nativeCall;
end;

function GET_CITY_DENSITY: cfloat;
begin
  nativeInit(UINT64($D10282B6E3751BA0));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE;
begin
  nativeInit(UINT64($693478ACBD7F18E7));
  nativeCall;
end;

procedure SET_CONTENT_ID_INDEX(contentId: Hash; index: cint);
begin
  nativeInit(UINT64($4B82FA6F2D624634));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(index));
  nativeCall;
end;

function GET_CONTENT_ID_INDEX(contentId: Hash): cint;
begin
  nativeInit(UINT64($ECF041186C5A94DC));
  nativePush64(UINT64(contentId));
  exit(cint(nativeCall^));
end;

procedure _SET_CONTENT_PROP_TYPE(model: Hash; _type: cint);
begin
  nativeInit(UINT64($BA4583AF4C678A9B));
  nativePush64(UINT64(model));
  nativePush64(UINT64(_type));
  nativeCall;
end;

function _GET_CONTENT_PROP_TYPE(model: Hash): cint;
begin
  nativeInit(UINT64($8BAF8AD59F47AAFC));
  nativePush64(UINT64(model));
  exit(cint(nativeCall^));
end;

procedure CREATE_MOBILE_PHONE(phoneType: cint);
begin
  nativeInit(UINT64($A4E8E696C532FBC7));
  nativePush64(UINT64(phoneType));
  nativeCall;
end;

procedure DESTROY_MOBILE_PHONE;
begin
  nativeInit(UINT64($3BC861DF703E5097));
  nativeCall;
end;

procedure SET_MOBILE_PHONE_SCALE(scale: cfloat);
begin
  nativeInit(UINT64($CBDD322A73D6D932));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

procedure SET_MOBILE_PHONE_ROTATION(rotX, rotY, rotZ: cfloat; p3: Any);
begin
  nativeInit(UINT64($BB779C0CA917E865));
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure GET_MOBILE_PHONE_ROTATION(rotation: PVector3; p1: Vehicle);
begin
  nativeInit(UINT64($1CEFB61F193070AE));
  nativePush64(UINT64(rotation));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_MOBILE_PHONE_POSITION(posX, posY, posZ: cfloat);
begin
  nativeInit(UINT64($693A5C6D6734085B));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativeCall;
end;

procedure GET_MOBILE_PHONE_POSITION(position: PVector3);
begin
  nativeInit(UINT64($584FDFDA48805B86));
  nativePush64(UINT64(position));
  nativeCall;
end;

procedure SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(toggle: BOOL);
begin
  nativeInit(UINT64($F511F759238A5122));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function CAN_PHONE_BE_SEEN_ON_SCREEN: BOOL;
begin
  nativeInit(UINT64($C4E2813898C97A4B));
  exit(BOOL(nativeCall^));
end;

procedure SET_MOBILE_PHONE_DOF_STATE(toggle: BOOL);
begin
  nativeInit(UINT64($375A706A5C2FD084));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CELL_SET_INPUT(direction: cint);
begin
  nativeInit(UINT64($95C9E72F3D7DEC9B));
  nativePush64(UINT64(direction));
  nativeCall;
end;

procedure CELL_HORIZONTAL_MODE_TOGGLE(toggle: BOOL);
begin
  nativeInit(UINT64($44E44169EF70138E));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CELL_CAM_ACTIVATE(p0, p1: BOOL);
begin
  nativeInit(UINT64($FDE8F069C542D126));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure CELL_CAM_ACTIVATE_SELFIE_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($015C49A93E3E086E));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($A2CCBE62CD4C91A4));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(p0: cfloat);
begin
  nativeInit(UINT64($1B0B4AEED5B9B41C));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(horizontalPan: cfloat);
begin
  nativeInit(UINT64($53F4892D18EC90A4));
  nativePush64(PUINT64(@horizontalPan)^);
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(vertPan: cfloat);
begin
  nativeInit(UINT64($3117D84EFA60F77B));
  nativePush64(PUINT64(@vertPan)^);
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(roll: cfloat);
begin
  nativeInit(UINT64($15E69E2802C24B8D));
  nativePush64(PUINT64(@roll)^);
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(distanceScaling: cfloat);
begin
  nativeInit(UINT64($AC2890471901861C));
  nativePush64(PUINT64(@distanceScaling)^);
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(yaw: cfloat);
begin
  nativeInit(UINT64($D6ADE981781FCA09));
  nativePush64(PUINT64(@yaw)^);
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(roll: cfloat);
begin
  nativeInit(UINT64($F1E22DC13F5EEBAD));
  nativePush64(PUINT64(@roll)^);
  nativeCall;
end;

procedure CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(pitch: cfloat);
begin
  nativeInit(UINT64($466DA42C89865553));
  nativePush64(PUINT64(@pitch)^);
  nativeCall;
end;

function CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($439E9BC95B7E7FBE));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure GET_MOBILE_PHONE_RENDER_ID(renderId: pcint);
begin
  nativeInit(UINT64($B4A53E05F68B6FA1));
  nativePush64(UINT64(renderId));
  nativeCall;
end;

procedure NETWORK_INITIALIZE_CASH(wallet, bank: cint);
begin
  nativeInit(UINT64($3DA5ECD1A56CBA6D));
  nativePush64(UINT64(wallet));
  nativePush64(UINT64(bank));
  nativeCall;
end;

procedure NETWORK_DELETE_CHARACTER(characterSlot: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($05A50AF38947EB8D));
  nativePush64(UINT64(characterSlot));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_MANUAL_DELETE_CHARACTER(characterSlot: cint);
begin
  nativeInit(UINT64($821418C727FCACD7));
  nativePush64(UINT64(characterSlot));
  nativeCall;
end;

function NETWORK_GET_PLAYER_IS_HIGH_EARNER: BOOL;
begin
  nativeInit(UINT64($FB2456B2040A6A67));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLEAR_CHARACTER_WALLET(characterSlot: cint);
begin
  nativeInit(UINT64($A921DED15FDF28F5));
  nativePush64(UINT64(characterSlot));
  nativeCall;
end;

procedure NETWORK_GIVE_PLAYER_JOBSHARE_CASH(amount: cint; gamerHandle: PAny);
begin
  nativeInit(UINT64($FB18DF9CB95E0105));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

procedure NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(value: cint; gamerHandle: PAny);
begin
  nativeInit(UINT64($56A3B51944C50598));
  nativePush64(UINT64(value));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

function NETWORK_CAN_SHARE_JOB_CASH: BOOL;
begin
  nativeInit(UINT64($1C2473301B1C66BA));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_REFUND_CASH(index: cint; context, reason: PChar; p3: BOOL);
begin
  nativeInit(UINT64($F9C812CD7C46E817));
  nativePush64(UINT64(index));
  nativePush64(UINT64(context));
  nativePush64(UINT64(reason));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_DEDUCT_CASH(amount: cint; p1, p2: PChar; p3, p4, p5: BOOL);
begin
  nativeInit(UINT64($18B7AE224B087E26));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

function NETWORK_MONEY_CAN_BET(amount: cint; p1, p2: BOOL): BOOL;
begin
  nativeInit(UINT64($81404F3DC124FE5B));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_BET(amount: cint): BOOL;
begin
  nativeInit(UINT64($3A54E33660DED67F));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CASINO_CAN_BET(para_hash: Hash): BOOL;
begin
  nativeInit(UINT64($158C16F5E4CF41F8));
  nativePush64(UINT64(para_hash));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CASINO_CAN_BET_PVC: BOOL;
begin
  nativeInit(UINT64($394DCDB9E836B7A9));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CASINO_CAN_BET_AMOUNT(p0: Any): BOOL;
begin
  nativeInit(UINT64($F62F6D9528358FE4));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CASINO_CAN_BUY_CHIPS_PVC: BOOL;
begin
  nativeInit(UINT64($8968D4D8C6C40C11));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CASINO_BUY_CHIPS(p0, p1: cint): BOOL;
begin
  nativeInit(UINT64($3BD101471C7F9EEC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CASINO_SELL_CHIPS(p0, p1: cint): BOOL;
begin
  nativeInit(UINT64($ED44897CB336F480));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE;
begin
  nativeInit(UINT64($CD0F5B5D932AE473));
  nativeCall;
end;

function CAN_PAY_AMOUNT_TO_BOSS(p0, p1, amount: cint; p3: pcint): BOOL;
begin
  nativeInit(UINT64($9777734DAD16992F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_EARN_FROM_PICKUP(amount: cint);
begin
  nativeInit(UINT64($ED1517D3AF17C698));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_CASHING_OUT(amount: cint);
begin
  nativeInit(UINT64($718FBBF67414FA36));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_GANGATTACK_PICKUP(amount: cint);
begin
  nativeInit(UINT64($A03D4ACE0A3284CE));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_ASSASSINATE_TARGET_KILLED(amount: cint);
begin
  nativeInit(UINT64($FA700D8A9905F78A));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_ROB_ARMORED_CARS(amount: cint);
begin
  nativeInit(UINT64($F514621E8EA463D0));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_CRATE_DROP(amount: cint);
begin
  nativeInit(UINT64($B1CC1B9EC3007A2A));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_BETTING(amount: cint; p1: PChar);
begin
  nativeInit(UINT64($827A5BA1A44ACA6D));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_JOB(amount: cint; p1: PChar);
begin
  nativeInit(UINT64($B2CC4836834E8A98));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_JOBX2(amount: cint; p1: PChar);
begin
  nativeInit(UINT64($DEBBF584665411D0));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_PREMIUM_JOB(amount: cint; p1: PChar);
begin
  nativeInit(UINT64($C8407624CEF2354B));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_BEND_JOB(amount: cint; heistHash: PChar);
begin
  nativeInit(UINT64($61326EE6DF15B0CA));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(heistHash));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_CHALLENGE_WIN(p0: Any; p1: PAny; p2: BOOL);
begin
  nativeInit(UINT64($2B171E6B2F64D8DF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_BOUNTY(amount: cint; gamerHandle, p2: PAny; p3: Any);
begin
  nativeInit(UINT64($131BB5DA15453ACF));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_IMPORT_EXPORT(amount: cint; modelHash: Hash);
begin
  nativeInit(UINT64($F92A014A634442D6));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_HOLDUPS(amount: cint);
begin
  nativeInit(UINT64($45B8154E077D9E4D));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_PROPERTY(amount: cint; propertyName: Hash);
begin
  nativeInit(UINT64($849648349D77F5C5));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(propertyName));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_AI_TARGET_KILL(p0, p1: Any);
begin
  nativeInit(UINT64($515B4A22E4D3C6D7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_NOT_BADSPORT(amount: cint);
begin
  nativeInit(UINT64($4337511FA8221D36));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7: Any);
begin
  nativeInit(UINT64($B539BD8A4C1EECF8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_PERSONAL_VEHICLE(p0, p1, p2, p3, p4, p5, p6, p7, p8: Any);
begin
  nativeInit(UINT64($3F4D00167E41E0AD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_DAILY_OBJECTIVES(amount: cint; _type: PChar; characterSlot: cint);
begin
  nativeInit(UINT64($6EA318C91C1A8786));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(_type));
  nativePush64(UINT64(characterSlot));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_AMBIENT_JOB(p0: cint; p1: PChar; p2: PAny);
begin
  nativeInit(UINT64($FB6DB092FBAE29E6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_JOB_BONUS(p0: Any; p1, p2: PAny);
begin
  nativeInit(UINT64($6816FB4416760775));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(p0, p1, p2: Any);
begin
  nativeInit(UINT64($FA009A62990671D4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_HEIST_AWARD(p0, p1, p2: Any);
begin
  nativeInit(UINT64($9D4FDBB035229669));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_FIRST_TIME_BONUS(p0, p1, p2: Any);
begin
  nativeInit(UINT64($11B0A20C493F7E36));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_GOON(p0, p1, p2: Any);
begin
  nativeInit(UINT64($CDA1C62BE2777802));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_BOSS(p0, p1, p2: Any);
begin
  nativeInit(UINT64($08B0CA7A6AB3AC32));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_AGENCY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($0CB1BE0633C024A8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_WAREHOUSE(amount, id: cint);
begin
  nativeInit(UINT64($3E4ADAFF1830F146));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_CONTRABAND(amount: cint; p1: Any);
begin
  nativeInit(UINT64($ECA658CE2A4E5A72));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_DESTROYING_CONTRABAND(p0, p1, p2: Any);
begin
  nativeInit(UINT64($84C0116D012E8FC2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_SMUGGLER_WORK(p0, p1, p2, p3, p4, p5: Any);
begin
  nativeInit(UINT64($6B7E4FB50D5F3D65));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_HANGAR_TRADE(p0, p1: Any);
begin
  nativeInit(UINT64($31BA138F6304FB9F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_PURCHASE_CLUB_HOUSE(p0, p1: Any);
begin
  nativeInit(UINT64($55A1E095DB052FA5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_BUSINESS_PRODUCT(amount: cint; p1, p2, p3: Any);
begin
  nativeInit(UINT64($8586789730B10CAF));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_VEHICLE_EXPORT(amount: cint; p1, p2: Any);
begin
  nativeInit(UINT64($EDEAD9A91EC768B3));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_SMUGGLER_AGENCY(amount: cint; p1, p2, p3: Any);
begin
  nativeInit(UINT64($DEE612F2D71B0308));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_BOUNTY_HUNTER_REWARD(p0: Any);
begin
  nativeInit(UINT64($F6B170F9A02E9E87));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_BUSINESS_BATTLE(p0: Any);
begin
  nativeInit(UINT64($42FCE14F50F27291));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(p0: Any; p1: cint);
begin
  nativeInit(UINT64($A75EAC69F59E96E7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(p0: Any);
begin
  nativeInit(UINT64($C5156361F26E2212));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_BUSINESS_HUB_SELL(p0, p1, p2: Any);
begin
  nativeInit(UINT64($0B39CF0D53F1C883));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_FMBB_BOSS_WORK(p0: Any);
begin
  nativeInit(UINT64($1FDA0AA679C9919B));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_FMBB_WAGE_BONUS(p0: Any);
begin
  nativeInit(UINT64($FFFBA1B1F7C0B6F4));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_CAN_SPEND_MONEY(p0: Any; p1, p2, p3: BOOL; p4, p5: Any): BOOL;
begin
  nativeInit(UINT64($AB3CAA6B422164DA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_SPEND_MONEY2(p0: Any; p1, p2, p3: BOOL; p4: PAny; p5, p6: Any): BOOL;
begin
  nativeInit(UINT64($7303E27CC6532080));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_BUY_ITEM(amount: cint; item: Hash; p2, p3: Any; p4: BOOL; item_name: PChar; p6, p7, p8: Any; p9: BOOL);
begin
  nativeInit(UINT64($F0077C797F66A355));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(item));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(item_name));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure NETWORK_SPENT_TAXI(amount: cint; p1, p2: BOOL; p3, p4: Any);
begin
  nativeInit(UINT64($17C3A7D31EAE39F9));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_PAY_EMPLOYEE_WAGE(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($5FD5ED82CBBE9989));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_PAY_MATCH_ENTRY_FEE(amount: cint; matchId: PChar; p2, p3: BOOL);
begin
  nativeInit(UINT64($9346E14F2AF74D46));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(matchId));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BETTING(amount, p1: cint; matchId: PChar; p3, p4: BOOL);
begin
  nativeInit(UINT64($1C436FD11FFA692F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(matchId));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPENT_WAGER(p0, p1: Any; amount: cint);
begin
  nativeInit(UINT64($D99DB210089617FE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_SPENT_IN_STRIPCLUB(p0: Any; p1: BOOL; p2: Any; p3: BOOL);
begin
  nativeInit(UINT64($EE99784E4467689C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_BUY_HEALTHCARE(cost: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($D9B067E55253E3DD));
  nativePush64(UINT64(cost));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_BUY_AIRSTRIKE(cost: cint; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($763B4BD305338F19));
  nativePush64(UINT64(cost));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_BUY_BACKUP_GANG(p0, p1: cint; p2, p3: BOOL; npcProvider: cint);
begin
  nativeInit(UINT64($A3EDDAA42411D3B9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(npcProvider));
  nativeCall;
end;

procedure NETWORK_BUY_HELI_STRIKE(cost: cint; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($81AA4610E3FD3A69));
  nativePush64(UINT64(cost));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_AMMO_DROP(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($B162DC95C0A3317B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_BUY_BOUNTY(amount: cint; victim: Player; p2, p3: BOOL; p4: Any);
begin
  nativeInit(UINT64($7B718E197453F2D9));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(victim));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_BUY_PROPERTY(cost: cint; propertyName: Hash; p2, p3: BOOL);
begin
  nativeInit(UINT64($650A08A280870AF6));
  nativePush64(UINT64(cost));
  nativePush64(UINT64(propertyName));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_BUY_SMOKES(p0: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($75AF80E61248EEBD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_HELI_PICKUP(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($7BF1D73DB2ECA492));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BOAT_PICKUP(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($524EE43A37232C00));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BULL_SHARK(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($A6DD8458CE24012C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_CASH_DROP(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($289016EC778D60E0));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_HIRE_MUGGER(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($E404BFB981665BF0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_ROBBED_BY_MUGGER(amount: cint; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($995A65F15F581359));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_HIRE_MERCENARY(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($E7B80E2BF9D80BD6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_WANTEDLEVEL(p0: Any; p1: PAny; p2, p3: BOOL; p4: Any);
begin
  nativeInit(UINT64($E1B13771A843C4F6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_OFFTHERADAR(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($A628A745E2275C5D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_REVEAL_PLAYERS(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($6E176F1B18BC0637));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_CARWASH(p0, p1, p2: Any; p3, p4: BOOL);
begin
  nativeInit(UINT64($EC03C719DB2F4306));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPENT_CINEMA(p0, p1: Any; p2, p3: BOOL);
begin
  nativeInit(UINT64($6B38ECB05A63A685));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_TELESCOPE(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($7FE61782AD94CC09));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_HOLDUPS(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($D9B86B9872039763));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_PASSIVE_MODE(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($6D3A430D1A809179));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BANK_INTEREST(p0: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($CA230C9682556CF1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_PROSTITUTES(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($B21B89501CFAC79E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_ARREST_BAIL(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($812F5488B1B2A299));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(amount: cint; vehicleModel: Hash; gamerHandle: PAny; notBankrupt, hasTheMoney: BOOL);
begin
  nativeInit(UINT64($9FF28D88C766E3E8));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(vehicleModel));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(notBankrupt));
  nativePush64(UINT64(hasTheMoney));
  nativeCall;
end;

procedure NETWORK_SPENT_CALL_PLAYER(p0: Any; p1: PAny; p2, p3: BOOL);
begin
  nativeInit(UINT64($ACDE7185B374177C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BOUNTY(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($29B260B84947DFCC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_FROM_ROCKSTAR(p0: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($6A445B64ED7ABEB5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(amount: cint): cint;
begin
  nativeInit(UINT64($9B5016A6433A68C5));
  nativePush64(UINT64(amount));
  exit(cint(nativeCall^));
end;

function PROCESS_CASH_GIFT(p0, p1: pcint; p2: PChar): PChar;
begin
  nativeInit(UINT64($20194D48EAEC9A41));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(PChar(nativeCall^));
end;

procedure NETWORK_SPENT_MOVE_SUBMARINE(p0, p1, p2: Any);
begin
  nativeInit(UINT64($CD4D66B43B1DD28D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_PLAYER_HEALTHCARE(p0, p1: cint; p2, p3: BOOL);
begin
  nativeInit(UINT64($7C99101F7FCE2EE5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_NO_COPS(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($D5BB406F4E04019F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_CARGO_SOURCING(p0, p1, p2, p3, p4, p5: Any);
begin
  nativeInit(UINT64($948705F6F9C50824));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure NETWORK_SPENT_REQUEST_JOB(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($8204DA7934DF3155));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_REQUEST_HEIST(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($9D26502BB97BFE62));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_BUY_FAIRGROUND_RIDE(amount: cint; p1: Any; p2, p3: BOOL; p4: Any);
begin
  nativeInit(UINT64($8A7B3952DD64D2B5));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

function NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS: BOOL;
begin
  nativeInit(UINT64($7C4FCCD2E4DEB394));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SPENT_JOB_SKIP(amount: cint; matchId: PChar; p2, p3: BOOL);
begin
  nativeInit(UINT64($28F174A67B8D0C2F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(matchId));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function NETWORK_SPENT_BOSS_GOON(amount: cint; p1, p2: BOOL): BOOL;
begin
  nativeInit(UINT64($FFBE02CD385356BD));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SPEND_GOON(p0, p1, amount: cint);
begin
  nativeInit(UINT64($08A1B82B91900682));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_SPEND_BOSS(p0, p1, p2: Any);
begin
  nativeInit(UINT64($DBC966A01C02BCA7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_MOVE_YACHT(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($E7DF4E0545DFB56E));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_RENAME_ORGANIZATION(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($FC4EE00A7B3BFB76));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_BUY_CONTRABAND_MISSION(p0, p1: cint; p2: Hash; p3, p4: BOOL);
begin
  nativeInit(UINT64($30FD873ECE50E9F6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPENT_PA_SERVICE_HELI(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($112209CE0290C03A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PA_SERVICE_VEHICLE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($ED5FD7AF10F5E262));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PA_SERVICE_SNACK(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($0D30EB83668E63C5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PA_SERVICE_DANCER(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($B49ECA122467D05F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PA_SERVICE_IMPOUND(p0, p1, p2: Any);
begin
  nativeInit(UINT64($E23ADC6FCB1F29AE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_PA_HELI_PICKUP(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($0FE8E1FCD2B86B33));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($69EF772B192614C1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($8E243837643D9583));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($BD0EFB25CCA8F97A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($A95F667A755725DA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(amount: cint; data: PAny; p2, p3: BOOL);
begin
  nativeInit(UINT64($33981D6804E62F49));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(data));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($4128464231E3CA0B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($2FAB6614CE22E196));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($05F04155A226FBBF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($E8B0B270B6E7C76E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_JUKEBOX(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($5BCDE0F640C773D2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_CLUB_HOUSE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($998E18CEB44487FC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_CLUB_HOUSE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($FA07759E6FDDD7CF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($6FD97159FE3C971A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($675D19C6067CAE08));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($A51B086B0B2C0F7A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_MC_ABILITY(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($D7CCCBA28C4ECAF0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($0035BB914316F1E3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_CHANGE_APPEARANCE(p0, p1, p2: Any);
begin
  nativeInit(UINT64($5F456788B05FAEAC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_VEHICLE_EXPORT_MODS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9: Any);
begin
  nativeInit(UINT64($A75CCF58A60A5FD1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($B4C2EC463672474E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($2AFC2D19B50797F2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_IMPORT_EXPORT_REPAIR(p0, p1, p2: Any);
begin
  nativeInit(UINT64($C1952F3773BA18FE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_HANGAR(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($CCB339CC970452DA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_HANGAR(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($615EB504B0788DAF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_HANGAR_UTILITY_CHARGES(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($B18AC2ECBB15CB6A));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_HANGAR_STAFF_CHARGES(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($B1F1346FD57685D7));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_TRUCK(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($AC272C0AE01B4BD8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_TRUCK(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($365E877C61D6988B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_BUNKER(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($12D148D26538D0F9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPRADE_BUNKER(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($0C82D21A77C22D49));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_SELL_BUNKER(amount: cint; bunkerHash: Hash);
begin
  nativeInit(UINT64($9251B6ABF2D0A5B4));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(bunkerHash));
  nativeCall;
end;

procedure NETWORK_SPENT_BALLISTIC_EQUIPMENT(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($5D97630A8A0EF123));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_RDR_BONUS(amount: cint; p1: Any);
begin
  nativeInit(UINT64($7A5349B773584675));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_WAGE_PAYMENT(amount: cint; p1: Any);
begin
  nativeInit(UINT64($35F8DA0E8A31EF1B));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_WAGE_PAYMENT_BONUS(amount: cint);
begin
  nativeInit(UINT64($005ACA7100BD101D));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_BASE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($4EA3F425C7744D21));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_BASE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($3DD3F33A5D55EA6F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_BUY_TILTROTOR(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($0CCE73BC7A11E885));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_TILTROTOR(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($165E135D6DFA2907));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_EMPLOY_ASSASSINS(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($5BBBD92186E1F1C5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_GANGOPS_CANNON(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($771ADB0E7635B7BF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_GANGOPS_SKIP_MISSION(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($DA947AE8880D5C18));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($487009DD91D93429));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_SELL_BASE(amount: cint; baseNameHash: Hash);
begin
  nativeInit(UINT64($0E1E2FF3F4EC11AA));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(baseNameHash));
  nativeCall;
end;

procedure NETWORK_EARN_TARGET_REFUND(amount, p1: cint);
begin
  nativeInit(UINT64($5B669CF2299A271F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_GANGOPS_WAGES(amount, p1: cint);
begin
  nativeInit(UINT64($2DCB19ABAB0380A8));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_GANGOPS_WAGES_BONUS(amount, p1: cint);
begin
  nativeInit(UINT64($15BB2A5C757EB91F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_DAR_CHALLENGE(amount: cint; p1: Any);
begin
  nativeInit(UINT64($CAC672087B4A24AB));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_DOOMSDAY_FINALE_BONUS(amount: cint; vehicleHash: Hash);
begin
  nativeInit(UINT64($128A747F4A230952));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(vehicleHash));
  nativeCall;
end;

procedure NETWORK_EARN_GANGOPS_AWARD(amount: cint; p1: PChar; p2: Any);
begin
  nativeInit(UINT64($A9A31475F530DFDA));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_GANGOPS_ELITE(amount: cint; p1: PChar; actIndex: cint);
begin
  nativeInit(UINT64($2597A0D4A4FC2C77));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(actIndex));
  nativeCall;
end;

procedure NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(earnedMoney: cint);
begin
  nativeInit(UINT64($1B882107C23A9022));
  nativePush64(UINT64(earnedMoney));
  nativeCall;
end;

procedure NETWORK_SPEND_GANGOPS_START_STRAND(_type, amount: cint; p2, p3: BOOL);
begin
  nativeInit(UINT64($A19EC0786E326E06));
  nativePush64(UINT64(_type));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_GANGOPS_TRIP_SKIP(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($5ECE6FD7B4EC8D6A));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(amount: cint);
begin
  nativeInit(UINT64($ED26584F6BDCBBFD));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_GANGOPS_SETUP(amount: cint; p1: PChar);
begin
  nativeInit(UINT64($A9160796D47A2CF8));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_GANGOPS_FINALE(amount: cint; p1: PChar);
begin
  nativeInit(UINT64($1C121FC9545E0D52));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SPEND_GANGOPS_REPAIR_COST(p0, p1, p2: Any);
begin
  nativeInit(UINT64($2A7CEC72C3443BCC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_NIGHTCLUB(p0: Any);
begin
  nativeInit(UINT64($E0F82D68C7039158));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_NIGHTCLUB_DANCING(p0: Any);
begin
  nativeInit(UINT64($B4DEAE67F35E2ACD));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_BB_EVENT_BONUS(amount: cint);
begin
  nativeInit(UINT64($FDD8D2440DAF1590));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_HACKER_TRUCK(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($2A93C46AAB1EACC9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_HACKER_TRUCK(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($226C284C830D0CA8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_HACKER_TRUCK(p0: Any; amount: cint; p2, p3: Any);
begin
  nativeInit(UINT64($E8815FE993896AD3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($ED76D195E6E3BF7F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($1DC9B749E7AE282B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3, p4, p5, p6: Any);
begin
  nativeInit(UINT64($C6E74CF8C884C880));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($65482BFD0923C8A1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_RDR_HATCHET_BONUS(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($E284D46FFDB82E36));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(plyr: Player; amount: cint; p1: Any; p2, p3: BOOL);
begin
  nativeInit(UINT64($876056684281655D));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(amount: cint; p1: Any; p2, p3: BOOL);
begin
  nativeInit(UINT64($DD21B016E4289465));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_BOUNTY_HUNTER_MISSION(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($1BEA0CD93470BB1F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPENT_REHIRE_DJ(amount: cint; p1: Any; p2, p3: BOOL);
begin
  nativeInit(UINT64($F6C8A544E4CF14FC));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPENT_ARENA_JOIN_SPECTATOR(amount: cint; p1: Any; p2, p3: BOOL);
begin
  nativeInit(UINT64($14EAEA58F93B55AF));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(amount: cint; p1: Any);
begin
  nativeInit(UINT64($E08256F972C7BB2C));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_ARENA_CAREER_PROGRESSION(amount: cint; p1: Any);
begin
  nativeInit(UINT64($0F99F70C61F14619));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SPEND_MAKE_IT_RAIN(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($E5F5A060439C2F5D));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SPEND_BUY_ARENA(amount: cint; p1, p2: BOOL; p3: PChar);
begin
  nativeInit(UINT64($40D5DA9550B7CB46));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_UPGRADE_ARENA(amount: cint; p1, p2: BOOL; p3: PChar);
begin
  nativeInit(UINT64($037ABB06825D7AB1));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_ARENA_SPECTATOR_BOX(amount, _type: cint; p2, p3: BOOL);
begin
  nativeInit(UINT64($7049BF858601DC0F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(_type));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(amount: cint; p1: Any; p2: BOOL);
begin
  nativeInit(UINT64($9A5BD1D0000B339C));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_SPIN_THE_WHEEL_CASH(amount: cint);
begin
  nativeInit(UINT64($676C48776CACBB5A));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_SPEND_ARENA_PREMIUM(amount: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($619496D837EFD920));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_ARENA_WAR(amount: cint; p1, p2, p3: Any);
begin
  nativeInit(UINT64($631F1CB8FB4130AA));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(amount: cint);
begin
  nativeInit(UINT64($5E7AE8AABE8B7C0D));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_ARENA_WAR_EVENT_CARGO(amount: cint);
begin
  nativeInit(UINT64($A82959062361B259));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_RC_TIME_TRIAL(amount: cint);
begin
  nativeInit(UINT64($DFF49EE984E7AAE8));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_DAILY_OBJECTIVE_EVENT(amount: cint);
begin
  nativeInit(UINT64($5128DF14A5BB86FC));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_SPEND_CASINO_MEMBERSHIP(amount: cint; p1, p2: BOOL; p3: cint);
begin
  nativeInit(UINT64($FBBE0570EDF39D46));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_BUY_CASINO(amount: cint; p1, p2: BOOL; data: PAny);
begin
  nativeInit(UINT64($34A6FC4D06C4DA0F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure NETWORK_SPEND_UPGRADE_CASINO(amount: cint; p1, p2: BOOL; data: PAny);
begin
  nativeInit(UINT64($4740D62BC1B4EBEA));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure NETWORK_SPEND_CASINO_GENERIC(amount: cint; p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($88BF9B612B84D3C3));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_TIME_TRIAL_WIN(amount: cint);
begin
  nativeInit(UINT64($0819DB99FD2FBBD8));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(amount: cint);
begin
  nativeInit(UINT64($5517F90043466049));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(amount: cint);
begin
  nativeInit(UINT64($83AD64F53F4E9483));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_SELL_PRIZE_VEHICLE(amount: cint; p1, p2: Any);
begin
  nativeInit(UINT64($8BCB27A057DF7B7F));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_MISSION_REWARD(amount: cint);
begin
  nativeInit(UINT64($566FD402B25787DE));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_STORY_MISSION_REWARD(amount: cint);
begin
  nativeInit(UINT64($AC95ED552157E092));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_MISSION_PARTICIPATION(amount: cint);
begin
  nativeInit(UINT64($09E8F18641BE2575));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_AWARD(amount: cint; para_hash: Hash);
begin
  nativeInit(UINT64($973A9781A34F8DEB));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

procedure NETWORK_SPEND_BUY_ARCADE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($870289A558348378));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_UPGRADE_ARCADE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($5574637681911FDA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10: Any);
begin
  nativeInit(UINT64($D30E8392F407C328));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativeCall;
end;

procedure NETWORK_SPEND_ARCADE_MGMT(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($B5B58E24868CB09E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPEND_PLAY_ARCADE(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($EAD3D81F2C3A1458));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPEND_ARCADE(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($43AA7FAC4E6D6687));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_HEIST(p0, p1, p2, p3, p4, p5, p6: Any);
begin
  nativeInit(UINT64($72E7C7B9615FA3C3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure NETWORK_EARN_UPGRADE_ARCADE(p0, p1, p2: Any);
begin
  nativeInit(UINT64($4C3B75694F7E0D9C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_ARCADE(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($D29334ED1A256DBF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_EARN_COLLECTABLES(p0, p1, p2: Any);
begin
  nativeInit(UINT64($A95CFB4E02390842));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_CHALLENGE(amount: cint; p1, p2: Any);
begin
  nativeInit(UINT64($0DD362F14F18942A));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_CASINO_HEIST_AWARDS(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($3EC7471E6909798A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_EARN_COLLECTABLE_ITEM(amount: cint; p1: Any);
begin
  nativeInit(UINT64($84FF63BD4966F33D));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(amount: cint; p1: Any);
begin
  nativeInit(UINT64($5C9B198AF5A54FA6));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_YATCH_MISSION(amount: cint; p1: Any);
begin
  nativeInit(UINT64($DE68E30D89F97132));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_DISPATCH_CALL(amount: cint; p1: Any);
begin
  nativeInit(UINT64($E2E244AB823B4483));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SPEND_BEACH_PARTY(p0: Any);
begin
  nativeInit(UINT64($54ABA22FA6371249));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SPEND_SUBMARINE(p0, p1, p2, p3, p4, p5: Any);
begin
  nativeInit(UINT64($6C8BC1488527AAAB));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure NETWORK_SPEND_CASINO_CLUB(amount1: cint; p1: Any; p2: BOOL; p3: Any; p4, p5, p6, amount2: cint; p8: Any);
begin
  nativeInit(UINT64($C991C255AA6D90B2));
  nativePush64(UINT64(amount1));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(amount2));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure NETWORK_SPEND_BUY_SUB(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($90CD7C6871FBF1B4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_UPGRADE_SUB(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($89049A84065CE68E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_ISLAND_HEIST(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($E86689E5F82DE429));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_ISLAND_HEIST(amount1: cint; p1, p2, p3: Any; amount2, p5: cint);
begin
  nativeInit(UINT64($D21D111C46BA9F15));
  nativePush64(UINT64(amount1));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(amount2));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure NETWORK_EARN_BEACH_PARTY_LOST_FOUND(p0, p1, p2: Any);
begin
  nativeInit(UINT64($A51338E0DCCD4065));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(p0, p1: Any);
begin
  nativeInit(UINT64($E2BB399D90942091));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(amount1: cint; p1, p2: Any; amount2: cint; p4: Any);
begin
  nativeInit(UINT64($1464E17207CD36E2));
  nativePush64(UINT64(amount1));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(amount2));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPEND_CAR_CLUB_BAR(p0: Any; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($925227803A0EAA1B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_AUTOSHOP_MODIFY(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($9BEA350D7C48061B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPEND_CAR_CLUB_TAKEOVER(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($D1E46824E6FB92B5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_BUY_AUTOSHOP(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($EEB7E5D1FEB20869));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_UPGRADE_AUTOSHOP(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($DD829AA198FDC46C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_AUTOSHOP_BUSINESS(p0, p1, p2: Any);
begin
  nativeInit(UINT64($36A7FD5A7194B03E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_AUTOSHOP_INCOME(p0: Any; p1: cint);
begin
  nativeInit(UINT64($C66D1CF99ED7FE25));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_CARCLUB_MEMBERSHIP(p0: Any);
begin
  nativeInit(UINT64($BC6227792A188E2E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_DAILY_VEHICLE(p0, p1: Any);
begin
  nativeInit(UINT64($533073E8A596008C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_DAILY_VEHICLE_BONUS(p0: Any);
begin
  nativeInit(UINT64($FE65AFE7308E32B2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_TUNER_AWARD(p0, p1, p2: Any);
begin
  nativeInit(UINT64($B846F547D3792DF6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_TUNER_ROBBERY(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($BCB266247193AC61));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_EARN_UPGRADE_AUTOSHOP(p0, p1: Any);
begin
  nativeInit(UINT64($C10322A8D3E061EE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SPEND_INTERACTION_MENU_ABILITY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($93AA4165CB67E925));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_SET_COMMON_FIELDS(p0, p1, p2: Any; p3: BOOL);
begin
  nativeInit(UINT64($B9F7A469460E7A4A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_SET_DISCOUNT(p0: BOOL);
begin
  nativeInit(UINT64($7E2F4E8F44CAF4E0));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SPEND_BUY_AGENCY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($EA8CD3C9B3C35884));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_UPGRADE_AGENCY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($6CCA64840589A3B6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_AGENCY(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($1B2120405080125C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPEND_HIDDEN(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($BF8793B91EA094A7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_SOURCE_BIKE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($D9DF467CBE4398C8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_COMP_SUV(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($D86581F9E7CDA383));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_SUV_FST_TRVL(p0: cint; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($61A2DF64ED2D396E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_SUPPLY(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($EBD482B82ACB8BAD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_BIKE_SHOP(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($923AEA8E78F8DF0B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SPEND_VEHICLE_REQUESTED(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($02D24A35A9CC3503));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure NETWORK_SPEND_GUNRUNNING(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($2CEB0E0BC2A77C05));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_AGENCY_SAFE(p0: Any);
begin
  nativeInit(UINT64($663B4B9D11742A12));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_EARN_AWARD_CONTRACT(p0, p1: Any);
begin
  nativeInit(UINT64($146D4EB6D22A403F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_AGENCY_CONTRACT(p0, p1: Any);
begin
  nativeInit(UINT64($38482AD49CB905C7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_AWARD_PHONE(p0, p1: Any);
begin
  nativeInit(UINT64($7397A115030F1BE3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_AGENCY_PHONE(p0, p1, p2: Any);
begin
  nativeInit(UINT64($E29F3D5FA63B1B82));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_EARN_AWARD_FIXER_MISSION(p0, p1: Any);
begin
  nativeInit(UINT64($88D6C327D6C57C45));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FIXER_PREP(p0, p1: Any);
begin
  nativeInit(UINT64($6283E5DE4C4460C6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FIXER_FINALE(p0, p1: Any);
begin
  nativeInit(UINT64($BA154373C5FE51E8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(p0, p1: Any);
begin
  nativeInit(UINT64($F4A8E57460BF2037));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_AWARD_SHORT_TRIP(p0, p1: Any);
begin
  nativeInit(UINT64($5B4DBDED84D6A420));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_FIXER_RIVAL_DELIVERY(p0, p1: Any);
begin
  nativeInit(UINT64($235D41210B3A1A5E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_UPGRADE_AGENCY(p0, p1: Any);
begin
  nativeInit(UINT64($D07C7C3F1995108C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SPEND_APARTMENT_UTILITIES(amount: cint; p1, p2: BOOL; data: PAny);
begin
  nativeInit(UINT64($1254B5B3925EFD3D));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure NETWORK_SPEND_BUSINESS_PROPERTY_FEES(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($92D1CFDA1227FF1C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_SIGHTSEEING_REWARD(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($45087AE480B233AC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_EARN_BIKER_SHOP(p0, p1: Any);
begin
  nativeInit(UINT64($2C5809EB9DF57257));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_EARN_BIKER(p0: Any);
begin
  nativeInit(UINT64($71BEC32FA466E105));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_YOHAN_SOURCE_GOODS(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($59498BC8B1C8B15C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_BUY_MFGARAGE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($A2ED36DCF0FCA413));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_UPGRADE_MFGARAGE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($CF8F346DDDC66643));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_BUY_SUPPLIES(p0: cint; p1, p2: BOOL; p3: cint);
begin
  nativeInit(UINT64($B48185C0CA67B16B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_BUY_ACID_LAB(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($F1E26A7924327152));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($110EE9D486C23126));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR(p0: cint; p1, p2: BOOL; p3: cint);
begin
  nativeInit(UINT64($A7D541C9ACD63133));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP(p0: cint; p1, p2: BOOL; p3: cint);
begin
  nativeInit(UINT64($2940558E05BCC2EC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_UPGRADE_ACID_LAB_MINES(p0: cint; p1, p2: BOOL; p3: cint);
begin
  nativeInit(UINT64($4B99AB08C92C54E4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_RENAME_ACID_LAB(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($842B1C5AF61ACDE9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPEND_RENAME_ACID_PRODUCT(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($446798F7495DD7D8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_EARN_AWARD_JUGGALO_MISSION(p0, p1: Any);
begin
  nativeInit(UINT64($DDF047577F1A02A7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_AWARD_ACID_LAB(p0, p1: Any);
begin
  nativeInit(UINT64($D1A8165767AD2D23));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_AWARD_DAILY_STASH(p0, p1: Any);
begin
  nativeInit(UINT64($C30650FA74A19D02));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_AWARD_DEAD_DROP(p0, p1: Any);
begin
  nativeInit(UINT64($D01EBAEA1F905EF6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_AWARD_RANDOM_EVENT(p0, p1: Any);
begin
  nativeInit(UINT64($BEAFBB1B98B7EF55));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_AWARD_TAXI(p0, p1: Any);
begin
  nativeInit(UINT64($A914768AD35CD3A5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_STREET_DEALER(p0, p1: Any);
begin
  nativeInit(UINT64($A81017EE1324FDFE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_SELL_ACID(p0, p1: Any);
begin
  nativeInit(UINT64($79B656937DF6DF5D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB(p0, p1: Any);
begin
  nativeInit(UINT64($E3942D59E8A7F70D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB(p0, p1: Any);
begin
  nativeInit(UINT64($136F11B5DF1B304D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB(p0, p1: Any);
begin
  nativeInit(UINT64($CA3EF9B09A8D76B4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_JUGGALO_STORY_MISSION(p0, p1: Any);
begin
  nativeInit(UINT64($E01D10BA8CD53621));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION(p0, p1: Any);
begin
  nativeInit(UINT64($40FF6CCCC476185C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_FOOLIGAN_JOB(p0, p1: Any);
begin
  nativeInit(UINT64($CE4452AE85F5E252));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION(p0, p1: Any);
begin
  nativeInit(UINT64($C376B92D0E060970));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_TAXI_JOB(p0, p1: Any);
begin
  nativeInit(UINT64($991E1588FAD9019D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED(p0, p1: Any);
begin
  nativeInit(UINT64($CABC9874AFA70D6D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION(p0, p1: Any);
begin
  nativeInit(UINT64($9C0C6BD0F94CE391));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_AVENGER(amount, p1: cint);
begin
  nativeInit(UINT64($55F006B9D4A46C1D));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_EARN_SMUGGLER_OPS(p0, p1, p2: Any);
begin
  nativeInit(UINT64($DEA273D5F8A9661A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure _NETWORK_EARN_BONUS_OBJECTIVE(amount: cint; p1, p2: Any);
begin
  nativeInit(UINT64($DCEF983C24191997));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure _NETWORK_EARN_PROGRESS_HUB(p0, p1: Any);
begin
  nativeInit(UINT64($F8332B06F0EECC9C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _NETWORK_SPENT_AIR_FREIGHT(hangarCargoSourcingPrice: cint; fromBank, fromBankAndWallet: BOOL; cost, warehouseId, warehouseSlot: cint);
begin
  nativeInit(UINT64($8C7E8D6F96C9E948));
  nativePush64(UINT64(hangarCargoSourcingPrice));
  nativePush64(UINT64(fromBank));
  nativePush64(UINT64(fromBankAndWallet));
  nativePush64(UINT64(cost));
  nativePush64(UINT64(warehouseId));
  nativePush64(UINT64(warehouseSlot));
  nativeCall;
end;

procedure _NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP(amount: cint; fromBank, fromBankAndWallet: BOOL; cost: cint);
begin
  nativeInit(UINT64($ED1B407BADA42CEC));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(fromBank));
  nativePush64(UINT64(fromBankAndWallet));
  nativePush64(UINT64(cost));
  nativeCall;
end;

procedure _NETWORK_SPENT_STEALTH_MODULE(amount: cint; fromBank, fromBankAndWallet: BOOL; p3: Hash);
begin
  nativeInit(UINT64($95CE79A6939C537A));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(fromBank));
  nativePush64(UINT64(fromBankAndWallet));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPENT_MISSILE_JAMMER(amount: cint; fromBank, fromBankAndWallet: BOOL; p3: Hash);
begin
  nativeInit(UINT64($D687100F616163F4));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(fromBank));
  nativePush64(UINT64(fromBankAndWallet));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure _NETWORK_SPENT_GENERIC(price: cint; p1, p2: BOOL; stat, spent: Hash; p5, p6: PChar; data: PAny);
begin
  nativeInit(UINT64($2803B027479FB640));
  nativePush64(UINT64(price));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(stat));
  nativePush64(UINT64(spent));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure _NETWORK_EARN_GENERIC(amount: cint; earn: Hash; p2, p3: PChar; data: PAny);
begin
  nativeInit(UINT64($BF7B5BB7ED890380));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(earn));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure _NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE;
begin
  nativeInit(UINT64($E03B9F95556E48E9));
  nativeCall;
end;

function NETWORK_GET_VC_BANK_BALANCE: cint;
begin
  nativeInit(UINT64($76EF28DA05EA395A));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_VC_WALLET_BALANCE(characterSlot: cint): cint;
begin
  nativeInit(UINT64($A40F9C2623F6A8B5));
  nativePush64(UINT64(characterSlot));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_VC_BALANCE: cint;
begin
  nativeInit(UINT64($5CBAD97E059E1B94));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_EVC_BALANCE: cint;
begin
  nativeInit(UINT64($5D1E75F91C07DEE5));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_PVC_BALANCE: cint;
begin
  nativeInit(UINT64($4F54F3B6C202FB4E));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_STRING_WALLET_BALANCE(characterSlot: cint): PChar;
begin
  nativeInit(UINT64($F9B10B529DCFB33B));
  nativePush64(UINT64(characterSlot));
  exit(PChar(nativeCall^));
end;

function NETWORK_GET_STRING_BANK_BALANCE: PChar;
begin
  nativeInit(UINT64($A6FA3979BED01B81));
  exit(PChar(nativeCall^));
end;

function NETWORK_GET_STRING_BANK_WALLET_BALANCE(character: cint): PChar;
begin
  nativeInit(UINT64($700AF71AE615E6DD));
  nativePush64(UINT64(character));
  exit(PChar(nativeCall^));
end;

function NETWORK_GET_CAN_SPEND_FROM_WALLET(amount, characterSlot: cint): BOOL;
begin
  nativeInit(UINT64($ED5AB8860415BABA));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(characterSlot));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_CAN_SPEND_FROM_BANK(amount: cint): BOOL;
begin
  nativeInit(UINT64($A31FD6A0865B6D14));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(amount, characterSlot: cint): BOOL;
begin
  nativeInit(UINT64($DC18531D7019A535));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(characterSlot));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PVC_TRANSFER_BALANCE: cint;
begin
  nativeInit(UINT64($13A8DE2FD77D04F3));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_CAN_TRANSFER_CASH(amount: cint): BOOL;
begin
  nativeInit(UINT64($08E8EEADFD0DC4A0));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_RECEIVE_PLAYER_CASH(p0, p1, p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($5D17BE59D2123284));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_REMAINING_TRANSFER_BALANCE: cint;
begin
  nativeInit(UINT64($EA560AC9EEB1E19B));
  exit(cint(nativeCall^));
end;

function WITHDRAW_VC(amount: cint): cint;
begin
  nativeInit(UINT64($F70EFA14FE091429));
  nativePush64(UINT64(amount));
  exit(cint(nativeCall^));
end;

function DEPOSIT_VC(amount: cint): BOOL;
begin
  nativeInit(UINT64($E260E0BB9CD995AC));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function HAS_VC_WITHDRAWAL_COMPLETED(p0: Any): BOOL;
begin
  nativeInit(UINT64($E154B48B68EF72BC));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function WAS_VC_WITHDRAWAL_SUCCESSFUL(p0: Any): BOOL;
begin
  nativeInit(UINT64($6FCF8DDEA146C45B));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_USE_SERVER_TRANSACTIONS: BOOL;
begin
  nativeInit(UINT64($7D2708796355B20B));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_CATALOG_ITEM_IS_VALID(name: PChar): BOOL;
begin
  nativeInit(UINT64($BD4D7EAF8A30F637));
  nativePush64(UINT64(name));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(para_hash: Hash): BOOL;
begin
  nativeInit(UINT64($247F0F73A182EA0B));
  nativePush64(UINT64(para_hash));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_GET_PRICE(itemHash, categoryHash: Hash; p2: BOOL): cint;
begin
  nativeInit(UINT64($C27009422FCCA88D));
  nativePush64(UINT64(itemHash));
  nativePush64(UINT64(categoryHash));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

function NET_GAMESERVER_CATALOG_IS_VALID: BOOL;
begin
  nativeInit(UINT64($3C4487461E9B0DCB));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_IS_CATALOG_CURRENT: BOOL;
begin
  nativeInit(UINT64($2B949A1E6AEC8F6A));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_GET_CATALOG_CLOUD_CRC: Hash;
begin
  nativeInit(UINT64($85F6C9ABA1DE2BCF));
  exit(Hash(nativeCall^));
end;

function NET_GAMESERVER_REFRESH_SERVER_CATALOG: BOOL;
begin
  nativeInit(UINT64($357B152EF96C30B6));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(state: pcint): BOOL;
begin
  nativeInit(UINT64($CF38DAFBB49EDE5E));
  nativePush64(UINT64(state));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_INIT_SESSION: BOOL;
begin
  nativeInit(UINT64($E3E5A7C64CA2C6ED));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(p0: pcint): BOOL;
begin
  nativeInit(UINT64($0395CB47B022E62C));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_START_SESSION(charSlot: cint): BOOL;
begin
  nativeInit(UINT64($A135AC892A58FC07));
  nativePush64(UINT64(charSlot));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_START_SESSION_PENDING: BOOL;
begin
  nativeInit(UINT64($72EB7BA9B69BF6AB));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(p0: pcint): BOOL;
begin
  nativeInit(UINT64($170910093218C8B9));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(p0: pcint): BOOL;
begin
  nativeInit(UINT64($C13C38E47EA5DF31));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_IS_SESSION_VALID(charSlot: cint): BOOL;
begin
  nativeInit(UINT64($B24F0944DA203D9E));
  nativePush64(UINT64(charSlot));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_CLEAR_SESSION(p0: cint): BOOL;
begin
  nativeInit(UINT64($74A0FD0688F1EE45));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(charSlot: cint): BOOL;
begin
  nativeInit(UINT64($2F41D51BA3BCD1F1));
  nativePush64(UINT64(charSlot));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_IS_SESSION_REFRESH_PENDING: BOOL;
begin
  nativeInit(UINT64($810E8431C0614BF9));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_START_SESSION_RESTART(inventory, playerbalance: BOOL): BOOL;
begin
  nativeInit(UINT64($35A1B3E1D1315CFA));
  nativePush64(UINT64(inventory));
  nativePush64(UINT64(playerbalance));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_TRANSACTION_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($613F125BA3BD2EB9));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(p0: pcint; p1: PBOOL): BOOL;
begin
  nativeInit(UINT64($897433D292B44130));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_BASKET_START(transactionId: pcint; categoryHash, actionHash: Hash; flags: cint): BOOL;
begin
  nativeInit(UINT64($279F08B1A4B29B7E));
  nativePush64(UINT64(transactionId));
  nativePush64(UINT64(categoryHash));
  nativePush64(UINT64(actionHash));
  nativePush64(UINT64(flags));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_BASKET_END: BOOL;
begin
  nativeInit(UINT64($FA336E7F40C0A0D0));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_BASKET_IS_ACTIVE: BOOL;
begin
  nativeInit(UINT64($A65568121DF2EA26));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_BASKET_ADD_ITEM(itemData: PAny; quantity: cint): BOOL;
begin
  nativeInit(UINT64($F30980718C8ED876));
  nativePush64(UINT64(itemData));
  nativePush64(UINT64(quantity));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_BASKET_IS_FULL: BOOL;
begin
  nativeInit(UINT64($27F76CC6C55AD30E));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(p0: Any; p1: PAny): BOOL;
begin
  nativeInit(UINT64($E1A0450ED46A7812));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_CHECKOUT_START(transactionId: cint): BOOL;
begin
  nativeInit(UINT64($39BE7CEA8D9CC8E6));
  nativePush64(UINT64(transactionId));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_BEGIN_SERVICE(transactionId: pcint; categoryHash, itemHash, actionTypeHash: Hash; value, flags: cint): BOOL;
begin
  nativeInit(UINT64($3C5FD37B5499582E));
  nativePush64(UINT64(transactionId));
  nativePush64(UINT64(categoryHash));
  nativePush64(UINT64(itemHash));
  nativePush64(UINT64(actionTypeHash));
  nativePush64(UINT64(value));
  nativePush64(UINT64(flags));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_END_SERVICE(transactionId: cint): BOOL;
begin
  nativeInit(UINT64($E2A99A9B524BEFFF));
  nativePush64(UINT64(transactionId));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_DELETE_CHARACTER(slot: cint; transfer: BOOL; reason: Hash): BOOL;
begin
  nativeInit(UINT64($51F1A8E48C3D2F6D));
  nativePush64(UINT64(slot));
  nativePush64(UINT64(transfer));
  nativePush64(UINT64(reason));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS: cint;
begin
  nativeInit(UINT64($0A6D923DFFC9BD89));
  exit(cint(nativeCall^));
end;

function NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED: BOOL;
begin
  nativeInit(UINT64($112CEF1615A1139F));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(charSlot, amount: cint): BOOL;
begin
  nativeInit(UINT64($D47A2C1BA117471D));
  nativePush64(UINT64(charSlot));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(charSlot, amount: cint): BOOL;
begin
  nativeInit(UINT64($C2F7FE5309181C7D));
  nativePush64(UINT64(charSlot));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS: cint;
begin
  nativeInit(UINT64($23789E777D14CE44));
  exit(cint(nativeCall^));
end;

function NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS: cint;
begin
  nativeInit(UINT64($350AA5EBC03D3BD2));
  exit(cint(nativeCall^));
end;

function NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED: BOOL;
begin
  nativeInit(UINT64($498C1E05CE5F7877));
  exit(BOOL(nativeCall^));
end;

function NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(p0: cint): BOOL;
begin
  nativeInit(UINT64($9507D4271988E1AE));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function GET_ONLINE_VERSION: PChar;
begin
  nativeInit(UINT64($FCA9373EF340AC0A));
  exit(PChar(nativeCall^));
end;

function NETWORK_IS_SIGNED_IN: BOOL;
begin
  nativeInit(UINT64($054354A99211EB96));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_SIGNED_ONLINE: BOOL;
begin
  nativeInit(UINT64($1077788E268557C2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_NP_AVAILABLE: BOOL;
begin
  nativeInit(UINT64($BD545D44CCE70597));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_NP_PENDING: BOOL;
begin
  nativeInit(UINT64($EBCAB9E5048434F4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_NP_UNAVAILABLE_REASON: cint;
begin
  nativeInit(UINT64($74FB3E29E6D10FA9));
  exit(cint(nativeCall^));
end;

function NETWORK_IS_CONNETED_TO_NP_PRESENCE: BOOL;
begin
  nativeInit(UINT64($7808619F31FF22DB));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_LOGGED_IN_TO_PSN: BOOL;
begin
  nativeInit(UINT64($A0FA4EC6A05DA44E));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_VALID_ROS_CREDENTIALS: BOOL;
begin
  nativeInit(UINT64($85443FF4C328F53B));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_REFRESHING_ROS_CREDENTIALS: BOOL;
begin
  nativeInit(UINT64($8D11E61A4ABF49CC));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_CLOUD_AVAILABLE: BOOL;
begin
  nativeInit(UINT64($9A4CF4F48AD77302));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_SOCIAL_CLUB_ACCOUNT: BOOL;
begin
  nativeInit(UINT64($67A5589628E0CFF6));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT: BOOL;
begin
  nativeInit(UINT64($BA9775570DB788CF));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_HOST: BOOL;
begin
  nativeInit(UINT64($8DB296B814EDDA07));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_HOST_PLAYER_INDEX: Player;
begin
  nativeInit(UINT64($8251FB94DC4FDFC8));
  exit(Player(nativeCall^));
end;

function NETWORK_WAS_GAME_SUSPENDED: BOOL;
begin
  nativeInit(UINT64($4237E822315D8BA9));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_ONLINE_PRIVILEGES: BOOL;
begin
  nativeInit(UINT64($25CB5A9F37BFD063));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_AGE_RESTRICTIONS: BOOL;
begin
  nativeInit(UINT64($1353F87E89946207));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_USER_CONTENT_PRIVILEGES(p0: cint): BOOL;
begin
  nativeInit(UINT64($72D918C99BCACC54));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_COMMUNICATION_PRIVILEGES(p0: cint; plyr: Player): BOOL;
begin
  nativeInit(UINT64($AEEF48CDF5B6CE7C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function _NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES: BOOL;
begin
  nativeInit(UINT64($E1E02509169C124E));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CHECK_ONLINE_PRIVILEGES(p0: Any; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($78321BEA235FD8CD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CHECK_USER_CONTENT_PRIVILEGES(p0, p1: cint; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($595F028698072DD9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CHECK_COMMUNICATION_PRIVILEGES(p0, p1: cint; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($83F28CE49FBBFFBA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(p0, p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($07EAB372C8841D99));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_USING_ONLINE_PROMOTION: BOOL;
begin
  nativeInit(UINT64($906CA41A4B74ECA4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN: BOOL;
begin
  nativeInit(UINT64($023ACAB2DC9DC4A4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV: BOOL;
begin
  nativeInit(UINT64($76BF03FADBF154F5));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_AGE_GROUP: cint;
begin
  nativeInit(UINT64($9614B71F8ADB982B));
  exit(cint(nativeCall^));
end;

function NETWORK_CHECK_PRIVILEGES(p0, p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($0CF6CC51AA18F0F8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($64E5C4CC82847B73));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED;
begin
  nativeInit(UINT64($1F7BC3539F9E0224));
  nativeCall;
end;

function NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT: BOOL;
begin
  nativeInit(UINT64($DE9225854F37BF72));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_PLATFORM_SUBSCRIPTION: BOOL;
begin
  nativeInit(UINT64($5EA784D197556507));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING: BOOL;
begin
  nativeInit(UINT64($A8ACB6459542A8C8));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SHOW_ACCOUNT_UPGRADE_UI;
begin
  nativeInit(UINT64($83FE8D7229593017));
  nativeCall;
end;

function NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL: BOOL;
begin
  nativeInit(UINT64($7788DFE15016A182));
  exit(BOOL(nativeCall^));
end;

function NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED: BOOL;
begin
  nativeInit(UINT64($53C10C8BD774F2C9));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_BAIL: BOOL;
begin
  nativeInit(UINT64($580CE4438479CC61));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_BAIL(p0, p1, p2: cint);
begin
  nativeInit(UINT64($95914459A87EBA28));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_ON_RETURN_TO_SINGLE_PLAYER;
begin
  nativeInit(UINT64($283B6062A2C01E9B));
  nativeCall;
end;

function NETWORK_TRANSITION_START(p0: cint; p1, p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($8B4FFC790CA131EF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_TRANSITION_ADD_STAGE(para_hash: Hash; p1, p2, state, p4: cint): BOOL;
begin
  nativeInit(UINT64($C3BFED92026A2AAD));
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(state));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_TRANSITION_FINISH(p0, p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($04918A41BC9B8157));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_ACCESS_MULTIPLAYER(loadingState: pcint): BOOL;
begin
  nativeInit(UINT64($AF50DA1A3F8B1BA4));
  nativePush64(UINT64(loadingState));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_MULTIPLAYER_DISABLED: BOOL;
begin
  nativeInit(UINT64($9747292807126EDA));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_ENTER_MULTIPLAYER: BOOL;
begin
  nativeInit(UINT64($7E782A910C362C25));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(p0, p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($330ED4D05491934F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_DO_FRIEND_MATCHMAKING(p0, p1, p2: cint): BOOL;
begin
  nativeInit(UINT64($2CFC76E0D087C994));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_DO_CREW_MATCHMAKING(crewId, p1, p2, maxPlayers: cint): BOOL;
begin
  nativeInit(UINT64($94BC51E9449D917F));
  nativePush64(UINT64(crewId));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(maxPlayers));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(p0, p1, p2, p3, p4: Any): BOOL;
begin
  nativeInit(UINT64($BE3E347A87ACEB82));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_HOST(p0, maxPlayers: cint; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($6F3D4ED9BEE4E61D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(maxPlayers));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_HOST_CLOSED(p0, maxPlayers: cint): BOOL;
begin
  nativeInit(UINT64($ED34C0C02C098BB7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(maxPlayers));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_HOST_FRIENDS_ONLY(p0, maxPlayers: cint): BOOL;
begin
  nativeInit(UINT64($B9CFD27A5D578D83));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(maxPlayers));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_IS_CLOSED_FRIENDS: BOOL;
begin
  nativeInit(UINT64($FBCFA2EA2E206890));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_IS_CLOSED_CREW: BOOL;
begin
  nativeInit(UINT64($74732C6CA90DA2B4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_IS_SOLO: BOOL;
begin
  nativeInit(UINT64($F3929C2379B60CCE));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_IS_PRIVATE: BOOL;
begin
  nativeInit(UINT64($CEF70AA5B3F89BA1));
  exit(BOOL(nativeCall^));
end;

function _NETWORK_SESSION_LEAVE_INCLUDING_REASON(leaveFlags, leaveReason: cint): BOOL;
begin
  nativeInit(UINT64($E0128328CF1FD9F4));
  nativePush64(UINT64(leaveFlags));
  nativePush64(UINT64(leaveReason));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_END(p0, p1: BOOL): BOOL;
begin
  nativeInit(UINT64($A02E59562D711006));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_LEAVE(p0: Any): BOOL;
begin
  nativeInit(UINT64($B9351A07A0D458B1));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SESSION_KICK_PLAYER(plyr: Player);
begin
  nativeInit(UINT64($FA8904DC5F304220));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function NETWORK_SESSION_GET_KICK_VOTE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($D6D09A6F32F49EF1));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(p0, p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($041C7F2A6C9894E6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION: BOOL;
begin
  nativeInit(UINT64($59DF79317F85A7E0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION: BOOL;
begin
  nativeInit(UINT64($FFE1E5B792D92B34));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SESSION_SET_MATCHMAKING_GROUP(matchmakingGroup: cint);
begin
  nativeInit(UINT64($49EC8030F5015F8B));
  nativePush64(UINT64(matchmakingGroup));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(playerType, playerCount: cint);
begin
  nativeInit(UINT64($8B6A4DD0AF9CE215));
  nativePush64(UINT64(playerType));
  nativePush64(UINT64(playerCount));
  nativeCall;
end;

function NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(p0: cint): cint;
begin
  nativeInit(UINT64($56CE820830EF040B));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(groupId: cint);
begin
  nativeInit(UINT64($CAE55F48D3D7875C));
  nativePush64(UINT64(groupId));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(p0: Any);
begin
  nativeInit(UINT64($F49ABC20D8552257));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT: cint;
begin
  nativeInit(UINT64($CDC936BF35EDCB73));
  exit(cint(nativeCall^));
end;

procedure NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(p0: Any);
begin
  nativeInit(UINT64($4811BBAC21C5FCD5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(p0: BOOL);
begin
  nativeInit(UINT64($5539C3EBF104A53A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(p0: Any);
begin
  nativeInit(UINT64($702BC4D605522539));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(p0: BOOL);
begin
  nativeInit(UINT64($3F52E880AAF6C8CA));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(p0: cint);
begin
  nativeInit(UINT64($F1EEA2DDA9FFA69D));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_NUM_BOSSES(num: cint);
begin
  nativeInit(UINT64($59D421683D31835A));
  nativePush64(UINT64(num));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN;
begin
  nativeInit(UINT64($1153FA02A659051C));
  nativeCall;
end;

procedure NETWORK_SESSION_VALIDATE_JOIN(p0: BOOL);
begin
  nativeInit(UINT64($C19F6C8E7865A6FF));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_ADD_FOLLOWERS(p0: pcint; p1: cint);
begin
  nativeInit(UINT64($236406F60CF216D6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_CLEAR_FOLLOWERS;
begin
  nativeInit(UINT64($058F43EC59A8631A));
  nativeCall;
end;

procedure NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(hours, minutes, seconds: pcint);
begin
  nativeInit(UINT64($6D03BFBD643B2A02));
  nativePush64(UINT64(hours));
  nativePush64(UINT64(minutes));
  nativePush64(UINT64(seconds));
  nativeCall;
end;

procedure NETWORK_SESSION_SET_GAMEMODE(p0: Any);
begin
  nativeInit(UINT64($600F8CB31C7AAB6E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_SESSION_GET_HOST_AIM_PREFERENCE: cint;
begin
  nativeInit(UINT64($DFFA5BE8381C3314));
  exit(cint(nativeCall^));
end;

function NETWORK_FIND_GAMERS_IN_CREW(crewId: cint): BOOL;
begin
  nativeInit(UINT64($E532D6811B3A4D2A));
  nativePush64(UINT64(crewId));
  exit(BOOL(nativeCall^));
end;

function NETWORK_FIND_MATCHED_GAMERS(attribute: cint; fallbackLimit, lowerLimit, upperLimit: cfloat): BOOL;
begin
  nativeInit(UINT64($F7B2CFDE5C9F700D));
  nativePush64(UINT64(attribute));
  nativePush64(PUINT64(@fallbackLimit)^);
  nativePush64(PUINT64(@lowerLimit)^);
  nativePush64(PUINT64(@upperLimit)^);
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_FINDING_GAMERS: BOOL;
begin
  nativeInit(UINT64($DDDF64C91BFCF0AA));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DID_FIND_GAMERS_SUCCEED: BOOL;
begin
  nativeInit(UINT64($F9B83B77929D8863));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_NUM_FOUND_GAMERS: cint;
begin
  nativeInit(UINT64($A1B043EE79A916FB));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_FOUND_GAMER(p0: PAny; p1: Any): BOOL;
begin
  nativeInit(UINT64($9DCFF2AFB68B3476));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLEAR_FOUND_GAMERS;
begin
  nativeInit(UINT64($6D14CCEE1B40381A));
  nativeCall;
end;

function NETWORK_QUEUE_GAMER_FOR_STATUS(p0: PAny): BOOL;
begin
  nativeInit(UINT64($85A0EF54A500882C));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_GAMER_STATUS_FROM_QUEUE: BOOL;
begin
  nativeInit(UINT64($2CC848A861D01493));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_GETTING_GAMER_STATUS: BOOL;
begin
  nativeInit(UINT64($94A8394D150B013A));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DID_GET_GAMER_STATUS_SUCCEED: BOOL;
begin
  nativeInit(UINT64($5AE17C6B0134B7F1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_GAMER_STATUS_RESULT(p0: PAny; p1: Any): BOOL;
begin
  nativeInit(UINT64($02A8BEC6FD9AF660));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLEAR_GET_GAMER_STATUS;
begin
  nativeInit(UINT64($86E0660E4F5C956D));
  nativeCall;
end;

procedure NETWORK_SESSION_JOIN_INVITE;
begin
  nativeInit(UINT64($C6F8AB8A4189CF3A));
  nativeCall;
end;

procedure NETWORK_SESSION_CANCEL_INVITE;
begin
  nativeInit(UINT64($2FBF47B1B36D36F9));
  nativeCall;
end;

procedure NETWORK_SESSION_FORCE_CANCEL_INVITE;
begin
  nativeInit(UINT64($A29177F7703B5644));
  nativeCall;
end;

function NETWORK_HAS_PENDING_INVITE: BOOL;
begin
  nativeInit(UINT64($AC8C7B9B88C4A668));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_CONFIRMED_INVITE: BOOL;
begin
  nativeInit(UINT64($C42DD763159F3461));
  exit(BOOL(nativeCall^));
end;

function NETWORK_REQUEST_INVITE_CONFIRMED_EVENT: BOOL;
begin
  nativeInit(UINT64($62A0296C1BB1CEB3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_WAS_INVITED: BOOL;
begin
  nativeInit(UINT64($23DFB504655D0CE4));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SESSION_GET_INVITER(gamerHandle: PAny);
begin
  nativeInit(UINT64($E57397B4A3429DD0));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

function NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE: BOOL;
begin
  nativeInit(UINT64($D313DE83394AF134));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION: BOOL;
begin
  nativeInit(UINT64($BDB6F89C729CF388));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SUPPRESS_INVITE(toggle: BOOL);
begin
  nativeInit(UINT64($A0682D67EF1FBA3D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_BLOCK_INVITES(toggle: BOOL);
begin
  nativeInit(UINT64($34F9E9049454A7A0));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_BLOCK_JOIN_QUEUE_INVITES(toggle: BOOL);
begin
  nativeInit(UINT64($CFEB8AF24FC1D0BB));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_CAN_RECEIVE_RS_INVITES(p0: BOOL);
begin
  nativeInit(UINT64($68980414688F7F9D));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_STORE_INVITE_THROUGH_RESTART;
begin
  nativeInit(UINT64($F814FEC6A19FD6E0));
  nativeCall;
end;

procedure NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(p0: BOOL);
begin
  nativeInit(UINT64($6B07B9CE4D390375));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SET_SCRIPT_READY_FOR_EVENTS(toggle: BOOL);
begin
  nativeInit(UINT64($7AC752103856FB20));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_IS_OFFLINE_INVITE_PENDING: BOOL;
begin
  nativeInit(UINT64($74698374C45701D2));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLEAR_OFFLINE_INVITE_PENDING;
begin
  nativeInit(UINT64($140E6A44870A11CE));
  nativeCall;
end;

procedure NETWORK_SESSION_HOST_SINGLE_PLAYER(p0: cint);
begin
  nativeInit(UINT64($C74C33FCA52856D5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SESSION_LEAVE_SINGLE_PLAYER;
begin
  nativeInit(UINT64($3442775428FD2DAA));
  nativeCall;
end;

function NETWORK_IS_GAME_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($10FAB35428CCC9D7));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_SESSION_ACTIVE: BOOL;
begin
  nativeInit(UINT64($D83C2B94E7508980));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_IN_SESSION: BOOL;
begin
  nativeInit(UINT64($CA97246103B63917));
  exit(BOOL(nativeCall^));
end;

function _NETWORK_IS_AMERICAS_VERSION: BOOL;
begin
  nativeInit(UINT64($0292BD7F3766CEBC));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_SESSION_STARTED: BOOL;
begin
  nativeInit(UINT64($9DE624D2FC4B603F));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_SESSION_BUSY: BOOL;
begin
  nativeInit(UINT64($F4435D66A8E2905E));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_SESSION_END: BOOL;
begin
  nativeInit(UINT64($4EEBC3694E49C572));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_GAME_MODE: cint;
begin
  nativeInit(UINT64($4C9034162368E206));
  exit(cint(nativeCall^));
end;

procedure NETWORK_SESSION_MARK_VISIBLE(toggle: BOOL);
begin
  nativeInit(UINT64($271CC6AB59EBF9A5));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_SESSION_IS_VISIBLE: BOOL;
begin
  nativeInit(UINT64($BA416D68C631496A));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SESSION_BLOCK_JOIN_REQUESTS(toggle: BOOL);
begin
  nativeInit(UINT64($A73667484D7037C3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SESSION_CHANGE_SLOTS(slots: cint; p1: BOOL);
begin
  nativeInit(UINT64($B4AB419E0D86ACAE));
  nativePush64(UINT64(slots));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function NETWORK_SESSION_GET_PRIVATE_SLOTS: cint;
begin
  nativeInit(UINT64($53AFD64C6758F2F9));
  exit(cint(nativeCall^));
end;

function NETWORK_SESSION_VOICE_HOST: BOOL;
begin
  nativeInit(UINT64($9C1556705F864230));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_VOICE_LEAVE: BOOL;
begin
  nativeInit(UINT64($6793E42BE02B575D));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(gamerHandle: PAny);
begin
  nativeInit(UINT64($ABD5E88B8A2D3DB2));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

procedure NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(p0: BOOL; p1: cint);
begin
  nativeInit(UINT64($7F8413B7FC2AA6B9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SESSION_VOICE_SET_TIMEOUT(timeout: cint);
begin
  nativeInit(UINT64($5B8ED3DB018927B1));
  nativePush64(UINT64(timeout));
  nativeCall;
end;

function NETWORK_SESSION_IS_IN_VOICE_SESSION: BOOL;
begin
  nativeInit(UINT64($855BC38818F6F684));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE: BOOL;
begin
  nativeInit(UINT64($B5D3453C98456528));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SESSION_IS_VOICE_SESSION_BUSY: BOOL;
begin
  nativeInit(UINT64($EF0912DDF7C4CB4B));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SEND_TEXT_MESSAGE(message: PChar; gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($3A214F2EC889B100));
  nativePush64(UINT64(message));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_ACTIVITY_SPECTATOR(toggle: BOOL);
begin
  nativeInit(UINT64($75138790B4359A74));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_IS_ACTIVITY_SPECTATOR: BOOL;
begin
  nativeInit(UINT64($12103B9E0C9F92FB));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_ACTIVITY_PLAYER_MAX(p0: Any);
begin
  nativeInit(UINT64($0E4F77F7B9D74D84));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SET_ACTIVITY_SPECTATOR_MAX(maxSpectators: cint);
begin
  nativeInit(UINT64($9D277B76D1D12222));
  nativePush64(UINT64(maxSpectators));
  nativeCall;
end;

function NETWORK_GET_ACTIVITY_PLAYER_NUM(p0: BOOL): cint;
begin
  nativeInit(UINT64($73E2B500410DA5A2));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($2763BBAA72A7BCB9));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HOST_TRANSITION(p0, p1, p2, p3: cint; p4: Any; p5, p6: BOOL; p7: cint; p8: Any; p9: cint): BOOL;
begin
  nativeInit(UINT64($A60BB5CE242BB254));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DO_TRANSITION_QUICKMATCH(p0, p1, p2, p3, p4, p5: Any): BOOL;
begin
  nativeInit(UINT64($71FB0EBCD4915D56));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(p0, p1, p2, p3, p4, p5: Any): BOOL;
begin
  nativeInit(UINT64($A091A5E44F0072E5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(p0, p1, p2, p3: Any; p4: PAny; p5, p6, p7: Any): BOOL;
begin
  nativeInit(UINT64($9C4AB58491FDC98A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function NETWORK_JOIN_GROUP_ACTIVITY: BOOL;
begin
  nativeInit(UINT64($A06509A691D12BE4));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLEAR_GROUP_ACTIVITY;
begin
  nativeInit(UINT64($1888694923EF4591));
  nativeCall;
end;

procedure NETWORK_RETAIN_ACTIVITY_GROUP;
begin
  nativeInit(UINT64($B13E88E655E5A3BC));
  nativeCall;
end;

function NETWORK_IS_TRANSITION_CLOSED_FRIENDS: BOOL;
begin
  nativeInit(UINT64($6512765E3BE78C50));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_CLOSED_CREW: BOOL;
begin
  nativeInit(UINT64($0DBD5D7E3C5BEC3B));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_SOLO: BOOL;
begin
  nativeInit(UINT64($5DC577201723960A));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_PRIVATE: BOOL;
begin
  nativeInit(UINT64($5A6AA44FF8E931E6));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS: cint;
begin
  nativeInit(UINT64($617F49C2668E6155));
  exit(cint(nativeCall^));
end;

procedure NETWORK_MARK_AS_PREFERRED_ACTIVITY(p0: BOOL);
begin
  nativeInit(UINT64($261E97AD7BCF3D40));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_MARK_AS_WAITING_ASYNC(p0: BOOL);
begin
  nativeInit(UINT64($39917E1B4CB0F911));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SET_IN_PROGRESS_FINISH_TIME(p0: Any);
begin
  nativeInit(UINT64($2CE9D95E4051AECD));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SET_TRANSITION_CREATOR_HANDLE(p0: PAny);
begin
  nativeInit(UINT64($EF26739BCD9907D5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE;
begin
  nativeInit(UINT64($FB3272229A82C759));
  nativeCall;
end;

function NETWORK_INVITE_GAMERS_TO_TRANSITION(p0: PAny; p1: Any): BOOL;
begin
  nativeInit(UINT64($4A595C32F77DFF76));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_GAMER_INVITED_TO_TRANSITION(gamerHandle: PAny);
begin
  nativeInit(UINT64($CA2C8073411ECDB6));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

function NETWORK_LEAVE_TRANSITION: BOOL;
begin
  nativeInit(UINT64($D23A1A815D21DB19));
  exit(BOOL(nativeCall^));
end;

function NETWORK_LAUNCH_TRANSITION: BOOL;
begin
  nativeInit(UINT64($2DCF46CB1A4F0884));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(toggle: BOOL);
begin
  nativeInit(UINT64($A2E9C1AB8A92E8CD));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_CANCEL_TRANSITION_MATCHMAKING;
begin
  nativeInit(UINT64($023782EFC70585EE));
  nativeCall;
end;

procedure NETWORK_BAIL_TRANSITION(p0, p1, p2: cint);
begin
  nativeInit(UINT64($EAA572036990CD1B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function NETWORK_DO_TRANSITION_TO_GAME(p0: BOOL; maxPlayers: cint): BOOL;
begin
  nativeInit(UINT64($3E9BB38102A589B0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(maxPlayers));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DO_TRANSITION_TO_NEW_GAME(p0: BOOL; maxPlayers: cint; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($4665F51EFED00034));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(maxPlayers));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DO_TRANSITION_TO_FREEMODE(p0: PAny; p1: Any; p2: BOOL; players: cint; p4: BOOL): BOOL;
begin
  nativeInit(UINT64($3AAD8B2FCA1E289F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(players));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(p0: PAny; p1: Any; players: cint; p3, p4, p5: BOOL): BOOL;
begin
  nativeInit(UINT64($9E80A5BA8109F974));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(players));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_TO_GAME: BOOL;
begin
  nativeInit(UINT64($9D7696D8F4FA6CB7));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_TRANSITION_MEMBERS(data: PAny; dataCount: cint): cint;
begin
  nativeInit(UINT64($73B000F7FBC55829));
  nativePush64(UINT64(data));
  nativePush64(UINT64(dataCount));
  exit(cint(nativeCall^));
end;

procedure NETWORK_APPLY_TRANSITION_PARAMETER(p0, p1: cint);
begin
  nativeInit(UINT64($521638ADA1BA0D18));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_APPLY_TRANSITION_PARAMETER_STRING(p0: cint; str: PChar; p2: BOOL);
begin
  nativeInit(UINT64($EBEFC2E77084F599));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(str));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(gamerHandle: PAny; p1: PChar; p2, p3: cint; p4: BOOL): BOOL;
begin
  nativeInit(UINT64($31D1D2B858D25E6B));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(p0: PAny): BOOL;
begin
  nativeInit(UINT64($5728BB6D63E3FF1D));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_HOST: BOOL;
begin
  nativeInit(UINT64($0B824797C9BF2159));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($6B5C83BA3EFE6A10));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_TRANSITION_HOST(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($65042B9774C4435E));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_IN_TRANSITION: BOOL;
begin
  nativeInit(UINT64($68049AEFF83D8F0A));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_STARTED: BOOL;
begin
  nativeInit(UINT64($53FA83401D9C07FE));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_BUSY: BOOL;
begin
  nativeInit(UINT64($520F3282A53D26B7));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_MATCHMAKING: BOOL;
begin
  nativeInit(UINT64($292564C735375EDF));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TRANSITION_LEAVE_POSTPONED: BOOL;
begin
  nativeInit(UINT64($C571D0E77D8BBC29));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_TRANSITION_SET_IN_PROGRESS(p0: Any);
begin
  nativeInit(UINT64($1398582B7F72B3ED));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_TRANSITION_SET_CONTENT_CREATOR(p0: Any);
begin
  nativeInit(UINT64($1F8E00FB18239600));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(p0: Any);
begin
  nativeInit(UINT64($F6F4383B7C92F11A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_OPEN_TRANSITION_MATCHMAKING;
begin
  nativeInit(UINT64($2B3A8F7CA3A38FDE));
  nativeCall;
end;

procedure NETWORK_CLOSE_TRANSITION_MATCHMAKING;
begin
  nativeInit(UINT64($43F4DBA69710E01E));
  nativeCall;
end;

function NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING: BOOL;
begin
  nativeInit(UINT64($37A4494483B9F5C9));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_TRANSITION_VISIBILITY_LOCK(p0, p1: BOOL);
begin
  nativeInit(UINT64($0C978FDA19692C2C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function NETWORK_IS_TRANSITION_VISIBILITY_LOCKED: BOOL;
begin
  nativeInit(UINT64($D0A484CB2F829FBE));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_TRANSITION_ACTIVITY_ID(p0: Any);
begin
  nativeInit(UINT64($30DE938B516F0AD2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_CHANGE_TRANSITION_SLOTS(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($EEEDA5E6D7080987));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(p0: BOOL);
begin
  nativeInit(UINT64($973D76AA760A6CB6));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_HAS_PLAYER_STARTED_TRANSITION(plyr: Player): BOOL;
begin
  nativeInit(UINT64($9AC9CCBFA8C29795));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ARE_TRANSITION_DETAILS_VALID(p0: Any): BOOL;
begin
  nativeInit(UINT64($2615AA2A695930C1));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_JOIN_TRANSITION(plyr: Player): BOOL;
begin
  nativeInit(UINT64($9D060B08CD63321A));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(p0: PAny): BOOL;
begin
  nativeInit(UINT64($7284A47B3540E6CF));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(p0: PAny): BOOL;
begin
  nativeInit(UINT64($3F9990BF5F22759C));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_ACTIVITY_SESSION: BOOL;
begin
  nativeInit(UINT64($05095437424397FA));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_DISABLE_REALTIME_MULTIPLAYER;
begin
  nativeInit(UINT64($236905C700FDB54D));
  nativeCall;
end;

procedure NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(toggle: BOOL);
begin
  nativeInit(UINT64($4A9FDE3A5A6D0437));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_SEND_INVITE_VIA_PRESENCE(gamerHandle: PAny; p1: PChar; dataCount, p3: cint): BOOL;
begin
  nativeInit(UINT64($C3C7A6AFDB244624));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(dataCount));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle: PAny; p1: PChar; dataCount, p3: cint): BOOL;
begin
  nativeInit(UINT64($C116FF9B4D488291));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(dataCount));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(gamerHandle: PAny; p1: PChar; dataCount, p3: cint): BOOL;
begin
  nativeInit(UINT64($1171A97A3D3981B6));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(dataCount));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(p0: cint): cint;
begin
  nativeInit(UINT64($742B58F723233ED9));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_NUM_PRESENCE_INVITES: cint;
begin
  nativeInit(UINT64($CEFA968912D0F78D));
  exit(cint(nativeCall^));
end;

function NETWORK_ACCEPT_PRESENCE_INVITE(p0: cint): BOOL;
begin
  nativeInit(UINT64($FA91550DF9318B22));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_REMOVE_PRESENCE_INVITE(p0: cint): BOOL;
begin
  nativeInit(UINT64($F0210268DB0974B1));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_ID(p0: cint): cint;
begin
  nativeInit(UINT64($DFF09646E12EC386));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_INVITER(p0: cint): PChar;
begin
  nativeInit(UINT64($4962CC4AA2F345B7));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_HANDLE(p0: Any; p1: PAny): BOOL;
begin
  nativeInit(UINT64($38D5B0FEBB086F75));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_SESSION_ID(p0: Any): cint;
begin
  nativeInit(UINT64($26E1CD96B0903D60));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(p0: cint): PChar;
begin
  nativeInit(UINT64($24409FC4C55CB22D));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(p0: cint): cint;
begin
  nativeInit(UINT64($D39B3FFF8FFDD5BF));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(p0: cint): cint;
begin
  nativeInit(UINT64($728C4CC7920CD102));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(p0: cint): BOOL;
begin
  nativeInit(UINT64($3DBF2DF0AEB7D289));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(p0: Any): BOOL;
begin
  nativeInit(UINT64($8806CEBFABD3CE05));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_FOLLOW_INVITE: BOOL;
begin
  nativeInit(UINT64($76D9B976C4C09FDE));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACTION_FOLLOW_INVITE: BOOL;
begin
  nativeInit(UINT64($C88156EBB786F8D5));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLEAR_FOLLOW_INVITE: BOOL;
begin
  nativeInit(UINT64($439BFDE3CD0610F6));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_REMOVE_AND_CANCEL_ALL_INVITES;
begin
  nativeInit(UINT64($EBF8284D8CADEB53));
  nativeCall;
end;

procedure NETWORK_REMOVE_TRANSITION_INVITE(p0: PAny);
begin
  nativeInit(UINT64($7524B431B2E6F7EE));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_REMOVE_ALL_TRANSITION_INVITE;
begin
  nativeInit(UINT64($726E0375C7A26368));
  nativeCall;
end;

procedure NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES;
begin
  nativeInit(UINT64($F083835B70BA9BFE));
  nativeCall;
end;

function NETWORK_INVITE_GAMERS(p0: PAny; p1: Any; p2: PAny; p3: Any): BOOL;
begin
  nativeInit(UINT64($9D80CD1D0E6327DE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_INVITED_GAMER(p0: PAny): BOOL;
begin
  nativeInit(UINT64($4D86CD31E8976ECE));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_MADE_INVITE_DECISION(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($71DC455F5CD1C2B1));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_INVITE_REPLY_STATUS(p0: Any): cint;
begin
  nativeInit(UINT64($3855FB5EB2C5E8B2));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0: PAny): BOOL;
begin
  nativeInit(UINT64($74881E6BCAE2327C));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(p0: PAny): BOOL;
begin
  nativeInit(UINT64($7206F674F2A3B1BB));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(p0: PAny);
begin
  nativeInit(UINT64($66F010A4B031A331));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(p0: cint; gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($44B37CDCAE765AAE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(p0: Any; gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($4AD490AE1536933B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(p0, p1: PAny);
begin
  nativeInit(UINT64($0D77A82DC2D0DA59));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function FILLOUT_PM_PLAYER_LIST(gamerHandle: PAny; p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($CBBD7C4991B64809));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function FILLOUT_PM_PLAYER_LIST_WITH_NAMES(p0, p1: PAny; p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($716B6DB9D1886106));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function REFRESH_PLAYER_LIST_STATS(p0: cint): BOOL;
begin
  nativeInit(UINT64($E26CCFF8094D8C74));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(p0: PAny): BOOL;
begin
  nativeInit(UINT64($796A87B3B68D1F3D));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_IN_PLATFORM_PARTY: BOOL;
begin
  nativeInit(UINT64($2FC5650B0271CB57));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT: cint;
begin
  nativeInit(UINT64($01ABCE5E7CBDA196));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_PLATFORM_PARTY_MEMBERS(data: PAny; dataSize: cint): cint;
begin
  nativeInit(UINT64($120364DE2845DAF8));
  nativePush64(UINT64(data));
  nativePush64(UINT64(dataSize));
  exit(cint(nativeCall^));
end;

function NETWORK_IS_IN_PLATFORM_PARTY_CHAT: BOOL;
begin
  nativeInit(UINT64($FD8B834A8BA05048));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($8DE9945BCC9AEC52));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN: BOOL;
begin
  nativeInit(UINT64($2BF66D2E7414F686));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_QUEUING_FOR_SESSION_JOIN: BOOL;
begin
  nativeInit(UINT64($14922ED3E38761F0));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLEAR_QUEUED_JOIN_REQUEST;
begin
  nativeInit(UINT64($6CE50E47F5543D0C));
  nativeCall;
end;

procedure NETWORK_SEND_QUEUED_JOIN_REQUEST;
begin
  nativeInit(UINT64($FA2888E3833C8E96));
  nativeCall;
end;

procedure NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS;
begin
  nativeInit(UINT64($25D990F8E0E3F13C));
  nativeCall;
end;

procedure NETWORK_SEED_RANDOM_NUMBER_GENERATOR(seed: cint);
begin
  nativeInit(UINT64($F1B84178F8674195));
  nativePush64(UINT64(seed));
  nativeCall;
end;

function NETWORK_GET_RANDOM_INT: cint;
begin
  nativeInit(UINT64($599E4FA1F87EB5FF));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_RANDOM_INT_RANGED(rangeStart, rangeEnd: cint): cint;
begin
  nativeInit(UINT64($E30CF56F1EFA5F43));
  nativePush64(UINT64(rangeStart));
  nativePush64(UINT64(rangeEnd));
  exit(cint(nativeCall^));
end;

function _NETWORK_GET_RANDOM_FLOAT_RANGED(rangeStart, rangeEnd: cfloat): cfloat;
begin
  nativeInit(UINT64($04BD27B5ACB67067));
  nativePush64(PUINT64(@rangeStart)^);
  nativePush64(PUINT64(@rangeEnd)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function NETWORK_PLAYER_IS_CHEATER: BOOL;
begin
  nativeInit(UINT64($655B91F1495A9090));
  exit(BOOL(nativeCall^));
end;

function NETWORK_PLAYER_GET_CHEATER_REASON: cint;
begin
  nativeInit(UINT64($172F75B6EE2233BA));
  exit(cint(nativeCall^));
end;

function NETWORK_PLAYER_IS_BADSPORT: BOOL;
begin
  nativeInit(UINT64($19D8DA0E5A68045A));
  exit(BOOL(nativeCall^));
end;

function REMOTE_CHEATER_PLAYER_DETECTED(plyr: Player; a, b: cint): BOOL;
begin
  nativeInit(UINT64($472841A026D26D8B));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(a));
  nativePush64(UINT64(b));
  exit(BOOL(nativeCall^));
end;

function BAD_SPORT_PLAYER_LEFT_DETECTED(gamerHandle: PAny; event, amountReceived: cint): BOOL;
begin
  nativeInit(UINT64($EC5E3AF5289DCA81));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(event));
  nativePush64(UINT64(amountReceived));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_ADD_INVALID_OBJECT_MODEL(modelHash: Hash);
begin
  nativeInit(UINT64($7F562DBC212E81F9));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure NETWORK_REMOVE_INVALID_OBJECT_MODEL(modelHash: Hash);
begin
  nativeInit(UINT64($791EDB5803B2F468));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure NETWORK_CLEAR_INVALID_OBJECT_MODELS;
begin
  nativeInit(UINT64($03B2F03A53D85E41));
  nativeCall;
end;

procedure NETWORK_APPLY_PED_SCAR_DATA(_ped: Ped; p1: cint);
begin
  nativeInit(UINT64($E66C690248F11150));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(maxNumMissionParticipants: cint; p1: BOOL; instanceId: cint);
begin
  nativeInit(UINT64($1CA59E306ECB80A5));
  nativePush64(UINT64(maxNumMissionParticipants));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(instanceId));
  nativeCall;
end;

function NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(p0: Any; p1: BOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($D1110739EEADB592));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT: BOOL;
begin
  nativeInit(UINT64($2910669969E9535E));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_MAX_NUM_PARTICIPANTS: cint;
begin
  nativeInit(UINT64($A6C90FBC38E395EE));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_NUM_PARTICIPANTS: cint;
begin
  nativeInit(UINT64($18D0456E86604654));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_SCRIPT_STATUS: cint;
begin
  nativeInit(UINT64($57D158647A6BFABF));
  exit(cint(nativeCall^));
end;

procedure NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(vars: pcint; numVars: cint; debugName: PChar);
begin
  nativeInit(UINT64($3E9B2F01C50DF595));
  nativePush64(UINT64(vars));
  nativePush64(UINT64(numVars));
  nativePush64(UINT64(debugName));
  nativeCall;
end;

procedure NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(vars: pcint; numVars: cint; debugName: PChar);
begin
  nativeInit(UINT64($3364AA97340CA215));
  nativePush64(UINT64(vars));
  nativePush64(UINT64(numVars));
  nativePush64(UINT64(debugName));
  nativeCall;
end;

procedure NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(p0, p1, p2: Any);
begin
  nativeInit(UINT64($EA8C0DDB10E2822A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(p0, p1, p2: Any);
begin
  nativeInit(UINT64($D6D7478CA62B8D41));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_FINISH_BROADCASTING_DATA;
begin
  nativeInit(UINT64($64F62AFB081E260D));
  nativeCall;
end;

function NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA: BOOL;
begin
  nativeInit(UINT64($5D10B3795F3FC886));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PLAYER_INDEX(plyr: Player): Player;
begin
  nativeInit(UINT64($24FB80D107371267));
  nativePush64(UINT64(plyr));
  exit(Player(nativeCall^));
end;

function NETWORK_GET_PARTICIPANT_INDEX(index: cint): cint;
begin
  nativeInit(UINT64($1B84DF6AF2A46938));
  nativePush64(UINT64(index));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_PLAYER_INDEX_FROM_PED(_ped: Ped): Player;
begin
  nativeInit(UINT64($6C0E2E0125610278));
  nativePush64(UINT64(_ped));
  exit(Player(nativeCall^));
end;

function NETWORK_GET_NUM_CONNECTED_PLAYERS: cint;
begin
  nativeInit(UINT64($A4A79DD2D9600654));
  exit(cint(nativeCall^));
end;

function NETWORK_IS_PLAYER_CONNECTED(plyr: Player): BOOL;
begin
  nativeInit(UINT64($93DC1BE4E1ABE9D1));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_TOTAL_NUM_PLAYERS: cint;
begin
  nativeInit(UINT64($CF61D4B4702EE9EB));
  exit(cint(nativeCall^));
end;

function NETWORK_IS_PARTICIPANT_ACTIVE(p0: cint): BOOL;
begin
  nativeInit(UINT64($6FF8FF40B6357D45));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PLAYER_ACTIVE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($B8DFD30D6973E135));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PLAYER_A_PARTICIPANT(plyr: Player): BOOL;
begin
  nativeInit(UINT64($3CA58F6CB7CBD784));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_HOST_OF_THIS_SCRIPT: BOOL;
begin
  nativeInit(UINT64($83CD99A1E6061AB5));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_HOST_OF_THIS_SCRIPT: Player;
begin
  nativeInit(UINT64($C7B4D79B01FA7A5C));
  exit(Player(nativeCall^));
end;

function NETWORK_GET_HOST_OF_SCRIPT(scriptName: PChar; instance_id, position_hash: cint): Player;
begin
  nativeInit(UINT64($1D6A14F1F9A736FC));
  nativePush64(UINT64(scriptName));
  nativePush64(UINT64(instance_id));
  nativePush64(UINT64(position_hash));
  exit(Player(nativeCall^));
end;

procedure NETWORK_SET_MISSION_FINISHED;
begin
  nativeInit(UINT64($3B3D11CD9FFCDFC9));
  nativeCall;
end;

function NETWORK_IS_SCRIPT_ACTIVE(scriptName: PChar; instance_id: cint; p2: BOOL; position_hash: cint): BOOL;
begin
  nativeInit(UINT64($9D40DF90FAD26098));
  nativePush64(UINT64(scriptName));
  nativePush64(UINT64(instance_id));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(position_hash));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(scriptHash: Hash; p1: cint; p2: BOOL; p3: cint): BOOL;
begin
  nativeInit(UINT64($DA7DE67F5FE5EE13));
  nativePush64(UINT64(scriptHash));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_THREAD_A_NETWORK_SCRIPT(threadId: cint): BOOL;
begin
  nativeInit(UINT64($560B423D73015E77));
  nativePush64(UINT64(threadId));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(scriptName: PChar; instance_id, position_hash: cint): cint;
begin
  nativeInit(UINT64($3658E8CD94FC121A));
  nativePush64(UINT64(scriptName));
  nativePush64(UINT64(instance_id));
  nativePush64(UINT64(position_hash));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT: cint;
begin
  nativeInit(UINT64($638A3A81733086DB));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT: Hash;
begin
  nativeInit(UINT64($257ED0FADF750BCF));
  exit(Hash(nativeCall^));
end;

function NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(plyr: Player; script: PChar; instance_id: cint): BOOL;
begin
  nativeInit(UINT64($1AD5B71586B94820));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(script));
  nativePush64(UINT64(instance_id));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_PREVENT_SCRIPT_HOST_MIGRATION;
begin
  nativeInit(UINT64($2302C0264EA58D31));
  nativeCall;
end;

procedure NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT;
begin
  nativeInit(UINT64($741A3D8380319A81));
  nativeCall;
end;

function PARTICIPANT_ID: Player;
begin
  nativeInit(UINT64($90986E8876CE0A83));
  exit(Player(nativeCall^));
end;

function PARTICIPANT_ID_TO_INT: cint;
begin
  nativeInit(UINT64($57A3BDDAD8E5AA0A));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_KILLER_OF_PLAYER(plyr: Player; weaponHash: PHash): Player;
begin
  nativeInit(UINT64($2DA41ED6E1FCD7A5));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(weaponHash));
  exit(Player(nativeCall^));
end;

function NETWORK_GET_DESTROYER_OF_NETWORK_ID(netId: cint; weaponHash: PHash): Player;
begin
  nativeInit(UINT64($7A1ADEEF01740A24));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(weaponHash));
  exit(Player(nativeCall^));
end;

function NETWORK_GET_DESTROYER_OF_ENTITY(para_entity: Entity; weaponHash: PHash): Player;
begin
  nativeInit(UINT64($C434133D9BA52777));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(weaponHash));
  exit(Player(nativeCall^));
end;

function NETWORK_GET_ASSISTED_KILL_OF_ENTITY(plyr: Player; para_entity: Entity; p2: pcint): BOOL;
begin
  nativeInit(UINT64($83660B734994124D));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(plyr: Player; para_entity: Entity; p2: pcint): BOOL;
begin
  nativeInit(UINT64($4CACA84440FA26F6));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_ENTITY_KILLER_OF_PLAYER(plyr: Player; weaponHash: PHash): Entity;
begin
  nativeInit(UINT64($42B2DAA6B596F5F8));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(weaponHash));
  exit(Entity(nativeCall^));
end;

procedure NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(missionId: PChar);
begin
  nativeInit(UINT64($2C863ACDCD12B3DB));
  nativePush64(UINT64(missionId));
  nativeCall;
end;

procedure NETWORK_SET_CURRENT_CHAT_OPTION(newChatOption: cint);
begin
  nativeInit(UINT64($3DAD00265FBF356B));
  nativePush64(UINT64(newChatOption));
  nativeCall;
end;

procedure NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(mpSettingSpawn: Hash);
begin
  nativeInit(UINT64($AA6D5451DC3448B6));
  nativePush64(UINT64(mpSettingSpawn));
  nativeCall;
end;

procedure NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(toggle: BOOL);
begin
  nativeInit(UINT64($8C70252FC40F320B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_VEHICLE_DRIVEN_LOCATION(location: Hash);
begin
  nativeInit(UINT64($A0CE91E47531D3BB));
  nativePush64(UINT64(location));
  nativeCall;
end;

procedure NETWORK_RESURRECT_LOCAL_PLAYER(x, y, z, heading: cfloat; p4, changetime, p6: BOOL; p7, p8: cint);
begin
  nativeInit(UINT64($EA23C49EAA83ACFB));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(changetime));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(time: cint);
begin
  nativeInit(UINT64($2D95C7E2D7E07307));
  nativePush64(UINT64(time));
  nativeCall;
end;

function NETWORK_IS_LOCAL_PLAYER_INVINCIBLE: BOOL;
begin
  nativeInit(UINT64($8A8694B48715B000));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_DISABLE_INVINCIBLE_FLASHING(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($9DD368BF06983221));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(_ped: Ped);
begin
  nativeInit(UINT64($F0BC9BCD24A511D5));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(toggle: BOOL);
begin
  nativeInit(UINT64($524FF0AEFF9C3973));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($B07D3185E11657A5));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_NETWORK_ID_FROM_ENTITY(para_entity: Entity): cint;
begin
  nativeInit(UINT64($A11700682F3AD45C));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_ENTITY_FROM_NETWORK_ID(netId: cint): Entity;
begin
  nativeInit(UINT64($CE4E5D9B0A4FF560));
  nativePush64(UINT64(netId));
  exit(Entity(nativeCall^));
end;

function NETWORK_GET_ENTITY_IS_NETWORKED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($C7827959479DCC78));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_ENTITY_IS_LOCAL(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($0991549DE4D64762));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_REGISTER_ENTITY_AS_NETWORKED(para_entity: Entity);
begin
  nativeInit(UINT64($06FAACD625D80CAA));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure NETWORK_UNREGISTER_NETWORKED_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($7368E683BB9038D6));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

function NETWORK_DOES_NETWORK_ID_EXIST(netId: cint): BOOL;
begin
  nativeInit(UINT64($38CE16C96BD11344));
  nativePush64(UINT64(netId));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(netId: cint): BOOL;
begin
  nativeInit(UINT64($18A47D074708FD68));
  nativePush64(UINT64(netId));
  exit(BOOL(nativeCall^));
end;

function NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netId: cint): BOOL;
begin
  nativeInit(UINT64($A670B3662FAFFBD0));
  nativePush64(UINT64(netId));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_CONTROL_OF_NETWORK_ID(netId: cint): BOOL;
begin
  nativeInit(UINT64($4D36070FE0215186));
  nativePush64(UINT64(netId));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(netId: cint): BOOL;
begin
  nativeInit(UINT64($7242F8B741CE1086));
  nativePush64(UINT64(netId));
  exit(BOOL(nativeCall^));
end;

function NETWORK_REQUEST_CONTROL_OF_ENTITY(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($B69317BF5E782347));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function NETWORK_REQUEST_CONTROL_OF_DOOR(doorID: cint): BOOL;
begin
  nativeInit(UINT64($870DDFD5A4A796E4));
  nativePush64(UINT64(doorID));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_CONTROL_OF_ENTITY(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($01BF60A500E28887));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_CONTROL_OF_PICKUP(para_pickup: Pickup): BOOL;
begin
  nativeInit(UINT64($5BC9495F0B3B6FA6));
  nativePush64(UINT64(para_pickup));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_CONTROL_OF_DOOR(doorHash: Hash): BOOL;
begin
  nativeInit(UINT64($CB3C68ADB06195DF));
  nativePush64(UINT64(doorHash));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_DOOR_NETWORKED(doorHash: Hash): BOOL;
begin
  nativeInit(UINT64($C01E93FAC20C3346));
  nativePush64(UINT64(doorHash));
  exit(BOOL(nativeCall^));
end;

function VEH_TO_NET(veh: Vehicle): cint;
begin
  nativeInit(UINT64($B4C94523F023419C));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function PED_TO_NET(_ped: Ped): cint;
begin
  nativeInit(UINT64($0EDEC3C276198689));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function OBJ_TO_NET(obj: GTAObject): cint;
begin
  nativeInit(UINT64($99BFDC94A603E541));
  nativePush64(UINT64(obj));
  exit(cint(nativeCall^));
end;

function NET_TO_VEH(netHandle: cint): Vehicle;
begin
  nativeInit(UINT64($367B936610BA360C));
  nativePush64(UINT64(netHandle));
  exit(Vehicle(nativeCall^));
end;

function NET_TO_PED(netHandle: cint): Ped;
begin
  nativeInit(UINT64($BDCD95FC216A8B3E));
  nativePush64(UINT64(netHandle));
  exit(Ped(nativeCall^));
end;

function NET_TO_OBJ(netHandle: cint): GTAObject;
begin
  nativeInit(UINT64($D8515F5FEA14CB3F));
  nativePush64(UINT64(netHandle));
  exit(GTAObject(nativeCall^));
end;

function NET_TO_ENT(netHandle: cint): Entity;
begin
  nativeInit(UINT64($BFFEAB45A9A9094A));
  nativePush64(UINT64(netHandle));
  exit(Entity(nativeCall^));
end;

procedure NETWORK_GET_LOCAL_HANDLE(gamerHandle: PAny; gamerHandleSize: cint);
begin
  nativeInit(UINT64($E86051786B66CD8E));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(gamerHandleSize));
  nativeCall;
end;

procedure NETWORK_HANDLE_FROM_USER_ID(userId: PChar; gamerHandle: PAny; gamerHandleSize: cint);
begin
  nativeInit(UINT64($DCD51DD8F87AEC5C));
  nativePush64(UINT64(userId));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(gamerHandleSize));
  nativeCall;
end;

procedure NETWORK_HANDLE_FROM_MEMBER_ID(memberId: PChar; gamerHandle: PAny; gamerHandleSize: cint);
begin
  nativeInit(UINT64($A0FD21BED61E5C4C));
  nativePush64(UINT64(memberId));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(gamerHandleSize));
  nativeCall;
end;

procedure NETWORK_HANDLE_FROM_PLAYER(plyr: Player; gamerHandle: PAny; gamerHandleSize: cint);
begin
  nativeInit(UINT64($388EB2B86C73B6B3));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(gamerHandleSize));
  nativeCall;
end;

function NETWORK_HASH_FROM_PLAYER_HANDLE(plyr: Player): Hash;
begin
  nativeInit(UINT64($BC1D768F2F5D6C05));
  nativePush64(UINT64(plyr));
  exit(Hash(nativeCall^));
end;

function NETWORK_HASH_FROM_GAMER_HANDLE(gamerHandle: PAny): Hash;
begin
  nativeInit(UINT64($58575AC3CF2CA8EC));
  nativePush64(UINT64(gamerHandle));
  exit(Hash(nativeCall^));
end;

procedure NETWORK_HANDLE_FROM_FRIEND(friendIndex: cint; gamerHandle: PAny; gamerHandleSize: cint);
begin
  nativeInit(UINT64($D45CB817D7E177D2));
  nativePush64(UINT64(friendIndex));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(gamerHandleSize));
  nativeCall;
end;

function NETWORK_GAMERTAG_FROM_HANDLE_START(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($9F0C0A981D73FA56));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GAMERTAG_FROM_HANDLE_PENDING: BOOL;
begin
  nativeInit(UINT64($B071E27958EF4CF0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED: BOOL;
begin
  nativeInit(UINT64($FD00798DBA7523DD));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_GAMERTAG_FROM_HANDLE(gamerHandle: PAny): PChar;
begin
  nativeInit(UINT64($426141162EBE5CDB));
  nativePush64(UINT64(gamerHandle));
  exit(PChar(nativeCall^));
end;

function NETWORK_DISPLAYNAMES_FROM_HANDLES_START(p0: PAny; p1: Any): cint;
begin
  nativeInit(UINT64($D66C9E72B3CC4982));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(p0, p1, p2: Any): cint;
begin
  nativeInit(UINT64($58CC181719256197));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

function NETWORK_ARE_HANDLES_THE_SAME(gamerHandle1, gamerHandle2: PAny): BOOL;
begin
  nativeInit(UINT64($57DBA049E110F217));
  nativePush64(UINT64(gamerHandle1));
  nativePush64(UINT64(gamerHandle2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_HANDLE_VALID(gamerHandle: PAny; gamerHandleSize: cint): BOOL;
begin
  nativeInit(UINT64($6F79B93B0A8E4133));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(gamerHandleSize));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(gamerHandle: PAny): Player;
begin
  nativeInit(UINT64($CE5F689CF5A0A49D));
  nativePush64(UINT64(gamerHandle));
  exit(Player(nativeCall^));
end;

function NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(gamerHandle: PAny): PChar;
begin
  nativeInit(UINT64($C82630132081BB6F));
  nativePush64(UINT64(gamerHandle));
  exit(PChar(nativeCall^));
end;

function NETWORK_IS_GAMER_IN_MY_SESSION(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($0F10B05DDF8D16E9));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SHOW_PROFILE_UI(gamerHandle: PAny);
begin
  nativeInit(UINT64($859ED1CEA343FCA8));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

function NETWORK_PLAYER_GET_NAME(plyr: Player): PChar;
begin
  nativeInit(UINT64($7718D2E2060837D2));
  nativePush64(UINT64(plyr));
  exit(PChar(nativeCall^));
end;

function NETWORK_PLAYER_GET_USERID(plyr: Player; userID: pcint): PChar;
begin
  nativeInit(UINT64($4927FC39CD0869A0));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(userID));
  exit(PChar(nativeCall^));
end;

function NETWORK_PLAYER_IS_ROCKSTAR_DEV(plyr: Player): BOOL;
begin
  nativeInit(UINT64($544ABDDA3B409B6D));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_PLAYER_INDEX_IS_CHEATER(plyr: Player): BOOL;
begin
  nativeInit(UINT64($565E430DB3B05BEC));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ENTITY_GET_OBJECT_ID(para_entity: Entity): cint;
begin
  nativeInit(UINT64($815F18AD865F057F));
  nativePush64(UINT64(para_entity));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_ENTITY_FROM_OBJECT_ID(p0: Any): Entity;
begin
  nativeInit(UINT64($37D5F739FD494675));
  nativePush64(UINT64(p0));
  exit(Entity(nativeCall^));
end;

function NETWORK_IS_INACTIVE_PROFILE(p0: PAny): BOOL;
begin
  nativeInit(UINT64($7E58745504313A2E));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_MAX_FRIENDS: cint;
begin
  nativeInit(UINT64($AFEBB0D5D8F687D2));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_FRIEND_COUNT: cint;
begin
  nativeInit(UINT64($203F1CFD823B27A4));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_FRIEND_NAME(friendIndex: cint): PChar;
begin
  nativeInit(UINT64($E11EBBB2A783FE8B));
  nativePush64(UINT64(friendIndex));
  exit(PChar(nativeCall^));
end;

function NETWORK_GET_FRIEND_DISPLAY_NAME(friendIndex: cint): PChar;
begin
  nativeInit(UINT64($4164F227D052E293));
  nativePush64(UINT64(friendIndex));
  exit(PChar(nativeCall^));
end;

function NETWORK_IS_FRIEND_ONLINE(name: PChar): BOOL;
begin
  nativeInit(UINT64($425A44533437B64D));
  nativePush64(UINT64(name));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_FRIEND_HANDLE_ONLINE(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($87EB7A3FFCB314DB));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_FRIEND_IN_SAME_TITLE(friendName: PChar): BOOL;
begin
  nativeInit(UINT64($2EA9A3BEDF3F17B8));
  nativePush64(UINT64(friendName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_FRIEND_IN_MULTIPLAYER(friendName: PChar): BOOL;
begin
  nativeInit(UINT64($57005C18827F3A28));
  nativePush64(UINT64(friendName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_FRIEND(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($1A24A179F9B31654));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PENDING_FRIEND(p0: Any): BOOL;
begin
  nativeInit(UINT64($0BE73DA6984A6E33));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_ADDING_FRIEND: BOOL;
begin
  nativeInit(UINT64($6EA101606F6E4D81));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ADD_FRIEND(gamerHandle: PAny; message: PChar): BOOL;
begin
  nativeInit(UINT64($8E02D73914064223));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(message));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_FRIEND_INDEX_ONLINE(friendIndex: cint): BOOL;
begin
  nativeInit(UINT64($BAD8F2A42B844821));
  nativePush64(UINT64(friendIndex));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_PLAYER_IS_PASSIVE(toggle: BOOL);
begin
  nativeInit(UINT64($1B857666604B1A74));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_GET_PLAYER_OWNS_WAYPOINT(plyr: Player): BOOL;
begin
  nativeInit(UINT64($82377B65E943F72D));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_SET_WAYPOINT: BOOL;
begin
  nativeInit(UINT64($C927EC229934AF60));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_IGNORE_REMOTE_WAYPOINTS;
begin
  nativeInit(UINT64($4C2A9FDC22377075));
  nativeCall;
end;

function _NETWORK_DOES_COMMUNICATION_GROUP_EXIST(communicationType: cint): BOOL;
begin
  nativeInit(UINT64($DBDF80673BBA3D65));
  nativePush64(UINT64(communicationType));
  exit(BOOL(nativeCall^));
end;

function _NETWORK_GET_COMMUNICATION_GROUP_FLAGS(communicationType: cint): cint;
begin
  nativeInit(UINT64($40DF02F371F40883));
  nativePush64(UINT64(communicationType));
  exit(cint(nativeCall^));
end;

procedure _NETWORK_SET_COMMUNICATION_GROUP_FLAGS(communicationType, communicationGroupFlag: cint);
begin
  nativeInit(UINT64($E549F846DE7D32D5));
  nativePush64(UINT64(communicationType));
  nativePush64(UINT64(communicationGroupFlag));
  nativeCall;
end;

function NETWORK_IS_PLAYER_ON_BLOCKLIST(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($AD4326FCA30D62F8));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SET_SCRIPT_AUTOMUTED(p0: Any): BOOL;
begin
  nativeInit(UINT64($B309EBEA797E001F));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_AUTOMUTE_OVERRIDE: BOOL;
begin
  nativeInit(UINT64($26F07DD83A5F7F98));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_HEADSET: BOOL;
begin
  nativeInit(UINT64($E870F9F1F7B4F1FA));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_LOOK_AT_TALKERS(p0: BOOL);
begin
  nativeInit(UINT64($7D395EA61622E116));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_IS_PUSH_TO_TALK_ACTIVE: BOOL;
begin
  nativeInit(UINT64($C0D2AF00BCC234CA));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GAMER_HAS_HEADSET(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($F2FD55CB574BCC55));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_GAMER_TALKING(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($71C33B22606CD88A));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_PERMISSIONS_HAS_GAMER_RECORD(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($559EBF901A8C68E0));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_COMMUNICATE_WITH_GAMER(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($8F5D1AD832AEB06C));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_TEXT_CHAT_WITH_GAMER(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($A150A4F065806B1F));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_GAMER_MUTED_BY_ME(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($CE60DE011B6C7978));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_AM_I_MUTED_BY_GAMER(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($DF02A2C93F1F26DA));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_GAMER_BLOCKED_BY_ME(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($E944C4F5AF1B5883));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_AM_I_BLOCKED_BY_GAMER(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($15337C7C268A27B2));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_VIEW_GAMER_USER_CONTENT(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($B57A49545BA53CE7));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($CCA4318E1AB03F1F));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($07DD29D5E22763F1));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($135F9B7B7ADD2185));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_SEND_LOCAL_INVITE(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($021ABCBD98EC4320));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CAN_RECEIVE_LOCAL_INVITE(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($421E34C55F125964));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PLAYER_TALKING(plyr: Player): BOOL;
begin
  nativeInit(UINT64($031E11F3D447647E));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_PLAYER_HAS_HEADSET(plyr: Player): BOOL;
begin
  nativeInit(UINT64($3FB99A8B08D18FD6));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PLAYER_MUTED_BY_ME(plyr: Player): BOOL;
begin
  nativeInit(UINT64($8C71288AE68EDE39));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_AM_I_MUTED_BY_PLAYER(plyr: Player): BOOL;
begin
  nativeInit(UINT64($9D6981DFC91A8604));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PLAYER_BLOCKED_BY_ME(plyr: Player): BOOL;
begin
  nativeInit(UINT64($57AF1F8E27483721));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_AM_I_BLOCKED_BY_PLAYER(plyr: Player): BOOL;
begin
  nativeInit(UINT64($87F395D957D4353D));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PLAYER_LOUDNESS(plyr: Player): cfloat;
begin
  nativeInit(UINT64($21A1684A25C2867F));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure NETWORK_SET_TALKER_PROXIMITY(value: cfloat);
begin
  nativeInit(UINT64($CBF12D65F95AD686));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function NETWORK_GET_TALKER_PROXIMITY: cfloat;
begin
  nativeInit(UINT64($84F0F13120B4E098));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure NETWORK_SET_VOICE_ACTIVE(toggle: BOOL);
begin
  nativeInit(UINT64($BABEC9E69A91C57B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_REMAIN_IN_GAME_CHAT(p0: BOOL);
begin
  nativeInit(UINT64($CFEB46DCD7D8D5EB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_TRANSITION_CHAT(p0: BOOL);
begin
  nativeInit(UINT64($AF66059A131AA269));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SET_TEAM_ONLY_CHAT(toggle: BOOL);
begin
  nativeInit(UINT64($D5B4883AC32F24C3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(p0: Any);
begin
  nativeInit(UINT64($265559DA40B3F327));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(p0, p1: Any): BOOL;
begin
  nativeInit(UINT64($4348BFDA56023A2F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_OVERRIDE_TEAM_RESTRICTIONS(team: cint; toggle: BOOL);
begin
  nativeInit(UINT64($6F697A66CE78674E));
  nativePush64(UINT64(team));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_OVERRIDE_SPECTATOR_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($70DA3BF8DACD3210));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(toggle: BOOL);
begin
  nativeInit(UINT64($3C5C1E2C2FF814B1));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_PROXIMITY_AFFECTS_TEAM(toggle: BOOL);
begin
  nativeInit(UINT64($9D7AFCBF21C51712));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_NO_SPECTATOR_CHAT(toggle: BOOL);
begin
  nativeInit(UINT64($F46A1E03E8755980));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(toggle: BOOL);
begin
  nativeInit(UINT64($6A5D89D7769A40D8));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_CHAT_RESTRICTIONS(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($3039AE5AD2C9C0C4));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_SEND_RESTRICTIONS(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($97DD4C5944CC2E6A));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(toggle: BOOL);
begin
  nativeInit(UINT64($57B192B4D4AD23D5));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($DDF73E2B1FEC5AB4));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(toggle: BOOL);
begin
  nativeInit(UINT64($0FF2862B61A58AF9));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_VOICE_CHANNEL(channel: cint);
begin
  nativeInit(UINT64($EF6212C2EFEF1A23));
  nativePush64(UINT64(channel));
  nativeCall;
end;

procedure NETWORK_CLEAR_VOICE_CHANNEL;
begin
  nativeInit(UINT64($E036A705F989E049));
  nativeCall;
end;

procedure NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(x, y, z: cfloat);
begin
  nativeInit(UINT64($DBD2056652689917));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE;
begin
  nativeInit(UINT64($F03755696450470C));
  nativeCall;
end;

procedure NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(plyr: Player);
begin
  nativeInit(UINT64($5E3AA4CA2B6FB0EE));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(plyr: Player);
begin
  nativeInit(UINT64($CA575C391FEA25CC));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure NETWORK_GET_MUTE_COUNT_FOR_PLAYER(p0: Player; p1, p2: pcfloat);
begin
  nativeInit(UINT64($ADB57E5B663CCA8B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(toggle: BOOL);
begin
  nativeInit(UINT64($8EF52ACAECC51D9C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_TEXT_CHAT_IS_TYPING: BOOL;
begin
  nativeInit(UINT64($5FCF4D7069B09026));
  exit(BOOL(nativeCall^));
end;

procedure SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME;
begin
  nativeInit(UINT64($593850C16A36B692));
  nativeCall;
end;

function SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE: BOOL;
begin
  nativeInit(UINT64($9ECA15ADFE141431));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_FRIENDLY_FIRE_OPTION(toggle: BOOL);
begin
  nativeInit(UINT64($F808475FA571D823));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_RICH_PRESENCE(p0, p1: cint; p2, p3: Any);
begin
  nativeInit(UINT64($1DCCACDCFC569362));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure NETWORK_SET_RICH_PRESENCE_STRING(p0: cint; textLabel: PChar);
begin
  nativeInit(UINT64($3E200C2BCF4164EB));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(textLabel));
  nativeCall;
end;

function NETWORK_GET_TIMEOUT_TIME: cint;
begin
  nativeInit(UINT64($5ED0356A0CE3A34F));
  exit(cint(nativeCall^));
end;

procedure NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(plyr: Player; x, y, z: cfloat; p4, p5: BOOL);
begin
  nativeInit(UINT64($9769F811D1785B03));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(plyr: Player; p1: BOOL);
begin
  nativeInit(UINT64($BF22E0F32968E967));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(para_entity: Entity; _ped: Ped);
begin
  nativeInit(UINT64($715135F4B82AC90D));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(p0, p1: Any);
begin
  nativeInit(UINT64($17C9E241111A674D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function NETWORK_IS_ANY_PLAYER_NEAR(p0, p1, p2, p3, p4, p5, p6: Any): BOOL;
begin
  nativeInit(UINT64($2E4C123D1C8A710E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_SERVICE_IS_VALID: BOOL;
begin
  nativeInit(UINT64($579CCED0265D4896));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_PLAYER_IS_ACTIVE(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($B124B57F571D8F18));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_PLAYER_GET_DESC(clanDesc: PAny; bufferSize: cint; gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($EEE6EACBE8874FBA));
  nativePush64(UINT64(clanDesc));
  nativePush64(UINT64(bufferSize));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_IS_ROCKSTAR_CLAN(clanDesc: PAny; bufferSize: cint): BOOL;
begin
  nativeInit(UINT64($7543BB439F63792B));
  nativePush64(UINT64(clanDesc));
  nativePush64(UINT64(bufferSize));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLAN_GET_UI_FORMATTED_TAG(clanDesc: PAny; bufferSize: cint; formattedTag: PChar);
begin
  nativeInit(UINT64($F45352426FF3A4F0));
  nativePush64(UINT64(clanDesc));
  nativePush64(UINT64(bufferSize));
  nativePush64(UINT64(formattedTag));
  nativeCall;
end;

function NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT: cint;
begin
  nativeInit(UINT64($1F471B79ACC90BEF));
  exit(cint(nativeCall^));
end;

function NETWORK_CLAN_GET_MEMBERSHIP_DESC(memberDesc: PAny; p1: cint): BOOL;
begin
  nativeInit(UINT64($48DE78AF2C8885B8));
  nativePush64(UINT64(memberDesc));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(gamerHandle: PAny): BOOL;
begin
  nativeInit(UINT64($A989044E70010ABE));
  nativePush64(UINT64(gamerHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(p0: PAny): BOOL;
begin
  nativeInit(UINT64($5B9E023DC6EBEDC0));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING: BOOL;
begin
  nativeInit(UINT64($B3F64A6A91432477));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(p0: pcint): BOOL;
begin
  nativeInit(UINT64($BB6E6FEE99D866B2));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_GET_MEMBERSHIP_COUNT(p0: pcint): cint;
begin
  nativeInit(UINT64($AAB11F6C4ADBC2C1));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_CLAN_GET_MEMBERSHIP_VALID(p0: pcint; p1: Any): BOOL;
begin
  nativeInit(UINT64($48A59CF88D43DF0E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_GET_MEMBERSHIP(p0: pcint; clanMembership: PAny; p2: cint): BOOL;
begin
  nativeInit(UINT64($C8BC2011F67B3411));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(clanMembership));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_JOIN(clanDesc: cint): BOOL;
begin
  nativeInit(UINT64($9FAAA4F4FC71F87F));
  nativePush64(UINT64(clanDesc));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(animDict, animName: PChar): BOOL;
begin
  nativeInit(UINT64($729E3401F0430686));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(p0: cint; p1: PChar): BOOL;
begin
  nativeInit(UINT64($2B51EDBEFC301339));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED: BOOL;
begin
  nativeInit(UINT64($C32EA7A2F6CA7557));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_GET_EMBLEM_TXD_NAME(netHandle: PAny; txdName: PChar): BOOL;
begin
  nativeInit(UINT64($5835D9CD92E83184));
  nativePush64(UINT64(netHandle));
  nativePush64(UINT64(txdName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_REQUEST_EMBLEM(p0: Any): BOOL;
begin
  nativeInit(UINT64($13518FF1C6B28938));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function NETWORK_CLAN_IS_EMBLEM_READY(p0: Any; p1: PAny): BOOL;
begin
  nativeInit(UINT64($A134777FF7F33331));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CLAN_RELEASE_EMBLEM(p0: Any);
begin
  nativeInit(UINT64($113E6E3E50E286B0));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR: BOOL;
begin
  nativeInit(UINT64($9AA46BADAD0E27ED));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL;
begin
  nativeInit(UINT64($042E4B70B93E6054));
  nativeCall;
end;

function NETWORK_GET_PRIMARY_CLAN_DATA_START(p0: PAny; p1: Any): BOOL;
begin
  nativeInit(UINT64($CE86D8191B762107));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PRIMARY_CLAN_DATA_PENDING: BOOL;
begin
  nativeInit(UINT64($B5074DB804E28CE7));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS: BOOL;
begin
  nativeInit(UINT64($5B4F04F19376A0BA));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PRIMARY_CLAN_DATA_NEW(p0, p1: PAny): BOOL;
begin
  nativeInit(UINT64($C080FF658B2E41DA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SET_NETWORK_ID_CAN_MIGRATE(netId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($299EEB23175895FC));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(netId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($E05E81A888FA63C8));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(netId: cint; plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($A8A024587329F36A));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_NETWORK_ID_CAN_BE_REASSIGNED(netId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($9D724B400A7E8FFC));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_ENTITY_CAN_BLEND(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($D830567D88A1E873));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($0379DAF89BA09AA5));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($F1CA12B18AEF5298));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(netId: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($A6928482543022B4));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(netId: cint; p1, p2: BOOL);
begin
  nativeInit(UINT64($32EBD154CB6B8B99));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(p0, p1, p2: Any);
begin
  nativeInit(UINT64($76B3F29D3F967692));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_NETWORK_CUTSCENE_ENTITIES(toggle: BOOL);
begin
  nativeInit(UINT64($AAA553E7DD28A457));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function ARE_CUTSCENE_ENTITIES_NETWORKED: BOOL;
begin
  nativeInit(UINT64($66D6A5E9C511214A));
  exit(BOOL(nativeCall^));
end;

procedure SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(netId: cint; state: BOOL);
begin
  nativeInit(UINT64($3FA36981311FA4FF));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(state));
  nativeCall;
end;

function IS_NETWORK_ID_OWNED_BY_PARTICIPANT(netId: cint): BOOL;
begin
  nativeInit(UINT64($A1607996431332DF));
  nativePush64(UINT64(netId));
  exit(BOOL(nativeCall^));
end;

procedure SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE(plyr: Player; locallyVisible: BOOL);
begin
  nativeInit(UINT64($96320E6549DAE7B4));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(locallyVisible));
  nativeCall;
end;

procedure SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(p0, p1: BOOL);
begin
  nativeInit(UINT64($D1065D68947E7B6E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(bIncludePlayersVehicle: BOOL);
begin
  nativeInit(UINT64($E5F773C1A1D9D168));
  nativePush64(UINT64(bIncludePlayersVehicle));
  nativeCall;
end;

procedure SET_LOCAL_PLAYER_VISIBLE_LOCALLY(bIncludePlayersVehicle: BOOL);
begin
  nativeInit(UINT64($7619364C82D3BF14));
  nativePush64(UINT64(bIncludePlayersVehicle));
  nativeCall;
end;

procedure SET_PLAYER_INVISIBLE_LOCALLY(plyr: Player; bIncludePlayersVehicle: BOOL);
begin
  nativeInit(UINT64($12B37D54667DB0B8));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(bIncludePlayersVehicle));
  nativeCall;
end;

procedure SET_PLAYER_VISIBLE_LOCALLY(plyr: Player; bIncludePlayersVehicle: BOOL);
begin
  nativeInit(UINT64($FAA10F1FAFB11AF2));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(bIncludePlayersVehicle));
  nativeCall;
end;

procedure FADE_OUT_LOCAL_PLAYER(p0: BOOL);
begin
  nativeInit(UINT64($416DBD4CD6ED8DD2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_FADE_OUT_ENTITY(para_entity: Entity; normal, slow: BOOL);
begin
  nativeInit(UINT64($DE564951F95E09ED));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(normal));
  nativePush64(UINT64(slow));
  nativeCall;
end;

procedure NETWORK_FADE_IN_ENTITY(para_entity: Entity; state: BOOL; p2: Any);
begin
  nativeInit(UINT64($1F4ED342ACEFE62D));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(state));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function NETWORK_IS_PLAYER_FADING(plyr: Player): BOOL;
begin
  nativeInit(UINT64($631DC5DFF4B110E3));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_ENTITY_FADING(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($422F32CC7E56ABAD));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_IN_CUTSCENE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($E73092F4157CD126));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_ENTITY_VISIBLE_IN_CUTSCENE(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($E0031D3C8F36AB82));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_ENTITY_LOCALLY_INVISIBLE(para_entity: Entity);
begin
  nativeInit(UINT64($E135A9FF3F5D05D8));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_ENTITY_LOCALLY_VISIBLE(para_entity: Entity);
begin
  nativeInit(UINT64($241E289B5C059EDC));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

function IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(netID: cint): BOOL;
begin
  nativeInit(UINT64($6E192E33AD436366));
  nativePush64(UINT64(netID));
  exit(BOOL(nativeCall^));
end;

procedure ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(netID: cint; toggle: BOOL);
begin
  nativeInit(UINT64($D45B1FFCCD52FF19));
  nativePush64(UINT64(netID));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(plyr: Player): BOOL;
begin
  nativeInit(UINT64($B2092A1EAA7FD45F));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($BEC0816FF5ACBCDA));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(p0, p1, p2, p3: cfloat): BOOL;
begin
  nativeInit(UINT64($D82CF8E64C8729D8));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  exit(BOOL(nativeCall^));
end;

function IS_SPHERE_VISIBLE_TO_PLAYER(p0: Any; p1, p2, p3, p4: cfloat): BOOL;
begin
  nativeInit(UINT64($DC3A310219E5DA62));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  exit(BOOL(nativeCall^));
end;

procedure RESERVE_NETWORK_MISSION_OBJECTS(amount: cint);
begin
  nativeInit(UINT64($4E5C93BD0C32FBF8));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure RESERVE_NETWORK_MISSION_PEDS(amount: cint);
begin
  nativeInit(UINT64($B60FEBA45333D36F));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure RESERVE_NETWORK_MISSION_VEHICLES(amount: cint);
begin
  nativeInit(UINT64($76B02E21ED27A469));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(amount: cint);
begin
  nativeInit(UINT64($797F9C5E661D920E));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure RESERVE_LOCAL_NETWORK_MISSION_PEDS(amount: cint);
begin
  nativeInit(UINT64($2C8DF5D129595281));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(amount: cint);
begin
  nativeInit(UINT64($42613035157E4208));
  nativePush64(UINT64(amount));
  nativeCall;
end;

function CAN_REGISTER_MISSION_OBJECTS(amount: cint): BOOL;
begin
  nativeInit(UINT64($800DD4721A8B008B));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function CAN_REGISTER_MISSION_PEDS(amount: cint): BOOL;
begin
  nativeInit(UINT64($BCBF4FEF9FA5D781));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function CAN_REGISTER_MISSION_VEHICLES(amount: cint): BOOL;
begin
  nativeInit(UINT64($7277F1F2E085EE74));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function CAN_REGISTER_MISSION_PICKUPS(amount: cint): BOOL;
begin
  nativeInit(UINT64($0A49D1CB6E34AF72));
  nativePush64(UINT64(amount));
  exit(BOOL(nativeCall^));
end;

function CAN_REGISTER_MISSION_DOORS(p0: Any): BOOL;
begin
  nativeInit(UINT64($E16AA70CE9BEEDC3));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function CAN_REGISTER_MISSION_ENTITIES(ped_amt, vehicle_amt, object_amt, pickup_amt: cint): BOOL;
begin
  nativeInit(UINT64($69778E7564BADE6D));
  nativePush64(UINT64(ped_amt));
  nativePush64(UINT64(vehicle_amt));
  nativePush64(UINT64(object_amt));
  nativePush64(UINT64(pickup_amt));
  exit(BOOL(nativeCall^));
end;

function GET_NUM_RESERVED_MISSION_OBJECTS(p0: BOOL; p1: Any): cint;
begin
  nativeInit(UINT64($AA81B5F10BC43AC2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function GET_NUM_RESERVED_MISSION_PEDS(p0: BOOL; p1: Any): cint;
begin
  nativeInit(UINT64($1F13D5AE5CB17E17));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function GET_NUM_RESERVED_MISSION_VEHICLES(p0: BOOL; p1: Any): cint;
begin
  nativeInit(UINT64($CF3A965906452031));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function GET_NUM_CREATED_MISSION_OBJECTS(p0: BOOL): cint;
begin
  nativeInit(UINT64($12B6281B6C6706C0));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function GET_NUM_CREATED_MISSION_PEDS(p0: BOOL): cint;
begin
  nativeInit(UINT64($CB215C4B56A7FAE7));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function GET_NUM_CREATED_MISSION_VEHICLES(p0: BOOL): cint;
begin
  nativeInit(UINT64($0CD9AB83489430EA));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure GET_RESERVED_MISSION_ENTITIES_IN_AREA(x, y, z: cfloat; p3: Any; out1, out2, out3: PAny);
begin
  nativeInit(UINT64($E42D626EEC94E5D9));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p3));
  nativePush64(UINT64(out1));
  nativePush64(UINT64(out2));
  nativePush64(UINT64(out3));
  nativeCall;
end;

function GET_MAX_NUM_NETWORK_OBJECTS: cint;
begin
  nativeInit(UINT64($C7BE335216B5EC7C));
  exit(cint(nativeCall^));
end;

function GET_MAX_NUM_NETWORK_PEDS: cint;
begin
  nativeInit(UINT64($0C1F7D49C39D2289));
  exit(cint(nativeCall^));
end;

function GET_MAX_NUM_NETWORK_VEHICLES: cint;
begin
  nativeInit(UINT64($0AFCE529F69B21FF));
  exit(cint(nativeCall^));
end;

function GET_MAX_NUM_NETWORK_PICKUPS: cint;
begin
  nativeInit(UINT64($A72835064DD63E4C));
  exit(cint(nativeCall^));
end;

procedure NETWORK_SET_OBJECT_SCOPE_DISTANCE(obj: GTAObject; range: cfloat);
begin
  nativeInit(UINT64($BA7F0B77D80A4EB7));
  nativePush64(UINT64(obj));
  nativePush64(PUINT64(@range)^);
  nativeCall;
end;

procedure NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(p0, p1: Any);
begin
  nativeInit(UINT64($0F1A4B45B7693B95));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(p0: Any);
begin
  nativeInit(UINT64($C6FCEE21C6FCEE21));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function GET_NETWORK_TIME: cint;
begin
  nativeInit(UINT64($7A5487FE9FAA6B48));
  exit(cint(nativeCall^));
end;

function GET_NETWORK_TIME_ACCURATE: cint;
begin
  nativeInit(UINT64($89023FBBF9200E9F));
  exit(cint(nativeCall^));
end;

function HAS_NETWORK_TIME_STARTED: BOOL;
begin
  nativeInit(UINT64($46718ACEEDEAFC84));
  exit(BOOL(nativeCall^));
end;

function GET_TIME_OFFSET(timeA, timeB: cint): cint;
begin
  nativeInit(UINT64($017008CCDAD48503));
  nativePush64(UINT64(timeA));
  nativePush64(UINT64(timeB));
  exit(cint(nativeCall^));
end;

function IS_TIME_LESS_THAN(timeA, timeB: cint): BOOL;
begin
  nativeInit(UINT64($CB2CF5148012C8D0));
  nativePush64(UINT64(timeA));
  nativePush64(UINT64(timeB));
  exit(BOOL(nativeCall^));
end;

function IS_TIME_MORE_THAN(timeA, timeB: cint): BOOL;
begin
  nativeInit(UINT64($DE350F8651E4346C));
  nativePush64(UINT64(timeA));
  nativePush64(UINT64(timeB));
  exit(BOOL(nativeCall^));
end;

function IS_TIME_EQUAL_TO(timeA, timeB: cint): BOOL;
begin
  nativeInit(UINT64($F5BC95857BD6D512));
  nativePush64(UINT64(timeA));
  nativePush64(UINT64(timeB));
  exit(BOOL(nativeCall^));
end;

function GET_TIME_DIFFERENCE(timeA, timeB: cint): cint;
begin
  nativeInit(UINT64($A2C6FC031D46FFF0));
  nativePush64(UINT64(timeA));
  nativePush64(UINT64(timeB));
  exit(cint(nativeCall^));
end;

function GET_TIME_AS_STRING(time: cint): PChar;
begin
  nativeInit(UINT64($9E23B1777A927DAD));
  nativePush64(UINT64(time));
  exit(PChar(nativeCall^));
end;

function GET_CLOUD_TIME_AS_STRING: PChar;
begin
  nativeInit(UINT64($F12E6CD06C73D69E));
  exit(PChar(nativeCall^));
end;

function GET_CLOUD_TIME_AS_INT: cint;
begin
  nativeInit(UINT64($9A73240B49945C76));
  exit(cint(nativeCall^));
end;

procedure CONVERT_POSIX_TIME(posixTime: cint; timeStructure: PAny);
begin
  nativeInit(UINT64($AC97AF97FA68E5D5));
  nativePush64(UINT64(posixTime));
  nativePush64(UINT64(timeStructure));
  nativeCall;
end;

procedure NETWORK_SET_IN_SPECTATOR_MODE(toggle: BOOL; playerPed: Ped);
begin
  nativeInit(UINT64($423DE3854BB50894));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(playerPed));
  nativeCall;
end;

procedure NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(toggle: BOOL; playerPed: Ped; p2: BOOL);
begin
  nativeInit(UINT64($419594E137637120));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(playerPed));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure NETWORK_SET_IN_FREE_CAM_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($FC18DB55AE19E046));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_ANTAGONISTIC_TO_PLAYER(toggle: BOOL; plyr: Player);
begin
  nativeInit(UINT64($5C707A667DF8B9FA));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function NETWORK_IS_IN_SPECTATOR_MODE: BOOL;
begin
  nativeInit(UINT64($048746E388762E11));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_SET_IN_MP_CUTSCENE(p0, p1: BOOL);
begin
  nativeInit(UINT64($9CA5DE655269FEC4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function NETWORK_IS_IN_MP_CUTSCENE: BOOL;
begin
  nativeInit(UINT64($6CC27C9FA2040220));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_PLAYER_IN_MP_CUTSCENE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($63F9EE203C3619F2));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_HIDE_PROJECTILE_IN_CUTSCENE;
begin
  nativeInit(UINT64($FAC18E7356BD3210));
  nativeCall;
end;

procedure SET_NETWORK_VEHICLE_RESPOT_TIMER(netId, time: cint; p2, p3: Any);
begin
  nativeInit(UINT64($EC51713AB6EC36E8));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(time));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER(networkID: cint): BOOL;
begin
  nativeInit(UINT64($DD7CEF5B3A4DA8A6));
  nativePush64(UINT64(networkID));
  exit(BOOL(nativeCall^));
end;

procedure SET_NETWORK_VEHICLE_AS_GHOST(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($6274C4712850841E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
begin
  nativeInit(UINT64($A2A707979FE754DC));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($838DA0936A24ED4D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_LOCAL_PLAYER_AS_GHOST(toggle, p1: BOOL);
begin
  nativeInit(UINT64($5FFE9B4144F9712F));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_ENTITY_A_GHOST(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($21D04D7BC538C146));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(p0: BOOL);
begin
  nativeInit(UINT64($13F1FCB111B820B0));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_REMOTE_PLAYER_AS_GHOST(plyr: Player; p1: BOOL);
begin
  nativeInit(UINT64($A7C511FA1C5BDA38));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_GHOST_ALPHA(alpha: cint);
begin
  nativeInit(UINT64($658500AE6D723A7E));
  nativePush64(UINT64(alpha));
  nativeCall;
end;

procedure RESET_GHOST_ALPHA;
begin
  nativeInit(UINT64($17330EBF2F2124A8));
  nativeCall;
end;

procedure SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($4BA166079D658ED4));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_INVERT_GHOSTING(p0: BOOL);
begin
  nativeInit(UINT64($D7B6C73CAD419BCF));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_ENTITY_IN_GHOST_COLLISION(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($7EF7649B64D7FF10));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(toggle: BOOL);
begin
  nativeInit(UINT64($77758139EC9B66C7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_CREATE_SYNCHRONISED_SCENE(x, y, z, xRot, yRot, zRot: cfloat; rotationOrder: cint; useOcclusionPortal, looped: BOOL; p9, animTime, p11: cfloat): cint;
begin
  nativeInit(UINT64($7CD6BC4C2BBDD526));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(rotationOrder));
  nativePush64(UINT64(useOcclusionPortal));
  nativePush64(UINT64(looped));
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@animTime)^);
  nativePush64(PUINT64(@p11)^);
  exit(cint(nativeCall^));
end;

procedure NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(_ped: Ped; netScene: cint; animDict, animnName: PChar; speed, speedMultiplier: cfloat; duration, flag: cint; playbackRate: cfloat; p9: Any);
begin
  nativeInit(UINT64($742A637471BCECD9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(netScene));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animnName));
  nativePush64(PUINT64(@speed)^);
  nativePush64(PUINT64(@speedMultiplier)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(flag));
  nativePush64(PUINT64(@playbackRate)^);
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9: Any);
begin
  nativeInit(UINT64($A5EAFE473E45C442));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(para_entity: Entity; netScene: cint; animDict, animName: PChar; speed, speedMulitiplier: cfloat; flag: cint);
begin
  nativeInit(UINT64($F2404D68CBC855FA));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(netScene));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@speed)^);
  nativePush64(PUINT64(@speedMulitiplier)^);
  nativePush64(UINT64(flag));
  nativeCall;
end;

procedure NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(netScene: cint; modelHash: Hash; x, y, z, p5: cfloat; p6: PChar; p7, p8: cfloat; flags: cint);
begin
  nativeInit(UINT64($45F35C0EDC33B03B));
  nativePush64(UINT64(netScene));
  nativePush64(UINT64(modelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(netScene: cint; animDict, animName: PChar);
begin
  nativeInit(UINT64($CF8BD3B0BD6D42D7));
  nativePush64(UINT64(netScene));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativeCall;
end;

procedure NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(netScene: cint; para_entity: Entity; bone: cint);
begin
  nativeInit(UINT64($478DCBD2A98B705A));
  nativePush64(UINT64(netScene));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(bone));
  nativeCall;
end;

procedure NETWORK_START_SYNCHRONISED_SCENE(netScene: cint);
begin
  nativeInit(UINT64($9A1B3FCDB36C8697));
  nativePush64(UINT64(netScene));
  nativeCall;
end;

procedure NETWORK_STOP_SYNCHRONISED_SCENE(netScene: cint);
begin
  nativeInit(UINT64($C254481A4574CB2F));
  nativePush64(UINT64(netScene));
  nativeCall;
end;

function NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(netId: cint): cint;
begin
  nativeInit(UINT64($02C40BF885C567B6));
  nativePush64(UINT64(netId));
  exit(cint(nativeCall^));
end;

procedure NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(netScene: cint);
begin
  nativeInit(UINT64($C9B43A33D09CADA7));
  nativePush64(UINT64(netScene));
  nativeCall;
end;

procedure NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(p0: Any);
begin
  nativeInit(UINT64($144DA052257AE7D8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(p0: cint; p1: Any): BOOL;
begin
  nativeInit(UINT64($FB1F9381E80FA13F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(plyr: Player; x, y, z, radius, p5, p6, p7: cfloat; flags: cint): BOOL;
begin
  nativeInit(UINT64($5A6FFA2433E2F14C));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(UINT64(flags));
  exit(BOOL(nativeCall^));
end;

function NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(plyr: Player; x1, y1, z1, x2, y2, z2, width, p8, p9, p10: cfloat; flags: cint): BOOL;
begin
  nativeInit(UINT64($4BA92A18502BCA61));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@p10)^);
  nativePush64(UINT64(flags));
  exit(BOOL(nativeCall^));
end;

function NETWORK_QUERY_RESPAWN_RESULTS(p0: PAny): cint;
begin
  nativeInit(UINT64($3C891A251567DFCE));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure NETWORK_CANCEL_RESPAWN_SEARCH;
begin
  nativeInit(UINT64($FB8F2A6F3DF08CBE));
  nativeCall;
end;

procedure NETWORK_GET_RESPAWN_RESULT(randomInt: cint; coordinates: PVector3; heading: pcfloat);
begin
  nativeInit(UINT64($371EA43692861CF1));
  nativePush64(UINT64(randomInt));
  nativePush64(UINT64(coordinates));
  nativePush64(UINT64(heading));
  nativeCall;
end;

function NETWORK_GET_RESPAWN_RESULT_FLAGS(p0: cint): cint;
begin
  nativeInit(UINT64($6C34F1208B8923FD));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure NETWORK_START_SOLO_TUTORIAL_SESSION;
begin
  nativeInit(UINT64($17E0198B3882C2CB));
  nativeCall;
end;

procedure NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(teamId, instanceId: cint);
begin
  nativeInit(UINT64($FB680D403909DC70));
  nativePush64(UINT64(teamId));
  nativePush64(UINT64(instanceId));
  nativeCall;
end;

procedure NETWORK_END_TUTORIAL_SESSION;
begin
  nativeInit(UINT64($D0AFAFF5A51D72F7));
  nativeCall;
end;

function NETWORK_IS_IN_TUTORIAL_SESSION: BOOL;
begin
  nativeInit(UINT64($ADA24309FE08DACF));
  exit(BOOL(nativeCall^));
end;

function NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION: BOOL;
begin
  nativeInit(UINT64($B37E4E6A2388CA7B));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING: BOOL;
begin
  nativeInit(UINT64($35F0B98A8387274D));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(plyr: Player): cint;
begin
  nativeInit(UINT64($3B39236746714134));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(plyr: Player; index: cint): BOOL;
begin
  nativeInit(UINT64($9DE986FC9A87C474));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(index));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(p0: Any);
begin
  nativeInit(UINT64($FEA7A352DDB34D52));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_CONCEAL_PLAYER(plyr: Player; toggle, p2: BOOL);
begin
  nativeInit(UINT64($BBDF066252829606));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function NETWORK_IS_PLAYER_CONCEALED(plyr: Player): BOOL;
begin
  nativeInit(UINT64($919B3C98ED8292F9));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_CONCEAL_ENTITY(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($1632BE0AC1E62876));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_IS_ENTITY_CONCEALED(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($71302EC70689052A));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_OVERRIDE_CLOCK_TIME(hours, minutes, seconds: cint);
begin
  nativeInit(UINT64($E679E3E06E363892));
  nativePush64(UINT64(hours));
  nativePush64(UINT64(minutes));
  nativePush64(UINT64(seconds));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_CLOCK_RATE(ms: cint);
begin
  nativeInit(UINT64($42BF1D2E723B6D7E));
  nativePush64(UINT64(ms));
  nativeCall;
end;

procedure NETWORK_CLEAR_CLOCK_TIME_OVERRIDE;
begin
  nativeInit(UINT64($D972DF67326F966E));
  nativeCall;
end;

function NETWORK_IS_CLOCK_TIME_OVERRIDDEN: BOOL;
begin
  nativeInit(UINT64($D7C95D322FF57522));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ADD_ENTITY_AREA(x1, y1, z1, x2, y2, z2: cfloat): cint;
begin
  nativeInit(UINT64($494C8FB299290269));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(cint(nativeCall^));
end;

function NETWORK_ADD_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat): cint;
begin
  nativeInit(UINT64($376C6375BA60293A));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  exit(cint(nativeCall^));
end;

function NETWORK_ADD_CLIENT_ENTITY_AREA(x1, y1, z1, x2, y2, z2: cfloat): cint;
begin
  nativeInit(UINT64($25B99872D588A101));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(cint(nativeCall^));
end;

function NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(x1, y1, z1, x2, y2, z2, radius: cfloat): cint;
begin
  nativeInit(UINT64($2B1C623823DB0D9D));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@radius)^);
  exit(cint(nativeCall^));
end;

function NETWORK_REMOVE_ENTITY_AREA(areaHandle: cint): BOOL;
begin
  nativeInit(UINT64($93CF869BAA0C4874));
  nativePush64(UINT64(areaHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ENTITY_AREA_DOES_EXIST(areaHandle: cint): BOOL;
begin
  nativeInit(UINT64($E64A3CA08DFA37A9));
  nativePush64(UINT64(areaHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(areaHandle: cint): BOOL;
begin
  nativeInit(UINT64($4DF7CFFF471A7FB1));
  nativePush64(UINT64(areaHandle));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ENTITY_AREA_IS_OCCUPIED(areaHandle: cint): BOOL;
begin
  nativeInit(UINT64($4A2D4E8BF4265B0F));
  nativePush64(UINT64(areaHandle));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_USE_HIGH_PRECISION_BLENDING(netID: cint; toggle: BOOL);
begin
  nativeInit(UINT64($2B1813ABA29016C5));
  nativePush64(UINT64(netID));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(netId: cint);
begin
  nativeInit(UINT64($A6FCECCF4721D679));
  nativePush64(UINT64(netId));
  nativeCall;
end;

procedure NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(netId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($95BAF97C82464629));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS: BOOL;
begin
  nativeInit(UINT64($924426BFFD82E915));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING: BOOL;
begin
  nativeInit(UINT64($8132C0EB8B2B3293));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_REQUEST_CLOUD_TUNABLES;
begin
  nativeInit(UINT64($42FB3B532D526E6C));
  nativeCall;
end;

function NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING: BOOL;
begin
  nativeInit(UINT64($0467C11ED88B7D28));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_TUNABLE_CLOUD_CRC: cint;
begin
  nativeInit(UINT64($10BD227A753B0D84));
  exit(cint(nativeCall^));
end;

function NETWORK_DOES_TUNABLE_EXIST(tunableContext, tunableName: PChar): BOOL;
begin
  nativeInit(UINT64($85E5F8B9B898B20A));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_INT(tunableContext, tunableName: PChar; value: pcint): BOOL;
begin
  nativeInit(UINT64($8BE1146DFD5D4468));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_FLOAT(tunableContext, tunableName: PChar; value: pcfloat): BOOL;
begin
  nativeInit(UINT64($E5608CA7BC163A5F));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_BOOL(tunableContext, tunableName: PChar): BOOL;
begin
  nativeInit(UINT64($AA6A47A573ABB75A));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_DOES_TUNABLE_EXIST_HASH(tunableContext, tunableName: Hash): BOOL;
begin
  nativeInit(UINT64($E4E53E1419D81127));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR: BOOL;
begin
  nativeInit(UINT64($FAFC23AEE23868DB));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_INT_HASH(tunableContext, tunableName: Hash; value: pcint): BOOL;
begin
  nativeInit(UINT64($40FCE03E50E8DBE8));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash: Hash; value: pcint): BOOL;
begin
  nativeInit(UINT64($3A8B55FDA4C8DDEF));
  nativePush64(UINT64(contextHash));
  nativePush64(UINT64(nameHash));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_FLOAT_HASH(tunableContext, tunableName: Hash; value: pcfloat): BOOL;
begin
  nativeInit(UINT64($972BC203BBC4C4D5));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash: Hash; value: pcfloat): BOOL;
begin
  nativeInit(UINT64($1950DAE9848A4739));
  nativePush64(UINT64(contextHash));
  nativePush64(UINT64(nameHash));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName: Hash): BOOL;
begin
  nativeInit(UINT64($EA16B69D93D71A45));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  exit(BOOL(nativeCall^));
end;

function NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(contextHash, nameHash: Hash; value: PBOOL): BOOL;
begin
  nativeInit(UINT64($697F508861875B42));
  nativePush64(UINT64(contextHash));
  nativePush64(UINT64(nameHash));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(tunableContext, tunableName: Hash; defaultValue: BOOL): BOOL;
begin
  nativeInit(UINT64($C7420099936CE286));
  nativePush64(UINT64(tunableContext));
  nativePush64(UINT64(tunableName));
  nativePush64(UINT64(defaultValue));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_CONTENT_MODIFIER_LIST_ID(contentHash: Hash): cint;
begin
  nativeInit(UINT64($187382F8A3E0A6C3));
  nativePush64(UINT64(contentHash));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_BONE_ID_OF_FATAL_HIT: cint;
begin
  nativeInit(UINT64($7DB53B37A2F211A0));
  exit(cint(nativeCall^));
end;

procedure NETWORK_RESET_BODY_TRACKER;
begin
  nativeInit(UINT64($72433699B4E6DD64));
  nativeCall;
end;

function NETWORK_GET_NUMBER_BODY_TRACKER_HITS: cint;
begin
  nativeInit(UINT64($D38C4A6D047C019D));
  exit(cint(nativeCall^));
end;

function NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(boneIndex: cint): BOOL;
begin
  nativeInit(UINT64($2E0BF682CC778D49));
  nativePush64(UINT64(boneIndex));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(_ped: Ped; plyr: Player): BOOL;
begin
  nativeInit(UINT64($0EDE326D47CD0F3E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($890E2C5ABED7236D));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($38B7C51AB1EDC7D8));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SET_NO_LONGER_NEEDED(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($3FC795691834481D));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function NETWORK_EXPLODE_VEHICLE(veh: Vehicle; isAudible, isInvisible: BOOL; netId: cint): BOOL;
begin
  nativeInit(UINT64($301A42153C9AD707));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(UINT64(netId));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_EXPLODE_HELI(veh: Vehicle; isAudible, isInvisible: BOOL; netId: cint);
begin
  nativeInit(UINT64($2A5E0621DD815A9A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativePush64(UINT64(netId));
  nativeCall;
end;

procedure NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(para_entity: Entity);
begin
  nativeInit(UINT64($CD71A4ECAB22709E));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure NETWORK_OVERRIDE_COORDS_AND_HEADING(para_entity: Entity; x, y, z, heading: cfloat);
begin
  nativeInit(UINT64($A7E30DE9272B6D49));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

procedure NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(netId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($E6717E652B8C8D8A));
  nativePush64(UINT64(netId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_DISABLE_PROXIMITY_MIGRATION(netID: cint);
begin
  nativeInit(UINT64($407091CF6037118E));
  nativePush64(UINT64(netID));
  nativeCall;
end;

procedure NETWORK_SET_PROPERTY_ID(id: cint);
begin
  nativeInit(UINT64($1775961C2FBBCB5C));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure NETWORK_CLEAR_PROPERTY_ID;
begin
  nativeInit(UINT64($C2B82527CA77053E));
  nativeCall;
end;

procedure NETWORK_SET_PLAYER_MENTAL_STATE(p0: cint);
begin
  nativeInit(UINT64($367EF5E2F439B4C6));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_SET_MINIMUM_RANK_FOR_MISSION(p0: BOOL);
begin
  nativeInit(UINT64($94538037EE44F5CF));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA;
begin
  nativeInit(UINT64($BD0BE0BFC927EAC1));
  nativeCall;
end;

function NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(plyr: Player): BOOL;
begin
  nativeInit(UINT64($237D5336A9A54108));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(_ped: Ped; plyr: Player): BOOL;
begin
  nativeInit(UINT64($99B72C7ABDE5C910));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function GET_NUM_COMMERCE_ITEMS: cint;
begin
  nativeInit(UINT64($F2EAC213D5EA0623));
  exit(cint(nativeCall^));
end;

function IS_COMMERCE_DATA_VALID: BOOL;
begin
  nativeInit(UINT64($EA14EEF5B7CD2C30));
  exit(BOOL(nativeCall^));
end;

procedure TRIGGER_COMMERCE_DATA_FETCH(p0: Any);
begin
  nativeInit(UINT64($B606E6CC59664972));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_COMMERCE_DATA_FETCH_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($1D4DC17C38FEAFF0));
  exit(BOOL(nativeCall^));
end;

function GET_COMMERCE_ITEM_ID(index: cint): PChar;
begin
  nativeInit(UINT64($662635855957C411));
  nativePush64(UINT64(index));
  exit(PChar(nativeCall^));
end;

function GET_COMMERCE_ITEM_NAME(index: cint): PChar;
begin
  nativeInit(UINT64($B4271092CA7EDF48));
  nativePush64(UINT64(index));
  exit(PChar(nativeCall^));
end;

function GET_COMMERCE_PRODUCT_PRICE(index: cint): PChar;
begin
  nativeInit(UINT64($CA94551B50B4932C));
  nativePush64(UINT64(index));
  exit(PChar(nativeCall^));
end;

function GET_COMMERCE_ITEM_NUM_CATS(index: cint): cint;
begin
  nativeInit(UINT64($2A7776C709904AB0));
  nativePush64(UINT64(index));
  exit(cint(nativeCall^));
end;

function GET_COMMERCE_ITEM_CAT(index, index2: cint): PChar;
begin
  nativeInit(UINT64($6F44CBF56D79FAC0));
  nativePush64(UINT64(index));
  nativePush64(UINT64(index2));
  exit(PChar(nativeCall^));
end;

procedure OPEN_COMMERCE_STORE(p0, p1: PChar; p2: cint);
begin
  nativeInit(UINT64($58C21165F6545892));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_COMMERCE_STORE_OPEN: BOOL;
begin
  nativeInit(UINT64($2EAC52B4019E2782));
  exit(BOOL(nativeCall^));
end;

procedure SET_STORE_ENABLED(toggle: BOOL);
begin
  nativeInit(UINT64($9641A9FF718E9C5E));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function REQUEST_COMMERCE_ITEM_IMAGE(index: cint): BOOL;
begin
  nativeInit(UINT64($A2F952104FC6DD4B));
  nativePush64(UINT64(index));
  exit(BOOL(nativeCall^));
end;

procedure RELEASE_ALL_COMMERCE_ITEM_IMAGES;
begin
  nativeInit(UINT64($72D0706CD6CCDB58));
  nativeCall;
end;

function GET_COMMERCE_ITEM_TEXTURENAME(index: cint): PChar;
begin
  nativeInit(UINT64($722F5D28B61C5EA8));
  nativePush64(UINT64(index));
  exit(PChar(nativeCall^));
end;

function IS_STORE_AVAILABLE_TO_USER: BOOL;
begin
  nativeInit(UINT64($883D79C4071E18B3));
  exit(BOOL(nativeCall^));
end;

procedure DELAY_MP_STORE_OPEN;
begin
  nativeInit(UINT64($265635150FB0D82E));
  nativeCall;
end;

procedure RESET_STORE_NETWORK_GAME_TRACKING;
begin
  nativeInit(UINT64($444C4525ECE0A4B9));
  nativeCall;
end;

function IS_USER_OLD_ENOUGH_TO_ACCESS_STORE: BOOL;
begin
  nativeInit(UINT64($59328EB08C5CEB2B));
  exit(BOOL(nativeCall^));
end;

procedure SET_LAST_VIEWED_SHOP_ITEM(p0: Hash; p1: cint; p2: Hash);
begin
  nativeInit(UINT64($FAE628F1E9ADB239));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function GET_USER_PREMIUM_ACCESS: cint;
begin
  nativeInit(UINT64($754615490A029508));
  exit(cint(nativeCall^));
end;

function GET_USER_STARTER_ACCESS: cint;
begin
  nativeInit(UINT64($155467ACA0F55705));
  exit(cint(nativeCall^));
end;

function CLOUD_DELETE_MEMBER_FILE(p0: PChar): cint;
begin
  nativeInit(UINT64($C64DED7EF0D2FE37));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function CLOUD_HAS_REQUEST_COMPLETED(requestId: cint): BOOL;
begin
  nativeInit(UINT64($4C61B39930D045DA));
  nativePush64(UINT64(requestId));
  exit(BOOL(nativeCall^));
end;

function CLOUD_DID_REQUEST_SUCCEED(requestId: cint): BOOL;
begin
  nativeInit(UINT64($3A3D5568AF297CD5));
  nativePush64(UINT64(requestId));
  exit(BOOL(nativeCall^));
end;

procedure CLOUD_CHECK_AVAILABILITY;
begin
  nativeInit(UINT64($4F18196C8D38768D));
  nativeCall;
end;

function CLOUD_IS_CHECKING_AVAILABILITY: BOOL;
begin
  nativeInit(UINT64($C7ABAC5DE675EE3B));
  exit(BOOL(nativeCall^));
end;

function CLOUD_GET_AVAILABILITY_CHECK_RESULT: BOOL;
begin
  nativeInit(UINT64($0B0CC10720653F3B));
  exit(BOOL(nativeCall^));
end;

function GET_CONTENT_TO_LOAD_TYPE: cint;
begin
  nativeInit(UINT64($8B0C2964BA471961));
  exit(cint(nativeCall^));
end;

function GET_IS_LAUNCH_FROM_LIVE_AREA: BOOL;
begin
  nativeInit(UINT64($88B588B41FF7868E));
  exit(BOOL(nativeCall^));
end;

function GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT: BOOL;
begin
  nativeInit(UINT64($67FC09BC554A75E5));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_SERVICE_EVENT_ARGUMENTS;
begin
  nativeInit(UINT64($966DD84FB6A46017));
  nativeCall;
end;

function UGC_COPY_CONTENT(p0, p1: PAny): BOOL;
begin
  nativeInit(UINT64($152D90E4C1B4738A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function UGC_IS_CREATING: BOOL;
begin
  nativeInit(UINT64($9FEDF86898F100E9));
  exit(BOOL(nativeCall^));
end;

function UGC_HAS_CREATE_FINISHED: BOOL;
begin
  nativeInit(UINT64($5E24341A7F92A74B));
  exit(BOOL(nativeCall^));
end;

function UGC_DID_CREATE_SUCCEED: BOOL;
begin
  nativeInit(UINT64($24E4E51FC16305F9));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CREATE_RESULT: cint;
begin
  nativeInit(UINT64($FBC5E768C7A77A6A));
  exit(cint(nativeCall^));
end;

function UGC_GET_CREATE_CONTENT_ID: PChar;
begin
  nativeInit(UINT64($C55A0B40FFB1ED23));
  exit(PChar(nativeCall^));
end;

procedure UGC_CLEAR_CREATE_RESULT;
begin
  nativeInit(UINT64($17440AA15D1D3739));
  nativeCall;
end;

function UGC_QUERY_MY_CONTENT(p0, p1: Any; p2: PAny; p3, p4, p5: Any): BOOL;
begin
  nativeInit(UINT64($9BF438815F5D96EA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function UGC_QUERY_BY_CATEGORY(p0, p1, p2: Any; p3: PChar; p4: Any; p5: BOOL): BOOL;
begin
  nativeInit(UINT64($692D58DF40657E8C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function UGC_QUERY_BY_CONTENT_ID(contentId: PChar; latestVersion: BOOL; contentTypeName: PChar): BOOL;
begin
  nativeInit(UINT64($158EC424F35EC469));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(latestVersion));
  nativePush64(UINT64(contentTypeName));
  exit(BOOL(nativeCall^));
end;

function UGC_QUERY_BY_CONTENT_IDS(data: PAny; count: cint; latestVersion: BOOL; contentTypeName: PChar): BOOL;
begin
  nativeInit(UINT64($C7397A83F7A2A462));
  nativePush64(UINT64(data));
  nativePush64(UINT64(count));
  nativePush64(UINT64(latestVersion));
  nativePush64(UINT64(contentTypeName));
  exit(BOOL(nativeCall^));
end;

function UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(offset, count: cint; contentTypeName: PChar; p3: cint): BOOL;
begin
  nativeInit(UINT64($6D4CB481FAC835E8));
  nativePush64(UINT64(offset));
  nativePush64(UINT64(count));
  nativePush64(UINT64(contentTypeName));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_BOOKMARKED_CONTENT(p0, p1: Any; p2: PChar; p3: PAny): BOOL;
begin
  nativeInit(UINT64($D5A4B59980401588));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_MY_CONTENT(p0, p1: Any; p2: PChar; p3: PAny): BOOL;
begin
  nativeInit(UINT64($3195F8DD0D531052));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_FRIEND_CONTENT(p0, p1: Any; p2: PChar; p3: PAny): BOOL;
begin
  nativeInit(UINT64($F9E1CCAE8BA4C281));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CREW_CONTENT(p0, p1, p2: Any; p3: PChar; p4: PAny): BOOL;
begin
  nativeInit(UINT64($9F6E2821885CAEE2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_GET_BY_CATEGORY(p0, p1, p2: Any; p3: PChar; p4: PAny): BOOL;
begin
  nativeInit(UINT64($678BB03C1A3BD51E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_GET_BY_CONTENT_ID(contentId, contentTypeName: PChar): BOOL;
begin
  nativeInit(UINT64($815E5E3073DA1D67));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(contentTypeName));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_GET_BY_CONTENT_IDS(data: PAny; dataCount: cint; contentTypeName: PChar): BOOL;
begin
  nativeInit(UINT64($B8322EEB38BE7C26));
  nativePush64(UINT64(data));
  nativePush64(UINT64(dataCount));
  nativePush64(UINT64(contentTypeName));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_MOST_RECENTLY_CREATED_CONTENT(p0, p1: Any; p2, p3: PAny): BOOL;
begin
  nativeInit(UINT64($A7862BC5ED1DFD7E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(p0, p1: Any; p2, p3: PAny): BOOL;
begin
  nativeInit(UINT64($97A770BEEF227E2B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_TOP_RATED_CONTENT(p0, p1: Any; p2, p3: PAny): BOOL;
begin
  nativeInit(UINT64($5324A0E3E4CE3570));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure UGC_CANCEL_QUERY;
begin
  nativeInit(UINT64($E9B99B6853181409));
  nativeCall;
end;

function UGC_IS_GETTING: BOOL;
begin
  nativeInit(UINT64($D53ACDBEF24A46E8));
  exit(BOOL(nativeCall^));
end;

function UGC_HAS_GET_FINISHED: BOOL;
begin
  nativeInit(UINT64($02ADA21EA2F6918F));
  exit(BOOL(nativeCall^));
end;

function UGC_DID_GET_SUCCEED: BOOL;
begin
  nativeInit(UINT64($941E5306BCD7C2C7));
  exit(BOOL(nativeCall^));
end;

function UGC_WAS_QUERY_FORCE_CANCELLED: BOOL;
begin
  nativeInit(UINT64($C87E740D9F3872CC));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_QUERY_RESULT: cint;
begin
  nativeInit(UINT64($EDF7F927136C224B));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_NUM: cint;
begin
  nativeInit(UINT64($E0A6138401BCB837));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_TOTAL: cint;
begin
  nativeInit(UINT64($769951E2455E2EB5));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_HASH: Hash;
begin
  nativeInit(UINT64($3A17A27D75C74887));
  exit(Hash(nativeCall^));
end;

procedure UGC_CLEAR_QUERY_RESULTS;
begin
  nativeInit(UINT64($BA96394A0EECFA65));
  nativeCall;
end;

function UGC_GET_CONTENT_USER_ID(p0: cint): PChar;
begin
  nativeInit(UINT64($CD67AD041A394C9C));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(p0: cint; p1: PAny): BOOL;
begin
  nativeInit(UINT64($584770794D758C18));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(p0: Any): BOOL;
begin
  nativeInit(UINT64($8C8D2739BA44AF0F));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_USER_NAME(p0: Any): PChar;
begin
  nativeInit(UINT64($703F12425ECA8BF5));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function UGC_GET_CONTENT_IS_USING_SC_NICKNAME(p0: Any): BOOL;
begin
  nativeInit(UINT64($AEAB987727C5A8A4));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_CATEGORY(p0: cint): cint;
begin
  nativeInit(UINT64($A7BAB11E7C9C6C5A));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_ID(p0: cint): PChar;
begin
  nativeInit(UINT64($55AA95F481D694D2));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function UGC_GET_ROOT_CONTENT_ID(p0: cint): PChar;
begin
  nativeInit(UINT64($C0173D6BFF4E0348));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function UGC_GET_CONTENT_NAME(p0: Any): PChar;
begin
  nativeInit(UINT64($BF09786A7FCAB582));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function UGC_GET_CONTENT_DESCRIPTION_HASH(p0: Any): cint;
begin
  nativeInit(UINT64($7CF0448787B23758));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_PATH(p0, p1: cint): PChar;
begin
  nativeInit(UINT64($BAF6BABF9E7CCC13));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(PChar(nativeCall^));
end;

procedure UGC_GET_CONTENT_UPDATED_DATE(p0: Any; p1: PAny);
begin
  nativeInit(UINT64($CFD115B373C0DF63));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function UGC_GET_CONTENT_FILE_VERSION(p0, p1: Any): cint;
begin
  nativeInit(UINT64($37025B27D9B658B1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_HAS_LO_RES_PHOTO(p0: cint): BOOL;
begin
  nativeInit(UINT64($1D610EB0FEA716D9));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_HAS_HI_RES_PHOTO(p0: cint): BOOL;
begin
  nativeInit(UINT64($7FCC39C46C3C03BD));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_LANGUAGE(p0: Any): cint;
begin
  nativeInit(UINT64($32DD916F3F7C9672));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_IS_PUBLISHED(p0: Any): BOOL;
begin
  nativeInit(UINT64($3054F114121C21EA));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_IS_VERIFIED(p0: Any): BOOL;
begin
  nativeInit(UINT64($A9240A96C74CCA13));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_RATING(p0, p1: Any): cfloat;
begin
  nativeInit(UINT64($1ACCFBA3D8DAB2EE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function UGC_GET_CONTENT_RATING_COUNT(p0, p1: Any): cint;
begin
  nativeInit(UINT64($759299C5BB31D2A9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_RATING_POSITIVE_COUNT(p0, p1: Any): cint;
begin
  nativeInit(UINT64($87E5C46C187FE0AE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(p0, p1: Any): cint;
begin
  nativeInit(UINT64($4E548C0D7AE39FF9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function UGC_GET_CONTENT_HAS_PLAYER_RECORD(p0: Any): BOOL;
begin
  nativeInit(UINT64($70EA8DA57840F9BE));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(p0: Any): BOOL;
begin
  nativeInit(UINT64($993CBE59D350D225));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_REQUEST_CONTENT_DATA_FROM_INDEX(p0, p1: cint): cint;
begin
  nativeInit(UINT64($171DF6A0C07FB3DC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(contentTypeName, contentId: PChar; p2, p3, p4: cint): cint;
begin
  nativeInit(UINT64($7FD2990AF016795E));
  nativePush64(UINT64(contentTypeName));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(cint(nativeCall^));
end;

function UGC_REQUEST_CACHED_DESCRIPTION(p0: cint): cint;
begin
  nativeInit(UINT64($5E0165278F6339EE));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(p0: Any): BOOL;
begin
  nativeInit(UINT64($2D5DC831176D0114));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_HAS_DESCRIPTION_REQUEST_FINISHED(p0: Any): BOOL;
begin
  nativeInit(UINT64($EBFA8D50ADDC54C4));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_DID_DESCRIPTION_REQUEST_SUCCEED(p0: Any): BOOL;
begin
  nativeInit(UINT64($162C23CA83ED0A62));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CACHED_DESCRIPTION(p0, p1: Any): PChar;
begin
  nativeInit(UINT64($40F7E66472DF3E5C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(PChar(nativeCall^));
end;

function UGC_RELEASE_CACHED_DESCRIPTION(p0: Any): BOOL;
begin
  nativeInit(UINT64($5A34CD9C3C5BEC44));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure UGC_RELEASE_ALL_CACHED_DESCRIPTIONS;
begin
  nativeInit(UINT64($68103E2247887242));
  nativeCall;
end;

function UGC_HAS_PERMISSION_TO_WRITE: BOOL;
begin
  nativeInit(UINT64($C33E7CBC06EC1A8D));
  exit(BOOL(nativeCall^));
end;

function UGC_PUBLISH(contentId, baseContentId, contentTypeName: PChar): BOOL;
begin
  nativeInit(UINT64($1DE0F5F50D723CAA));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(baseContentId));
  nativePush64(UINT64(contentTypeName));
  exit(BOOL(nativeCall^));
end;

function UGC_SET_BOOKMARKED(contentId: PChar; bookmarked: BOOL; contentTypeName: PChar): BOOL;
begin
  nativeInit(UINT64($274A1519DFC1094F));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(bookmarked));
  nativePush64(UINT64(contentTypeName));
  exit(BOOL(nativeCall^));
end;

function UGC_SET_DELETED(p0: PAny; p1: BOOL; p2: PChar): BOOL;
begin
  nativeInit(UINT64($D05D1A6C74DA3498));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function UGC_IS_MODIFYING: BOOL;
begin
  nativeInit(UINT64($45E816772E93A9DB));
  exit(BOOL(nativeCall^));
end;

function UGC_HAS_MODIFY_FINISHED: BOOL;
begin
  nativeInit(UINT64($299EF3C576773506));
  exit(BOOL(nativeCall^));
end;

function UGC_DID_MODIFY_SUCCEED: BOOL;
begin
  nativeInit(UINT64($793FF272D5B365F4));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_MODIFY_RESULT: cint;
begin
  nativeInit(UINT64($5A0A3D1A186A5508));
  exit(cint(nativeCall^));
end;

procedure UGC_CLEAR_MODIFY_RESULT;
begin
  nativeInit(UINT64($A1E5E0204A6FCC70));
  nativeCall;
end;

function UGC_GET_CREATORS_BY_USER_ID(p0, p1: PAny): BOOL;
begin
  nativeInit(UINT64($B746D20B17F2A229));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function UGC_HAS_QUERY_CREATORS_FINISHED: BOOL;
begin
  nativeInit(UINT64($63B406D7884BFA95));
  exit(BOOL(nativeCall^));
end;

function UGC_DID_QUERY_CREATORS_SUCCEED: BOOL;
begin
  nativeInit(UINT64($4D02279C83BE69FE));
  exit(BOOL(nativeCall^));
end;

function UGC_GET_CREATOR_NUM: cint;
begin
  nativeInit(UINT64($597F8DBA9B206FC7));
  exit(cint(nativeCall^));
end;

function UGC_LOAD_OFFLINE_QUERY(p0: Any): BOOL;
begin
  nativeInit(UINT64($5CAE833B0EE0C500));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure UGC_CLEAR_OFFLINE_QUERY;
begin
  nativeInit(UINT64($61A885D3F7CFEE9A));
  nativeCall;
end;

procedure UGC_SET_QUERY_DATA_FROM_OFFLINE(p0: BOOL);
begin
  nativeInit(UINT64($F98DDE0A8ED09323));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure UGC_SET_USING_OFFLINE_CONTENT(p0: BOOL);
begin
  nativeInit(UINT64($FD75DABC0957BF33));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function UGC_IS_LANGUAGE_SUPPORTED(p0: Any): BOOL;
begin
  nativeInit(UINT64($F53E48461B71EECB));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function FACEBOOK_POST_COMPLETED_HEIST(heistName: PChar; cashEarned, xpEarned: cint): BOOL;
begin
  nativeInit(UINT64($098AB65B9ED9A9EC));
  nativePush64(UINT64(heistName));
  nativePush64(UINT64(cashEarned));
  nativePush64(UINT64(xpEarned));
  exit(BOOL(nativeCall^));
end;

function FACEBOOK_POST_CREATE_CHARACTER: BOOL;
begin
  nativeInit(UINT64($DC48473142545431));
  exit(BOOL(nativeCall^));
end;

function FACEBOOK_POST_COMPLETED_MILESTONE(milestoneId: cint): BOOL;
begin
  nativeInit(UINT64($0AE1F1653B554AB9));
  nativePush64(UINT64(milestoneId));
  exit(BOOL(nativeCall^));
end;

function FACEBOOK_HAS_POST_COMPLETED: BOOL;
begin
  nativeInit(UINT64($62B9FEC9A11F10EF));
  exit(BOOL(nativeCall^));
end;

function FACEBOOK_DID_POST_SUCCEED: BOOL;
begin
  nativeInit(UINT64($A75E2B6733DA5142));
  exit(BOOL(nativeCall^));
end;

function FACEBOOK_CAN_POST_TO_FACEBOOK: BOOL;
begin
  nativeInit(UINT64($43865688AE10F0D7));
  exit(BOOL(nativeCall^));
end;

function TEXTURE_DOWNLOAD_REQUEST(gamerHandle: PAny; filePath, name: PChar; p3: BOOL): cint;
begin
  nativeInit(UINT64($16160DA74A8E74A2));
  nativePush64(UINT64(gamerHandle));
  nativePush64(UINT64(filePath));
  nativePush64(UINT64(name));
  nativePush64(UINT64(p3));
  exit(cint(nativeCall^));
end;

function TITLE_TEXTURE_DOWNLOAD_REQUEST(filePath, name: PChar; p2: BOOL): cint;
begin
  nativeInit(UINT64($0B203B4AFDE53A4F));
  nativePush64(UINT64(filePath));
  nativePush64(UINT64(name));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

function UGC_TEXTURE_DOWNLOAD_REQUEST(p0: PChar; p1, p2, p3: cint; p4: PChar; p5: BOOL): cint;
begin
  nativeInit(UINT64($308F96458B7087CC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(cint(nativeCall^));
end;

procedure TEXTURE_DOWNLOAD_RELEASE(p0: cint);
begin
  nativeInit(UINT64($487EB90B98E9FB19));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function TEXTURE_DOWNLOAD_HAS_FAILED(p0: cint): BOOL;
begin
  nativeInit(UINT64($5776ED562C134687));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function TEXTURE_DOWNLOAD_GET_NAME(p0: cint): PChar;
begin
  nativeInit(UINT64($3448505B6E35262D));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

function GET_STATUS_OF_TEXTURE_DOWNLOAD(p0: cint): cint;
begin
  nativeInit(UINT64($8BD6C6DEA20E82C6));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET: BOOL;
begin
  nativeInit(UINT64($60EDD13EB3AC1FF3));
  exit(BOOL(nativeCall^));
end;

function NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING: BOOL;
begin
  nativeInit(UINT64($82A2B386716608F1));
  exit(BOOL(nativeCall^));
end;

function NETWORK_IS_CABLE_CONNECTED: BOOL;
begin
  nativeInit(UINT64($EFFB25453D8600F9));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV: BOOL;
begin
  nativeInit(UINT64($66B59CFFD78467AF));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV: BOOL;
begin
  nativeInit(UINT64($606E4D3E3CCCF3EB));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_ROS_BANNED_PRIV: BOOL;
begin
  nativeInit(UINT64($8020A73847E0CA7D));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_ROS_CREATE_TICKET_PRIV: BOOL;
begin
  nativeInit(UINT64($A0AD7E2AF5349F61));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_ROS_MULTIPLAYER_PRIV: BOOL;
begin
  nativeInit(UINT64($5F91D5D0B36AA310));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV: BOOL;
begin
  nativeInit(UINT64($422D396F80A96547));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_ROS_PRIVILEGE(index: cint): BOOL;
begin
  nativeInit(UINT64($A699957E60D80214));
  nativePush64(UINT64(index));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_ROS_PRIVILEGE_END_DATE(privilege: cint; banType: pcint; timeData: PAny): BOOL;
begin
  nativeInit(UINT64($C22912B1D85F26B1));
  nativePush64(UINT64(privilege));
  nativePush64(UINT64(banType));
  nativePush64(UINT64(timeData));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN: BOOL;
begin
  nativeInit(UINT64($593570C289A77688));
  exit(BOOL(nativeCall^));
end;

function NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT: BOOL;
begin
  nativeInit(UINT64($91B87C55093DE351));
  exit(BOOL(nativeCall^));
end;

function _NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION: BOOL;
begin
  nativeInit(UINT64($D9719341663C385F));
  exit(BOOL(nativeCall^));
end;

function _NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION: BOOL;
begin
  nativeInit(UINT64($8956A309BE90057C));
  exit(BOOL(nativeCall^));
end;

function NETWORK_START_COMMUNICATION_PERMISSIONS_CHECK(p0: Any): cint;
begin
  nativeInit(UINT64($36391F397731595D));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(netHandle: PAny): cint;
begin
  nativeInit(UINT64($DEB2B99A1AF1A2A6));
  nativePush64(UINT64(netHandle));
  exit(cint(nativeCall^));
end;

procedure NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE;
begin
  nativeInit(UINT64($9465E683B12D3F6B));
  nativeCall;
end;

procedure NETWORK_SKIP_RADIO_RESET_NEXT_OPEN;
begin
  nativeInit(UINT64($CA59CCAE5D01E4CE));
  nativeCall;
end;

function NETWORK_SKIP_RADIO_WARNING: BOOL;
begin
  nativeInit(UINT64($659CF2EF7F550C4F));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC;
begin
  nativeInit(UINT64($B7C7F6AD6424304B));
  nativeCall;
end;

procedure NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(toggle: BOOL);
begin
  nativeInit(UINT64($C505036A35AFD01B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($267C78C60E806B9A));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_SHOW_CHAT_RESTRICTION_MSC(plyr: Player);
begin
  nativeInit(UINT64($6BFF5F84102DF80A));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure NETWORK_SHOW_PSN_UGC_RESTRICTION;
begin
  nativeInit(UINT64($5C497525F803486B));
  nativeCall;
end;

function NETWORK_IS_TITLE_UPDATE_REQUIRED: BOOL;
begin
  nativeInit(UINT64($6FB7BB3607D27FA2));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_QUIT_MP_TO_DESKTOP;
begin
  nativeInit(UINT64($45A83257ED02D9BC));
  nativeCall;
end;

function NETWORK_IS_CONNECTED_VIA_RELAY(plyr: Player): BOOL;
begin
  nativeInit(UINT64($16D3D49902F697BB));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function NETWORK_GET_AVERAGE_LATENCY(plyr: Player): cfloat;
begin
  nativeInit(UINT64($D414BE129BB81B32));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function NETWORK_GET_AVERAGE_PING(plyr: Player): cfloat;
begin
  nativeInit(UINT64($0E3A041ED6AC2B45));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function NETWORK_GET_AVERAGE_PACKET_LOSS(plyr: Player): cfloat;
begin
  nativeInit(UINT64($350C23949E43686C));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function NETWORK_GET_NUM_UNACKED_RELIABLES(plyr: Player): cint;
begin
  nativeInit(UINT64($FF8FCF9FFC458A1C));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_UNRELIABLE_RESEND_COUNT(plyr: Player): cint;
begin
  nativeInit(UINT64($3765C3A3E8192E10));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(plyr: Player): cint;
begin
  nativeInit(UINT64($52C1EADAF7B10302));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

procedure NETWORK_REPORT_CODE_TAMPER;
begin
  nativeInit(UINT64($5626D9D6810730D5));
  nativeCall;
end;

function NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(para_entity: Entity): Vector3;
begin
  nativeInit(UINT64($64D779659BC37B19));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^);
end;

function NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(plyr: Player): Vector3;
begin
  nativeInit(UINT64($125E6D638B8605D4));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^);
end;

function NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(para_entity: Entity): Vector3;
begin
  nativeInit(UINT64($33DE49EDF4DDE77A));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^);
end;

function NETWORK_GET_PREDICTED_VELOCITY(para_entity: Entity; maxSpeedToPredict: cfloat): Vector3;
begin
  nativeInit(UINT64($AA5FAFCD2C5F5E47));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@maxSpeedToPredict)^);
  exit(PVector3(nativeCall)^);
end;

procedure NETWORK_DUMP_NET_IF_CONFIG;
begin
  nativeInit(UINT64($AEDF1BC1C133D6E3));
  nativeCall;
end;

procedure NETWORK_GET_SIGNALLING_INFO(p0: PAny);
begin
  nativeInit(UINT64($2555CF7DA5473794));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure NETWORK_GET_NET_STATISTICS_INFO(p0: PAny);
begin
  nativeInit(UINT64($6FD992C4A1C1B986));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function NETWORK_GET_PLAYER_ACCOUNT_ID(plyr: Player): cint;
begin
  nativeInit(UINT64($DB663CC9FF3407A9));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

procedure NETWORK_UGC_NAV(p0, p1: Any);
begin
  nativeInit(UINT64($C1447451DDB512F0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function CREATE_OBJECT(modelHash: Hash; x, y, z: cfloat; isNetwork, bScriptHostObj, dynamic: BOOL): GTAObject;
begin
  nativeInit(UINT64($509D5878EB39E842));
  nativePush64(UINT64(modelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(bScriptHostObj));
  nativePush64(UINT64(dynamic));
  exit(GTAObject(nativeCall^));
end;

function CREATE_OBJECT_NO_OFFSET(modelHash: Hash; x, y, z: cfloat; isNetwork, bScriptHostObj, dynamic: BOOL): GTAObject;
begin
  nativeInit(UINT64($9A294B2138ABB884));
  nativePush64(UINT64(modelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(bScriptHostObj));
  nativePush64(UINT64(dynamic));
  exit(GTAObject(nativeCall^));
end;

procedure DELETE_OBJECT(obj: PGTAObject);
begin
  nativeInit(UINT64($539E0AE3E6634B9F));
  nativePush64(UINT64(obj));
  nativeCall;
end;

function PLACE_OBJECT_ON_GROUND_PROPERLY(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($58A850EAEE20FAA3));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

function PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($D76EEEF746057FD6));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

function ROTATE_OBJECT(obj: GTAObject; p1, p2: cfloat; p3: BOOL): BOOL;
begin
  nativeInit(UINT64($AFE24E4D29249E4A));
  nativePush64(UINT64(obj));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function SLIDE_OBJECT(obj: GTAObject; toX, toY, toZ, speedX, speedY, speedZ: cfloat; collision: BOOL): BOOL;
begin
  nativeInit(UINT64($2FDFF4107B8C1147));
  nativePush64(UINT64(obj));
  nativePush64(PUINT64(@toX)^);
  nativePush64(PUINT64(@toY)^);
  nativePush64(PUINT64(@toZ)^);
  nativePush64(PUINT64(@speedX)^);
  nativePush64(PUINT64(@speedY)^);
  nativePush64(PUINT64(@speedZ)^);
  nativePush64(UINT64(collision));
  exit(BOOL(nativeCall^));
end;

procedure SET_OBJECT_TARGETTABLE(obj: GTAObject; targettable: BOOL; p2: Any);
begin
  nativeInit(UINT64($8A7391690F5AFD81));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(targettable));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_OBJECT_FORCE_VEHICLES_TO_AVOID(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($77F33F2CCF64B3AA));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius: cfloat; modelHash: Hash; isMission, p6, p7: BOOL): GTAObject;
begin
  nativeInit(UINT64($E143FA2249364369));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(isMission));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  exit(GTAObject(nativeCall^));
end;

function HAS_OBJECT_BEEN_BROKEN(obj: GTAObject; p1: Any): BOOL;
begin
  nativeInit(UINT64($8ABFB70C49CC43E2));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(p0, p1, p2, p3: cfloat; modelHash: Hash; p5: Any): BOOL;
begin
  nativeInit(UINT64($761B0E69AC4D007E));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(x, y, z, radius: cfloat; modelHash: Hash; p5: BOOL): BOOL;
begin
  nativeInit(UINT64($46494A2475701343));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(p0: Any): BOOL;
begin
  nativeInit(UINT64($2542269291C6AC84));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(xPos, yPos, zPos, heading, xOffset, yOffset, zOffset: cfloat): Vector3;
begin
  nativeInit(UINT64($163E252DE035A133));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  exit(PVector3(nativeCall)^);
end;

function GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(x, y, z, radius: cfloat; modelHash: Hash; outPosition, outRotation: PVector3; rotationOrder: cint): BOOL;
begin
  nativeInit(UINT64($163F8B586BC95F2A));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(outRotation));
  nativePush64(UINT64(rotationOrder));
  exit(BOOL(nativeCall^));
end;

procedure SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(_type: Hash; x, y, z: cfloat; locked: BOOL; heading: cfloat; p6: BOOL);
begin
  nativeInit(UINT64($F82D8F1926A02C3D));
  nativePush64(UINT64(_type));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(locked));
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(_type: Hash; x, y, z: cfloat; locked: PBOOL; heading: pcfloat);
begin
  nativeInit(UINT64($EDC1A5B84AEF33FF));
  nativePush64(UINT64(_type));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(locked));
  nativePush64(UINT64(heading));
  nativeCall;
end;

procedure SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(modelHash: Hash; x, y, z: cfloat; locked: BOOL; xRotMult, yRotMult, zRotMult: cfloat);
begin
  nativeInit(UINT64($9B12F9A24FABEDB0));
  nativePush64(UINT64(modelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(locked));
  nativePush64(PUINT64(@xRotMult)^);
  nativePush64(PUINT64(@yRotMult)^);
  nativePush64(PUINT64(@zRotMult)^);
  nativeCall;
end;

procedure PLAY_OBJECT_AUTO_START_ANIM(p0: Any);
begin
  nativeInit(UINT64($006E4B040ED37EC3));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure ADD_DOOR_TO_SYSTEM(doorHash, modelHash: Hash; x, y, z: cfloat; p5, scriptDoor, isLocal: BOOL);
begin
  nativeInit(UINT64($6F8838D03D1DC226));
  nativePush64(UINT64(doorHash));
  nativePush64(UINT64(modelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p5));
  nativePush64(UINT64(scriptDoor));
  nativePush64(UINT64(isLocal));
  nativeCall;
end;

procedure REMOVE_DOOR_FROM_SYSTEM(doorHash: Hash; p1: Any);
begin
  nativeInit(UINT64($464D8E1427156FE4));
  nativePush64(UINT64(doorHash));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure DOOR_SYSTEM_SET_DOOR_STATE(doorHash: Hash; state: cint; requestDoor, forceUpdate: BOOL);
begin
  nativeInit(UINT64($6BAB9442830C7F53));
  nativePush64(UINT64(doorHash));
  nativePush64(UINT64(state));
  nativePush64(UINT64(requestDoor));
  nativePush64(UINT64(forceUpdate));
  nativeCall;
end;

function DOOR_SYSTEM_GET_DOOR_STATE(doorHash: Hash): cint;
begin
  nativeInit(UINT64($160AA1B32F6139B8));
  nativePush64(UINT64(doorHash));
  exit(cint(nativeCall^));
end;

function DOOR_SYSTEM_GET_DOOR_PENDING_STATE(doorHash: Hash): cint;
begin
  nativeInit(UINT64($4BC2854478F3A749));
  nativePush64(UINT64(doorHash));
  exit(cint(nativeCall^));
end;

procedure DOOR_SYSTEM_SET_AUTOMATIC_RATE(doorHash: Hash; rate: cfloat; requestDoor, forceUpdate: BOOL);
begin
  nativeInit(UINT64($03C27E13B42A0E82));
  nativePush64(UINT64(doorHash));
  nativePush64(PUINT64(@rate)^);
  nativePush64(UINT64(requestDoor));
  nativePush64(UINT64(forceUpdate));
  nativeCall;
end;

procedure DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(doorHash: Hash; distance: cfloat; requestDoor, forceUpdate: BOOL);
begin
  nativeInit(UINT64($9BA001CB45CBF627));
  nativePush64(UINT64(doorHash));
  nativePush64(PUINT64(@distance)^);
  nativePush64(UINT64(requestDoor));
  nativePush64(UINT64(forceUpdate));
  nativeCall;
end;

procedure DOOR_SYSTEM_SET_OPEN_RATIO(doorHash: Hash; ajar: cfloat; requestDoor, forceUpdate: BOOL);
begin
  nativeInit(UINT64($B6E6FBA95C7324AC));
  nativePush64(UINT64(doorHash));
  nativePush64(PUINT64(@ajar)^);
  nativePush64(UINT64(requestDoor));
  nativePush64(UINT64(forceUpdate));
  nativeCall;
end;

function DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(doorHash: Hash): cfloat;
begin
  nativeInit(UINT64($E851471AEFC3374F));
  nativePush64(UINT64(doorHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function DOOR_SYSTEM_GET_OPEN_RATIO(doorHash: Hash): cfloat;
begin
  nativeInit(UINT64($65499865FCA6E5EC));
  nativePush64(UINT64(doorHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure DOOR_SYSTEM_SET_SPRING_REMOVED(doorHash: Hash; removed, requestDoor, forceUpdate: BOOL);
begin
  nativeInit(UINT64($C485E07E4F0B7958));
  nativePush64(UINT64(doorHash));
  nativePush64(UINT64(removed));
  nativePush64(UINT64(requestDoor));
  nativePush64(UINT64(forceUpdate));
  nativeCall;
end;

procedure DOOR_SYSTEM_SET_HOLD_OPEN(doorHash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($D9B71952F78A2640));
  nativePush64(UINT64(doorHash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(doorHash: Hash; p1: BOOL);
begin
  nativeInit(UINT64($A85A21582451E951));
  nativePush64(UINT64(doorHash));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash: Hash): BOOL;
begin
  nativeInit(UINT64($C153C43EA202C8C1));
  nativePush64(UINT64(doorHash));
  exit(BOOL(nativeCall^));
end;

function IS_DOOR_CLOSED(doorHash: Hash): BOOL;
begin
  nativeInit(UINT64($C531EE8A1145A149));
  nativePush64(UINT64(doorHash));
  exit(BOOL(nativeCall^));
end;

procedure OPEN_ALL_BARRIERS_FOR_RACE(p0: BOOL);
begin
  nativeInit(UINT64($C7F29CA00F46350E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CLOSE_ALL_BARRIERS_FOR_RACE;
begin
  nativeInit(UINT64($701FDA1E82076BA4));
  nativeCall;
end;

function DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(p0: Any): BOOL;
begin
  nativeInit(UINT64($DF97CDD4FC08FD34));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function DOOR_SYSTEM_FIND_EXISTING_DOOR(x, y, z: cfloat; modelHash: Hash; outDoorHash: PHash): BOOL;
begin
  nativeInit(UINT64($589F80B325CC82C5));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(outDoorHash));
  exit(BOOL(nativeCall^));
end;

function IS_GARAGE_EMPTY(garageHash: Hash; p1: BOOL; p2: cint): BOOL;
begin
  nativeInit(UINT64($90E47239EA1980B8));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; plyr: Player; p2: cfloat; p3: cint): BOOL;
begin
  nativeInit(UINT64($024A60DEB0EA69F0));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@p2)^);
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_PARTIALLY_INSIDE_GARAGE(garageHash: Hash; plyr: Player; p2: cint): BOOL;
begin
  nativeInit(UINT64($1761DC5D8471CBAA));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; p1, p2, p3: BOOL; p4: Any): BOOL;
begin
  nativeInit(UINT64($85B6C850546FDDE2));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; p1, p2, p3: BOOL; p4: Any): BOOL;
begin
  nativeInit(UINT64($673ED815D6E323B7));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function IS_OBJECT_ENTIRELY_INSIDE_GARAGE(garageHash: Hash; para_entity: Entity; p2: cfloat; p3: cint): BOOL;
begin
  nativeInit(UINT64($372EF6699146A1E4));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@p2)^);
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function IS_OBJECT_PARTIALLY_INSIDE_GARAGE(garageHash: Hash; para_entity: Entity; p2: cint): BOOL;
begin
  nativeInit(UINT64($F0EED5A6BC7B237A));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_GARAGE(garageHash: Hash; isNetwork: BOOL);
begin
  nativeInit(UINT64($DA05194260CDCDF9));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(isNetwork));
  nativeCall;
end;

procedure CLEAR_OBJECTS_INSIDE_GARAGE(garageHash: Hash; vehicles, peds, objects, isNetwork: BOOL);
begin
  nativeInit(UINT64($190428512B240692));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(vehicles));
  nativePush64(UINT64(peds));
  nativePush64(UINT64(objects));
  nativePush64(UINT64(isNetwork));
  nativeCall;
end;

procedure DISABLE_TIDYING_UP_IN_GARAGE(id: cint; toggle: BOOL);
begin
  nativeInit(UINT64($659F9D71F52843F8));
  nativePush64(UINT64(id));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ENABLE_SAVING_IN_GARAGE(garageHash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($F2E1A7133DD356A6));
  nativePush64(UINT64(garageHash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CLOSE_SAFEHOUSE_GARAGES;
begin
  nativeInit(UINT64($66A49D021870FE88));
  nativeCall;
end;

function DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(x, y, z, radius: cfloat; para_hash: Hash; p5: BOOL): BOOL;
begin
  nativeInit(UINT64($BFA48E2FF417213F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function IS_POINT_IN_ANGLED_AREA(xPos, yPos, zPos, x1, y1, z1, x2, y2, z2, width: cfloat; debug, includeZ: BOOL): BOOL;
begin
  nativeInit(UINT64($2A70BAE8883E4C81));
  nativePush64(PUINT64(@xPos)^);
  nativePush64(PUINT64(@yPos)^);
  nativePush64(PUINT64(@zPos)^);
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(debug));
  nativePush64(UINT64(includeZ));
  exit(BOOL(nativeCall^));
end;

procedure SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($4D89D607CB3DD1D2));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_OBJECT_PHYSICS_PARAMS(obj: GTAObject; weight, p2, p3, p4, p5, gravity, p7, p8, p9, p10, buoyancy: cfloat);
begin
  nativeInit(UINT64($F6DF6E90DE7DF90F));
  nativePush64(UINT64(obj));
  nativePush64(PUINT64(@weight)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@gravity)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@p10)^);
  nativePush64(PUINT64(@buoyancy)^);
  nativeCall;
end;

function GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(p0: Any; p1: BOOL): cfloat;
begin
  nativeInit(UINT64($B6FBFD079B8D0596));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($406137F8EF90EAF5));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_ANY_OBJECT_NEAR_POINT(x, y, z, range: cfloat; p4: BOOL): BOOL;
begin
  nativeInit(UINT64($397DC58FF00298D1));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@range)^);
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function IS_OBJECT_NEAR_POINT(objectHash: Hash; x, y, z, range: cfloat): BOOL;
begin
  nativeInit(UINT64($8C90FE4B381BA60A));
  nativePush64(UINT64(objectHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@range)^);
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_OBJECT_HIGH_DETAIL_MODEL(obj: GTAObject);
begin
  nativeInit(UINT64($4A39DB43E47CF3AA));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure BREAK_OBJECT_FRAGMENT_CHILD(p0: GTAObject; p1: Any; p2: BOOL);
begin
  nativeInit(UINT64($E7E4C198B0185900));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure DAMAGE_OBJECT_FRAGMENT_CHILD(p0, p1, p2: Any);
begin
  nativeInit(UINT64($E05F6AEEFEB0BB02));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure FIX_OBJECT_FRAGMENT(obj: GTAObject);
begin
  nativeInit(UINT64($F9C1681347C8BD15));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure TRACK_OBJECT_VISIBILITY(obj: GTAObject);
begin
  nativeInit(UINT64($B252BC036B525623));
  nativePush64(UINT64(obj));
  nativeCall;
end;

function IS_OBJECT_VISIBLE(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($8B32ACE6326A7546));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

procedure SET_OBJECT_IS_SPECIAL_GOLFBALL(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($C6033D32241F6FB5));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($EB6F1A9B5510A5D2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(value: BOOL);
begin
  nativeInit(UINT64($ABDABF4E1EDECBFA));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($BCE595371A5FBAAF));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_RAYFIRE_MAP_OBJECT(x, y, z, radius: cfloat; name: PChar): GTAObject;
begin
  nativeInit(UINT64($B48FCED898292E52));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(name));
  exit(GTAObject(nativeCall^));
end;

procedure SET_STATE_OF_RAYFIRE_MAP_OBJECT(obj: GTAObject; state: cint);
begin
  nativeInit(UINT64($5C29F698D404C5E1));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(state));
  nativeCall;
end;

function GET_STATE_OF_RAYFIRE_MAP_OBJECT(obj: GTAObject): cint;
begin
  nativeInit(UINT64($899BA936634A322E));
  nativePush64(UINT64(obj));
  exit(cint(nativeCall^));
end;

function DOES_RAYFIRE_MAP_OBJECT_EXIST(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($52AF537A0C5B8AAD));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

function GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(obj: GTAObject): cfloat;
begin
  nativeInit(UINT64($260EE4FDBDF4DB01));
  nativePush64(UINT64(obj));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function CREATE_PICKUP(pickupHash: Hash; posX, posY, posZ: cfloat; p4, value: cint; p6: BOOL; modelHash: Hash): Pickup;
begin
  nativeInit(UINT64($FBA08C503DD5FA58));
  nativePush64(UINT64(pickupHash));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(value));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(modelHash));
  exit(Pickup(nativeCall^));
end;

function CREATE_PICKUP_ROTATE(pickupHash: Hash; posX, posY, posZ, rotX, rotY, rotZ: cfloat; flag, amount: cint; p9: Any; p10: BOOL; modelHash: Hash): Pickup;
begin
  nativeInit(UINT64($891804727E0A98B7));
  nativePush64(UINT64(pickupHash));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(flag));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(modelHash));
  exit(Pickup(nativeCall^));
end;

procedure FORCE_PICKUP_ROTATE_FACE_UP;
begin
  nativeInit(UINT64($394CD08E31313C28));
  nativeCall;
end;

procedure SET_CUSTOM_PICKUP_WEAPON_HASH(pickupHash: Hash; para_pickup: Pickup);
begin
  nativeInit(UINT64($826D1EE4D1CAFC78));
  nativePush64(UINT64(pickupHash));
  nativePush64(UINT64(para_pickup));
  nativeCall;
end;

function CREATE_AMBIENT_PICKUP(pickupHash: Hash; posX, posY, posZ: cfloat; flags, value: cint; modelHash: Hash; p7, p8: BOOL): GTAObject;
begin
  nativeInit(UINT64($673966A0C0FD7171));
  nativePush64(UINT64(pickupHash));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(value));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(GTAObject(nativeCall^));
end;

function CREATE_NON_NETWORKED_AMBIENT_PICKUP(pickupHash: Hash; posX, posY, posZ: cfloat; flags, value: cint; modelHash: Hash; p7, p8: BOOL): GTAObject;
begin
  nativeInit(UINT64($9C93764223E29C50));
  nativePush64(UINT64(pickupHash));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(value));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(GTAObject(nativeCall^));
end;

procedure BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(p0, p1: Any);
begin
  nativeInit(UINT64($1E3F1B1B891A2AAA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function CREATE_PORTABLE_PICKUP(pickupHash: Hash; x, y, z: cfloat; placeOnGround: BOOL; modelHash: Hash): GTAObject;
begin
  nativeInit(UINT64($2EAF1FDB2FB55698));
  nativePush64(UINT64(pickupHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(placeOnGround));
  nativePush64(UINT64(modelHash));
  exit(GTAObject(nativeCall^));
end;

function CREATE_NON_NETWORKED_PORTABLE_PICKUP(pickupHash: Hash; x, y, z: cfloat; placeOnGround: BOOL; modelHash: Hash): GTAObject;
begin
  nativeInit(UINT64($125494B98A21AAF7));
  nativePush64(UINT64(pickupHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(placeOnGround));
  nativePush64(UINT64(modelHash));
  exit(GTAObject(nativeCall^));
end;

procedure ATTACH_PORTABLE_PICKUP_TO_PED(pickupObject: GTAObject; _ped: Ped);
begin
  nativeInit(UINT64($8DC39368BDD57755));
  nativePush64(UINT64(pickupObject));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure DETACH_PORTABLE_PICKUP_FROM_PED(pickupObject: GTAObject);
begin
  nativeInit(UINT64($CF463D1E9A0AECB1));
  nativePush64(UINT64(pickupObject));
  nativeCall;
end;

procedure FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(obj: GTAObject);
begin
  nativeInit(UINT64($5CE2E45A5CE2E45A));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure HIDE_PORTABLE_PICKUP_WHEN_DETACHED(pickupObject: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($867458251D47CCB2));
  nativePush64(UINT64(pickupObject));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(modelHash: Hash; number: cint);
begin
  nativeInit(UINT64($0BF3B3BD47D79C08));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(number));
  nativeCall;
end;

procedure SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(toggle: BOOL);
begin
  nativeInit(UINT64($78857FC65CADB909));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_SAFE_PICKUP_COORDS(x, y, z, p3, p4: cfloat): Vector3;
begin
  nativeInit(UINT64($6E16BC2503FF1FF0));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  exit(PVector3(nativeCall)^);
end;

procedure ADD_EXTENDED_PICKUP_PROBE_AREA(x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($D4A7A435B3710D05));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure CLEAR_EXTENDED_PICKUP_PROBE_AREAS;
begin
  nativeInit(UINT64($B7C6D80FB371659A));
  nativeCall;
end;

function GET_PICKUP_COORDS(para_pickup: Pickup): Vector3;
begin
  nativeInit(UINT64($225B8B35C88029B3));
  nativePush64(UINT64(para_pickup));
  exit(PVector3(nativeCall)^);
end;

procedure SUPPRESS_PICKUP_SOUND_FOR_PICKUP(p0, p1: Any);
begin
  nativeInit(UINT64($8DCA505A5C196F05));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_ALL_PICKUPS_OF_TYPE(pickupHash: Hash);
begin
  nativeInit(UINT64($27F9D613092159CF));
  nativePush64(UINT64(pickupHash));
  nativeCall;
end;

function HAS_PICKUP_BEEN_COLLECTED(para_pickup: Pickup): BOOL;
begin
  nativeInit(UINT64($80EC48E6679313F9));
  nativePush64(UINT64(para_pickup));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_PICKUP(para_pickup: Pickup);
begin
  nativeInit(UINT64($3288D8ACAECD2AB2));
  nativePush64(UINT64(para_pickup));
  nativeCall;
end;

procedure CREATE_MONEY_PICKUPS(x, y, z: cfloat; value, amount: cint; model: Hash);
begin
  nativeInit(UINT64($0589B5E791CE9B2B));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(value));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(model));
  nativeCall;
end;

function DOES_PICKUP_EXIST(para_pickup: Pickup): BOOL;
begin
  nativeInit(UINT64($AFC1CA75AD4074D1));
  nativePush64(UINT64(para_pickup));
  exit(BOOL(nativeCall^));
end;

function DOES_PICKUP_OBJECT_EXIST(pickupObject: GTAObject): BOOL;
begin
  nativeInit(UINT64($D9EFB6DBF7DAAEA3));
  nativePush64(UINT64(pickupObject));
  exit(BOOL(nativeCall^));
end;

function GET_PICKUP_OBJECT(para_pickup: Pickup): GTAObject;
begin
  nativeInit(UINT64($5099BC55630B25AE));
  nativePush64(UINT64(para_pickup));
  exit(GTAObject(nativeCall^));
end;

function IS_OBJECT_A_PICKUP(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($FC481C641EBBD27D));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

function IS_OBJECT_A_PORTABLE_PICKUP(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($0378C08504160D0D));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

function DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(pickupHash: Hash; x, y, z, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($F9C36251F6E48E33));
  nativePush64(UINT64(pickupHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_PICKUP_REGENERATION_TIME(para_pickup: Pickup; duration: cint);
begin
  nativeInit(UINT64($78015C9B4B3ECC9D));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure FORCE_PICKUP_REGENERATE(p0: Any);
begin
  nativeInit(UINT64($758A5C1B3B1E1990));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(plyr: Player; pickupHash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($616093EC6B139DD9));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(pickupHash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(modelHash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($88EAEC617CD26926));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(pickupHash: Hash);
begin
  nativeInit(UINT64($FDC07C58E8AAB715));
  nativePush64(UINT64(pickupHash));
  nativeCall;
end;

procedure SET_TEAM_PICKUP_OBJECT(obj: GTAObject; p1: Any; p2: BOOL);
begin
  nativeInit(UINT64($53E0DF1A2A3CF0CA));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PREVENT_COLLECTION_OF_PORTABLE_PICKUP(obj: GTAObject; p1, p2: BOOL);
begin
  nativeInit(UINT64($92AEFB5F6E294023));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($27F248C3FEBFAAD3));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PICKUP_GLOW_OFFSET(para_pickup: Pickup; p1: cfloat);
begin
  nativeInit(UINT64($0596843B34B95CE5));
  nativePush64(UINT64(para_pickup));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PICKUP_OBJECT_GLOW_OFFSET(para_pickup: Pickup; p1: cfloat; p2: BOOL);
begin
  nativeInit(UINT64($A08FE5E49BDC39DD));
  nativePush64(UINT64(para_pickup));
  nativePush64(PUINT64(@p1)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_OBJECT_GLOW_IN_SAME_TEAM(para_pickup: Pickup);
begin
  nativeInit(UINT64($62454A641B41F3C5));
  nativePush64(UINT64(para_pickup));
  nativeCall;
end;

procedure SET_PICKUP_OBJECT_ARROW_MARKER(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($39A5FB7EAF150840));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($834344A414C7C85D));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(pickupHash: Hash): cint;
begin
  nativeInit(UINT64($DB41D07A45A6D4B7));
  nativePush64(UINT64(pickupHash));
  exit(cint(nativeCall^));
end;

procedure SET_PICKUP_GENERATION_RANGE_MULTIPLIER(multiplier: cfloat);
begin
  nativeInit(UINT64($318516E02DE3ECE2));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

function GET_PICKUP_GENERATION_RANGE_MULTIPLIER: cfloat;
begin
  nativeInit(UINT64($B3ECA65C7317F174));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(p0: BOOL);
begin
  nativeInit(UINT64($31F924B53EADDF65));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PICKUP_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($1C1B69FAE509BA97));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($858EC9FD25DE04AA));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($3ED2B83AB2E82799));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($8881C98A31117998));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(p0: cint);
begin
  nativeInit(UINT64($8CFF648FBD7330F1));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PORTABLE_PICKUP_PERSIST(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($46F3ADD1E2D5BAF2));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($641F272B52E2F0F8));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($4C134B4DF76025D0));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ALLOW_PICKUP_BY_NONE_PARTICIPANT(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($AA059C615DE9DD03));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SUPPRESS_PICKUP_REWARD_TYPE(rewardType: cint; suppress: BOOL);
begin
  nativeInit(UINT64($F92099527DB8E2A7));
  nativePush64(UINT64(rewardType));
  nativePush64(UINT64(suppress));
  nativeCall;
end;

procedure CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION;
begin
  nativeInit(UINT64($A2C1F5E92AFE49ED));
  nativeCall;
end;

procedure CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(rewardType: cint);
begin
  nativeInit(UINT64($762DB2D380B48D04));
  nativePush64(UINT64(rewardType));
  nativeCall;
end;

procedure RENDER_FAKE_PICKUP_GLOW(x, y, z: cfloat; colorIndex: cint);
begin
  nativeInit(UINT64($3430676B11CDF21D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(colorIndex));
  nativeCall;
end;

procedure SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(para_pickup: Pickup);
begin
  nativeInit(UINT64($7813E8B8C4AE4799));
  nativePush64(UINT64(para_pickup));
  nativeCall;
end;

procedure SET_PICKUP_TRACK_DAMAGE_EVENTS(para_pickup: Pickup; toggle: BOOL);
begin
  nativeInit(UINT64($BFFE53AE7E67FCDC));
  nativePush64(UINT64(para_pickup));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_FLAG_SUPPRESS_SHADOW(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($D05A3241B9A86F19));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($B2D0BDE54F0E8E5A));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_WEAPON_TYPE_FROM_PICKUP_TYPE(pickupHash: Hash): Hash;
begin
  nativeInit(UINT64($08F96CA6C551AD51));
  nativePush64(UINT64(pickupHash));
  exit(Hash(nativeCall^));
end;

function GET_PICKUP_TYPE_FROM_WEAPON_HASH(weaponHash: Hash): Hash;
begin
  nativeInit(UINT64($D6429A016084F1A5));
  nativePush64(UINT64(weaponHash));
  exit(Hash(nativeCall^));
end;

function IS_PICKUP_WEAPON_OBJECT_VALID(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($11D1E53A726891FE));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

function GET_OBJECT_TINT_INDEX(obj: GTAObject): cint;
begin
  nativeInit(UINT64($E84EB93729C5F36A));
  nativePush64(UINT64(obj));
  exit(cint(nativeCall^));
end;

procedure SET_OBJECT_TINT_INDEX(obj: GTAObject; textureVariation: cint);
begin
  nativeInit(UINT64($971DA0055324D033));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(textureVariation));
  nativeCall;
end;

function SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(x, y, z, radius: cfloat; modelHash: Hash; textureVariation: cint): BOOL;
begin
  nativeInit(UINT64($F12E33034D887F66));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(textureVariation));
  exit(BOOL(nativeCall^));
end;

procedure SET_PROP_TINT_INDEX(p0, p1: Any);
begin
  nativeInit(UINT64($31574B1B41268673));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function SET_PROP_LIGHT_COLOR(obj: GTAObject; p1: BOOL; r, g, b: cint): BOOL;
begin
  nativeInit(UINT64($5F048334B4A4E774));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  exit(BOOL(nativeCall^));
end;

function IS_PROP_LIGHT_OVERRIDEN(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($ADF084FB8F075D06));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

procedure SET_OBJECT_IS_VISIBLE_IN_MIRRORS(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($3B2FD68DB5F8331C));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_OBJECT_SPEED_BOOST_AMOUNT(obj: GTAObject; p1: Any);
begin
  nativeInit(UINT64($96EE0EBA0163DF80));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_OBJECT_SPEED_BOOST_DURATION(obj: GTAObject; duration: cfloat);
begin
  nativeInit(UINT64($DF6CA0330F2E737B));
  nativePush64(UINT64(obj));
  nativePush64(PUINT64(@duration)^);
  nativeCall;
end;

function CONVERT_OLD_PICKUP_TYPE_TO_NEW(pickupHash: Hash): Hash;
begin
  nativeInit(UINT64($5EAAD83F8CFB4575));
  nativePush64(UINT64(pickupHash));
  exit(Hash(nativeCall^));
end;

procedure SET_FORCE_OBJECT_THIS_FRAME(x, y, z, p3: cfloat);
begin
  nativeInit(UINT64($F538081986E49E9D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(obj: GTAObject);
begin
  nativeInit(UINT64($ADBE4809F19F927A));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(p0: Any);
begin
  nativeInit(UINT64($8CAAB2BD3EA58BD4));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(para_entity: Entity; p1: Any);
begin
  nativeInit(UINT64($63ECF581BC70E363));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_DRIVE_ARTICULATED_JOINT(obj: GTAObject; toggle: BOOL; p2: cint);
begin
  nativeInit(UINT64($911024442F4898F0));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(obj: GTAObject; toggle: BOOL; p2: cint; _ped: Ped);
begin
  nativeInit(UINT64($B20834A7DD3D8896));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_OBJECT_IS_A_PRESSURE_PLATE(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($734E1714D077DA9A));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(obj: GTAObject; p1: BOOL);
begin
  nativeInit(UINT64($1A6CBB06E2D0D79D));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(obj: GTAObject; p1: Any): BOOL;
begin
  nativeInit(UINT64($43C677F1E1158005));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(p0, p1: Any): BOOL;
begin
  nativeInit(UINT64($3BD770D281982DB5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SET_IS_OBJECT_ARTICULATED(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($1C57C94A6446492A));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_IS_OBJECT_BALL(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($B5B7742424BD4445));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_CONTROL_ENABLED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($1CEA6BFDF248E5D9));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function IS_CONTROL_PRESSED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($F3A21BCD95725A4A));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function IS_CONTROL_RELEASED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($648EE3E7F38877DD));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function IS_CONTROL_JUST_PRESSED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($580417101DDB492F));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function IS_CONTROL_JUST_RELEASED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($50F940259D3841E6));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function GET_CONTROL_VALUE(control, action: cint): cint;
begin
  nativeInit(UINT64($D95E79E8686D2C27));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(cint(nativeCall^));
end;

function GET_CONTROL_NORMAL(control, action: cint): cfloat;
begin
  nativeInit(UINT64($EC3C9B8D5327B563));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_USE_ADJUSTED_MOUSE_COORDS(toggle: BOOL);
begin
  nativeInit(UINT64($5B73C77D9EB66E24));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_CONTROL_UNBOUND_NORMAL(control, action: cint): cfloat;
begin
  nativeInit(UINT64($5B84D09CEC5209C5));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function SET_CONTROL_VALUE_NEXT_FRAME(control, action: cint; value: cfloat): BOOL;
begin
  nativeInit(UINT64($E8A25867FBA3B05E));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  nativePush64(PUINT64(@value)^);
  exit(BOOL(nativeCall^));
end;

function IS_DISABLED_CONTROL_PRESSED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($E2587F8CBBD87B1D));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function IS_DISABLED_CONTROL_RELEASED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($FB6C4072E9A32E92));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function IS_DISABLED_CONTROL_JUST_PRESSED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($91AEF906BCA88877));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function IS_DISABLED_CONTROL_JUST_RELEASED(control, action: cint): BOOL;
begin
  nativeInit(UINT64($305C8DCD79DA8B0F));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(BOOL(nativeCall^));
end;

function GET_DISABLED_CONTROL_NORMAL(control, action: cint): cfloat;
begin
  nativeInit(UINT64($11E65974A982637C));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_DISABLED_CONTROL_UNBOUND_NORMAL(control, action: cint): cfloat;
begin
  nativeInit(UINT64($4F8A26A890FD62FB));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_CONTROL_HOW_LONG_AGO(control: cint): cint;
begin
  nativeInit(UINT64($D7D22F5592AED8BA));
  nativePush64(UINT64(control));
  exit(cint(nativeCall^));
end;

function IS_USING_KEYBOARD_AND_MOUSE(control: cint): BOOL;
begin
  nativeInit(UINT64($A571D46727E2B718));
  nativePush64(UINT64(control));
  exit(BOOL(nativeCall^));
end;

function IS_USING_CURSOR(control: cint): BOOL;
begin
  nativeInit(UINT64($13337B38DB572509));
  nativePush64(UINT64(control));
  exit(BOOL(nativeCall^));
end;

function SET_CURSOR_POSITION(x, y: cfloat): BOOL;
begin
  nativeInit(UINT64($FC695459D4D0E219));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  exit(BOOL(nativeCall^));
end;

function IS_USING_REMOTE_PLAY(control: cint): BOOL;
begin
  nativeInit(UINT64($23F09EADC01449D6));
  nativePush64(UINT64(control));
  exit(BOOL(nativeCall^));
end;

function HAVE_CONTROLS_CHANGED(control: cint): BOOL;
begin
  nativeInit(UINT64($6CD79468A1E595C6));
  nativePush64(UINT64(control));
  exit(BOOL(nativeCall^));
end;

function GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(control, action: cint; allowXOSwap: BOOL): PChar;
begin
  nativeInit(UINT64($0499D7B09FC9B407));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  nativePush64(UINT64(allowXOSwap));
  exit(PChar(nativeCall^));
end;

function GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(control, controlGroup: cint; allowXOSwap: BOOL): PChar;
begin
  nativeInit(UINT64($80C2FD58D720C801));
  nativePush64(UINT64(control));
  nativePush64(UINT64(controlGroup));
  nativePush64(UINT64(allowXOSwap));
  exit(PChar(nativeCall^));
end;

procedure SET_CONTROL_LIGHT_EFFECT_COLOR(control, red, green, blue: cint);
begin
  nativeInit(UINT64($8290252FFF36ACB5));
  nativePush64(UINT64(control));
  nativePush64(UINT64(red));
  nativePush64(UINT64(green));
  nativePush64(UINT64(blue));
  nativeCall;
end;

procedure CLEAR_CONTROL_LIGHT_EFFECT(control: cint);
begin
  nativeInit(UINT64($CB0360EFEFB2580D));
  nativePush64(UINT64(control));
  nativeCall;
end;

procedure SET_CONTROL_SHAKE(control, duration, frequency: cint);
begin
  nativeInit(UINT64($48B3886C1358D0D5));
  nativePush64(UINT64(control));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(frequency));
  nativeCall;
end;

procedure SET_CONTROL_TRIGGER_SHAKE(control, leftDuration, leftFrequency, rightDuration, rightFrequency: cint);
begin
  nativeInit(UINT64($14D29BB12D47F68C));
  nativePush64(UINT64(control));
  nativePush64(UINT64(leftDuration));
  nativePush64(UINT64(leftFrequency));
  nativePush64(UINT64(rightDuration));
  nativePush64(UINT64(rightFrequency));
  nativeCall;
end;

procedure STOP_CONTROL_SHAKE(control: cint);
begin
  nativeInit(UINT64($38C16A305E8CDC8D));
  nativePush64(UINT64(control));
  nativeCall;
end;

procedure SET_CONTROL_SHAKE_SUPPRESSED_ID(control, uniqueId: cint);
begin
  nativeInit(UINT64($F239400E16C23E08));
  nativePush64(UINT64(control));
  nativePush64(UINT64(uniqueId));
  nativeCall;
end;

procedure CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(control: cint);
begin
  nativeInit(UINT64($A0CEFCEA390AAB9B));
  nativePush64(UINT64(control));
  nativeCall;
end;

function IS_LOOK_INVERTED: BOOL;
begin
  nativeInit(UINT64($77B612531280010D));
  exit(BOOL(nativeCall^));
end;

function IS_MOUSE_LOOK_INVERTED: BOOL;
begin
  nativeInit(UINT64($E1615EC03B3BB4FD));
  exit(BOOL(nativeCall^));
end;

function GET_LOCAL_PLAYER_AIM_STATE: cint;
begin
  nativeInit(UINT64($BB41AFBBBC0A0287));
  exit(cint(nativeCall^));
end;

function GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE: cint;
begin
  nativeInit(UINT64($59B9A7AF4C95133C));
  exit(cint(nativeCall^));
end;

function GET_IS_USING_ALTERNATE_HANDBRAKE: BOOL;
begin
  nativeInit(UINT64($25AAA32BDC98F2A3));
  exit(BOOL(nativeCall^));
end;

function GET_IS_USING_ALTERNATE_DRIVEBY: BOOL;
begin
  nativeInit(UINT64($0F70731BACCFBB96));
  exit(BOOL(nativeCall^));
end;

function GET_ALLOW_MOVEMENT_WHILE_ZOOMED: BOOL;
begin
  nativeInit(UINT64($FC859E2374407556));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(toggle: BOOL);
begin
  nativeInit(UINT64($798FDEB5B1575088));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_INPUT_EXCLUSIVE(control, action: cint);
begin
  nativeInit(UINT64($EDE476E5EE29EDB1));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  nativeCall;
end;

procedure DISABLE_CONTROL_ACTION(control, action: cint; disableRelatedActions: BOOL);
begin
  nativeInit(UINT64($FE99B66D079CF6BC));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  nativePush64(UINT64(disableRelatedActions));
  nativeCall;
end;

procedure ENABLE_CONTROL_ACTION(control, action: cint; enableRelatedActions: BOOL);
begin
  nativeInit(UINT64($351220255D64C155));
  nativePush64(UINT64(control));
  nativePush64(UINT64(action));
  nativePush64(UINT64(enableRelatedActions));
  nativeCall;
end;

procedure DISABLE_ALL_CONTROL_ACTIONS(control: cint);
begin
  nativeInit(UINT64($5F4B6931816E599B));
  nativePush64(UINT64(control));
  nativeCall;
end;

procedure ENABLE_ALL_CONTROL_ACTIONS(control: cint);
begin
  nativeInit(UINT64($A5FFE9B05F199DE7));
  nativePush64(UINT64(control));
  nativeCall;
end;

function INIT_PC_SCRIPTED_CONTROLS(schemeName: PChar): BOOL;
begin
  nativeInit(UINT64($3D42B92563939375));
  nativePush64(UINT64(schemeName));
  exit(BOOL(nativeCall^));
end;

function SWITCH_PC_SCRIPTED_CONTROLS(schemeName: PChar): BOOL;
begin
  nativeInit(UINT64($4683149ED1DDE7A1));
  nativePush64(UINT64(schemeName));
  exit(BOOL(nativeCall^));
end;

procedure SHUTDOWN_PC_SCRIPTED_CONTROLS;
begin
  nativeInit(UINT64($643ED62D5EA3BEBD));
  nativeCall;
end;

procedure ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(control: cint);
begin
  nativeInit(UINT64($7F4724035FDCA1DD));
  nativePush64(UINT64(control));
  nativeCall;
end;

procedure SET_ROADS_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; nodeEnabled, unknown2: BOOL);
begin
  nativeInit(UINT64($BF1A602B5BA52FEE));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(nodeEnabled));
  nativePush64(UINT64(unknown2));
  nativeCall;
end;

procedure SET_ROADS_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; unknown1, unknown2, unknown3: BOOL);
begin
  nativeInit(UINT64($1A5AA1208AF5DB59));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(unknown1));
  nativePush64(UINT64(unknown2));
  nativePush64(UINT64(unknown3));
  nativeCall;
end;

procedure SET_PED_PATHS_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6: BOOL; p7: Any);
begin
  nativeInit(UINT64($34F060F4BF92E018));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativeCall;
end;

function GET_SAFE_COORD_FOR_PED(x, y, z: cfloat; onGround: BOOL; outPosition: PVector3; flags: cint): BOOL;
begin
  nativeInit(UINT64($B61C8E878A4199CA));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(onGround));
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(flags));
  exit(BOOL(nativeCall^));
end;

function GET_CLOSEST_VEHICLE_NODE(x, y, z: cfloat; outPosition: PVector3; nodeFlags: cint; p5, p6: cfloat): BOOL;
begin
  nativeInit(UINT64($240A18690AE96513));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(nodeFlags));
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  exit(BOOL(nativeCall^));
end;

function GET_CLOSEST_MAJOR_VEHICLE_NODE(x, y, z: cfloat; outPosition: PVector3; unknown1, unknown2: cfloat): BOOL;
begin
  nativeInit(UINT64($2EABE3B06F58C1BE));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(outPosition));
  nativePush64(PUINT64(@unknown1)^);
  nativePush64(PUINT64(@unknown2)^);
  exit(BOOL(nativeCall^));
end;

function GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z: cfloat; outPosition: PVector3; outHeading: pcfloat; nodeType: cint; p6, p7: cfloat): BOOL;
begin
  nativeInit(UINT64($FF071FB798B803B0));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(outHeading));
  nativePush64(UINT64(nodeType));
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  exit(BOOL(nativeCall^));
end;

function GET_NTH_CLOSEST_VEHICLE_NODE(x, y, z: cfloat; nthClosest: cint; outPosition: PVector3; nodeFlags: cint; unknown1, unknown2: cfloat): BOOL;
begin
  nativeInit(UINT64($E50E52416CCF948B));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(nthClosest));
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(nodeFlags));
  nativePush64(PUINT64(@unknown1)^);
  nativePush64(PUINT64(@unknown2)^);
  exit(BOOL(nativeCall^));
end;

function GET_NTH_CLOSEST_VEHICLE_NODE_ID(x, y, z: cfloat; nth, nodeFlags: cint; p5, p6: cfloat): cint;
begin
  nativeInit(UINT64($22D7275A79FE8215));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(nth));
  nativePush64(UINT64(nodeFlags));
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  exit(cint(nativeCall^));
end;

function GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(x, y, z: cfloat; nthClosest: cint; outPosition: PVector3; outHeading: pcfloat; outNumLanes: pcint; nodeFlags: cint; unknown3, unknown4: cfloat): BOOL;
begin
  nativeInit(UINT64($80CA6A8B6C094CC4));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(nthClosest));
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(outHeading));
  nativePush64(UINT64(outNumLanes));
  nativePush64(UINT64(nodeFlags));
  nativePush64(PUINT64(@unknown3)^);
  nativePush64(PUINT64(@unknown4)^);
  exit(BOOL(nativeCall^));
end;

function GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(x, y, z: cfloat; nthClosest: cint; outPosition: PVector3; outHeading: pcfloat; nodeFlags: cint; p7, p8: cfloat): cint;
begin
  nativeInit(UINT64($6448050E9C2A7207));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(nthClosest));
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(outHeading));
  nativePush64(UINT64(nodeFlags));
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  exit(cint(nativeCall^));
end;

function GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(x, y, z, desiredX, desiredY, desiredZ: cfloat; nthClosest: cint; outPosition: PVector3; outHeading: pcfloat; nodeFlags: cint; p10, p11: cfloat): BOOL;
begin
  nativeInit(UINT64($45905BE8654AE067));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@desiredX)^);
  nativePush64(PUINT64(@desiredY)^);
  nativePush64(PUINT64(@desiredZ)^);
  nativePush64(UINT64(nthClosest));
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(outHeading));
  nativePush64(UINT64(nodeFlags));
  nativePush64(PUINT64(@p10)^);
  nativePush64(PUINT64(@p11)^);
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_NODE_PROPERTIES(x, y, z: cfloat; density, flags: pcint): BOOL;
begin
  nativeInit(UINT64($0568566ACBB5DEDC));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(density));
  nativePush64(UINT64(flags));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_NODE_ID_VALID(vehicleNodeId: cint): BOOL;
begin
  nativeInit(UINT64($1EAF30FCFBF5AF74));
  nativePush64(UINT64(vehicleNodeId));
  exit(BOOL(nativeCall^));
end;

procedure GET_VEHICLE_NODE_POSITION(nodeId: cint; outPosition: PVector3);
begin
  nativeInit(UINT64($703123E5E7D429C2));
  nativePush64(UINT64(nodeId));
  nativePush64(UINT64(outPosition));
  nativeCall;
end;

function GET_VEHICLE_NODE_IS_GPS_ALLOWED(nodeID: cint): BOOL;
begin
  nativeInit(UINT64($A2AE5C478B96E3B6));
  nativePush64(UINT64(nodeID));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_NODE_IS_SWITCHED_OFF(nodeID: cint): BOOL;
begin
  nativeInit(UINT64($4F5070AA58F69279));
  nativePush64(UINT64(nodeID));
  exit(BOOL(nativeCall^));
end;

function GET_CLOSEST_ROAD(x, y, z, p3: cfloat; p4: cint; p5, p6: PVector3; p7, p8: PAny; p9: pcfloat; p10: BOOL): BOOL;
begin
  nativeInit(UINT64($132F52BBA570FE92));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  exit(BOOL(nativeCall^));
end;

function LOAD_ALL_PATH_NODES(_set: BOOL): BOOL;
begin
  nativeInit(UINT64($C2AB6BFE34E92F8B));
  nativePush64(UINT64(_set));
  exit(BOOL(nativeCall^));
end;

procedure SET_ALLOW_STREAM_PROLOGUE_NODES(toggle: BOOL);
begin
  nativeInit(UINT64($228E5C6AD4D74BFD));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ALLOW_STREAM_HEIST_ISLAND_NODES(_type: cint);
begin
  nativeInit(UINT64($F74B1FFA4A15FBEA));
  nativePush64(UINT64(_type));
  nativeCall;
end;

function ARE_NODES_LOADED_FOR_AREA(x1, y1, x2, y2: cfloat): BOOL;
begin
  nativeInit(UINT64($F7B79A50B905A30D));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  exit(BOOL(nativeCall^));
end;

function REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(x1, y1, x2, y2: cfloat): BOOL;
begin
  nativeInit(UINT64($07FB139B592FA687));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_ROADS_BACK_TO_ORIGINAL(p0, p1, p2, p3, p4, p5: cfloat; p6: Any);
begin
  nativeInit(UINT64($1EE7063B80FFC77C));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; p7: Any);
begin
  nativeInit(UINT64($0027501B9F3B407E));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
begin
  nativeInit(UINT64($0B919E1FB47CC4E0));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(p0, p1, p2, p3, p4, p5, p6: Any);
begin
  nativeInit(UINT64($AA76052DDA9BFC3E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_PED_PATHS_BACK_TO_ORIGINAL(x1, y1, z1, x2, y2, z2: cfloat; p6: Any);
begin
  nativeInit(UINT64($E04B48F2CC926253));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

function GET_RANDOM_VEHICLE_NODE(x, y, z, radius: cfloat; p4, p5, p6: BOOL; outPosition: PVector3; nodeId: pcint): BOOL;
begin
  nativeInit(UINT64($93E0DB8440B73A7D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(outPosition));
  nativePush64(UINT64(nodeId));
  exit(BOOL(nativeCall^));
end;

function GET_SPAWN_COORDS_FOR_VEHICLE_NODE(nodeAddress: cint; towardsCoorsX, towardsCoorsY, towardsCoorsZ: cfloat; centrePoint: PVector3; heading: pcfloat): Vector3;
begin
  nativeInit(UINT64($809549AFC7AEC597));
  nativePush64(UINT64(nodeAddress));
  nativePush64(PUINT64(@towardsCoorsX)^);
  nativePush64(PUINT64(@towardsCoorsY)^);
  nativePush64(PUINT64(@towardsCoorsZ)^);
  nativePush64(UINT64(centrePoint));
  nativePush64(UINT64(heading));
  exit(PVector3(nativeCall)^);
end;

procedure GET_STREET_NAME_AT_COORD(x, y, z: cfloat; streetName, crossingRoad: PHash);
begin
  nativeInit(UINT64($2EB41072B4C1E4C0));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(streetName));
  nativePush64(UINT64(crossingRoad));
  nativeCall;
end;

function GENERATE_DIRECTIONS_TO_COORD(x, y, z: cfloat; p3: BOOL; direction: pcint; p5, distToNxJunction: pcfloat): cint;
begin
  nativeInit(UINT64($F90125F1F79ECDF8));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p3));
  nativePush64(UINT64(direction));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(distToNxJunction));
  exit(cint(nativeCall^));
end;

procedure SET_IGNORE_NO_GPS_FLAG(toggle: BOOL);
begin
  nativeInit(UINT64($72751156E7678833));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(toggle: BOOL);
begin
  nativeInit(UINT64($1FC289A0C3FF470F));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_GPS_DISABLED_ZONE(x1, y1, z1, x2, y2, z3: cfloat);
begin
  nativeInit(UINT64($DC20483CD3DD5201));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z3)^);
  nativeCall;
end;

function GET_GPS_BLIP_ROUTE_LENGTH: cint;
begin
  nativeInit(UINT64($BBB45C3CF5C8AA85));
  exit(cint(nativeCall^));
end;

function GET_POS_ALONG_GPS_TYPE_ROUTE(_result: PVector3; p1: BOOL; p2: cfloat; p3: cint): BOOL;
begin
  nativeInit(UINT64($F3162836C28F9DA5));
  nativePush64(UINT64(_result));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function GET_GPS_BLIP_ROUTE_FOUND: BOOL;
begin
  nativeInit(UINT64($869DAACBBE9FA006));
  exit(BOOL(nativeCall^));
end;

function GET_ROAD_BOUNDARY_USING_HEADING(x, y, z, heading: cfloat; outPosition: PVector3): BOOL;
begin
  nativeInit(UINT64($A0F8A7517A273C05));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(outPosition));
  exit(BOOL(nativeCall^));
end;

function GET_POSITION_BY_SIDE_OF_ROAD(x, y, z: cfloat; p3: cint; outPosition: PVector3): BOOL;
begin
  nativeInit(UINT64($16F46FB18C8009E4));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p3));
  nativePush64(UINT64(outPosition));
  exit(BOOL(nativeCall^));
end;

function IS_POINT_ON_ROAD(x, y, z: cfloat; veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($125BF4ABFC536B09));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_NEXT_GPS_DISABLED_ZONE_INDEX: cint;
begin
  nativeInit(UINT64($D3A6A0EF48823A8C));
  exit(cint(nativeCall^));
end;

procedure SET_GPS_DISABLED_ZONE_AT_INDEX(x1, y1, z1, x2, y2, z2: cfloat; index: cint);
begin
  nativeInit(UINT64($D0BC1C6FB18EE154));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure CLEAR_GPS_DISABLED_ZONE_AT_INDEX(index: cint);
begin
  nativeInit(UINT64($2801D0012266DF07));
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure ADD_NAVMESH_REQUIRED_REGION(x, y, radius: cfloat);
begin
  nativeInit(UINT64($387EAD7EE42F6685));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure REMOVE_NAVMESH_REQUIRED_REGIONS;
begin
  nativeInit(UINT64($916F0A3CDEC3445E));
  nativeCall;
end;

function IS_NAVMESH_REQUIRED_REGION_IN_USE: BOOL;
begin
  nativeInit(UINT64($705A844002B39DC0));
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_NAVMESH_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; toggle: BOOL);
begin
  nativeInit(UINT64($4C8872D8CDBE1B8B));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function ARE_ALL_NAVMESH_REGIONS_LOADED: BOOL;
begin
  nativeInit(UINT64($8415D95B194A3AEA));
  exit(BOOL(nativeCall^));
end;

function IS_NAVMESH_LOADED_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
begin
  nativeInit(UINT64($F813C7E63F9062A5));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function GET_NUM_NAVMESHES_EXISTING_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat): cint;
begin
  nativeInit(UINT64($01708E8DD3FF8C65));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(cint(nativeCall^));
end;

function ADD_NAVMESH_BLOCKING_OBJECT(p0, p1, p2, p3, p4, p5, p6: cfloat; p7: BOOL; p8: Any): cint;
begin
  nativeInit(UINT64($FCD5C8E06E502F5A));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(cint(nativeCall^));
end;

procedure UPDATE_NAVMESH_BLOCKING_OBJECT(p0: Any; p1, p2, p3, p4, p5, p6, p7: cfloat; p8: Any);
begin
  nativeInit(UINT64($109E99373F290687));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure REMOVE_NAVMESH_BLOCKING_OBJECT(p0: Any);
begin
  nativeInit(UINT64($46399A7895957C0E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function DOES_NAVMESH_BLOCKING_OBJECT_EXIST(p0: Any): BOOL;
begin
  nativeInit(UINT64($0EAEB0DB4B132399));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function GET_APPROX_HEIGHT_FOR_POINT(x, y: cfloat): cfloat;
begin
  nativeInit(UINT64($29C24BFBED8AB8FB));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_APPROX_HEIGHT_FOR_AREA(x1, y1, x2, y2: cfloat): cfloat;
begin
  nativeInit(UINT64($8ABE8608576D9CE3));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_APPROX_FLOOR_FOR_POINT(x, y: cfloat): cfloat;
begin
  nativeInit(UINT64($336511A34F2E5185));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_APPROX_FLOOR_FOR_AREA(x1, y1, x2, y2: cfloat): cfloat;
begin
  nativeInit(UINT64($3599D741C9AC6310));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(x1, y1, z1, x2, y2, z2: cfloat): cfloat;
begin
  nativeInit(UINT64($ADD95C7005C4A197));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function CREATE_PED(pedType: cint; modelHash: Hash; x, y, z, heading: cfloat; isNetwork, bScriptHostPed: BOOL): Ped;
begin
  nativeInit(UINT64($D49F9B0955C367DE));
  nativePush64(UINT64(pedType));
  nativePush64(UINT64(modelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(bScriptHostPed));
  exit(Ped(nativeCall^));
end;

procedure DELETE_PED(_ped: PPed);
begin
  nativeInit(UINT64($9614299DCB53E54B));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function CLONE_PED(_ped: Ped; isNetwork, bScriptHostPed, copyHeadBlendFlag: BOOL): Ped;
begin
  nativeInit(UINT64($EF29A16337FACADB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(bScriptHostPed));
  nativePush64(UINT64(copyHeadBlendFlag));
  exit(Ped(nativeCall^));
end;

function CLONE_PED_ALT(_ped: Ped; isNetwork, bScriptHostPed, copyHeadBlendFlag, p4: BOOL): Ped;
begin
  nativeInit(UINT64($668FD40BCBA5DE48));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(bScriptHostPed));
  nativePush64(UINT64(copyHeadBlendFlag));
  nativePush64(UINT64(p4));
  exit(Ped(nativeCall^));
end;

procedure CLONE_PED_TO_TARGET(_ped, targetPed: Ped);
begin
  nativeInit(UINT64($E952D6431689AD9A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(targetPed));
  nativeCall;
end;

procedure CLONE_PED_TO_TARGET_ALT(_ped, targetPed: Ped; p2: BOOL);
begin
  nativeInit(UINT64($148B08C2D2ACB884));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(targetPed));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_PED_IN_VEHICLE(_ped: Ped; veh: Vehicle; atGetIn: BOOL): BOOL;
begin
  nativeInit(UINT64($A3EE4A07279BB9DB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(atGetIn));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_MODEL(_ped: Ped; modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($796D90EFB19AA332));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_ANY_VEHICLE(_ped: Ped; atGetIn: BOOL): BOOL;
begin
  nativeInit(UINT64($997ABD671D25CA0B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(atGetIn));
  exit(BOOL(nativeCall^));
end;

function IS_COP_PED_IN_AREA_3D(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
begin
  nativeInit(UINT64($16EC4839969F9F5E));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function IS_PED_INJURED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($84A2DD9AC37C35C1));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_HURT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($5983BB449D7FDB12));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_FATALLY_INJURED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($D839450756ED5A80));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_DEAD_OR_DYING(_ped: Ped; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($3317DEDB88C95038));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function IS_CONVERSATION_PED_DEAD(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($E0A0AEC214B1FABA));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_AIMING_FROM_COVER(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($3998B1276A3300E5));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_RELOADING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($24B100C68C645951));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_A_PLAYER(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($12534C348C6CB68B));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function CREATE_PED_INSIDE_VEHICLE(veh: Vehicle; pedType: cint; modelHash: Hash; seat: cint; isNetwork, bScriptHostPed: BOOL): Ped;
begin
  nativeInit(UINT64($7DD959874C1FD534));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(pedType));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(seat));
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(bScriptHostPed));
  exit(Ped(nativeCall^));
end;

procedure SET_PED_DESIRED_HEADING(_ped: Ped; heading: cfloat);
begin
  nativeInit(UINT64($AA5A7ECE2AA8FE70));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

procedure FORCE_ALL_HEADING_VALUES_TO_ALIGN(_ped: Ped);
begin
  nativeInit(UINT64($FF287323B0E2C69A));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_PED_FACING_PED(_ped, otherPed: Ped; angle: cfloat): BOOL;
begin
  nativeInit(UINT64($D71649DB0A545AA3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(otherPed));
  nativePush64(PUINT64(@angle)^);
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_MELEE_COMBAT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($4E209B2C1EAD5159));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_STOPPED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($530944F6F4B8A214));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_SHOOTING_IN_AREA(_ped: Ped; x1, y1, z1, x2, y2, z2: cfloat; p7, p8: BOOL): BOOL;
begin
  nativeInit(UINT64($7E9DFE24AC1E58EF));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(BOOL(nativeCall^));
end;

function IS_ANY_PED_SHOOTING_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6, p7: BOOL): BOOL;
begin
  nativeInit(UINT64($A0D3D71EA1086C55));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function IS_PED_SHOOTING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($34616828CD07F1A1));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_ACCURACY(_ped: Ped; accuracy: cint);
begin
  nativeInit(UINT64($7AEFB85C1D49DEB6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(accuracy));
  nativeCall;
end;

function GET_PED_ACCURACY(_ped: Ped): cint;
begin
  nativeInit(UINT64($37F4AD56ECBC0CD6));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(multiplier: cfloat);
begin
  nativeInit(UINT64($87DDEB611B329A9C));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

function IS_PED_MODEL(_ped: Ped; modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($C9D55B1A358A5BF7));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

procedure EXPLODE_PED_HEAD(_ped: Ped; weaponHash: Hash);
begin
  nativeInit(UINT64($2D05CED3A38D0F3A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativeCall;
end;

procedure REMOVE_PED_ELEGANTLY(_ped: PPed);
begin
  nativeInit(UINT64($AC6D445B994DF95E));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure ADD_ARMOUR_TO_PED(_ped: Ped; amount: cint);
begin
  nativeInit(UINT64($5BA652A0CD14DF2F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure SET_PED_ARMOUR(_ped: Ped; amount: cint);
begin
  nativeInit(UINT64($CEA04D83135264CC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure SET_PED_INTO_VEHICLE(_ped: Ped; veh: Vehicle; seatIndex: cint);
begin
  nativeInit(UINT64($F75B0D629E1C063D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  nativeCall;
end;

procedure SET_PED_ALLOW_VEHICLES_OVERRIDE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($3C028C636A414ED9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function CAN_CREATE_RANDOM_PED(p0: BOOL): BOOL;
begin
  nativeInit(UINT64($3E8349C08E4B82E4));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function CREATE_RANDOM_PED(posX, posY, posZ: cfloat): Ped;
begin
  nativeInit(UINT64($B4AC7D0CF06BFE8F));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  exit(Ped(nativeCall^));
end;

function CREATE_RANDOM_PED_AS_DRIVER(veh: Vehicle; returnHandle: BOOL): Ped;
begin
  nativeInit(UINT64($9B62392B474F44A0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(returnHandle));
  exit(Ped(nativeCall^));
end;

function CAN_CREATE_RANDOM_DRIVER: BOOL;
begin
  nativeInit(UINT64($B8EB95E5B4E56978));
  exit(BOOL(nativeCall^));
end;

function CAN_CREATE_RANDOM_BIKE_RIDER: BOOL;
begin
  nativeInit(UINT64($EACEEDA81751915C));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_MOVE_ANIMS_BLEND_OUT(_ped: Ped);
begin
  nativeInit(UINT64($9E8C908F41584ECD));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_CAN_BE_DRAGGED_OUT(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($C1670E958EEE24E5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(toggle: BOOL);
begin
  nativeInit(UINT64($F2BEBCDFAFDAA19E));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_MALE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($6D9F5FAA7488BA46));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_HUMAN(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($B980061DA992779D));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_PED_IS_IN(_ped: Ped; includeEntering: BOOL): Vehicle;
begin
  nativeInit(UINT64($9A9112A0FE9A4713));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(includeEntering));
  exit(Vehicle(nativeCall^));
end;

procedure RESET_PED_LAST_VEHICLE(_ped: Ped);
begin
  nativeInit(UINT64($BB8DE8CF6A8DD8BB));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
begin
  nativeInit(UINT64($95E3D6257B166CF2));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(p0, p1: cfloat);
begin
  nativeInit(UINT64($7A556143A1C03898));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME;
begin
  nativeInit(UINT64($5A7F62FDA59759BD));
  nativeCall;
end;

procedure SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(x, y, z: cfloat);
begin
  nativeInit(UINT64($5086C7843552CF85));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_PED_NON_CREATION_AREA(x1, y1, z1, x2, y2, z2: cfloat);
begin
  nativeInit(UINT64($EE01041D559983EA));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativeCall;
end;

procedure CLEAR_PED_NON_CREATION_AREA;
begin
  nativeInit(UINT64($2E05208086BA0651));
  nativeCall;
end;

procedure INSTANTLY_FILL_PED_POPULATION;
begin
  nativeInit(UINT64($4759CC730F947C81));
  nativeCall;
end;

function IS_PED_ON_MOUNT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($460BC76A0E10655E));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_MOUNT(_ped: Ped): Ped;
begin
  nativeInit(UINT64($E7E11B8DCBED1058));
  nativePush64(UINT64(_ped));
  exit(Ped(nativeCall^));
end;

function IS_PED_ON_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($67722AEB798E5FAB));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_ON_SPECIFIC_VEHICLE(_ped: Ped; veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($EC5F66E459AF3BB2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_MONEY(_ped: Ped; amount: cint);
begin
  nativeInit(UINT64($A9C8960E8684C1B5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(amount));
  nativeCall;
end;

function GET_PED_MONEY(_ped: Ped): cint;
begin
  nativeInit(UINT64($3F69145BBA87BAE7));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(p0: cfloat; p1: Any);
begin
  nativeInit(UINT64($FF4803BC019852D9));
  nativePush64(PUINT64(@p0)^);
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_AMBIENT_PEDS_DROP_MONEY(p0: BOOL);
begin
  nativeInit(UINT64($6B0E6172C9A4D902));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(p0: BOOL);
begin
  nativeInit(UINT64($9911F4A24485F653));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PED_SUFFERS_CRITICAL_HITS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EBD76F2359F190AC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_UPPER_BODY_DAMAGE_ONLY(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($AFC976FD0580C7B3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_SITTING_IN_VEHICLE(_ped: Ped; veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($A808AA1D79230FC2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_PED_SITTING_IN_ANY_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($826AA586EDB9FEF8));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_ON_FOOT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($01FEE67DB37F59B2));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_ON_ANY_BIKE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($94495889E22C6479));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_PLANTING_BOMB(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($C70B5FAE151982D8));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_DEAD_PED_PICKUP_COORDS(_ped: Ped; p1, p2: cfloat): Vector3;
begin
  nativeInit(UINT64($CD5003B097200F36));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  exit(PVector3(nativeCall)^);
end;

function IS_PED_IN_ANY_BOAT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($2E0E1C2B4F6CB339));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_ANY_SUB(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($FBFC01CCFB35D99E));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_ANY_HELI(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($298B91AE825E5705));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_ANY_PLANE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($5FFF4CFC74D8FB80));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_FLYING_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($9134873537FA419C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_DIES_IN_WATER(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($56CEF0AC79073BDE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_PED_DIES_IN_WATER(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($65671A4FB8218930));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_DIES_IN_SINKING_VEHICLE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($D718A22995E2B4BC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_PED_ARMOUR(_ped: Ped): cint;
begin
  nativeInit(UINT64($9483AF821605B1D8));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EDF4079F9D54C9A1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_BE_SHOT_IN_VEHICLE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($C7EF1BA83230BA07));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_PED_LAST_DAMAGE_BONE(_ped: Ped; outBone: pcint): BOOL;
begin
  nativeInit(UINT64($D75960F6BD9EA49C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(outBone));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_PED_LAST_DAMAGE_BONE(_ped: Ped);
begin
  nativeInit(UINT64($8EF6B7AC68E2F01B));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_AI_WEAPON_DAMAGE_MODIFIER(value: cfloat);
begin
  nativeInit(UINT64($1B1E2A40A65B8521));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure RESET_AI_WEAPON_DAMAGE_MODIFIER;
begin
  nativeInit(UINT64($EA16670E7BA4743C));
  nativeCall;
end;

procedure SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(modifier: cfloat);
begin
  nativeInit(UINT64($66460DEDDD417254));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER;
begin
  nativeInit(UINT64($46E56A7CD1D63C3F));
  nativeCall;
end;

procedure SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($2F3C3D9F50681DE4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CAN_BE_TARGETTED(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($63F58F7C80513AAD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_BE_TARGETTED_BY_TEAM(_ped: Ped; team: cint; toggle: BOOL);
begin
  nativeInit(UINT64($BF1CA77833E58F2C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(team));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_BE_TARGETTED_BY_PLAYER(_ped: Ped; plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($66B57B72E0836A76));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($061CB768363D6424));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($FD325494792302D7));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_IN_ANY_POLICE_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($0BD04E29640C9C12));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure FORCE_PED_TO_OPEN_PARACHUTE(_ped: Ped);
begin
  nativeInit(UINT64($16E42E800B472221));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_PED_IN_PARACHUTE_FREE_FALL(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($7DCE8BDA0F1C1200));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_FALLING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($FB92A102F1C4DFA3));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_JUMPING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($CEDABC5900A0BF97));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_LANDING(p0: Any): BOOL;
begin
  nativeInit(UINT64($412F1364FA066CFB));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function IS_PED_DOING_A_BEAST_JUMP(p0: Any): BOOL;
begin
  nativeInit(UINT64($451D05012CCEC234));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function IS_PED_CLIMBING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($53E8CB4F48BFE623));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_VAULTING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($117C70D1F5730B5E));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_DIVING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($5527B8246FEF9B11));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_JUMPING_OUT_OF_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($433DDFFE2044B636));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_OPENING_DOOR(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($26AF0E8E30BD2A2C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_PED_PARACHUTE_STATE(_ped: Ped): cint;
begin
  nativeInit(UINT64($79CFD9827CC979B6));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function GET_PED_PARACHUTE_LANDING_TYPE(_ped: Ped): cint;
begin
  nativeInit(UINT64($8B9F1FC6AE8166C0));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_PARACHUTE_TINT_INDEX(_ped: Ped; tintIndex: cint);
begin
  nativeInit(UINT64($333FC8DB079B7186));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(tintIndex));
  nativeCall;
end;

procedure GET_PED_PARACHUTE_TINT_INDEX(_ped: Ped; outTintIndex: pcint);
begin
  nativeInit(UINT64($EAF5F7E5AE7C6C9D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(outTintIndex));
  nativeCall;
end;

procedure SET_PED_RESERVE_PARACHUTE_TINT_INDEX(_ped: Ped; p1: Any);
begin
  nativeInit(UINT64($E88DA0751C22A2AD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function CREATE_PARACHUTE_BAG_OBJECT(_ped: Ped; p1, p2: BOOL): GTAObject;
begin
  nativeInit(UINT64($8C4F3BF23B6237DB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(GTAObject(nativeCall^));
end;

procedure SET_PED_DUCKING(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($030983CA930B692D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_DUCKING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($D125AE748725C6BC));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_ANY_TAXI(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($6E575D6A898AB852));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_ID_RANGE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($F107E836A70DCE05));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_HIGHLY_PERCEPTIVE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($52D59AB61DDC05DD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_COP_PERCEPTION_OVERRIDES(seeingRange, seeingRangePeripheral, hearingRange, visualFieldMinAzimuthAngle, visualFieldMaxAzimuthAngle, fieldOfGazeMaxAngle, p6: cfloat);
begin
  nativeInit(UINT64($2F074C904D85129E));
  nativePush64(PUINT64(@seeingRange)^);
  nativePush64(PUINT64(@seeingRangePeripheral)^);
  nativePush64(PUINT64(@hearingRange)^);
  nativePush64(PUINT64(@visualFieldMinAzimuthAngle)^);
  nativePush64(PUINT64(@visualFieldMaxAzimuthAngle)^);
  nativePush64(PUINT64(@fieldOfGazeMaxAngle)^);
  nativePush64(PUINT64(@p6)^);
  nativeCall;
end;

procedure SET_PED_INJURED_ON_GROUND_BEHAVIOUR(_ped: Ped; p1: cfloat);
begin
  nativeInit(UINT64($EC4B4B3B9908052A));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(_ped: Ped);
begin
  nativeInit(UINT64($733C87D4CE22BEA2));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_SEEING_RANGE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($F29CF591C4BF6CEE));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_HEARING_RANGE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($33A8F7F7D5F7F33C));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_VISUAL_FIELD_MIN_ANGLE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($2DB492222FB21E26));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_VISUAL_FIELD_MAX_ANGLE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($70793BDCA1E854D4));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(_ped: Ped; angle: cfloat);
begin
  nativeInit(UINT64($7A276EB2C224D70F));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@angle)^);
  nativeCall;
end;

procedure SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(_ped: Ped; angle: cfloat);
begin
  nativeInit(UINT64($78D0B67629D75856));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@angle)^);
  nativeCall;
end;

procedure SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(_ped: Ped; range: cfloat);
begin
  nativeInit(UINT64($9C74B0BC831B753A));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@range)^);
  nativeCall;
end;

procedure SET_PED_VISUAL_FIELD_CENTER_ANGLE(_ped: Ped; angle: cfloat);
begin
  nativeInit(UINT64($3B6405E8AB34A907));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@angle)^);
  nativeCall;
end;

function GET_PED_VISUAL_FIELD_CENTER_ANGLE(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($EF2C71A32CAD5FBD));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_PED_STEALTH_MOVEMENT(_ped: Ped; p1: BOOL; action: PChar);
begin
  nativeInit(UINT64($88CBB5CEB96B7BD2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(action));
  nativeCall;
end;

function GET_PED_STEALTH_MOVEMENT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($7C2AC9CA66575FBF));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function CREATE_GROUP(unused: cint): cint;
begin
  nativeInit(UINT64($90370EBE0FEE1A3D));
  nativePush64(UINT64(unused));
  exit(cint(nativeCall^));
end;

procedure SET_PED_AS_GROUP_LEADER(_ped: Ped; groupId: cint);
begin
  nativeInit(UINT64($2A7819605465FBCE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(groupId));
  nativeCall;
end;

procedure SET_PED_AS_GROUP_MEMBER(_ped: Ped; groupId: cint);
begin
  nativeInit(UINT64($9F3480FE65DB31B5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(groupId));
  nativeCall;
end;

procedure SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(pedHandle: Ped; groupHandle: cint; toggle: BOOL);
begin
  nativeInit(UINT64($2E2F4240B3F24647));
  nativePush64(UINT64(pedHandle));
  nativePush64(UINT64(groupHandle));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure REMOVE_GROUP(groupId: cint);
begin
  nativeInit(UINT64($8EB2F69076AF7053));
  nativePush64(UINT64(groupId));
  nativeCall;
end;

procedure REMOVE_PED_FROM_GROUP(_ped: Ped);
begin
  nativeInit(UINT64($ED74007FFB146BC2));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_PED_GROUP_MEMBER(_ped: Ped; groupId: cint): BOOL;
begin
  nativeInit(UINT64($9BB01E3834671191));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(groupId));
  exit(BOOL(nativeCall^));
end;

function IS_PED_HANGING_ON_TO_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($1C86D8AEF8254B78));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_GROUP_SEPARATION_RANGE(groupHandle: cint; separationRange: cfloat);
begin
  nativeInit(UINT64($4102C7858CFEE4E4));
  nativePush64(UINT64(groupHandle));
  nativePush64(PUINT64(@separationRange)^);
  nativeCall;
end;

procedure SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(_ped: Ped; ms: cint);
begin
  nativeInit(UINT64($FA0675AB151073FA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ms));
  nativeCall;
end;

function IS_PED_PRONE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($D6A86331A537A7B9));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_COMBAT(_ped, target: Ped): BOOL;
begin
  nativeInit(UINT64($4859F1FC66A6278E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  exit(BOOL(nativeCall^));
end;

function GET_PED_TARGET_FROM_COMBAT_PED(_ped: Ped; p1: Any): Entity;
begin
  nativeInit(UINT64($32C27A11307B01CC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(Entity(nativeCall^));
end;

function CAN_PED_IN_COMBAT_SEE_TARGET(_ped, target: Ped): BOOL;
begin
  nativeInit(UINT64($EAD42DE3610D0721));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  exit(BOOL(nativeCall^));
end;

function IS_PED_DOING_DRIVEBY(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($B2C086CC1BF8F2BF));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_JACKING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($4AE4FF911DFB61DA));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_BEING_JACKED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($9A497FE2DF198913));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_BEING_STUNNED(_ped: Ped; p1: cint): BOOL;
begin
  nativeInit(UINT64($4FBACCE3B4138EE8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function GET_PEDS_JACKER(_ped: Ped): Ped;
begin
  nativeInit(UINT64($9B128DC36C1E04CF));
  nativePush64(UINT64(_ped));
  exit(Ped(nativeCall^));
end;

function GET_JACK_TARGET(_ped: Ped): Ped;
begin
  nativeInit(UINT64($5486A79D9FBD342D));
  nativePush64(UINT64(_ped));
  exit(Ped(nativeCall^));
end;

function IS_PED_FLEEING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($BBCCE00B381F8482));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_COVER(_ped: Ped; exceptUseWeapon: BOOL): BOOL;
begin
  nativeInit(UINT64($60DFD0691A170B88));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(exceptUseWeapon));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_COVER_FACING_LEFT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($845333B3150583AB));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_IN_HIGH_COVER(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($6A03BF943D767C93));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_GOING_INTO_COVER(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($9F65DBC537E59AD5));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function SET_PED_PINNED_DOWN(_ped: Ped; pinned: BOOL; i: cint): BOOL;
begin
  nativeInit(UINT64($AAD6D1ACF08F4612));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(pinned));
  nativePush64(UINT64(i));
  exit(BOOL(nativeCall^));
end;

function _HAS_PED_CLEAR_LOS_TO_ENTITY(_ped: Ped; para_entity: Entity; x, y, z: cfloat; p5: cint; p6, p7: BOOL): BOOL;
begin
  nativeInit(UINT64($A32ABFEB2A03B306));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function GET_SEAT_PED_IS_TRYING_TO_ENTER(_ped: Ped): cint;
begin
  nativeInit(UINT64($6F4C85ACD641BCD2));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_PED_IS_TRYING_TO_ENTER(_ped: Ped): Vehicle;
begin
  nativeInit(UINT64($814FA8BE5449445D));
  nativePush64(UINT64(_ped));
  exit(Vehicle(nativeCall^));
end;

function GET_PED_SOURCE_OF_DEATH(_ped: Ped): Entity;
begin
  nativeInit(UINT64($93C8B64DEB84728C));
  nativePush64(UINT64(_ped));
  exit(Entity(nativeCall^));
end;

function GET_PED_CAUSE_OF_DEATH(_ped: Ped): Hash;
begin
  nativeInit(UINT64($16FFE42AB2D2DC59));
  nativePush64(UINT64(_ped));
  exit(Hash(nativeCall^));
end;

function GET_PED_TIME_OF_DEATH(_ped: Ped): cint;
begin
  nativeInit(UINT64($1E98817B311AE98A));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function COUNT_PEDS_IN_COMBAT_WITH_TARGET(_ped: Ped): cint;
begin
  nativeInit(UINT64($5407B7288D0478B7));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(_ped: Ped; x, y, z, radius: cfloat): cint;
begin
  nativeInit(UINT64($336B3D200AB007CB));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(cint(nativeCall^));
end;

procedure SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(_ped: Ped; para_hash: Hash);
begin
  nativeInit(UINT64($ADB3F206518799E8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

procedure SET_PED_RELATIONSHIP_GROUP_HASH(_ped: Ped; para_hash: Hash);
begin
  nativeInit(UINT64($C80A74AC829DDD92));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

procedure SET_RELATIONSHIP_BETWEEN_GROUPS(relationship: cint; group1, group2: Hash);
begin
  nativeInit(UINT64($BF25EB89375A37AD));
  nativePush64(UINT64(relationship));
  nativePush64(UINT64(group1));
  nativePush64(UINT64(group2));
  nativeCall;
end;

procedure CLEAR_RELATIONSHIP_BETWEEN_GROUPS(relationship: cint; group1, group2: Hash);
begin
  nativeInit(UINT64($5E29243FB56FC6D4));
  nativePush64(UINT64(relationship));
  nativePush64(UINT64(group1));
  nativePush64(UINT64(group2));
  nativeCall;
end;

function ADD_RELATIONSHIP_GROUP(name: PChar; groupHash: PHash): BOOL;
begin
  nativeInit(UINT64($F372BC22FCB88606));
  nativePush64(UINT64(name));
  nativePush64(UINT64(groupHash));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_RELATIONSHIP_GROUP(groupHash: Hash);
begin
  nativeInit(UINT64($B6BA2444AB393DA2));
  nativePush64(UINT64(groupHash));
  nativeCall;
end;

function DOES_RELATIONSHIP_GROUP_EXIST(groupHash: Hash): BOOL;
begin
  nativeInit(UINT64($CC6E3B6BB69501F1));
  nativePush64(UINT64(groupHash));
  exit(BOOL(nativeCall^));
end;

function GET_RELATIONSHIP_BETWEEN_PEDS(ped1, ped2: Ped): cint;
begin
  nativeInit(UINT64($EBA5AD3A0EAF7121));
  nativePush64(UINT64(ped1));
  nativePush64(UINT64(ped2));
  exit(cint(nativeCall^));
end;

function GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(_ped: Ped): Hash;
begin
  nativeInit(UINT64($42FDD0F017B1E38E));
  nativePush64(UINT64(_ped));
  exit(Hash(nativeCall^));
end;

function GET_PED_RELATIONSHIP_GROUP_HASH(_ped: Ped): Hash;
begin
  nativeInit(UINT64($7DBDD04862D95F04));
  nativePush64(UINT64(_ped));
  exit(Hash(nativeCall^));
end;

function GET_RELATIONSHIP_BETWEEN_GROUPS(group1, group2: Hash): cint;
begin
  nativeInit(UINT64($9E6B70061662AE5C));
  nativePush64(UINT64(group1));
  nativePush64(UINT64(group2));
  exit(cint(nativeCall^));
end;

procedure SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(group: Hash; p1: BOOL);
begin
  nativeInit(UINT64($5615E0C5EB2BC6E2));
  nativePush64(UINT64(group));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(_ped: Ped; p1: Any; p2: cfloat; para_hash: Hash; p4, p5: Any);
begin
  nativeInit(UINT64($AD27D957598E49E9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($4328652AE5769C71));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_TO_INFORM_RESPECTED_FRIENDS(_ped: Ped; radius: cfloat; maxFriends: cint);
begin
  nativeInit(UINT64($112942C6E708F70B));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(maxFriends));
  nativeCall;
end;

function IS_PED_RESPONDING_TO_EVENT(_ped: Ped; event: Any): BOOL;
begin
  nativeInit(UINT64($625B774D75C87068));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(event));
  exit(BOOL(nativeCall^));
end;

function GET_POS_FROM_FIRED_EVENT(_ped: Ped; eventType: cint; outData: PAny): BOOL;
begin
  nativeInit(UINT64($BA656A3BB01BDEA3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(eventType));
  nativePush64(UINT64(outData));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_FIRING_PATTERN(_ped: Ped; patternHash: Hash);
begin
  nativeInit(UINT64($9AC577F5A12AD8A9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(patternHash));
  nativeCall;
end;

procedure SET_PED_SHOOT_RATE(_ped: Ped; shootRate: cint);
begin
  nativeInit(UINT64($614DA022990752DC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(shootRate));
  nativeCall;
end;

procedure SET_COMBAT_FLOAT(_ped: Ped; combatType: cint; p2: cfloat);
begin
  nativeInit(UINT64($FF41B4B141ED981C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(combatType));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

function GET_COMBAT_FLOAT(_ped: Ped; p1: cint): cfloat;
begin
  nativeInit(UINT64($52DFF8A10508090A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure GET_GROUP_SIZE(groupID: cint; p1: PAny; sizeInMembers: pcint);
begin
  nativeInit(UINT64($8DE69FE35CA09A45));
  nativePush64(UINT64(groupID));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(sizeInMembers));
  nativeCall;
end;

function DOES_GROUP_EXIST(groupId: cint): BOOL;
begin
  nativeInit(UINT64($7C6B0C22F9F40BBE));
  nativePush64(UINT64(groupId));
  exit(BOOL(nativeCall^));
end;

function GET_PED_GROUP_INDEX(_ped: Ped): cint;
begin
  nativeInit(UINT64($F162E133B4E7A675));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function IS_PED_IN_GROUP(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($5891CAC5D4ACFF74));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_PLAYER_PED_IS_FOLLOWING(_ped: Ped): Player;
begin
  nativeInit(UINT64($6A3975DEA89F9A17));
  nativePush64(UINT64(_ped));
  exit(Player(nativeCall^));
end;

procedure SET_GROUP_FORMATION(groupId, formationType: cint);
begin
  nativeInit(UINT64($CE2F5FC3AF7E8C1E));
  nativePush64(UINT64(groupId));
  nativePush64(UINT64(formationType));
  nativeCall;
end;

procedure SET_GROUP_FORMATION_SPACING(groupId: cint; x, y, z: cfloat);
begin
  nativeInit(UINT64($1D9D45004C28C916));
  nativePush64(UINT64(groupId));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure RESET_GROUP_FORMATION_DEFAULT_SPACING(groupHandle: cint);
begin
  nativeInit(UINT64($63DAB4CCB3273205));
  nativePush64(UINT64(groupHandle));
  nativeCall;
end;

function GET_VEHICLE_PED_IS_USING(_ped: Ped): Vehicle;
begin
  nativeInit(UINT64($6094AD011A2EA87D));
  nativePush64(UINT64(_ped));
  exit(Vehicle(nativeCall^));
end;

function GET_VEHICLE_PED_IS_ENTERING(_ped: Ped): Vehicle;
begin
  nativeInit(UINT64($F92691AED837A5FC));
  nativePush64(UINT64(_ped));
  exit(Vehicle(nativeCall^));
end;

procedure SET_PED_GRAVITY(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($9FF447B6B6AD960A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure APPLY_DAMAGE_TO_PED(_ped: Ped; damageAmount: cint; p2: BOOL; p3: Any; weaponType: Hash);
begin
  nativeInit(UINT64($697157CED63F18D4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(damageAmount));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(weaponType));
  nativeCall;
end;

function GET_TIME_PED_DAMAGED_BY_WEAPON(_ped: Ped; weaponHash: Hash): cint;
begin
  nativeInit(UINT64($36B77BB84687C318));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

procedure SET_PED_ALLOWED_TO_DUCK(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($DA1F1B7BE1A8766F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_NEVER_LEAVES_GROUP(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($3DBFC55D5C9BB447));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_PED_TYPE(_ped: Ped): cint;
begin
  nativeInit(UINT64($FF059E1E4C01E63C));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_AS_COP(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($BB03C38DD3FB7FFD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(toggle: BOOL);
begin
  nativeInit(UINT64($B3352E018D6F89DF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_MAX_HEALTH(_ped: Ped; value: cint);
begin
  nativeInit(UINT64($F5F6378C4F3419D3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(value));
  nativeCall;
end;

function GET_PED_MAX_HEALTH(_ped: Ped): cint;
begin
  nativeInit(UINT64($4700A416E8324EF3));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_MAX_TIME_IN_WATER(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($43C851690662113D));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_MAX_TIME_UNDERWATER(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($6BA428C528D9E522));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_CORPSE_RAGDOLL_FRICTION(_ped: Ped; p1: cfloat);
begin
  nativeInit(UINT64($2735233A786B1BEF));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PED_VEHICLE_FORCED_SEAT_USAGE(_ped: Ped; veh: Vehicle; seatIndex, flags: cint; p4: Any);
begin
  nativeInit(UINT64($952F06BEECD775CC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(_ped: Ped);
begin
  nativeInit(UINT64($E6CA85E7259CE16B));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_CAN_BE_KNOCKED_OFF_BIKE(p0, p1: Any);
begin
  nativeInit(UINT64($B282749D5E028163));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(_ped: Ped; state: cint);
begin
  nativeInit(UINT64($7A6535691B477C48));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(state));
  nativeCall;
end;

function CAN_KNOCK_PED_OFF_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($51AC07A44D4F5B8A));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure KNOCK_PED_OFF_VEHICLE(_ped: Ped);
begin
  nativeInit(UINT64($45BBCBA77C29A841));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_COORDS_NO_GANG(_ped: Ped; posX, posY, posZ: cfloat);
begin
  nativeInit(UINT64($87052FE446E07247));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativeCall;
end;

function GET_PED_AS_GROUP_MEMBER(groupID, memberNumber: cint): Ped;
begin
  nativeInit(UINT64($51455483CF23ED97));
  nativePush64(UINT64(groupID));
  nativePush64(UINT64(memberNumber));
  exit(Ped(nativeCall^));
end;

function GET_PED_AS_GROUP_LEADER(groupID: cint): Ped;
begin
  nativeInit(UINT64($5CCE68DBD5FE93EC));
  nativePush64(UINT64(groupID));
  exit(Ped(nativeCall^));
end;

procedure SET_PED_KEEP_TASK(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($971D38760FBC02EF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($49E50BDB8BA4DAB2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_SWIMMING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($9DE327631295B4C2));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_SWIMMING_UNDER_WATER(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($C024869A53992F34));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_COORDS_KEEP_VEHICLE(_ped: Ped; posX, posY, posZ: cfloat);
begin
  nativeInit(UINT64($9AFEFF481A85AB2E));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativeCall;
end;

procedure SET_PED_DIES_IN_VEHICLE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($2A30922C90C9B42C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CREATE_RANDOM_COPS(toggle: BOOL);
begin
  nativeInit(UINT64($102E68B2024D536D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(toggle: BOOL);
begin
  nativeInit(UINT64($8A4986851C4EF6E7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CREATE_RANDOM_COPS_ON_SCENARIOS(toggle: BOOL);
begin
  nativeInit(UINT64($444CB7D7DBE6973D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function CAN_CREATE_RANDOM_COPS: BOOL;
begin
  nativeInit(UINT64($5EE2CAFF7F17770D));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_AS_ENEMY(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($02A0C9720B854BFA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_SMASH_GLASS(_ped: Ped; p1, p2: BOOL);
begin
  nativeInit(UINT64($1CCE141467FF42A2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_PED_IN_ANY_TRAIN(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($6F972C1AB75A1ED0));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_GETTING_INTO_A_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($BB062B2B5722478E));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($44D28D5DDFE5F68C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_ENABLE_HANDCUFFS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($DF1AF8B5D56542FA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENABLE_BOUND_ANKLES(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($C52E0F855C58FC2E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENABLE_SCUBA(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($F99F62004024D506));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CAN_ATTACK_FRIENDLY(_ped: Ped; toggle, p2: BOOL);
begin
  nativeInit(UINT64($B3B1CB349FF9C75D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function GET_PED_ALERTNESS(_ped: Ped): cint;
begin
  nativeInit(UINT64($F6AA118530443FD2));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_ALERTNESS(_ped: Ped; value: cint);
begin
  nativeInit(UINT64($DBA71115ED9941A6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($BC0ED94165A48BC2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_MOVEMENT_CLIPSET(_ped: Ped; clipSet: PChar; transitionSpeed: cfloat);
begin
  nativeInit(UINT64($AF8A94EDE7712BEF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(clipSet));
  nativePush64(PUINT64(@transitionSpeed)^);
  nativeCall;
end;

procedure RESET_PED_MOVEMENT_CLIPSET(_ped: Ped; p1: cfloat);
begin
  nativeInit(UINT64($AA74EC0CB0AAEA2C));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PED_STRAFE_CLIPSET(_ped: Ped; clipSet: PChar);
begin
  nativeInit(UINT64($29A28F3F8CF6D854));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(clipSet));
  nativeCall;
end;

procedure RESET_PED_STRAFE_CLIPSET(_ped: Ped);
begin
  nativeInit(UINT64($20510814175EA477));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_WEAPON_MOVEMENT_CLIPSET(_ped: Ped; clipSet: PChar);
begin
  nativeInit(UINT64($2622E35B77D3ACA2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(clipSet));
  nativeCall;
end;

procedure RESET_PED_WEAPON_MOVEMENT_CLIPSET(_ped: Ped);
begin
  nativeInit(UINT64($97B0DB5B4AA74E77));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(_ped: Ped; clipset: PChar);
begin
  nativeInit(UINT64($ED34AB6C5CB36520));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(clipset));
  nativeCall;
end;

procedure CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(_ped: Ped);
begin
  nativeInit(UINT64($4AFE3690D7E0B5AC));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(_ped: Ped; p1: PChar);
begin
  nativeInit(UINT64($9DBA107B4937F809));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(_ped: Ped);
begin
  nativeInit(UINT64($C79196DCB36F6121));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(_ped: Ped);
begin
  nativeInit(UINT64($80054D7FCC70EEC6));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_IN_VEHICLE_CONTEXT(_ped: Ped; context: Hash);
begin
  nativeInit(UINT64($530071295899A8C6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(context));
  nativeCall;
end;

procedure RESET_PED_IN_VEHICLE_CONTEXT(_ped: Ped);
begin
  nativeInit(UINT64($22EF8FF8778030EB));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(_ped: Ped; animDict, anim: PChar): BOOL;
begin
  nativeInit(UINT64($6EC47A344923E1ED));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(anim));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_ALTERNATE_WALK_ANIM(_ped: Ped; animDict, animName: PChar; p3: cfloat; p4: BOOL);
begin
  nativeInit(UINT64($6C60394CB4F75E9A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure CLEAR_PED_ALTERNATE_WALK_ANIM(_ped: Ped; p1: cfloat);
begin
  nativeInit(UINT64($8844BBFCE30AA9E9));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PED_ALTERNATE_MOVEMENT_ANIM(_ped: Ped; stance: cint; animDictionary, animationName: PChar; p4: cfloat; p5: BOOL);
begin
  nativeInit(UINT64($90A43CC281FFAB46));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(stance));
  nativePush64(UINT64(animDictionary));
  nativePush64(UINT64(animationName));
  nativePush64(PUINT64(@p4)^);
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(_ped: Ped; stance: cint; p2: cfloat);
begin
  nativeInit(UINT64($D8D19675ED5FBDCE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(stance));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure SET_PED_GESTURE_GROUP(_ped: Ped; animGroupGesture: PChar);
begin
  nativeInit(UINT64($DDF803377F94AAA8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animGroupGesture));
  nativeCall;
end;

function GET_ANIM_INITIAL_OFFSET_POSITION(animDict, animName: PChar; x, y, z, xRot, yRot, zRot, p8: cfloat; p9: cint): Vector3;
begin
  nativeInit(UINT64($BE22B26DD764C040));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(UINT64(p9));
  exit(PVector3(nativeCall)^);
end;

function GET_ANIM_INITIAL_OFFSET_ROTATION(animDict, animName: PChar; x, y, z, xRot, yRot, zRot, p8: cfloat; p9: cint): Vector3;
begin
  nativeInit(UINT64($4B805E6046EE9E47));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(UINT64(p9));
  exit(PVector3(nativeCall)^);
end;

function GET_PED_DRAWABLE_VARIATION(_ped: Ped; componentId: cint): cint;
begin
  nativeInit(UINT64($67F3780DD425D4FC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  exit(cint(nativeCall^));
end;

function GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(_ped: Ped; componentId: cint): cint;
begin
  nativeInit(UINT64($27561561732A7842));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  exit(cint(nativeCall^));
end;

function GET_PED_TEXTURE_VARIATION(_ped: Ped; componentId: cint): cint;
begin
  nativeInit(UINT64($04A355E041E004E6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  exit(cint(nativeCall^));
end;

function GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(_ped: Ped; componentId, drawableId: cint): cint;
begin
  nativeInit(UINT64($8F7156A3142A6BAD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableId));
  exit(cint(nativeCall^));
end;

function GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(_ped: Ped; propId: cint): cint;
begin
  nativeInit(UINT64($5FAF9754E789FB47));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(propId));
  exit(cint(nativeCall^));
end;

function GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(_ped: Ped; propId, drawableId: cint): cint;
begin
  nativeInit(UINT64($A6E7F1CEB523E171));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(propId));
  nativePush64(UINT64(drawableId));
  exit(cint(nativeCall^));
end;

function GET_PED_PALETTE_VARIATION(_ped: Ped; componentId: cint): cint;
begin
  nativeInit(UINT64($E3DD5F2A84B42281));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  exit(cint(nativeCall^));
end;

function GET_MP_OUTFIT_DATA_FROM_METADATA(p0, p1: PAny): BOOL;
begin
  nativeInit(UINT64($9E30E91FB03A2CAF));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(p0: cint): cint;
begin
  nativeInit(UINT64($1E77FA7A62EE6C4C));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(p0: cint): cint;
begin
  nativeInit(UINT64($F033419D1B81FAE8));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function IS_PED_COMPONENT_VARIATION_VALID(_ped: Ped; componentId, drawableId, textureId: cint): BOOL;
begin
  nativeInit(UINT64($E825F6B6CEA7671D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(textureId));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_COMPONENT_VARIATION(_ped: Ped; componentId, drawableId, textureId, paletteId: cint);
begin
  nativeInit(UINT64($262B14F48D29DE80));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(textureId));
  nativePush64(UINT64(paletteId));
  nativeCall;
end;

procedure SET_PED_RANDOM_COMPONENT_VARIATION(_ped: Ped; p1: cint);
begin
  nativeInit(UINT64($C8A9481A01E63C28));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_RANDOM_PROPS(_ped: Ped);
begin
  nativeInit(UINT64($C44AA05345C992C6));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_DEFAULT_COMPONENT_VARIATION(_ped: Ped);
begin
  nativeInit(UINT64($45EEE61580806D63));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_BLEND_FROM_PARENTS(_ped: Ped; p1, p2: Any; p3, p4: cfloat);
begin
  nativeInit(UINT64($137BBD05230DB22D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativeCall;
end;

procedure SET_PED_HEAD_BLEND_DATA(_ped: Ped; shapeFirstID, shapeSecondID, shapeThirdID, skinFirstID, skinSecondID, skinThirdID: cint; shapeMix, skinMix, thirdMix: cfloat; isParent: BOOL);
begin
  nativeInit(UINT64($9414E18B9434C2FE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(shapeFirstID));
  nativePush64(UINT64(shapeSecondID));
  nativePush64(UINT64(shapeThirdID));
  nativePush64(UINT64(skinFirstID));
  nativePush64(UINT64(skinSecondID));
  nativePush64(UINT64(skinThirdID));
  nativePush64(PUINT64(@shapeMix)^);
  nativePush64(PUINT64(@skinMix)^);
  nativePush64(PUINT64(@thirdMix)^);
  nativePush64(UINT64(isParent));
  nativeCall;
end;

function GET_PED_HEAD_BLEND_DATA(_ped: Ped; headBlendData: PAny): BOOL;
begin
  nativeInit(UINT64($2746BD9D88C5C5D0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(headBlendData));
  exit(BOOL(nativeCall^));
end;

procedure UPDATE_PED_HEAD_BLEND_DATA(_ped: Ped; shapeMix, skinMix, thirdMix: cfloat);
begin
  nativeInit(UINT64($723538F61C647C5A));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@shapeMix)^);
  nativePush64(PUINT64(@skinMix)^);
  nativePush64(PUINT64(@thirdMix)^);
  nativeCall;
end;

procedure SET_HEAD_BLEND_EYE_COLOR(_ped: Ped; index: cint);
begin
  nativeInit(UINT64($50B56988B170AFDF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(index));
  nativeCall;
end;

function GET_HEAD_BLEND_EYE_COLOR(_ped: Ped): cint;
begin
  nativeInit(UINT64($76BBA2CEE66D47E9));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_HEAD_OVERLAY(_ped: Ped; overlayID, index: cint; opacity: cfloat);
begin
  nativeInit(UINT64($48F44967FA05CC1E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(overlayID));
  nativePush64(UINT64(index));
  nativePush64(PUINT64(@opacity)^);
  nativeCall;
end;

function GET_PED_HEAD_OVERLAY(_ped: Ped; overlayID: cint): cint;
begin
  nativeInit(UINT64($A60EF3B6461A4D43));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(overlayID));
  exit(cint(nativeCall^));
end;

function GET_PED_HEAD_OVERLAY_NUM(overlayID: cint): cint;
begin
  nativeInit(UINT64($CF1CE768BB43480E));
  nativePush64(UINT64(overlayID));
  exit(cint(nativeCall^));
end;

procedure SET_PED_HEAD_OVERLAY_TINT(_ped: Ped; overlayID, colorType, colorID, secondColorID: cint);
begin
  nativeInit(UINT64($497BF74A7B9CB952));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(overlayID));
  nativePush64(UINT64(colorType));
  nativePush64(UINT64(colorID));
  nativePush64(UINT64(secondColorID));
  nativeCall;
end;

procedure SET_PED_HAIR_TINT(_ped: Ped; colorID, highlightColorID: cint);
begin
  nativeInit(UINT64($4CFFC65454C93A49));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(colorID));
  nativePush64(UINT64(highlightColorID));
  nativeCall;
end;

function GET_NUM_PED_HAIR_TINTS: cint;
begin
  nativeInit(UINT64($E5C0CF872C2AD150));
  exit(cint(nativeCall^));
end;

function GET_NUM_PED_MAKEUP_TINTS: cint;
begin
  nativeInit(UINT64($D1F7CA1535D22818));
  exit(cint(nativeCall^));
end;

procedure GET_PED_HAIR_TINT_COLOR(hairColorIndex: cint; outR, outG, outB: pcint);
begin
  nativeInit(UINT64($4852FC386E2E1BB5));
  nativePush64(UINT64(hairColorIndex));
  nativePush64(UINT64(outR));
  nativePush64(UINT64(outG));
  nativePush64(UINT64(outB));
  nativeCall;
end;

procedure GET_PED_MAKEUP_TINT_COLOR(makeupColorIndex: cint; outR, outG, outB: pcint);
begin
  nativeInit(UINT64($013E5CFC38CD5387));
  nativePush64(UINT64(makeupColorIndex));
  nativePush64(UINT64(outR));
  nativePush64(UINT64(outG));
  nativePush64(UINT64(outB));
  nativeCall;
end;

function IS_PED_HAIR_TINT_FOR_CREATOR(colorId: cint): BOOL;
begin
  nativeInit(UINT64($ED6D8E27A43B8CDE));
  nativePush64(UINT64(colorId));
  exit(BOOL(nativeCall^));
end;

function GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(colorId: cint): cint;
begin
  nativeInit(UINT64($EA9960D07DADCF10));
  nativePush64(UINT64(colorId));
  exit(cint(nativeCall^));
end;

function IS_PED_LIPSTICK_TINT_FOR_CREATOR(colorId: cint): BOOL;
begin
  nativeInit(UINT64($3E802F11FBE27674));
  nativePush64(UINT64(colorId));
  exit(BOOL(nativeCall^));
end;

function IS_PED_BLUSH_TINT_FOR_CREATOR(colorId: cint): BOOL;
begin
  nativeInit(UINT64($F41B5D290C99A3D6));
  nativePush64(UINT64(colorId));
  exit(BOOL(nativeCall^));
end;

function IS_PED_HAIR_TINT_FOR_BARBER(colorID: cint): BOOL;
begin
  nativeInit(UINT64($E0D36E5D9E99CC21));
  nativePush64(UINT64(colorID));
  exit(BOOL(nativeCall^));
end;

function GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(colorID: cint): cint;
begin
  nativeInit(UINT64($AAA6A3698A69E048));
  nativePush64(UINT64(colorID));
  exit(cint(nativeCall^));
end;

function IS_PED_LIPSTICK_TINT_FOR_BARBER(colorID: cint): BOOL;
begin
  nativeInit(UINT64($0525A2C2562F3CD4));
  nativePush64(UINT64(colorID));
  exit(BOOL(nativeCall^));
end;

function IS_PED_BLUSH_TINT_FOR_BARBER(colorID: cint): BOOL;
begin
  nativeInit(UINT64($604E810189EE3A59));
  nativePush64(UINT64(colorID));
  exit(BOOL(nativeCall^));
end;

function IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(colorId: cint): BOOL;
begin
  nativeInit(UINT64($09E7ECA981D9B210));
  nativePush64(UINT64(colorId));
  exit(BOOL(nativeCall^));
end;

function GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(modelHash: Hash; drawableId, textureId: cint): cint;
begin
  nativeInit(UINT64($C56FBF2F228E1DAC));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(textureId));
  exit(cint(nativeCall^));
end;

procedure SET_PED_MICRO_MORPH(_ped: Ped; index: cint; scale: cfloat);
begin
  nativeInit(UINT64($71A5C1DBA060049E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(index));
  nativePush64(PUINT64(@scale)^);
  nativeCall;
end;

function HAS_PED_HEAD_BLEND_FINISHED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($654CD0A825161131));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure FINALIZE_HEAD_BLEND(_ped: Ped);
begin
  nativeInit(UINT64($4668D80430D6C299));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_HEAD_BLEND_PALETTE_COLOR(_ped: Ped; r, g, b, id: cint);
begin
  nativeInit(UINT64($CC9682B8951C5229));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure DISABLE_HEAD_BLEND_PALETTE_COLOR(_ped: Ped);
begin
  nativeInit(UINT64($A21C118553BBDF02));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function GET_PED_HEAD_BLEND_FIRST_INDEX(_type: cint): cint;
begin
  nativeInit(UINT64($68D353AB88B97E0C));
  nativePush64(UINT64(_type));
  exit(cint(nativeCall^));
end;

function GET_PED_HEAD_BLEND_NUM_HEADS(_type: cint): cint;
begin
  nativeInit(UINT64($5EF37013A6539C9D));
  nativePush64(UINT64(_type));
  exit(cint(nativeCall^));
end;

function SET_PED_PRELOAD_VARIATION_DATA(_ped: Ped; slot, drawableId, textureId: cint): cint;
begin
  nativeInit(UINT64($39D55A620FCB6A3A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(slot));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(textureId));
  exit(cint(nativeCall^));
end;

function HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($66680A92700F43DF));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure RELEASE_PED_PRELOAD_VARIATION_DATA(_ped: Ped);
begin
  nativeInit(UINT64($5AAB586FFEC0FD96));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function SET_PED_PRELOAD_PROP_DATA(_ped: Ped; componentId, drawableId, TextureId: cint): cint;
begin
  nativeInit(UINT64($2B16A3BFF1FBCE49));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(TextureId));
  exit(cint(nativeCall^));
end;

function HAS_PED_PRELOAD_PROP_DATA_FINISHED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($784002A632822099));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure RELEASE_PED_PRELOAD_PROP_DATA(_ped: Ped);
begin
  nativeInit(UINT64($F79F9DEF0AADE61A));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function GET_PED_PROP_INDEX(_ped: Ped; componentId: cint; p2: Any): cint;
begin
  nativeInit(UINT64($898CC20EA75BACD8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

procedure SET_PED_PROP_INDEX(_ped: Ped; componentId, drawableId, TextureId: cint; attach: BOOL; p5: Any);
begin
  nativeInit(UINT64($93376B65A266EB5F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  nativePush64(UINT64(drawableId));
  nativePush64(UINT64(TextureId));
  nativePush64(UINT64(attach));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure KNOCK_OFF_PED_PROP(_ped: Ped; p1, p2, p3, p4: BOOL);
begin
  nativeInit(UINT64($6FD7816A36615F48));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure CLEAR_PED_PROP(_ped: Ped; propId: cint; p2: Any);
begin
  nativeInit(UINT64($0943E5B8E078E76E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(propId));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure CLEAR_ALL_PED_PROPS(_ped: Ped; p1: Any);
begin
  nativeInit(UINT64($CD8A7537A9B52F06));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure DROP_AMBIENT_PROP(_ped: Ped);
begin
  nativeInit(UINT64($AFF4710E2A0A6C12));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function GET_PED_PROP_TEXTURE_INDEX(_ped: Ped; componentId: cint): cint;
begin
  nativeInit(UINT64($E131A28626F81AB2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(componentId));
  exit(cint(nativeCall^));
end;

procedure CLEAR_PED_PARACHUTE_PACK_VARIATION(_ped: Ped);
begin
  nativeInit(UINT64($1280804F7CFD2D6C));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_SCUBA_GEAR_VARIATION(_ped: Ped);
begin
  nativeInit(UINT64($36C6984C3ED0C911));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure CLEAR_PED_SCUBA_GEAR_VARIATION(_ped: Ped);
begin
  nativeInit(UINT64($B50EB4CCB29704AC));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_USING_PED_SCUBA_GEAR_VARIATION(p0: Any): BOOL;
begin
  nativeInit(UINT64($FEC9A3B1820F3331));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($9F8AA94D6D97DBF4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_BOUNDS_ORIENTATION(_ped: Ped; p1, p2, x, y, z: cfloat);
begin
  nativeInit(UINT64($4F5F651ACCC9C4CF));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure REGISTER_TARGET(_ped, target: Ped);
begin
  nativeInit(UINT64($2F25D9AEFA34FBA2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativeCall;
end;

procedure REGISTER_HATED_TARGETS_AROUND_PED(_ped: Ped; radius: cfloat);
begin
  nativeInit(UINT64($9222F300BF8354FE));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

function GET_RANDOM_PED_AT_COORD(x, y, z, xRadius, yRadius, zRadius: cfloat; pedType: cint): Ped;
begin
  nativeInit(UINT64($876046A8E3A4B71C));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@xRadius)^);
  nativePush64(PUINT64(@yRadius)^);
  nativePush64(PUINT64(@zRadius)^);
  nativePush64(UINT64(pedType));
  exit(Ped(nativeCall^));
end;

function GET_CLOSEST_PED(x, y, z, radius: cfloat; p4, p5: BOOL; outPed: PPed; p7, p8: BOOL; pedType: cint): BOOL;
begin
  nativeInit(UINT64($C33AB876A77F8164));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(outPed));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(pedType));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(value: BOOL);
begin
  nativeInit(UINT64($14F19A8782C8071E));
  nativePush64(UINT64(value));
  nativeCall;
end;

function GET_CAN_PED_BE_GRABBED_BY_SCRIPT(_ped: Ped; p1, p2, p3, p4, p5, p6, p7: BOOL; p8: Any): BOOL;
begin
  nativeInit(UINT64($03EA03AF85A85CB7));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(BOOL(nativeCall^));
end;

procedure SET_DRIVER_RACING_MODIFIER(driver: Ped; modifier: cfloat);
begin
  nativeInit(UINT64($DED5AF5A0EA4B297));
  nativePush64(UINT64(driver));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_DRIVER_ABILITY(driver: Ped; ability: cfloat);
begin
  nativeInit(UINT64($B195FFA8042FC5C3));
  nativePush64(UINT64(driver));
  nativePush64(PUINT64(@ability)^);
  nativeCall;
end;

procedure SET_DRIVER_AGGRESSIVENESS(driver: Ped; aggressiveness: cfloat);
begin
  nativeInit(UINT64($A731F608CA104E3C));
  nativePush64(UINT64(driver));
  nativePush64(PUINT64(@aggressiveness)^);
  nativeCall;
end;

function CAN_PED_RAGDOLL(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($128F79EDCECE4FD5));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function SET_PED_TO_RAGDOLL(_ped: Ped; time1, time2, ragdollType: cint; p4, p5, p6: BOOL): BOOL;
begin
  nativeInit(UINT64($AE99FB955581844A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(time1));
  nativePush64(UINT64(time2));
  nativePush64(UINT64(ragdollType));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(BOOL(nativeCall^));
end;

function SET_PED_TO_RAGDOLL_WITH_FALL(_ped: Ped; time, p2, ragdollType: cint; x, y, z, velocity, p8, p9, p10, p11, p12, p13: cfloat): BOOL;
begin
  nativeInit(UINT64($D76632D99E4966C8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(time));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(ragdollType));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@velocity)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@p10)^);
  nativePush64(PUINT64(@p11)^);
  nativePush64(PUINT64(@p12)^);
  nativePush64(PUINT64(@p13)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_RAGDOLL_ON_COLLISION(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($F0A4F1BBF4FA7497));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_RAGDOLL(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($47E4E977581C5B55));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_RUNNING_RAGDOLL_TASK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($E3B6097CC25AA69E));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_RAGDOLL_FORCE_FALL(_ped: Ped);
begin
  nativeInit(UINT64($01F6594B923B9251));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure RESET_PED_RAGDOLL_TIMER(_ped: Ped);
begin
  nativeInit(UINT64($9FA4664CF62E47E8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_CAN_RAGDOLL(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($B128377056A54E2A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_RUNNING_MELEE_TASK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($D1871251F3B5ACD7));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_RUNNING_MOBILE_PHONE_TASK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($2AFE52F782F25775));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_MOBILE_PHONE_TO_PED_EAR(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($A3F3564A5B3646C0));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_RAGDOLL_BLOCKING_FLAGS(_ped: Ped; blockingFlag: cint);
begin
  nativeInit(UINT64($26695EC767728D84));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(blockingFlag));
  nativeCall;
end;

procedure CLEAR_RAGDOLL_BLOCKING_FLAGS(_ped: Ped; blockingFlag: cint);
begin
  nativeInit(UINT64($D86D101FCFD00A4B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(blockingFlag));
  nativeCall;
end;

procedure SET_PED_ANGLED_DEFENSIVE_AREA(_ped: Ped; p1, p2, p3, p4, p5, p6, p7: cfloat; p8, p9: BOOL);
begin
  nativeInit(UINT64($C7F76DF27A5045A1));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure SET_PED_SPHERE_DEFENSIVE_AREA(_ped: Ped; x, y, z, radius: cfloat; p5, p6: BOOL);
begin
  nativeInit(UINT64($9D3151A373974804));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(_ped, target: Ped; xOffset, yOffset, zOffset, radius: cfloat; p6: BOOL);
begin
  nativeInit(UINT64($F9B8F91AAD3B953E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(_ped: Ped; target: Vehicle; xOffset, yOffset, zOffset, radius: cfloat; p6: BOOL);
begin
  nativeInit(UINT64($E4723DB6E736CCFF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(_ped, attachPed: Ped; p2, p3, p4, p5, p6, p7, p8: cfloat; p9, p10: BOOL);
begin
  nativeInit(UINT64($4EF47FE21698A8B6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(attachPed));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativeCall;
end;

procedure SET_PED_DEFENSIVE_AREA_DIRECTION(_ped: Ped; p1, p2, p3: cfloat; p4: BOOL);
begin
  nativeInit(UINT64($413C6C763A4AFFAD));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure REMOVE_PED_DEFENSIVE_AREA(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($74D4E028107450A9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_PED_DEFENSIVE_AREA_POSITION(_ped: Ped; p1: BOOL): Vector3;
begin
  nativeInit(UINT64($3C06B8786DD94CD1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(PVector3(nativeCall)^);
end;

function IS_PED_DEFENSIVE_AREA_ACTIVE(_ped: Ped; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($BA63D9FE45412247));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_PREFERRED_COVER_SET(_ped: Ped; itemSet: Any);
begin
  nativeInit(UINT64($8421EB4DA7E391B9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(itemSet));
  nativeCall;
end;

procedure REMOVE_PED_PREFERRED_COVER_SET(_ped: Ped);
begin
  nativeInit(UINT64($FDDB234CF74073D9));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure REVIVE_INJURED_PED(_ped: Ped);
begin
  nativeInit(UINT64($8D8ACD8388CD99CE));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure RESURRECT_PED(_ped: Ped);
begin
  nativeInit(UINT64($71BC8E838B9C6035));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_NAME_DEBUG(_ped: Ped; name: PChar);
begin
  nativeInit(UINT64($98EFA132A4117BE1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(name));
  nativeCall;
end;

function GET_PED_EXTRACTED_DISPLACEMENT(_ped: Ped; worldSpace: BOOL): Vector3;
begin
  nativeInit(UINT64($E0AF41401ADF87E3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(worldSpace));
  exit(PVector3(nativeCall)^);
end;

procedure SET_PED_DIES_WHEN_INJURED(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($5BA7919BED300023));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_ENABLE_WEAPON_BLOCKING(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($97A790315D3831FD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SPECIAL_FUNCTION_DO_NOT_USE(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($F9ACF4A08098EA25));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure RESET_PED_VISIBLE_DAMAGE(_ped: Ped);
begin
  nativeInit(UINT64($3AC1F7B898F30C05));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure APPLY_PED_BLOOD_DAMAGE_BY_ZONE(_ped: Ped; p1: Any; p2, p3: cfloat; p4: Any);
begin
  nativeInit(UINT64($816F6981C60BF53B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure APPLY_PED_BLOOD(_ped: Ped; boneIndex: cint; xRot, yRot, zRot: cfloat; woundType: PChar);
begin
  nativeInit(UINT64($83F7E01C7B769A26));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boneIndex));
  nativePush64(PUINT64(@xRot)^);
  nativePush64(PUINT64(@yRot)^);
  nativePush64(PUINT64(@zRot)^);
  nativePush64(UINT64(woundType));
  nativeCall;
end;

procedure APPLY_PED_BLOOD_BY_ZONE(_ped: Ped; p1: cint; p2, p3: cfloat; p4: PChar);
begin
  nativeInit(UINT64($3311E47B91EDCBBC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure APPLY_PED_BLOOD_SPECIFIC(_ped: Ped; p1: cint; p2, p3, p4, p5: cfloat; p6: cint; p7: cfloat; p8: PChar);
begin
  nativeInit(UINT64($EF0D582CBF2D9B0F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  nativePush64(PUINT64(@p7)^);
  nativePush64(UINT64(p8));
  nativeCall;
end;

procedure APPLY_PED_DAMAGE_DECAL(_ped: Ped; damageZone: cint; xOffset, yOffset, heading, scale, alpha: cfloat; variation: cint; fadeIn: BOOL; decalName: PChar);
begin
  nativeInit(UINT64($397C38AA7B4A5F83));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(damageZone));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(PUINT64(@scale)^);
  nativePush64(PUINT64(@alpha)^);
  nativePush64(UINT64(variation));
  nativePush64(UINT64(fadeIn));
  nativePush64(UINT64(decalName));
  nativeCall;
end;

procedure APPLY_PED_DAMAGE_PACK(_ped: Ped; damagePack: PChar; damage, mult: cfloat);
begin
  nativeInit(UINT64($46DF918788CB093F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(damagePack));
  nativePush64(PUINT64(@damage)^);
  nativePush64(PUINT64(@mult)^);
  nativeCall;
end;

procedure CLEAR_PED_BLOOD_DAMAGE(_ped: Ped);
begin
  nativeInit(UINT64($8FE22675A5A45817));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(_ped: Ped; p1: cint);
begin
  nativeInit(UINT64($56E3B78C5408D9F4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure HIDE_PED_BLOOD_DAMAGE_BY_ZONE(_ped: Ped; p1: Any; p2: BOOL);
begin
  nativeInit(UINT64($62AB793144DE75DC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure CLEAR_PED_DAMAGE_DECAL_BY_ZONE(_ped: Ped; p1: cint; p2: PChar);
begin
  nativeInit(UINT64($523C79AEEFCC4A2A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function GET_PED_DECORATIONS_STATE(_ped: Ped): cint;
begin
  nativeInit(UINT64($71EAB450D86954A1));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($2B694AFCF64E6994));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure CLEAR_PED_WETNESS(_ped: Ped);
begin
  nativeInit(UINT64($9C720776DAA43E7E));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_WETNESS_HEIGHT(_ped: Ped; height: cfloat);
begin
  nativeInit(UINT64($44CB6447D2571AA0));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@height)^);
  nativeCall;
end;

procedure SET_PED_WETNESS_ENABLED_THIS_FRAME(_ped: Ped);
begin
  nativeInit(UINT64($B5485E4907B53019));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_WETNESS(_ped: Ped; wetLevel: cfloat);
begin
  nativeInit(UINT64($AC0BB4D87777CAE2));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@wetLevel)^);
  nativeCall;
end;

procedure CLEAR_PED_ENV_DIRT(_ped: Ped);
begin
  nativeInit(UINT64($6585D955A68452A5));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_SWEAT(_ped: Ped; sweat: cfloat);
begin
  nativeInit(UINT64($27B0405F59637D1F));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@sweat)^);
  nativeCall;
end;

procedure ADD_PED_DECORATION_FROM_HASHES(_ped: Ped; collection, overlay: Hash);
begin
  nativeInit(UINT64($5F5D1665E352A839));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(collection));
  nativePush64(UINT64(overlay));
  nativeCall;
end;

procedure ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(_ped: Ped; collection, overlay: Hash);
begin
  nativeInit(UINT64($5619BFA07CFD7833));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(collection));
  nativePush64(UINT64(overlay));
  nativeCall;
end;

function GET_PED_DECORATION_ZONE_FROM_HASHES(collection, overlay: Hash): cint;
begin
  nativeInit(UINT64($9FD452BFBE7A7A8B));
  nativePush64(UINT64(collection));
  nativePush64(UINT64(overlay));
  exit(cint(nativeCall^));
end;

procedure CLEAR_PED_DECORATIONS(_ped: Ped);
begin
  nativeInit(UINT64($0E5173C163976E38));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure CLEAR_PED_DECORATIONS_LEAVE_SCARS(_ped: Ped);
begin
  nativeInit(UINT64($E3B27E70CEAB9F0C));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function WAS_PED_SKELETON_UPDATED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($11B499C1E0FF8559));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_PED_BONE_COORDS(_ped: Ped; boneId: cint; offsetX, offsetY, offsetZ: cfloat): Vector3;
begin
  nativeInit(UINT64($17C07FC640E86B4E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boneId));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  exit(PVector3(nativeCall)^);
end;

procedure CREATE_NM_MESSAGE(startImmediately: BOOL; messageId: cint);
begin
  nativeInit(UINT64($418EF2A1BCE56685));
  nativePush64(UINT64(startImmediately));
  nativePush64(UINT64(messageId));
  nativeCall;
end;

procedure GIVE_PED_NM_MESSAGE(_ped: Ped);
begin
  nativeInit(UINT64($B158DFCCC56E5C5B));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function ADD_SCENARIO_BLOCKING_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6, p7, p8, p9: BOOL; p10: Any): cint;
begin
  nativeInit(UINT64($1B5C85C612E5256E));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  exit(cint(nativeCall^));
end;

procedure REMOVE_SCENARIO_BLOCKING_AREAS;
begin
  nativeInit(UINT64($D37401D78A929A49));
  nativeCall;
end;

procedure REMOVE_SCENARIO_BLOCKING_AREA(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($31D16B74C6E29D66));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(x, y, z, range: cfloat; p4: cint);
begin
  nativeInit(UINT64($28157D43CF600981));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@range)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

function DOES_SCENARIO_BLOCKING_AREA_EXISTS(x1, y1, z1, x2, y2, z2: cfloat): BOOL;
begin
  nativeInit(UINT64($8A24B067D175A7BD));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function IS_PED_USING_SCENARIO(_ped: Ped; scenario: PChar): BOOL;
begin
  nativeInit(UINT64($1BF094736DD62C2E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(scenario));
  exit(BOOL(nativeCall^));
end;

function IS_PED_USING_ANY_SCENARIO(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($57AB4A3080F85143));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function SET_PED_PANIC_EXIT_SCENARIO(p0, p1, p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($FE07FF6495D52E2A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure TOGGLE_SCENARIO_PED_COWER_IN_PLACE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($9A77DFD295E29B09));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(p0, p1, p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($25361A96E0F7E419));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(p0, p1, p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($EC6935EBE0847B90));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(_ped: Ped);
begin
  nativeInit(UINT64($A3A9299C4F2ADB98));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(_ped: Ped);
begin
  nativeInit(UINT64($F1C03A5352243A30));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(_ped: Ped; p1, p2, p3: Any): BOOL;
begin
  nativeInit(UINT64($EEED8FAFEC331A70));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($425AECF167663F48));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($5B6010B3CBC29095));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($CEDA60A74219D064));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_PED_GESTURING(p0: Any): BOOL;
begin
  nativeInit(UINT64($C30BDAEE47256C13));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure RESET_FACIAL_IDLE_ANIM(_ped: Ped);
begin
  nativeInit(UINT64($007FDE5A7897E426));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure PLAY_FACIAL_ANIM(_ped: Ped; animName, animDict: PChar);
begin
  nativeInit(UINT64($E1E65CA8AC9C00ED));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(animDict));
  nativeCall;
end;

procedure SET_FACIAL_CLIPSET(_ped: Ped; animDict: PChar);
begin
  nativeInit(UINT64($5687C7F05B39E401));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativeCall;
end;

procedure SET_FACIAL_IDLE_ANIM_OVERRIDE(_ped: Ped; animName, animDict: PChar);
begin
  nativeInit(UINT64($FFC24B988B938B38));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animName));
  nativePush64(UINT64(animDict));
  nativeCall;
end;

procedure CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(_ped: Ped);
begin
  nativeInit(UINT64($726256CC1EEB182F));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_CAN_PLAY_GESTURE_ANIMS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($BAF20C5432058024));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_PLAY_VISEME_ANIMS(_ped: Ped; toggle, p2: BOOL);
begin
  nativeInit(UINT64($F833DDBA3B104D43));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($33A60D8BDD6E508C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CAN_PLAY_AMBIENT_ANIMS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($6373D1349925A70E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($0EB0585D15254740));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure TRIGGER_IDLE_ANIMATION_ON_PED(_ped: Ped);
begin
  nativeInit(UINT64($C2EE020F5FB4DB53));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_CAN_ARM_IK(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($6C3B4D6D13B4C841));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_HEAD_IK(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($C11C18092C5530DC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_LEG_IK(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($73518ECE2485412B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_TORSO_IK(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($F2B7106D37947CE0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_TORSO_REACT_IK(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($F5846EDB26A98A24));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CAN_TORSO_VEHICLE_IK(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($6647C5F6F5792496));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EC4686EC06434678));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_HEADTRACKING_PED(ped1, ped2: Ped): BOOL;
begin
  nativeInit(UINT64($5CD3CB88A7F8850D));
  nativePush64(UINT64(ped1));
  nativePush64(UINT64(ped2));
  exit(BOOL(nativeCall^));
end;

function IS_PED_HEADTRACKING_ENTITY(_ped: Ped; para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($813A0A7C9D2E831F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_PRIMARY_LOOKAT(_ped, lookAt: Ped);
begin
  nativeInit(UINT64($CD17B554996A8D9E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(lookAt));
  nativeCall;
end;

procedure SET_PED_CLOTH_PIN_FRAMES(p0, p1: Any);
begin
  nativeInit(UINT64($78C4E9961DB3EB5B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CLOTH_PACKAGE_INDEX(p0, p1: Any);
begin
  nativeInit(UINT64($82A3D6D9CC2CB8E3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CLOTH_PRONE(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($A660FAF550EB37E5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CONFIG_FLAG(_ped: Ped; flagId: cint; value: BOOL);
begin
  nativeInit(UINT64($1913FE4CBF41C463));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(flagId));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_PED_RESET_FLAG(_ped: Ped; flagId: cint; doReset: BOOL);
begin
  nativeInit(UINT64($C1E8A365BF3B29F2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(flagId));
  nativePush64(UINT64(doReset));
  nativeCall;
end;

function GET_PED_CONFIG_FLAG(_ped: Ped; flagId: cint; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($7EE53118C892B513));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(flagId));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function GET_PED_RESET_FLAG(_ped: Ped; flagId: cint): BOOL;
begin
  nativeInit(UINT64($AF9E59B1B1FBF2A0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(flagId));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_GROUP_MEMBER_PASSENGER_INDEX(_ped: Ped; index: cint);
begin
  nativeInit(UINT64($0BDDB8D9EC6BCF3C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure SET_PED_CAN_EVASIVE_DIVE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($6B7A646C242A7059));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_EVASIVE_DIVING(_ped: Ped; evadingEntity: PEntity): BOOL;
begin
  nativeInit(UINT64($414641C26E105898));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(evadingEntity));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_SHOOTS_AT_COORD(_ped: Ped; x, y, z: cfloat; toggle: BOOL);
begin
  nativeInit(UINT64($96A05E4FB321B1BA));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_MODEL_IS_SUPPRESSED(modelHash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($E163A4BCE4DE6F11));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure STOP_ANY_PED_MODEL_BEING_SUPPRESSED;
begin
  nativeInit(UINT64($B47BD05FA66B40CF));
  nativeCall;
end;

procedure SET_PED_CAN_BE_TARGETED_WHEN_INJURED(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($638C03B0F9878F57));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_GENERATES_DEAD_BODY_EVENTS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($7FB17BA2E7DECA5B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($E43A13C9E4CCCBCF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(p0, p1: Any);
begin
  nativeInit(UINT64($3E9679C1DFCF422C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($DF993EE5E90ABA25));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure GIVE_PED_HELMET(_ped: Ped; cannotRemove: BOOL; helmetFlag, textureIndex: cint);
begin
  nativeInit(UINT64($54C7C4A94367717E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(cannotRemove));
  nativePush64(UINT64(helmetFlag));
  nativePush64(UINT64(textureIndex));
  nativeCall;
end;

procedure REMOVE_PED_HELMET(_ped: Ped; instantly: BOOL);
begin
  nativeInit(UINT64($A7B2458D0AD6DED8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(instantly));
  nativeCall;
end;

function IS_PED_TAKING_OFF_HELMET(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($14590DDBEDB1EC85));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_HELMET(_ped: Ped; canWearHelmet: BOOL);
begin
  nativeInit(UINT64($560A43136EB58105));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(canWearHelmet));
  nativeCall;
end;

procedure SET_PED_HELMET_FLAG(_ped: Ped; helmetFlag: cint);
begin
  nativeInit(UINT64($C0E78D5C2CE3EB25));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(helmetFlag));
  nativeCall;
end;

procedure SET_PED_HELMET_PROP_INDEX(_ped: Ped; propIndex: cint; p2: BOOL);
begin
  nativeInit(UINT64($26D83693ED99291C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(propIndex));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_PED_HELMET_VISOR_PROP_INDICES(_ped: Ped; p1: BOOL; p2, p3: cint);
begin
  nativeInit(UINT64($3F7325574E41B44D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function IS_PED_HELMET_VISOR_UP(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($B9496CE47546DB2C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_HELMET_TEXTURE_INDEX(_ped: Ped; textureIndex: cint);
begin
  nativeInit(UINT64($F1550C4BD22582E2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(textureIndex));
  nativeCall;
end;

function IS_PED_WEARING_HELMET(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($F33BDFE19B309B19));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_PED_STORED_HAT_PROP(_ped: Ped);
begin
  nativeInit(UINT64($687C0B594907D2E8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function GET_PED_HELMET_STORED_HAT_PROP_INDEX(_ped: Ped): cint;
begin
  nativeInit(UINT64($451294E859ECC018));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function GET_PED_HELMET_STORED_HAT_TEX_INDEX(_ped: Ped): cint;
begin
  nativeInit(UINT64($9D728C1E12BF5518));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function IS_CURRENT_HEAD_PROP_A_HELMET(p0: Any): BOOL;
begin
  nativeInit(UINT64($F2385935BFFD4D92));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_TO_LOAD_COVER(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($332B562EEDA62399));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_COWER_IN_COVER(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($CB7553CDCEF4A735));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_PEEK_IN_COVER(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($C514825C507E3736));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($94D94BF1A75AED3D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_LEG_IK_MODE(_ped: Ped; mode: cint);
begin
  nativeInit(UINT64($C396F5B86FF9FEBD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(mode));
  nativeCall;
end;

procedure SET_PED_MOTION_BLUR(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($0A986918B102B448));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CAN_SWITCH_WEAPON(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($ED7F7EFE9FABF340));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_DIES_INSTANTLY_IN_WATER(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EEB64139BA29A7CF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_LADDER_CLIMB_INPUT_STATE(_ped: Ped; p1: cint);
begin
  nativeInit(UINT64($1A330D297AAC6BC1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure STOP_PED_WEAPON_FIRING_WHEN_DROPPED(_ped: Ped);
begin
  nativeInit(UINT64($C158D28142A34608));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_SCRIPTED_ANIM_SEAT_OFFSET(_ped: Ped; p1: cfloat);
begin
  nativeInit(UINT64($5917BBA32D06C230));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PED_COMBAT_MOVEMENT(_ped: Ped; combatMovement: cint);
begin
  nativeInit(UINT64($4D9CA1009AFBD057));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(combatMovement));
  nativeCall;
end;

function GET_PED_COMBAT_MOVEMENT(_ped: Ped): cint;
begin
  nativeInit(UINT64($DEA92412FCAEB3F5));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_COMBAT_ABILITY(_ped: Ped; abilityLevel: cint);
begin
  nativeInit(UINT64($C7622C0D36B2FDA8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(abilityLevel));
  nativeCall;
end;

procedure SET_PED_COMBAT_RANGE(_ped: Ped; combatRange: cint);
begin
  nativeInit(UINT64($3C606747B23E497B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(combatRange));
  nativeCall;
end;

function GET_PED_COMBAT_RANGE(_ped: Ped): cint;
begin
  nativeInit(UINT64($F9D9F7F2DB8E2FA0));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure SET_PED_COMBAT_ATTRIBUTES(_ped: Ped; attributeId: cint; enabled: BOOL);
begin
  nativeInit(UINT64($9F7794730795E019));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(attributeId));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure SET_PED_TARGET_LOSS_RESPONSE(_ped: Ped; responseType: cint);
begin
  nativeInit(UINT64($0703B9079823DA4A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(responseType));
  nativeCall;
end;

function IS_PED_PERFORMING_MELEE_ACTION(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($DCCA191DF9980FD7));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_PERFORMING_STEALTH_KILL(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($FD4CCDBCC59941B7));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_PERFORMING_A_COUNTER_ATTACK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($EBD0EDBA5BE957CF));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_BEING_STEALTH_KILLED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($863B23EFDE9C5DF2));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_MELEE_TARGET_FOR_PED(_ped: Ped): Ped;
begin
  nativeInit(UINT64($18A3E9EE1297FD39));
  nativePush64(UINT64(_ped));
  exit(Ped(nativeCall^));
end;

function WAS_PED_KILLED_BY_STEALTH(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($F9800AA1A771B000));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function WAS_PED_KILLED_BY_TAKEDOWN(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($7F08E26039C7347C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function WAS_PED_KNOCKED_OUT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($61767F73EACEED21));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_FLEE_ATTRIBUTES(_ped: Ped; attributeFlags: cint; enable: BOOL);
begin
  nativeInit(UINT64($70A2D1137C8ED7C9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(attributeFlags));
  nativePush64(UINT64(enable));
  nativeCall;
end;

procedure SET_PED_COWER_HASH(_ped: Ped; p1: PChar);
begin
  nativeInit(UINT64($A549131166868ED3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_STEERS_AROUND_DEAD_BODIES(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($2016C603D6B8987C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_STEERS_AROUND_PEDS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($46F2193B3AD1D891));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_STEERS_AROUND_OBJECTS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($1509C089ADC208BF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_STEERS_AROUND_VEHICLES(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EB6FB9D48DDE23EC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_IS_AVOIDED_BY_OTHERS(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($A9B61A329BFDCBEA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_INCREASED_AVOIDANCE_RADIUS(_ped: Ped);
begin
  nativeInit(UINT64($570389D1C3DE3C6B));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_BLOCKS_PATHING_WHEN_DEAD(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($576594E8D64375E2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_NO_TIME_DELAY_BEFORE_SHOT(p0: Any);
begin
  nativeInit(UINT64($A52D5247A4227E14));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_ANY_PED_NEAR_POINT(x, y, z, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($083961498679DC9F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

procedure FORCE_PED_AI_AND_ANIMATION_UPDATE(_ped: Ped; p1, p2: BOOL);
begin
  nativeInit(UINT64($2208438012482A1A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_PED_HEADING_TOWARDS_POSITION(_ped: Ped; x, y, z, p4: cfloat): BOOL;
begin
  nativeInit(UINT64($FCF37A457CB96DC0));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p4)^);
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_PED_VISIBILITY_TRACKING(_ped: Ped);
begin
  nativeInit(UINT64($7D7A2E43E74E2EB8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($2BC338A7B21F4608));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($CD018C591F94CB43));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($75BA1CB3B7D40CAF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_TRACKED_PED_VISIBLE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($91C8E617F64188AC));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_TRACKED_PED_PIXELCOUNT(_ped: Ped): cint;
begin
  nativeInit(UINT64($511F1A683387C7E2));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function IS_PED_TRACKED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($4C5E1F087CD10BB7));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function HAS_PED_RECEIVED_EVENT(_ped: Ped; eventId: cint): BOOL;
begin
  nativeInit(UINT64($8507BCB710FA6DC0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(eventId));
  exit(BOOL(nativeCall^));
end;

function CAN_PED_SEE_HATED_PED(ped1, ped2: Ped): BOOL;
begin
  nativeInit(UINT64($6CD5A433374D4CFB));
  nativePush64(UINT64(ped1));
  nativePush64(UINT64(ped2));
  exit(BOOL(nativeCall^));
end;

function CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(_ped: Ped; p1: pcint): BOOL;
begin
  nativeInit(UINT64($9C6A6C19B6C0C496));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(_ped: Ped; p1: pcint): BOOL;
begin
  nativeInit(UINT64($2DFC81C9B9608549));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function GET_PED_BONE_INDEX(_ped: Ped; boneId: cint): cint;
begin
  nativeInit(UINT64($3F428D08BE5AAE31));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boneId));
  exit(cint(nativeCall^));
end;

function GET_PED_RAGDOLL_BONE_INDEX(_ped: Ped; bone: cint): cint;
begin
  nativeInit(UINT64($2057EF813397A772));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(bone));
  exit(cint(nativeCall^));
end;

procedure SET_PED_ENVEFF_SCALE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($BF29516833893561));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function GET_PED_ENVEFF_SCALE(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($9C14D30395A51A3C));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_ENABLE_PED_ENVEFF_SCALE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($D2C5AA0C0E8D0F1E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_ENVEFF_CPV_ADD(_ped: Ped; p1: cfloat);
begin
  nativeInit(UINT64($110F526AB784111F));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PED_ENVEFF_COLOR_MODULATOR(_ped: Ped; p1, p2, p3: cint);
begin
  nativeInit(UINT64($D69411AA0CEBF9E9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_PED_EMISSIVE_SCALE(_ped: Ped; intensity: cfloat);
begin
  nativeInit(UINT64($4E90D746056E273D));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

function GET_PED_EMISSIVE_SCALE(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($1461B28A06717D68));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function IS_PED_SHADER_READY(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($81AA517FBBA05D39));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_ENABLE_CREW_EMBLEM(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($E906EC930F5FE7C8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure REQUEST_RAGDOLL_BOUNDS_UPDATE(p0, p1: Any);
begin
  nativeInit(UINT64($1216E0BFA72CC703));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_AO_BLOB_RENDERING(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($2B5AA717A181FB4C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PED_SHELTERED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($B8B52E498014F5B0));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function CREATE_SYNCHRONIZED_SCENE(x, y, z, roll, pitch, yaw: cfloat; p6: cint): cint;
begin
  nativeInit(UINT64($8C18E0F9080ADD73));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@roll)^);
  nativePush64(PUINT64(@pitch)^);
  nativePush64(PUINT64(@yaw)^);
  nativePush64(UINT64(p6));
  exit(cint(nativeCall^));
end;

function CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(x, y, z, radius: cfloat; obj: Hash): cint;
begin
  nativeInit(UINT64($62EC273D00187DCA));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(obj));
  exit(cint(nativeCall^));
end;

function IS_SYNCHRONIZED_SCENE_RUNNING(sceneId: cint): BOOL;
begin
  nativeInit(UINT64($25D39B935A038A26));
  nativePush64(UINT64(sceneId));
  exit(BOOL(nativeCall^));
end;

procedure SET_SYNCHRONIZED_SCENE_ORIGIN(sceneID: cint; x, y, z, roll, pitch, yaw: cfloat; p7: BOOL);
begin
  nativeInit(UINT64($6ACF6B7225801CD7));
  nativePush64(UINT64(sceneID));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@roll)^);
  nativePush64(PUINT64(@pitch)^);
  nativePush64(PUINT64(@yaw)^);
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure SET_SYNCHRONIZED_SCENE_PHASE(sceneID: cint; phase: cfloat);
begin
  nativeInit(UINT64($734292F4F0ABF6D0));
  nativePush64(UINT64(sceneID));
  nativePush64(PUINT64(@phase)^);
  nativeCall;
end;

function GET_SYNCHRONIZED_SCENE_PHASE(sceneID: cint): cfloat;
begin
  nativeInit(UINT64($E4A310B1D7FA73CC));
  nativePush64(UINT64(sceneID));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_SYNCHRONIZED_SCENE_RATE(sceneID: cint; rate: cfloat);
begin
  nativeInit(UINT64($B6C49F8A5E295A5D));
  nativePush64(UINT64(sceneID));
  nativePush64(PUINT64(@rate)^);
  nativeCall;
end;

function GET_SYNCHRONIZED_SCENE_RATE(sceneID: cint): cfloat;
begin
  nativeInit(UINT64($D80932D577274D40));
  nativePush64(UINT64(sceneID));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_SYNCHRONIZED_SCENE_LOOPED(sceneID: cint; toggle: BOOL);
begin
  nativeInit(UINT64($D9A897A4C6C2974F));
  nativePush64(UINT64(sceneID));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_SYNCHRONIZED_SCENE_LOOPED(sceneID: cint): BOOL;
begin
  nativeInit(UINT64($62522002E0C391BA));
  nativePush64(UINT64(sceneID));
  exit(BOOL(nativeCall^));
end;

procedure SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID: cint; toggle: BOOL);
begin
  nativeInit(UINT64($394B9CD12435C981));
  nativePush64(UINT64(sceneID));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(sceneID: cint): BOOL;
begin
  nativeInit(UINT64($7F2F4F13AC5257EF));
  nativePush64(UINT64(sceneID));
  exit(BOOL(nativeCall^));
end;

procedure ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(sceneID: cint; para_entity: Entity; boneIndex: cint);
begin
  nativeInit(UINT64($272E4723B56A3B96));
  nativePush64(UINT64(sceneID));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(boneIndex));
  nativeCall;
end;

procedure DETACH_SYNCHRONIZED_SCENE(sceneID: cint);
begin
  nativeInit(UINT64($6D38F1F04CBB37EA));
  nativePush64(UINT64(sceneID));
  nativeCall;
end;

procedure TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(scene: cint);
begin
  nativeInit(UINT64($CD9CC7E200A52A6F));
  nativePush64(UINT64(scene));
  nativeCall;
end;

function FORCE_PED_MOTION_STATE(_ped: Ped; motionStateHash: Hash; p2: BOOL; p3: cint; p4: BOOL): BOOL;
begin
  nativeInit(UINT64($F28965D04F570DCA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(motionStateHash));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function GET_PED_CURRENT_MOVE_BLEND_RATIO(_ped: Ped; speedX, speedY: pcfloat): BOOL;
begin
  nativeInit(UINT64($F60165E1D2C5370B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(speedX));
  nativePush64(UINT64(speedY));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_MAX_MOVE_BLEND_RATIO(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($433083750C5E064A));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_MIN_MOVE_BLEND_RATIO(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($01A898D26E2333DD));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_MOVE_RATE_OVERRIDE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($085BF80FA50A39D1));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(_ped: Ped; p1: cfloat);
begin
  nativeInit(UINT64($0B3E35AC043707D9));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function PED_HAS_SEXINESS_FLAG_SET(_ped: Ped; sexinessFlag: cint): BOOL;
begin
  nativeInit(UINT64($46B05BCAE43856B0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(sexinessFlag));
  exit(BOOL(nativeCall^));
end;

function GET_PED_NEARBY_VEHICLES(_ped: Ped; sizeAndVehs: PAny): cint;
begin
  nativeInit(UINT64($CFF869CBFA210D82));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(sizeAndVehs));
  exit(cint(nativeCall^));
end;

function GET_PED_NEARBY_PEDS(_ped: Ped; sizeAndPeds: PAny; ignore: cint): cint;
begin
  nativeInit(UINT64($23F8F5FC7E8C4A6B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(sizeAndPeds));
  nativePush64(UINT64(ignore));
  exit(cint(nativeCall^));
end;

function HAVE_ALL_STREAMING_REQUESTS_COMPLETED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($7350823473013C02));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_USING_ACTION_MODE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($00E73468D085F745));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_USING_ACTION_MODE(_ped: Ped; p1: BOOL; p2: cint; action: PChar);
begin
  nativeInit(UINT64($D75ACCF5E0FB5367));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(action));
  nativeCall;
end;

procedure SET_MOVEMENT_MODE_OVERRIDE(_ped: Ped; name: PChar);
begin
  nativeInit(UINT64($781DE8FA214E87D2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure SET_PED_CAPSULE(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($364DF566EC833DE2));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function REGISTER_PEDHEADSHOT(_ped: Ped): cint;
begin
  nativeInit(UINT64($4462658788425076));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function REGISTER_PEDHEADSHOT_HIRES(_ped: Ped): cint;
begin
  nativeInit(UINT64($BA8805A1108A2515));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function REGISTER_PEDHEADSHOT_TRANSPARENT(_ped: Ped): cint;
begin
  nativeInit(UINT64($953563CE563143AF));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure UNREGISTER_PEDHEADSHOT(id: cint);
begin
  nativeInit(UINT64($96B1361D9B24C2FF));
  nativePush64(UINT64(id));
  nativeCall;
end;

function IS_PEDHEADSHOT_VALID(id: cint): BOOL;
begin
  nativeInit(UINT64($A0A9668F158129A2));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

function IS_PEDHEADSHOT_READY(id: cint): BOOL;
begin
  nativeInit(UINT64($7085228842B13A67));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

function GET_PEDHEADSHOT_TXD_STRING(id: cint): PChar;
begin
  nativeInit(UINT64($DB4EACD4AD0A5D6B));
  nativePush64(UINT64(id));
  exit(PChar(nativeCall^));
end;

function REQUEST_PEDHEADSHOT_IMG_UPLOAD(id: cint): BOOL;
begin
  nativeInit(UINT64($F0DAEF2F545BEE25));
  nativePush64(UINT64(id));
  exit(BOOL(nativeCall^));
end;

procedure RELEASE_PEDHEADSHOT_IMG_UPLOAD(id: cint);
begin
  nativeInit(UINT64($5D517B27CF6ECD04));
  nativePush64(UINT64(id));
  nativeCall;
end;

function IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE: BOOL;
begin
  nativeInit(UINT64($EBB376779A760AA8));
  exit(BOOL(nativeCall^));
end;

function HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED: BOOL;
begin
  nativeInit(UINT64($876928DDDFCCC9CD));
  exit(BOOL(nativeCall^));
end;

function HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED: BOOL;
begin
  nativeInit(UINT64($E8A169E666CBC541));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_HEATSCALE_OVERRIDE(_ped: Ped; heatScale: cfloat);
begin
  nativeInit(UINT64($C1F6EBF9A3D55538));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@heatScale)^);
  nativeCall;
end;

procedure DISABLE_PED_HEATSCALE_OVERRIDE(_ped: Ped);
begin
  nativeInit(UINT64($600048C60D5C2C51));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SPAWNPOINTS_START_SEARCH(p0, p1, p2, p3, p4: cfloat; interiorFlags: cint; scale: cfloat; duration: cint);
begin
  nativeInit(UINT64($2DF9038C90AD5264));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(UINT64(interiorFlags));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(x1, y1, z1, x2, y2, z2, width: cfloat; interiorFlags: cint; scale: cfloat; duration: cint);
begin
  nativeInit(UINT64($B2AFF10216DEFA2F));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@width)^);
  nativePush64(UINT64(interiorFlags));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure SPAWNPOINTS_CANCEL_SEARCH;
begin
  nativeInit(UINT64($FEE4A5459472A9F8));
  nativeCall;
end;

function SPAWNPOINTS_IS_SEARCH_ACTIVE: BOOL;
begin
  nativeInit(UINT64($3C67506996001F5E));
  exit(BOOL(nativeCall^));
end;

function SPAWNPOINTS_IS_SEARCH_COMPLETE: BOOL;
begin
  nativeInit(UINT64($A586FBEB32A53DBB));
  exit(BOOL(nativeCall^));
end;

function SPAWNPOINTS_IS_SEARCH_FAILED: BOOL;
begin
  nativeInit(UINT64($F445DE8DA80A1792));
  exit(BOOL(nativeCall^));
end;

function SPAWNPOINTS_GET_NUM_SEARCH_RESULTS: cint;
begin
  nativeInit(UINT64($A635C11B8C44AFC2));
  exit(cint(nativeCall^));
end;

procedure SPAWNPOINTS_GET_SEARCH_RESULT(randomInt: cint; x, y, z: pcfloat);
begin
  nativeInit(UINT64($280C7E3AC7F56E90));
  nativePush64(UINT64(randomInt));
  nativePush64(UINT64(x));
  nativePush64(UINT64(y));
  nativePush64(UINT64(z));
  nativeCall;
end;

procedure SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(p0: cint; p1: pcint);
begin
  nativeInit(UINT64($B782F8238512BAD5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_IK_TARGET(_ped: Ped; ikIndex: cint; entityLookAt: Entity; boneLookAt: cint; offsetX, offsetY, offsetZ: cfloat; p7: Any; blendInDuration, blendOutDuration: cint);
begin
  nativeInit(UINT64($C32779C16FCEECD9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ikIndex));
  nativePush64(UINT64(entityLookAt));
  nativePush64(UINT64(boneLookAt));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(blendInDuration));
  nativePush64(UINT64(blendOutDuration));
  nativeCall;
end;

procedure FORCE_INSTANT_LEG_IK_SETUP(_ped: Ped);
begin
  nativeInit(UINT64($ED3C76ADFA6D07C4));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure REQUEST_ACTION_MODE_ASSET(asset: PChar);
begin
  nativeInit(UINT64($290E2780BB7AA598));
  nativePush64(UINT64(asset));
  nativeCall;
end;

function HAS_ACTION_MODE_ASSET_LOADED(asset: PChar): BOOL;
begin
  nativeInit(UINT64($E4B5F4BF2CB24E65));
  nativePush64(UINT64(asset));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_ACTION_MODE_ASSET(asset: PChar);
begin
  nativeInit(UINT64($13E940F88470FA51));
  nativePush64(UINT64(asset));
  nativeCall;
end;

procedure REQUEST_STEALTH_MODE_ASSET(asset: PChar);
begin
  nativeInit(UINT64($2A0A62FCDEE16D4F));
  nativePush64(UINT64(asset));
  nativeCall;
end;

function HAS_STEALTH_MODE_ASSET_LOADED(asset: PChar): BOOL;
begin
  nativeInit(UINT64($E977FC5B08AF3441));
  nativePush64(UINT64(asset));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_STEALTH_MODE_ASSET(asset: PChar);
begin
  nativeInit(UINT64($9219857D21F0E842));
  nativePush64(UINT64(asset));
  nativeCall;
end;

procedure SET_PED_LOD_MULTIPLIER(_ped: Ped; multiplier: cfloat);
begin
  nativeInit(UINT64($DC2C5C242AAC342B));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(_ped: Ped; toggle: BOOL; p2: cint);
begin
  nativeInit(UINT64($E861D0B05C7662B8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_FORCE_FOOTSTEP_UPDATE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($129466ED55140F8D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FORCE_STEP_TYPE(_ped: Ped; p1: BOOL; _type, p3: cint);
begin
  nativeInit(UINT64($CB968B53FC7F916D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(_type));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function IS_ANY_HOSTILE_PED_NEAR_POINT(_ped: Ped; x, y, z, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($68772DB2B2526F9F));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_CAN_PLAY_IN_CAR_IDLES(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($820E9892A77E97CD));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_TARGET_PED_IN_PERCEPTION_AREA(_ped, targetPed: Ped; p2, p3, p4, p5: cfloat): BOOL;
begin
  nativeInit(UINT64($06087579E7AA85A9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(targetPed));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_POP_CONTROL_SPHERE_THIS_FRAME(x, y, z, min, max: cfloat);
begin
  nativeInit(UINT64($D8C3BE3EE94CAF2D));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@min)^);
  nativePush64(PUINT64(@max)^);
  nativeCall;
end;

procedure FORCE_ZERO_MASS_IN_COLLISIONS(_ped: Ped);
begin
  nativeInit(UINT64($D33DAA36272177C4));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_DISABLE_HIGH_FALL_DEATH(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($711794453CFD692B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_PHONE_PALETTE_IDX(p0, p1: Any);
begin
  nativeInit(UINT64($83A169EABCDB10A2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PED_STEER_BIAS(_ped: Ped; value: cfloat);
begin
  nativeInit(UINT64($288DF530C92DAD6F));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function IS_PED_SWITCHING_WEAPON(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($3795688A307E1EB6));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_TREATED_AS_FRIENDLY(p0, p1, p2: Any);
begin
  nativeInit(UINT64($0F62619393661D6E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_DISABLE_PED_MAP_COLLISION(_ped: Ped);
begin
  nativeInit(UINT64($DFE68C4B787E1BFB));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure ENABLE_MP_LIGHT(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EE2476B9EE4A094F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_MP_LIGHT_ENABLED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($88274C11CF0D866D));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_COVER_POINT_FOR_PED(_ped: Ped);
begin
  nativeInit(UINT64($637822DC2AFEEBF8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_ALLOW_STUNT_JUMP_CAMERA(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($FAB944D4D481ACCB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function ADD_ROPE(x, y, z, rotX, rotY, rotZ, length: cfloat; ropeType: cint; maxLength, minLength, windingSpeed: cfloat; p11, p12, rigid: BOOL; p14: cfloat; breakWhenShot: BOOL; unkPtr: PAny): cint;
begin
  nativeInit(UINT64($E832D760399EB220));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@length)^);
  nativePush64(UINT64(ropeType));
  nativePush64(PUINT64(@maxLength)^);
  nativePush64(PUINT64(@minLength)^);
  nativePush64(PUINT64(@windingSpeed)^);
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativePush64(UINT64(rigid));
  nativePush64(PUINT64(@p14)^);
  nativePush64(UINT64(breakWhenShot));
  nativePush64(UINT64(unkPtr));
  exit(cint(nativeCall^));
end;

procedure DELETE_ROPE(ropeId: pcint);
begin
  nativeInit(UINT64($52B4829281364649));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

procedure DELETE_CHILD_ROPE(ropeId: cint);
begin
  nativeInit(UINT64($AA5D6B1888E4DB20));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

function DOES_ROPE_EXIST(ropeId: pcint): BOOL;
begin
  nativeInit(UINT64($FD5448BE3111ED96));
  nativePush64(UINT64(ropeId));
  exit(BOOL(nativeCall^));
end;

procedure ROPE_DRAW_ENABLED(ropeId: pcint; p1: BOOL);
begin
  nativeInit(UINT64($A1AE736541B0FCA3));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ROPE_DRAW_SHADOW_ENABLED(ropeId: pcint; toggle: BOOL);
begin
  nativeInit(UINT64($F159A63806BB5BA8));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure LOAD_ROPE_DATA(ropeId: cint; rope_preset: PChar);
begin
  nativeInit(UINT64($CBB203C04D1ABD27));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(rope_preset));
  nativeCall;
end;

procedure PIN_ROPE_VERTEX(ropeId, vertex: cint; x, y, z: cfloat);
begin
  nativeInit(UINT64($2B320CF14146B69A));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(vertex));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure UNPIN_ROPE_VERTEX(ropeId, vertex: cint);
begin
  nativeInit(UINT64($4B5AE2EEE4A8F180));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(vertex));
  nativeCall;
end;

function GET_ROPE_VERTEX_COUNT(ropeId: cint): cint;
begin
  nativeInit(UINT64($3655F544CD30F0B5));
  nativePush64(UINT64(ropeId));
  exit(cint(nativeCall^));
end;

procedure ATTACH_ENTITIES_TO_ROPE(ropeId: cint; ent1, ent2: Entity; ent1_x, ent1_y, ent1_z, ent2_x, ent2_y, ent2_z, length: cfloat; p10, p11: BOOL; p12, p13: PAny);
begin
  nativeInit(UINT64($3D95EC8B6D940AC3));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(ent1));
  nativePush64(UINT64(ent2));
  nativePush64(PUINT64(@ent1_x)^);
  nativePush64(PUINT64(@ent1_y)^);
  nativePush64(PUINT64(@ent1_z)^);
  nativePush64(PUINT64(@ent2_x)^);
  nativePush64(PUINT64(@ent2_y)^);
  nativePush64(PUINT64(@ent2_z)^);
  nativePush64(PUINT64(@length)^);
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativePush64(UINT64(p13));
  nativeCall;
end;

procedure ATTACH_ROPE_TO_ENTITY(ropeId: cint; para_entity: Entity; x, y, z: cfloat; p5: BOOL);
begin
  nativeInit(UINT64($4B490A6832559A65));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure DETACH_ROPE_FROM_ENTITY(ropeId: cint; para_entity: Entity);
begin
  nativeInit(UINT64($BCF3026912A8647D));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure ROPE_SET_UPDATE_PINVERTS(ropeId: cint);
begin
  nativeInit(UINT64($C8D667EE52114ABA));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

procedure ROPE_SET_UPDATE_ORDER(ropeId: cint; p1: Any);
begin
  nativeInit(UINT64($DC57A637A20006ED));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ROPE_SET_SMOOTH_REELIN(ropeId: cint; p1: BOOL);
begin
  nativeInit(UINT64($36CCB9BE67B970FD));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_ROPE_ATTACHED_AT_BOTH_ENDS(ropeId: pcint): BOOL;
begin
  nativeInit(UINT64($84DE3B5FB3E666F0));
  nativePush64(UINT64(ropeId));
  exit(BOOL(nativeCall^));
end;

function GET_ROPE_LAST_VERTEX_COORD(ropeId: cint): Vector3;
begin
  nativeInit(UINT64($21BB0FBD3E217C2D));
  nativePush64(UINT64(ropeId));
  exit(PVector3(nativeCall)^);
end;

function GET_ROPE_VERTEX_COORD(ropeId, vertex: cint): Vector3;
begin
  nativeInit(UINT64($EA61CA8E80F09E4D));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(vertex));
  exit(PVector3(nativeCall)^);
end;

procedure START_ROPE_WINDING(ropeId: cint);
begin
  nativeInit(UINT64($1461C72C889E343E));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

procedure STOP_ROPE_WINDING(ropeId: cint);
begin
  nativeInit(UINT64($CB2D4AB84A19AA7C));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

procedure START_ROPE_UNWINDING_FRONT(ropeId: cint);
begin
  nativeInit(UINT64($538D1179EC1AA9A9));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

procedure STOP_ROPE_UNWINDING_FRONT(ropeId: cint);
begin
  nativeInit(UINT64($FFF3A50779EFBBB3));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

procedure ROPE_CONVERT_TO_SIMPLE(ropeId: cint);
begin
  nativeInit(UINT64($5389D48EFA2F079A));
  nativePush64(UINT64(ropeId));
  nativeCall;
end;

procedure ROPE_LOAD_TEXTURES;
begin
  nativeInit(UINT64($9B9039DBF2D258C1));
  nativeCall;
end;

function ROPE_ARE_TEXTURES_LOADED: BOOL;
begin
  nativeInit(UINT64($F2D0E6A75CC05597));
  exit(BOOL(nativeCall^));
end;

procedure ROPE_UNLOAD_TEXTURES;
begin
  nativeInit(UINT64($6CE36C35C1AC8163));
  nativeCall;
end;

function DOES_SCRIPT_OWN_ROPE(ropeId: cint): BOOL;
begin
  nativeInit(UINT64($271C9D3ACA5D6409));
  nativePush64(UINT64(ropeId));
  exit(BOOL(nativeCall^));
end;

procedure ROPE_ATTACH_VIRTUAL_BOUND_GEOM(ropeId, p1: cint; p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13: cfloat);
begin
  nativeInit(UINT64($BC0CE682D4D05650));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@p9)^);
  nativePush64(PUINT64(@p10)^);
  nativePush64(PUINT64(@p11)^);
  nativePush64(PUINT64(@p12)^);
  nativePush64(PUINT64(@p13)^);
  nativeCall;
end;

procedure ROPE_CHANGE_SCRIPT_OWNER(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($B1B6216CA2E7B55E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(ropeId, p1: cint);
begin
  nativeInit(UINT64($B743F735C03D7810));
  nativePush64(UINT64(ropeId));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function ROPE_GET_DISTANCE_BETWEEN_ENDS(ropeId: cint): cfloat;
begin
  nativeInit(UINT64($73040398DFF9A4A6));
  nativePush64(UINT64(ropeId));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure ROPE_FORCE_LENGTH(ropeId: cint; length: cfloat);
begin
  nativeInit(UINT64($D009F759A723DB1B));
  nativePush64(UINT64(ropeId));
  nativePush64(PUINT64(@length)^);
  nativeCall;
end;

procedure ROPE_RESET_LENGTH(ropeId: cint; length: cfloat);
begin
  nativeInit(UINT64($C16DE94D9BEA14A0));
  nativePush64(UINT64(ropeId));
  nativePush64(PUINT64(@length)^);
  nativeCall;
end;

procedure APPLY_IMPULSE_TO_CLOTH(posX, posY, posZ, vecX, vecY, vecZ, impulse: cfloat);
begin
  nativeInit(UINT64($E37F721824571784));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@vecX)^);
  nativePush64(PUINT64(@vecY)^);
  nativePush64(PUINT64(@vecZ)^);
  nativePush64(PUINT64(@impulse)^);
  nativeCall;
end;

procedure SET_DAMPING(para_entity: Entity; vertex: cint; value: cfloat);
begin
  nativeInit(UINT64($EEA3B200A6FEB65B));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(vertex));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure ACTIVATE_PHYSICS(para_entity: Entity);
begin
  nativeInit(UINT64($710311ADF0E20730));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_CGOFFSET(para_entity: Entity; x, y, z: cfloat);
begin
  nativeInit(UINT64($D8FA3908D7B86904));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

function GET_CGOFFSET(para_entity: Entity): Vector3;
begin
  nativeInit(UINT64($8214A4B5A7A33612));
  nativePush64(UINT64(para_entity));
  exit(PVector3(nativeCall)^);
end;

procedure SET_CG_AT_BOUNDCENTER(para_entity: Entity);
begin
  nativeInit(UINT64($BE520D9761FF811F));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure BREAK_ENTITY_GLASS(para_entity: Entity; p1, p2, p3, p4, p5, p6, p7, p8: cfloat; p9: Any; p10: BOOL);
begin
  nativeInit(UINT64($2E648D16F6E308F3));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativeCall;
end;

function GET_IS_ENTITY_A_FRAG(obj: GTAObject): BOOL;
begin
  nativeInit(UINT64($0C112765300C7E1E));
  nativePush64(UINT64(obj));
  exit(BOOL(nativeCall^));
end;

procedure SET_DISABLE_BREAKING(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($5CEC1A84620E7D5B));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure RESET_DISABLE_BREAKING(obj: GTAObject);
begin
  nativeInit(UINT64($CC6E963682533882));
  nativePush64(UINT64(obj));
  nativeCall;
end;

procedure SET_DISABLE_FRAG_DAMAGE(obj: GTAObject; toggle: BOOL);
begin
  nativeInit(UINT64($01BA3AED21C16CFB));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_USE_KINEMATIC_PHYSICS(para_entity: Entity; toggle: BOOL);
begin
  nativeInit(UINT64($15F944730C832252));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_IN_STUNT_MODE(p0: BOOL);
begin
  nativeInit(UINT64($9EBD751E5787BAF2));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_IN_ARENA_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($AA6A6098851C396F));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_PLAYER_PED(plyr: Player): Ped;
begin
  nativeInit(UINT64($43A66C31C68491C0));
  nativePush64(UINT64(plyr));
  exit(Ped(nativeCall^));
end;

function GET_PLAYER_PED_SCRIPT_INDEX(plyr: Player): Ped;
begin
  nativeInit(UINT64($50FAC3A3E030A6E1));
  nativePush64(UINT64(plyr));
  exit(Ped(nativeCall^));
end;

procedure SET_PLAYER_MODEL(plyr: Player; model: Hash);
begin
  nativeInit(UINT64($00A1CADD00108836));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(model));
  nativeCall;
end;

procedure CHANGE_PLAYER_PED(plyr: Player; _ped: Ped; p2, resetDamage: BOOL);
begin
  nativeInit(UINT64($048189FAC643DEEE));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(resetDamage));
  nativeCall;
end;

procedure GET_PLAYER_RGB_COLOUR(plyr: Player; r, g, b: pcint);
begin
  nativeInit(UINT64($E902EF951DCE178F));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

function GET_NUMBER_OF_PLAYERS: cint;
begin
  nativeInit(UINT64($407C7F91DDB46C16));
  exit(cint(nativeCall^));
end;

function GET_PLAYER_TEAM(plyr: Player): cint;
begin
  nativeInit(UINT64($37039302F4E0A008));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_TEAM(plyr: Player; team: cint);
begin
  nativeInit(UINT64($0299FA38396A4940));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(team));
  nativeCall;
end;

function GET_NUMBER_OF_PLAYERS_IN_TEAM(team: cint): cint;
begin
  nativeInit(UINT64($1FC200409F10E6F1));
  nativePush64(UINT64(team));
  exit(cint(nativeCall^));
end;

function GET_PLAYER_NAME(plyr: Player): PChar;
begin
  nativeInit(UINT64($6D0DE6A7B5DA71F8));
  nativePush64(UINT64(plyr));
  exit(PChar(nativeCall^));
end;

function GET_WANTED_LEVEL_RADIUS(plyr: Player): cfloat;
begin
  nativeInit(UINT64($085DEB493BE80812));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_PLAYER_WANTED_CENTRE_POSITION(plyr: Player): Vector3;
begin
  nativeInit(UINT64($0C92BA89F1AF26F8));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^);
end;

procedure SET_PLAYER_WANTED_CENTRE_POSITION(plyr: Player; position: PVector3; p2, p3: BOOL);
begin
  nativeInit(UINT64($520E541A97A13354));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(position));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

function GET_WANTED_LEVEL_THRESHOLD(wantedLevel: cint): cint;
begin
  nativeInit(UINT64($FDD179EAF45B556C));
  nativePush64(UINT64(wantedLevel));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_WANTED_LEVEL(plyr: Player; wantedLevel: cint; disableNoMission: BOOL);
begin
  nativeInit(UINT64($39FF19C64EF7DA5B));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(wantedLevel));
  nativePush64(UINT64(disableNoMission));
  nativeCall;
end;

procedure SET_PLAYER_WANTED_LEVEL_NO_DROP(plyr: Player; wantedLevel: cint; p2: BOOL);
begin
  nativeInit(UINT64($340E61DE7F471565));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(wantedLevel));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_PLAYER_WANTED_LEVEL_NOW(plyr: Player; p1: BOOL);
begin
  nativeInit(UINT64($E0A7D1E497FFCD6F));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(plyr: Player): BOOL;
begin
  nativeInit(UINT64($AFAF86043E5874E9));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function ARE_PLAYER_STARS_GREYED_OUT(plyr: Player): BOOL;
begin
  nativeInit(UINT64($0A6EB355EE14A2DB));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(plyr: Player): BOOL;
begin
  nativeInit(UINT64($7E07C78925D5FD96));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_DISPATCH_COPS_FOR_PLAYER(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($DB172424876553F4));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PLAYER_WANTED_LEVEL_GREATER(plyr: Player; wantedLevel: cint): BOOL;
begin
  nativeInit(UINT64($238DB2A2C23EE9EF));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(wantedLevel));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_PLAYER_WANTED_LEVEL(plyr: Player);
begin
  nativeInit(UINT64($B302540597885499));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function IS_PLAYER_DEAD(plyr: Player): BOOL;
begin
  nativeInit(UINT64($424D4687FA1E5652));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_PRESSING_HORN(plyr: Player): BOOL;
begin
  nativeInit(UINT64($FA1E2BF8B10598F9));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_CONTROL(plyr: Player; bHasControl: BOOL; flags: cint);
begin
  nativeInit(UINT64($8D32347D6D4C40A2));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(bHasControl));
  nativePush64(UINT64(flags));
  nativeCall;
end;

function GET_PLAYER_WANTED_LEVEL(plyr: Player): cint;
begin
  nativeInit(UINT64($E28E54788CE8F12D));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

procedure SET_MAX_WANTED_LEVEL(maxWantedLevel: cint);
begin
  nativeInit(UINT64($AA5F02DB48D704B9));
  nativePush64(UINT64(maxWantedLevel));
  nativeCall;
end;

procedure SET_POLICE_RADAR_BLIPS(toggle: BOOL);
begin
  nativeInit(UINT64($43286D561B72B8BF));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_POLICE_IGNORE_PLAYER(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($32C62AA929C2DA6A));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_PLAYER_PLAYING(plyr: Player): BOOL;
begin
  nativeInit(UINT64($5E9564D8246B909A));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_EVERYONE_IGNORE_PLAYER(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($8EEDA153AD141BA4));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ALL_RANDOM_PEDS_FLEE(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($056E0FE8534C2949));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($471D2FF42A94B4F2));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($DE45D1A1EF45EE61));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($C3376F42B1FACCC6));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($FAC75988A7D078D3));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($596976B02B6B5700));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_WANTED_LEVEL_MULTIPLIER(multiplier: cfloat);
begin
  nativeInit(UINT64($020E5F00CDA207BA));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_WANTED_LEVEL_DIFFICULTY(plyr: Player; difficulty: cfloat);
begin
  nativeInit(UINT64($9B0BB33B04405E7A));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@difficulty)^);
  nativeCall;
end;

procedure RESET_WANTED_LEVEL_DIFFICULTY(plyr: Player);
begin
  nativeInit(UINT64($B9D0DD990DC141DD));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function GET_WANTED_LEVEL_TIME_TO_ESCAPE: cint;
begin
  nativeInit(UINT64($A72200F51875FEA4));
  exit(cint(nativeCall^));
end;

procedure SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(plyr: Player; wantedLevel, lossTime: cint);
begin
  nativeInit(UINT64($49B856B1360C47C7));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(wantedLevel));
  nativePush64(UINT64(lossTime));
  nativeCall;
end;

procedure RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(plyr: Player);
begin
  nativeInit(UINT64($823EC8E82BA45986));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure START_FIRING_AMNESTY(duration: cint);
begin
  nativeInit(UINT64($BF9BD71691857E48));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure REPORT_CRIME(plyr: Player; crimeType, wantedLvlThresh: cint);
begin
  nativeInit(UINT64($E9B09589827545E7));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(crimeType));
  nativePush64(UINT64(wantedLvlThresh));
  nativeCall;
end;

procedure SUPPRESS_CRIME_THIS_FRAME(plyr: Player; crimeType: cint);
begin
  nativeInit(UINT64($9A987297ED8BD838));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(crimeType));
  nativeCall;
end;

procedure UPDATE_WANTED_POSITION_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($BC9490CA15AEA8FB));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($4669B3ED80F24B4E));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(plyr: Player; p1: Any);
begin
  nativeInit(UINT64($2F41A3BAE005E5FA));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure FORCE_START_HIDDEN_EVASION(plyr: Player);
begin
  nativeInit(UINT64($AD73CE5A09E42D12));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(plyr: Player);
begin
  nativeInit(UINT64($36F1B38855F2A8DF));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure REPORT_POLICE_SPOTTED_PLAYER(plyr: Player);
begin
  nativeInit(UINT64($DC64D2C53493ED12));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_LAW_RESPONSE_DELAY_OVERRIDE(p0: cfloat);
begin
  nativeInit(UINT64($B45EFF719D8427A6));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure RESET_LAW_RESPONSE_DELAY_OVERRIDE;
begin
  nativeInit(UINT64($0032A6DBA562C518));
  nativeCall;
end;

function CAN_PLAYER_START_MISSION(plyr: Player): BOOL;
begin
  nativeInit(UINT64($DE7465A27D403C06));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_READY_FOR_CUTSCENE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($908CBECC2CAA3690));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_TARGETTING_ENTITY(plyr: Player; para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($7912F7FC4F6264B6));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function GET_PLAYER_TARGET_ENTITY(plyr: Player; entity: PEntity): BOOL;
begin
  nativeInit(UINT64($13EDE1A5DBF797C9));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(entity));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_FREE_AIMING(plyr: Player): BOOL;
begin
  nativeInit(UINT64($2E397FD2ECD37C87));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_FREE_AIMING_AT_ENTITY(plyr: Player; para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($3C06B5C839B38F7B));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(plyr: Player; entity: PEntity): BOOL;
begin
  nativeInit(UINT64($2975C866E6713290));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_LOCKON_RANGE_OVERRIDE(plyr: Player; range: cfloat);
begin
  nativeInit(UINT64($29961D490E5814FD));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@range)^);
  nativeCall;
end;

procedure SET_PLAYER_CAN_DO_DRIVE_BY(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($6E8834B52EC20C77));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($D5E460AD7020A246));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_CAN_USE_COVER(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($D465A8599DFF6814));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_MAX_WANTED_LEVEL: cint;
begin
  nativeInit(UINT64($462E0DB9B137DC5F));
  exit(cint(nativeCall^));
end;

function IS_PLAYER_TARGETTING_ANYTHING(plyr: Player): BOOL;
begin
  nativeInit(UINT64($78CFE51896B6B8A4));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_SPRINT(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($A01B8075D8B92DF4));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure RESET_PLAYER_STAMINA(plyr: Player);
begin
  nativeInit(UINT64($A6F312FCCE9C1DFE));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure RESTORE_PLAYER_STAMINA(plyr: Player; p1: cfloat);
begin
  nativeInit(UINT64($A352C1B864CAFD33));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function GET_PLAYER_SPRINT_STAMINA_REMAINING(plyr: Player): cfloat;
begin
  nativeInit(UINT64($3F9F16F8E65A7ED7));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_PLAYER_SPRINT_TIME_REMAINING(plyr: Player): cfloat;
begin
  nativeInit(UINT64($1885BC9B108B4C99));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_PLAYER_UNDERWATER_TIME_REMAINING(plyr: Player): cfloat;
begin
  nativeInit(UINT64($A1FCF8E6AF40B731));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(plyr: Player; time: cfloat): cfloat;
begin
  nativeInit(UINT64($A0D3E4F7AAFB7E78));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@time)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_PLAYER_GROUP(plyr: Player): cint;
begin
  nativeInit(UINT64($0D127585F77030AF));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function GET_PLAYER_MAX_ARMOUR(plyr: Player): cint;
begin
  nativeInit(UINT64($92659B4CE1863CB3));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function IS_PLAYER_CONTROL_ON(plyr: Player): BOOL;
begin
  nativeInit(UINT64($49C32D60007AFA47));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function GET_ARE_CAMERA_CONTROLS_DISABLED: BOOL;
begin
  nativeInit(UINT64($7C814D2FB49F40C0));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_SCRIPT_CONTROL_ON(plyr: Player): BOOL;
begin
  nativeInit(UINT64($8A876A65283DD7D7));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_CLIMBING(plyr: Player): BOOL;
begin
  nativeInit(UINT64($95E8F73DC65EFB9C));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_BEING_ARRESTED(plyr: Player; atArresting: BOOL): BOOL;
begin
  nativeInit(UINT64($388A47C51ABDAC8E));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(atArresting));
  exit(BOOL(nativeCall^));
end;

procedure RESET_PLAYER_ARREST_STATE(plyr: Player);
begin
  nativeInit(UINT64($2D03E13C460760D6));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function GET_PLAYERS_LAST_VEHICLE: Vehicle;
begin
  nativeInit(UINT64($B6997A7EB3F5C8C0));
  exit(Vehicle(nativeCall^));
end;

function GET_PLAYER_INDEX: Player;
begin
  nativeInit(UINT64($A5EDC40EF369B48D));
  exit(Player(nativeCall^));
end;

function INT_TO_PLAYERINDEX(value: cint): Player;
begin
  nativeInit(UINT64($41BD2A6B006AF756));
  nativePush64(UINT64(value));
  exit(Player(nativeCall^));
end;

function INT_TO_PARTICIPANTINDEX(value: cint): cint;
begin
  nativeInit(UINT64($9EC6603812C24710));
  nativePush64(UINT64(value));
  exit(cint(nativeCall^));
end;

function GET_TIME_SINCE_PLAYER_HIT_VEHICLE(plyr: Player): cint;
begin
  nativeInit(UINT64($5D35ECF3A81A0EE0));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function GET_TIME_SINCE_PLAYER_HIT_PED(plyr: Player): cint;
begin
  nativeInit(UINT64($E36A25322DC35F42));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(plyr: Player): cint;
begin
  nativeInit(UINT64($D559D2BE9E37853B));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(plyr: Player): cint;
begin
  nativeInit(UINT64($DB89591E290D9182));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

function IS_PLAYER_FREE_FOR_AMBIENT_TASK(plyr: Player): BOOL;
begin
  nativeInit(UINT64($DCCFD3F106C36AB4));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function PLAYER_ID: Player;
begin
  nativeInit(UINT64($4F8644AF03D0E0D6));
  exit(Player(nativeCall^));
end;

function PLAYER_PED_ID: Ped;
begin
  nativeInit(UINT64($D80958FC74E988A6));
  exit(Ped(nativeCall^));
end;

function NETWORK_PLAYER_ID_TO_INT: cint;
begin
  nativeInit(UINT64($EE68096F9F37341E));
  exit(cint(nativeCall^));
end;

function HAS_FORCE_CLEANUP_OCCURRED(cleanupFlags: cint): BOOL;
begin
  nativeInit(UINT64($C968670BFACE42D9));
  nativePush64(UINT64(cleanupFlags));
  exit(BOOL(nativeCall^));
end;

procedure FORCE_CLEANUP(cleanupFlags: cint);
begin
  nativeInit(UINT64($BC8983F38F78ED51));
  nativePush64(UINT64(cleanupFlags));
  nativeCall;
end;

procedure FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(name: PChar; cleanupFlags: cint);
begin
  nativeInit(UINT64($4C68DDDDF0097317));
  nativePush64(UINT64(name));
  nativePush64(UINT64(cleanupFlags));
  nativeCall;
end;

procedure FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(id, cleanupFlags: cint);
begin
  nativeInit(UINT64($F745B37630DF176B));
  nativePush64(UINT64(id));
  nativePush64(UINT64(cleanupFlags));
  nativeCall;
end;

function GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP: cint;
begin
  nativeInit(UINT64($9A41CF4674A12272));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(plyr: Player; veh: Vehicle);
begin
  nativeInit(UINT64($8026FF78F208978A));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(plyr: Player);
begin
  nativeInit(UINT64($1DE37BBF9E9CC14A));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function GIVE_ACHIEVEMENT_TO_PLAYER(achievementId: cint): BOOL;
begin
  nativeInit(UINT64($BEC7076D64130195));
  nativePush64(UINT64(achievementId));
  exit(BOOL(nativeCall^));
end;

function SET_ACHIEVEMENT_PROGRESS(achievementId, progress: cint): BOOL;
begin
  nativeInit(UINT64($C2AFFFDABBDC2C5C));
  nativePush64(UINT64(achievementId));
  nativePush64(UINT64(progress));
  exit(BOOL(nativeCall^));
end;

function GET_ACHIEVEMENT_PROGRESS(achievementId: cint): cint;
begin
  nativeInit(UINT64($1C186837D0619335));
  nativePush64(UINT64(achievementId));
  exit(cint(nativeCall^));
end;

function HAS_ACHIEVEMENT_BEEN_PASSED(achievementId: cint): BOOL;
begin
  nativeInit(UINT64($867365E111A3B6EB));
  nativePush64(UINT64(achievementId));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_ONLINE: BOOL;
begin
  nativeInit(UINT64($F25D331DC2627BBC));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_LOGGING_IN_NP: BOOL;
begin
  nativeInit(UINT64($74556E1420867ECA));
  exit(BOOL(nativeCall^));
end;

procedure DISPLAY_SYSTEM_SIGNIN_UI(p0: BOOL);
begin
  nativeInit(UINT64($94DD7888C10A979E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_SYSTEM_UI_BEING_DISPLAYED: BOOL;
begin
  nativeInit(UINT64($5D511E3867C87139));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_INVINCIBLE(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($239528EACDC3E7DE));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_PLAYER_INVINCIBLE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($B721981B2B939E07));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function GET_PLAYER_DEBUG_INVINCIBLE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($DCC07526B8EC45AF));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($6BC97F4F4BB3C04B));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(plyr: Player; p1: BOOL);
begin
  nativeInit(UINT64($CAC57395B151135F));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_PLAYER_HELMET(plyr: Player; p2: BOOL);
begin
  nativeInit(UINT64($F3AC26D3CC576528));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure GIVE_PLAYER_RAGDOLL_CONTROL(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($3C49C870E66F0A28));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_LOCKON(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($5C8B2F450EE4328E));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_TARGETING_MODE(targetMode: cint);
begin
  nativeInit(UINT64($B1906895227793F3));
  nativePush64(UINT64(targetMode));
  nativeCall;
end;

function GET_PLAYER_TARGETING_MODE: cint;
begin
  nativeInit(UINT64($875BDD898B99C8CE));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_TARGET_LEVEL(targetLevel: cint);
begin
  nativeInit(UINT64($5702B917B99DB1CD));
  nativePush64(UINT64(targetLevel));
  nativeCall;
end;

function GET_IS_USING_FPS_THIRD_PERSON_COVER: BOOL;
begin
  nativeInit(UINT64($B9CF1F793A9F1BF1));
  exit(BOOL(nativeCall^));
end;

function GET_IS_USING_HOOD_CAMERA: BOOL;
begin
  nativeInit(UINT64($CB645E85E97EA48B));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(plyr: Player);
begin
  nativeInit(UINT64($F0B67A4DE6AB5F98));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(plyr: Player): BOOL;
begin
  nativeInit(UINT64($20CE80B0C2BF4ACC));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(plyr: Player);
begin
  nativeInit(UINT64($4AACB96203D11A31));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(plyr: Player): BOOL;
begin
  nativeInit(UINT64($E4B90F367BD81752));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(plyr: Player; multiplier: cfloat);
begin
  nativeInit(UINT64($CA7DC8329F0A1E9E));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_SWIM_MULTIPLIER_FOR_PLAYER(plyr: Player; multiplier: cfloat);
begin
  nativeInit(UINT64($A91C6F0FF7D16A13));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(plyr: Player; multiplier: cfloat);
begin
  nativeInit(UINT64($6DB47AA77FD94E09));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

function GET_TIME_SINCE_LAST_ARREST: cint;
begin
  nativeInit(UINT64($5063F92F07C2A316));
  exit(cint(nativeCall^));
end;

function GET_TIME_SINCE_LAST_DEATH: cint;
begin
  nativeInit(UINT64($C7034807558DDFCA));
  exit(cint(nativeCall^));
end;

procedure ASSISTED_MOVEMENT_CLOSE_ROUTE;
begin
  nativeInit(UINT64($AEBF081FFC0A0E5E));
  nativeCall;
end;

procedure ASSISTED_MOVEMENT_FLUSH_ROUTE;
begin
  nativeInit(UINT64($8621390F0CDCFE1F));
  nativeCall;
end;

procedure SET_PLAYER_FORCED_AIM(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($0FEE4F80AC44A726));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_FORCED_ZOOM(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($75E7D505F2B15902));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_FORCE_SKIP_AIM_INTRO(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($7651BC64AE59E128));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_PLAYER_FIRING(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($5E6CC07646BBEAB8));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN;
begin
  nativeInit(UINT64($B885852C39CC265D));
  nativeCall;
end;

procedure SET_DISABLE_AMBIENT_MELEE_MOVE(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($2E8AABFA40A84F8C));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_MAX_ARMOUR(plyr: Player; value: cint);
begin
  nativeInit(UINT64($77DFCCF5948B8C71));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SPECIAL_ABILITY_ACTIVATE(plyr: Player; p1: cint);
begin
  nativeInit(UINT64($821FDC827D6F4090));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_SPECIAL_ABILITY_MP(plyr: Player; p1: cint; p2: Any);
begin
  nativeInit(UINT64($B214D570EAD7F81A));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SPECIAL_ABILITY_DEACTIVATE_MP(plyr: Player; p1: cint);
begin
  nativeInit(UINT64($17F7471EACA78290));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SPECIAL_ABILITY_DEACTIVATE(plyr: Player; p1: Any);
begin
  nativeInit(UINT64($D6A953C6D1492057));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SPECIAL_ABILITY_DEACTIVATE_FAST(plyr: Player; p1: Any);
begin
  nativeInit(UINT64($9CB5CE07A3968D5A));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SPECIAL_ABILITY_RESET(plyr: Player; p1: Any);
begin
  nativeInit(UINT64($375F0E738F861A94));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(plyr: Player; p1: Any);
begin
  nativeInit(UINT64($C9A763D8FE87436A));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SPECIAL_ABILITY_CHARGE_SMALL(plyr: Player; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($2E7B9B683481687D));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SPECIAL_ABILITY_CHARGE_MEDIUM(plyr: Player; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($F113E3AA9BC54613));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SPECIAL_ABILITY_CHARGE_LARGE(plyr: Player; p1, p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($F733F45FA4497D93));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SPECIAL_ABILITY_CHARGE_CONTINUOUS(plyr: Player; p1: Ped; p2: Any);
begin
  nativeInit(UINT64($ED481732DFF7E997));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SPECIAL_ABILITY_CHARGE_ABSOLUTE(plyr: Player; p1: cint; p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($B7B0870EB531D08D));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SPECIAL_ABILITY_CHARGE_NORMALIZED(plyr: Player; normalizedValue: cfloat; p2: BOOL; p3: Any);
begin
  nativeInit(UINT64($A0696A65F009EE18));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@normalizedValue)^);
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SPECIAL_ABILITY_FILL_METER(plyr: Player; p1: BOOL; p2: Any);
begin
  nativeInit(UINT64($3DACA8DDC6FD4980));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SPECIAL_ABILITY_DEPLETE_METER(plyr: Player; p1: BOOL; p2: Any);
begin
  nativeInit(UINT64($1D506DBBBC51E64B));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SPECIAL_ABILITY_LOCK(playerModel: Hash; p1: Any);
begin
  nativeInit(UINT64($6A09D0D590A47D13));
  nativePush64(UINT64(playerModel));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SPECIAL_ABILITY_UNLOCK(playerModel: Hash; p1: Any);
begin
  nativeInit(UINT64($F145F3BE2EFA9A3B));
  nativePush64(UINT64(playerModel));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_SPECIAL_ABILITY_UNLOCKED(playerModel: Hash): BOOL;
begin
  nativeInit(UINT64($C6017F6A6CDFA694));
  nativePush64(UINT64(playerModel));
  exit(BOOL(nativeCall^));
end;

function IS_SPECIAL_ABILITY_ACTIVE(plyr: Player; p1: Any): BOOL;
begin
  nativeInit(UINT64($3E5F7FC85D854E15));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function IS_SPECIAL_ABILITY_METER_FULL(plyr: Player; p1: Any): BOOL;
begin
  nativeInit(UINT64($05A1FE504B7F2587));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure ENABLE_SPECIAL_ABILITY(plyr: Player; toggle: BOOL; p2: Any);
begin
  nativeInit(UINT64($181EC197DAEFE121));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function IS_SPECIAL_ABILITY_ENABLED(plyr: Player; p1: Any): BOOL;
begin
  nativeInit(UINT64($B1D200FE26AEF3CB));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SET_SPECIAL_ABILITY_MULTIPLIER(multiplier: cfloat);
begin
  nativeInit(UINT64($A49C426ED0CA4AB7));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure UPDATE_SPECIAL_ABILITY_FROM_STAT(plyr: Player; p1: Any);
begin
  nativeInit(UINT64($FFEE8FA29AB9A18E));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_IS_PLAYER_DRIVING_ON_HIGHWAY(plyr: Player): BOOL;
begin
  nativeInit(UINT64($5FC472C501CCADB3));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function GET_IS_PLAYER_DRIVING_WRECKLESS(plyr: Player; p1: cint): BOOL;
begin
  nativeInit(UINT64($F10B44FD479D69F3));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(plyr: Player; p1: cfloat): BOOL;
begin
  nativeInit(UINT64($DD2620B7B9D16FF1));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@p1)^);
  exit(BOOL(nativeCall^));
end;

procedure START_PLAYER_TELEPORT(plyr: Player; x, y, z, heading: cfloat; p5, findCollisionLand, p7: BOOL);
begin
  nativeInit(UINT64($AD15F075A4DA0FDE));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(p5));
  nativePush64(UINT64(findCollisionLand));
  nativePush64(UINT64(p7));
  nativeCall;
end;

function UPDATE_PLAYER_TELEPORT(plyr: Player): BOOL;
begin
  nativeInit(UINT64($E23D5873C2394C61));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure STOP_PLAYER_TELEPORT;
begin
  nativeInit(UINT64($C449EDED9D73009C));
  nativeCall;
end;

function IS_PLAYER_TELEPORT_ACTIVE: BOOL;
begin
  nativeInit(UINT64($02B15662D7F8886F));
  exit(BOOL(nativeCall^));
end;

function GET_PLAYER_CURRENT_STEALTH_NOISE(plyr: Player): cfloat;
begin
  nativeInit(UINT64($2F395D61F3A1F877));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(plyr: Player; regenRate: cfloat);
begin
  nativeInit(UINT64($5DB660B38DD98A31));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@regenRate)^);
  nativeCall;
end;

function GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(plyr: Player): cfloat;
begin
  nativeInit(UINT64($8BC515BAE4AAF8FF));
  nativePush64(UINT64(plyr));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(plyr: Player; limit: cfloat);
begin
  nativeInit(UINT64($C388A0F065F5BC34));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@limit)^);
  nativeCall;
end;

procedure DISABLE_PLAYER_HEALTH_RECHARGE(plyr: Player);
begin
  nativeInit(UINT64($BCB06442F7E52666));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(plyr: Player; p1: cfloat);
begin
  nativeInit(UINT64($EFD79FA81DFBA9CB));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PLAYER_WEAPON_DAMAGE_MODIFIER(plyr: Player; modifier: cfloat);
begin
  nativeInit(UINT64($CE07B9F7817AADA3));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_PLAYER_WEAPON_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
begin
  nativeInit(UINT64($2D83BC011CA14A3C));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
begin
  nativeInit(UINT64($BCFDE9EDE4CF27DC));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(plyr: Player; modifier: cfloat; p2: BOOL);
begin
  nativeInit(UINT64($4A3DC7ECCC321032));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@modifier)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
begin
  nativeInit(UINT64($AE540335B4ABC4E2));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(plyr: Player; modifier: cfloat);
begin
  nativeInit(UINT64($A50E117CDDF82F0C));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(plyr: Player; modifier: cfloat);
begin
  nativeInit(UINT64($4C60E6EFDAFF2462));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(plyr: Player; p1: cfloat);
begin
  nativeInit(UINT64($8D768602ADEF2245));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(plyr: Player; p1: Any);
begin
  nativeInit(UINT64($D821056B9ACF8052));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(plyr: Player; p1: cfloat);
begin
  nativeInit(UINT64($31E90B8873A4CD3B));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_PLAYER_PARACHUTE_TINT_INDEX(plyr: Player; tintIndex: cint);
begin
  nativeInit(UINT64($A3D0E54541D9A5E5));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(tintIndex));
  nativeCall;
end;

procedure GET_PLAYER_PARACHUTE_TINT_INDEX(plyr: Player; tintIndex: pcint);
begin
  nativeInit(UINT64($75D3F7A1B0D9B145));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(tintIndex));
  nativeCall;
end;

procedure SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(plyr: Player; index: cint);
begin
  nativeInit(UINT64($AF04C87F5DC1DF38));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(plyr: Player; index: pcint);
begin
  nativeInit(UINT64($D5A016BC3C09CF40));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(plyr: Player; tintIndex: cint);
begin
  nativeInit(UINT64($93B0FB27C9A04060));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(tintIndex));
  nativeCall;
end;

procedure GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(plyr: Player; tintIndex: pcint);
begin
  nativeInit(UINT64($6E9C742F340CE5A2));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(tintIndex));
  nativeCall;
end;

procedure SET_PLAYER_HAS_RESERVE_PARACHUTE(plyr: Player);
begin
  nativeInit(UINT64($7DDAB28D31FAC363));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function GET_PLAYER_HAS_RESERVE_PARACHUTE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($5DDFE2FF727F3CA3));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(plyr: Player; enabled: BOOL);
begin
  nativeInit(UINT64($F401B182DBA8AF53));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(plyr: Player; r, g, b: cint);
begin
  nativeInit(UINT64($8217FD371A4625CF));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(plyr: Player; r, g, b: pcint);
begin
  nativeInit(UINT64($EF56DBABD3CD4887));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure SET_PLAYER_PHONE_PALETTE_IDX(plyr: Player; flags: cint);
begin
  nativeInit(UINT64($11D5F725F0E780E0));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure SET_PLAYER_NOISE_MULTIPLIER(plyr: Player; multiplier: cfloat);
begin
  nativeInit(UINT64($DB89EF50FF25FCE9));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(plyr: Player; multiplier: cfloat);
begin
  nativeInit(UINT64($B2C1A29588A9F47C));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

function CAN_PED_HEAR_PLAYER(plyr: Player; _ped: Ped): BOOL;
begin
  nativeInit(UINT64($F297383AA91DCA29));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SIMULATE_PLAYER_INPUT_GAIT(plyr: Player; amount: cfloat; gaitType: cint; speed: cfloat; p4, p5: BOOL; p6: Any);
begin
  nativeInit(UINT64($477D5D63E63ECA5D));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@amount)^);
  nativePush64(UINT64(gaitType));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure RESET_PLAYER_INPUT_GAIT(plyr: Player);
begin
  nativeInit(UINT64($19531C47A2ABD691));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($9F343285A00B4BB6));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($D2B315B6689D537D));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(plyr: Player; value: cfloat);
begin
  nativeInit(UINT64($4E9021C1FCDD507A));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($690A61A6D13583F6));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(plyr: Player);
begin
  nativeInit(UINT64($9EDD76E87D5D51BA));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_PLAYER_SIMULATE_AIMING(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($C54C95DA968EC5B5));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_CLOTH_PIN_FRAMES(plyr: Player; p1: cint);
begin
  nativeInit(UINT64($749FADDF97DFE930));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PLAYER_CLOTH_PACKAGE_INDEX(index: cint);
begin
  nativeInit(UINT64($9F7BBA2EA6372500));
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure SET_PLAYER_CLOTH_LOCK_COUNTER(value: cint);
begin
  nativeInit(UINT64($14D913B777DFF5DA));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure PLAYER_ATTACH_VIRTUAL_BOUND(p0, p1, p2, p3, p4, p5, p6, p7: cfloat);
begin
  nativeInit(UINT64($ED51733DC73AED51));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativeCall;
end;

procedure PLAYER_DETACH_VIRTUAL_BOUND;
begin
  nativeInit(UINT64($1DD5897E2FA6E7C9));
  nativeCall;
end;

function HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($D705740BB0A1CF4C));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYER_BATTLE_AWARE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($38D28DA81E4E9BF9));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(plyr: Player; p1: cint; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($BC0753C9CA14B506));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

procedure EXTEND_WORLD_BOUNDARY_FOR_PLAYER(x, y, z: cfloat);
begin
  nativeInit(UINT64($5006D96C995A5827));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure RESET_WORLD_BOUNDARY_FOR_PLAYER;
begin
  nativeInit(UINT64($DA1DF03D5A315F4E));
  nativeCall;
end;

function IS_PLAYER_RIDING_TRAIN(plyr: Player): BOOL;
begin
  nativeInit(UINT64($4EC12697209F2196));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

function HAS_PLAYER_LEFT_THE_WORLD(plyr: Player): BOOL;
begin
  nativeInit(UINT64($D55DDFB47991A294));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_LEAVE_PED_BEHIND(plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($FF300C7649724A0B));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(plyr: Player; p1: cint; p2, p3: Any; p4: BOOL);
begin
  nativeInit(UINT64($D9284A8C0D48352C));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(plyr: Player);
begin
  nativeInit(UINT64($0F4CC924CF8C7B21));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(plyr: Player; model: Hash);
begin
  nativeInit(UINT64($977DB4641F6FC3DB));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(model));
  nativeCall;
end;

procedure SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(plyr: Player; model: Hash);
begin
  nativeInit(UINT64($0764486AEDE748DB));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(model));
  nativeCall;
end;

function GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(plyr: Player): Hash;
begin
  nativeInit(UINT64($C219887CA3E65C41));
  nativePush64(UINT64(plyr));
  exit(Hash(nativeCall^));
end;

function GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(plyr: Player): Hash;
begin
  nativeInit(UINT64($37FAAA68DCA9D08D));
  nativePush64(UINT64(plyr));
  exit(Hash(nativeCall^));
end;

procedure CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(plyr: Player);
begin
  nativeInit(UINT64($8753997EB5F6EE3F));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(plyr: Player);
begin
  nativeInit(UINT64($290D248E25815AE8));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(plyr: Player; model: Hash);
begin
  nativeInit(UINT64($DC80A4C2F18A2B64));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(model));
  nativeCall;
end;

procedure CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(plyr: Player);
begin
  nativeInit(UINT64($10C54E4389C12B42));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure DISABLE_PLAYER_VEHICLE_REWARDS(plyr: Player);
begin
  nativeInit(UINT64($C142BE3BB9CE125F));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

procedure SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(p0: BOOL);
begin
  nativeInit(UINT64($2F7CEB6520288061));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PLAYER_BLUETOOTH_STATE(plyr: Player; state: BOOL);
begin
  nativeInit(UINT64($5DC40A8869C22141));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(state));
  nativeCall;
end;

function IS_PLAYER_BLUETOOTH_ENABLE(plyr: Player): BOOL;
begin
  nativeInit(UINT64($65FAEE425DE637B0));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_CAMERA_VIEW_MODE_CYCLE(plyr: Player);
begin
  nativeInit(UINT64($5501B7A5CDB79D37));
  nativePush64(UINT64(plyr));
  nativeCall;
end;

function GET_PLAYER_FAKE_WANTED_LEVEL(plyr: Player): cint;
begin
  nativeInit(UINT64($56105E599CAB0EFA));
  nativePush64(UINT64(plyr));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_CAN_DAMAGE_PLAYER(player1, player2: Player; toggle: BOOL);
begin
  nativeInit(UINT64($55FCC0C390620314));
  nativePush64(UINT64(player1));
  nativePush64(UINT64(player2));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_APPLY_WAYPOINT_OF_PLAYER(plyr: Player; hudColor: cint);
begin
  nativeInit(UINT64($2382AB11450AE7BA));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(hudColor));
  nativeCall;
end;

function IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(p0: Any): BOOL;
begin
  nativeInit(UINT64($6E4361FF3E8CD7CA));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(p0: Any);
begin
  nativeInit(UINT64($237440E46D918649));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(p0, p1: Any);
begin
  nativeInit(UINT64($EE4EBDD2593BA844));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ADD_PLAYER_TARGETABLE_ENTITY(plyr: Player; para_entity: Entity);
begin
  nativeInit(UINT64($9097EB6D4BB9A12A));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure REMOVE_PLAYER_TARGETABLE_ENTITY(plyr: Player; para_entity: Entity);
begin
  nativeInit(UINT64($9F260BFB59ADBCA3));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_PLAYER_PREVIOUS_VARIATION_DATA(plyr: Player; p1, p2: cint; p3, p4, p5: Any);
begin
  nativeInit(UINT64($7BAE68775557AE0B));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure REMOVE_SCRIPT_FIRE_POSITION;
begin
  nativeInit(UINT64($7148E0F43D11F0D9));
  nativeCall;
end;

procedure SET_SCRIPT_FIRE_POSITION(coordX, coordY, coordZ: cfloat);
begin
  nativeInit(UINT64($70A382ADEC069DD3));
  nativePush64(PUINT64(@coordX)^);
  nativePush64(PUINT64(@coordY)^);
  nativePush64(PUINT64(@coordZ)^);
  nativeCall;
end;

procedure REPLAY_START_EVENT(p0: cint);
begin
  nativeInit(UINT64($48621C9FCA3EBD28));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure REPLAY_STOP_EVENT;
begin
  nativeInit(UINT64($81CBAE94390F9F89));
  nativeCall;
end;

procedure REPLAY_CANCEL_EVENT;
begin
  nativeInit(UINT64($13B350B8AD0EEE10));
  nativeCall;
end;

procedure REPLAY_RECORD_BACK_FOR_TIME(p0, p1: cfloat; p2: cint);
begin
  nativeInit(UINT64($293220DA1B46CEBC));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure REPLAY_CHECK_FOR_EVENT_THIS_FRAME(missionNameLabel: PChar; p1: Any);
begin
  nativeInit(UINT64($208784099002BC30));
  nativePush64(UINT64(missionNameLabel));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REPLAY_PREVENT_RECORDING_THIS_FRAME;
begin
  nativeInit(UINT64($EB2D525B57F42B40));
  nativeCall;
end;

procedure REPLAY_RESET_EVENT_INFO;
begin
  nativeInit(UINT64($F854439EFBB3B583));
  nativeCall;
end;

procedure REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME;
begin
  nativeInit(UINT64($AF66DCEE6609B148));
  nativeCall;
end;

procedure RECORD_GREATEST_MOMENT(p0, p1, p2: cint);
begin
  nativeInit(UINT64($66972397E0757E7A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure START_REPLAY_RECORDING(mode: cint);
begin
  nativeInit(UINT64($C3AC2FFF9612AC81));
  nativePush64(UINT64(mode));
  nativeCall;
end;

procedure STOP_REPLAY_RECORDING;
begin
  nativeInit(UINT64($071A5197D6AFC8B3));
  nativeCall;
end;

procedure CANCEL_REPLAY_RECORDING;
begin
  nativeInit(UINT64($88BB3507ED41A240));
  nativeCall;
end;

function SAVE_REPLAY_RECORDING: BOOL;
begin
  nativeInit(UINT64($644546EC5287471B));
  exit(BOOL(nativeCall^));
end;

function IS_REPLAY_RECORDING: BOOL;
begin
  nativeInit(UINT64($1897CA71995A90B4));
  exit(BOOL(nativeCall^));
end;

function IS_REPLAY_INITIALIZED: BOOL;
begin
  nativeInit(UINT64($DF4B952F7D381B95));
  exit(BOOL(nativeCall^));
end;

function IS_REPLAY_AVAILABLE: BOOL;
begin
  nativeInit(UINT64($4282E08174868BE3));
  exit(BOOL(nativeCall^));
end;

function IS_REPLAY_RECORD_SPACE_AVAILABLE(p0: BOOL): BOOL;
begin
  nativeInit(UINT64($33D47E85B476ABCD));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure REGISTER_EFFECT_FOR_REPLAY_EDITOR(p0: PChar; p1: BOOL);
begin
  nativeInit(UINT64($7E2BD3EF6C205F09));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP: BOOL;
begin
  nativeInit(UINT64($95AB8B5C992C7B58));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM;
begin
  nativeInit(UINT64($5AD3932DAEB1E5D3));
  nativeCall;
end;

procedure SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(p0: BOOL);
begin
  nativeInit(UINT64($E058175F8EAFE79A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure REPLAY_CONTROL_SHUTDOWN;
begin
  nativeInit(UINT64($3353D13F09307691));
  nativeCall;
end;

procedure ACTIVATE_ROCKSTAR_EDITOR(p0: cint);
begin
  nativeInit(UINT64($49DA8145672B2725));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function SAVEMIGRATION_IS_MP_ENABLED: BOOL;
begin
  nativeInit(UINT64($84B418E93894AC1C));
  exit(BOOL(nativeCall^));
end;

function SAVEMIGRATION_MP_REQUEST_ACCOUNTS: BOOL;
begin
  nativeInit(UINT64($85F41F9225D08C72));
  exit(BOOL(nativeCall^));
end;

function SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS: cint;
begin
  nativeInit(UINT64($C8CB5999919EA2CA));
  exit(cint(nativeCall^));
end;

function SAVEMIGRATION_MP_NUM_ACCOUNTS: cint;
begin
  nativeInit(UINT64($77A16200E18E0C55));
  exit(cint(nativeCall^));
end;

function SAVEMIGRATION_MP_GET_ACCOUNT(p0: cint; p1: PAny): BOOL;
begin
  nativeInit(UINT64($FCE2747EEF1D05FC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SAVEMIGRATION_MP_REQUEST_STATUS: BOOL;
begin
  nativeInit(UINT64($E5E9746A66359F9D));
  exit(BOOL(nativeCall^));
end;

function SAVEMIGRATION_MP_GET_STATUS: cint;
begin
  nativeInit(UINT64($690B76BD2763E068));
  exit(cint(nativeCall^));
end;

procedure REQUEST_SCRIPT(scriptName: PChar);
begin
  nativeInit(UINT64($6EB5F71AA68F2E8E));
  nativePush64(UINT64(scriptName));
  nativeCall;
end;

procedure SET_SCRIPT_AS_NO_LONGER_NEEDED(scriptName: PChar);
begin
  nativeInit(UINT64($C90D2DCACD56184C));
  nativePush64(UINT64(scriptName));
  nativeCall;
end;

function HAS_SCRIPT_LOADED(scriptName: PChar): BOOL;
begin
  nativeInit(UINT64($E6CC9F3BA0FB9EF1));
  nativePush64(UINT64(scriptName));
  exit(BOOL(nativeCall^));
end;

function DOES_SCRIPT_EXIST(scriptName: PChar): BOOL;
begin
  nativeInit(UINT64($FC04745FBE67C19A));
  nativePush64(UINT64(scriptName));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_SCRIPT_WITH_NAME_HASH(scriptHash: Hash);
begin
  nativeInit(UINT64($D62A67D26D9653E6));
  nativePush64(UINT64(scriptHash));
  nativeCall;
end;

procedure SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(scriptHash: Hash);
begin
  nativeInit(UINT64($C5BC038960E9DB27));
  nativePush64(UINT64(scriptHash));
  nativeCall;
end;

function HAS_SCRIPT_WITH_NAME_HASH_LOADED(scriptHash: Hash): BOOL;
begin
  nativeInit(UINT64($5F0F0C783EB16C04));
  nativePush64(UINT64(scriptHash));
  exit(BOOL(nativeCall^));
end;

function DOES_SCRIPT_WITH_NAME_HASH_EXIST(scriptHash: Hash): BOOL;
begin
  nativeInit(UINT64($F86AA3C56BA31381));
  nativePush64(UINT64(scriptHash));
  exit(BOOL(nativeCall^));
end;

procedure TERMINATE_THREAD(threadId: cint);
begin
  nativeInit(UINT64($C8B189ED9138BCD4));
  nativePush64(UINT64(threadId));
  nativeCall;
end;

function IS_THREAD_ACTIVE(threadId: cint): BOOL;
begin
  nativeInit(UINT64($46E9AE36D8FA6417));
  nativePush64(UINT64(threadId));
  exit(BOOL(nativeCall^));
end;

function GET_NAME_OF_SCRIPT_WITH_THIS_ID(threadId: cint): PChar;
begin
  nativeInit(UINT64($05A42BA9FC8DA96B));
  nativePush64(UINT64(threadId));
  exit(PChar(nativeCall^));
end;

procedure SCRIPT_THREAD_ITERATOR_RESET;
begin
  nativeInit(UINT64($DADFADA5A20143A8));
  nativeCall;
end;

function SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID: cint;
begin
  nativeInit(UINT64($30B4FA1C82DD4B9F));
  exit(cint(nativeCall^));
end;

function GET_ID_OF_THIS_THREAD: cint;
begin
  nativeInit(UINT64($C30338E8088E2E21));
  exit(cint(nativeCall^));
end;

procedure TERMINATE_THIS_THREAD;
begin
  nativeInit(UINT64($1090044AD1DA76FA));
  nativeCall;
end;

function GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(scriptHash: Hash): cint;
begin
  nativeInit(UINT64($2C83A9DA6BFFC4F9));
  nativePush64(UINT64(scriptHash));
  exit(cint(nativeCall^));
end;

function GET_THIS_SCRIPT_NAME: PChar;
begin
  nativeInit(UINT64($442E0A7EDE4A738A));
  exit(PChar(nativeCall^));
end;

function GET_HASH_OF_THIS_SCRIPT_NAME: Hash;
begin
  nativeInit(UINT64($8A1C8B1738FFE87E));
  exit(Hash(nativeCall^));
end;

function GET_NUMBER_OF_EVENTS(eventGroup: cint): cint;
begin
  nativeInit(UINT64($5F92A689A06620AA));
  nativePush64(UINT64(eventGroup));
  exit(cint(nativeCall^));
end;

function GET_EVENT_EXISTS(eventGroup, eventIndex: cint): BOOL;
begin
  nativeInit(UINT64($936E6168A9BCEDB5));
  nativePush64(UINT64(eventGroup));
  nativePush64(UINT64(eventIndex));
  exit(BOOL(nativeCall^));
end;

function GET_EVENT_AT_INDEX(eventGroup, eventIndex: cint): cint;
begin
  nativeInit(UINT64($D8F66A3A60C62153));
  nativePush64(UINT64(eventGroup));
  nativePush64(UINT64(eventIndex));
  exit(cint(nativeCall^));
end;

function GET_EVENT_DATA(eventGroup, eventIndex: cint; eventData: PAny; eventDataSize: cint): BOOL;
begin
  nativeInit(UINT64($2902843FCD2B2D79));
  nativePush64(UINT64(eventGroup));
  nativePush64(UINT64(eventIndex));
  nativePush64(UINT64(eventData));
  nativePush64(UINT64(eventDataSize));
  exit(BOOL(nativeCall^));
end;

procedure TRIGGER_SCRIPT_EVENT(eventGroup: cint; eventData: PAny; eventDataSize, playerBits: cint);
begin
  nativeInit(UINT64($5AE99C571D5BBE5D));
  nativePush64(UINT64(eventGroup));
  nativePush64(UINT64(eventData));
  nativePush64(UINT64(eventDataSize));
  nativePush64(UINT64(playerBits));
  nativeCall;
end;

procedure SHUTDOWN_LOADING_SCREEN;
begin
  nativeInit(UINT64($078EBE9809CCD637));
  nativeCall;
end;

procedure SET_NO_LOADING_SCREEN(toggle: BOOL);
begin
  nativeInit(UINT64($5262CC1995D07E09));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_NO_LOADING_SCREEN: BOOL;
begin
  nativeInit(UINT64($18C1270EA7F199BC));
  exit(BOOL(nativeCall^));
end;

procedure COMMIT_TO_LOADINGSCREEN_SELCTION;
begin
  nativeInit(UINT64($B1577667C3708F9B));
  nativeCall;
end;

function BG_IS_EXITFLAG_SET: BOOL;
begin
  nativeInit(UINT64($836B62713E0534CA));
  exit(BOOL(nativeCall^));
end;

procedure BG_SET_EXITFLAG_RESPONSE;
begin
  nativeInit(UINT64($760910B49D2B98EA));
  nativeCall;
end;

procedure BG_START_CONTEXT_HASH(contextHash: Hash);
begin
  nativeInit(UINT64($75B18E49607874C7));
  nativePush64(UINT64(contextHash));
  nativeCall;
end;

procedure BG_END_CONTEXT_HASH(contextHash: Hash);
begin
  nativeInit(UINT64($107E5CC7CA942BC1));
  nativePush64(UINT64(contextHash));
  nativeCall;
end;

procedure BG_START_CONTEXT(contextName: PChar);
begin
  nativeInit(UINT64($9D5A25BADB742ACD));
  nativePush64(UINT64(contextName));
  nativeCall;
end;

procedure BG_END_CONTEXT(contextName: PChar);
begin
  nativeInit(UINT64($DC2BACD920D0A0DD));
  nativePush64(UINT64(contextName));
  nativeCall;
end;

function BG_DOES_LAUNCH_PARAM_EXIST(scriptIndex: cint; p1: PChar): BOOL;
begin
  nativeInit(UINT64($0F6F1EBBC4E1D5E6));
  nativePush64(UINT64(scriptIndex));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function BG_GET_LAUNCH_PARAM_VALUE(scriptIndex: cint; p1: PChar): cint;
begin
  nativeInit(UINT64($22E21FBCFC88C149));
  nativePush64(UINT64(scriptIndex));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function BG_GET_SCRIPT_ID_FROM_NAME_HASH(p0: Hash): cint;
begin
  nativeInit(UINT64($829CD22E043A2577));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure _SEND_TU_SCRIPT_EVENT_NEW(eventGroup: cint; eventData: PAny; eventDataSize, playerBits: cint; eventType: Hash);
begin
  nativeInit(UINT64($71A6F836422FDD2B));
  nativePush64(UINT64(eventGroup));
  nativePush64(UINT64(eventData));
  nativePush64(UINT64(eventDataSize));
  nativePush64(UINT64(playerBits));
  nativePush64(UINT64(eventType));
  nativeCall;
end;

procedure REGISTER_SCRIPT_VARIABLE(variable: PAny);
begin
  nativeInit(UINT64($40EB1EFD921822BC));
  nativePush64(UINT64(variable));
  nativeCall;
end;

procedure UNREGISTER_SCRIPT_VARIABLE(variable: PAny);
begin
  nativeInit(UINT64($340A36A700E99699));
  nativePush64(UINT64(variable));
  nativeCall;
end;

procedure FORCE_CHECK_SCRIPT_VARIABLES;
begin
  nativeInit(UINT64($8E580AB902917360));
  nativeCall;
end;

function START_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2: cfloat; flags: cint; para_entity: Entity; p8: cint): cint;
begin
  nativeInit(UINT64($7EE9F5D83DD4F90E));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p8));
  exit(cint(nativeCall^));
end;

function START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(x1, y1, z1, x2, y2, z2: cfloat; flags: cint; para_entity: Entity; p8: cint): cint;
begin
  nativeInit(UINT64($377906D8A31E5586));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p8));
  exit(cint(nativeCall^));
end;

function START_SHAPE_TEST_BOUNDING_BOX(para_entity: Entity; flags1, flags2: cint): cint;
begin
  nativeInit(UINT64($052837721A854EC7));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(flags1));
  nativePush64(UINT64(flags2));
  exit(cint(nativeCall^));
end;

function START_SHAPE_TEST_BOX(x, y, z, dimX, dimY, dimZ, rotX, rotY, rotZ: cfloat; p9: Any; flags: cint; para_entity: Entity; p12: Any): cint;
begin
  nativeInit(UINT64($FE466162C4401D18));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@dimX)^);
  nativePush64(PUINT64(@dimY)^);
  nativePush64(PUINT64(@dimZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(p9));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p12));
  exit(cint(nativeCall^));
end;

function START_SHAPE_TEST_BOUND(para_entity: Entity; flags1, flags2: cint): cint;
begin
  nativeInit(UINT64($37181417CE7C8900));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(flags1));
  nativePush64(UINT64(flags2));
  exit(cint(nativeCall^));
end;

function START_SHAPE_TEST_CAPSULE(x1, y1, z1, x2, y2, z2, radius: cfloat; flags: cint; para_entity: Entity; p9: cint): cint;
begin
  nativeInit(UINT64($28579D1B8F8AAC80));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p9));
  exit(cint(nativeCall^));
end;

function START_SHAPE_TEST_SWEPT_SPHERE(x1, y1, z1, x2, y2, z2, radius: cfloat; flags: cint; para_entity: Entity; p9: Any): cint;
begin
  nativeInit(UINT64($E6AC6C45FBE83004));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(p9));
  exit(cint(nativeCall^));
end;

function START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(pVec1, pVec2: PVector3; flag: cint; para_entity: Entity; flag2: cint): cint;
begin
  nativeInit(UINT64($FF6BE494C7987F34));
  nativePush64(UINT64(pVec1));
  nativePush64(UINT64(pVec2));
  nativePush64(UINT64(flag));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(flag2));
  exit(cint(nativeCall^));
end;

function GET_SHAPE_TEST_RESULT(shapeTestHandle: cint; hit: PBOOL; endCoords, surfaceNormal: PVector3; entityHit: PEntity): cint;
begin
  nativeInit(UINT64($3D87450E15D98694));
  nativePush64(UINT64(shapeTestHandle));
  nativePush64(UINT64(hit));
  nativePush64(UINT64(endCoords));
  nativePush64(UINT64(surfaceNormal));
  nativePush64(UINT64(entityHit));
  exit(cint(nativeCall^));
end;

function GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(shapeTestHandle: cint; hit: PBOOL; endCoords, surfaceNormal: PVector3; materialHash: PHash; entityHit: PEntity): cint;
begin
  nativeInit(UINT64($65287525D951F6BE));
  nativePush64(UINT64(shapeTestHandle));
  nativePush64(UINT64(hit));
  nativePush64(UINT64(endCoords));
  nativePush64(UINT64(surfaceNormal));
  nativePush64(UINT64(materialHash));
  nativePush64(UINT64(entityHit));
  exit(cint(nativeCall^));
end;

procedure RELEASE_SCRIPT_GUID_FROM_ENTITY(entityHit: Entity);
begin
  nativeInit(UINT64($2B3334BCA57CD799));
  nativePush64(UINT64(entityHit));
  nativeCall;
end;

function SC_INBOX_GET_TOTAL_NUM_MESSAGES: cint;
begin
  nativeInit(UINT64($03A93FF1A2CA0864));
  exit(cint(nativeCall^));
end;

function SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(msgIndex: cint): Hash;
begin
  nativeInit(UINT64($BB8EA16ECBC976C4));
  nativePush64(UINT64(msgIndex));
  exit(Hash(nativeCall^));
end;

function SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(msgIndex: cint): BOOL;
begin
  nativeInit(UINT64($93028F1DB42BFD08));
  nativePush64(UINT64(msgIndex));
  exit(BOOL(nativeCall^));
end;

function SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(msgIndex: cint): BOOL;
begin
  nativeInit(UINT64($2C015348CF19CA1D));
  nativePush64(UINT64(msgIndex));
  exit(BOOL(nativeCall^));
end;

function SC_INBOX_MESSAGE_GET_DATA_INT(p0: cint; context: PChar; _out: pcint): BOOL;
begin
  nativeInit(UINT64($A00EFE4082C4056E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(context));
  nativePush64(UINT64(_out));
  exit(BOOL(nativeCall^));
end;

function SC_INBOX_MESSAGE_GET_DATA_BOOL(p0: cint; p1: PChar): BOOL;
begin
  nativeInit(UINT64($FFE5C16F402D851D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_INBOX_MESSAGE_GET_DATA_STRING(p0: cint; context, _out: PChar): BOOL;
begin
  nativeInit(UINT64($7572EF42FC6A9B6D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(context));
  nativePush64(UINT64(_out));
  exit(BOOL(nativeCall^));
end;

function SC_INBOX_MESSAGE_DO_APPLY(p0: cint): BOOL;
begin
  nativeInit(UINT64($9A2C8064B6C1E41A));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(p0: cint): PChar;
begin
  nativeInit(UINT64($F3E31D16CBDCB304));
  nativePush64(UINT64(p0));
  exit(PChar(nativeCall^));
end;

procedure SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(gamerHandle: PAny);
begin
  nativeInit(UINT64($DA024BDBD600F44A));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

procedure SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(data: PAny);
begin
  nativeInit(UINT64($A68D3D229F4F3B06));
  nativePush64(UINT64(data));
  nativeCall;
end;

function SC_INBOX_MESSAGE_GET_UGCDATA(p0: cint; p1: PAny): BOOL;
begin
  nativeInit(UINT64($69D82604A1A5A254));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(index: cint; outData: PAny): BOOL;
begin
  nativeInit(UINT64($87E0052F08BD64E6));
  nativePush64(UINT64(index));
  nativePush64(UINT64(outData));
  exit(BOOL(nativeCall^));
end;

procedure SC_EMAIL_RETRIEVE_EMAILS(offset, limit: cint);
begin
  nativeInit(UINT64($040ADDCBAFA1018A));
  nativePush64(UINT64(offset));
  nativePush64(UINT64(limit));
  nativeCall;
end;

function SC_EMAIL_GET_RETRIEVAL_STATUS: cint;
begin
  nativeInit(UINT64($16DA8172459434AA));
  exit(cint(nativeCall^));
end;

function SC_EMAIL_GET_NUM_RETRIEVED_EMAILS: cint;
begin
  nativeInit(UINT64($7DB18CA8CAD5B098));
  exit(cint(nativeCall^));
end;

function SC_EMAIL_GET_EMAIL_AT_INDEX(p0: cint; p1: PAny): BOOL;
begin
  nativeInit(UINT64($4737980E8A283806));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SC_EMAIL_DELETE_EMAILS(p0: PAny; p1: Any);
begin
  nativeInit(UINT64($44ACA259D67651DB));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(gamerHandle: PAny);
begin
  nativeInit(UINT64($2330C12A7A605D16));
  nativePush64(UINT64(gamerHandle));
  nativeCall;
end;

procedure SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST;
begin
  nativeInit(UINT64($55DF6DB45179236E));
  nativeCall;
end;

procedure SC_EMAIL_SEND_EMAIL(p0: PChar);
begin
  nativeInit(UINT64($116FB94DC4B79F17));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function SC_EMAIL_SET_CURRENT_EMAIL_TAG(p0: Any): BOOL;
begin
  nativeInit(UINT64($07DBD622D9533857));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure SC_CACHE_NEW_ROCKSTAR_MSGS(toggle: BOOL);
begin
  nativeInit(UINT64($BFA0A56A817C6C7D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function SC_HAS_NEW_ROCKSTAR_MSG: BOOL;
begin
  nativeInit(UINT64($BC1CC91205EC8D6E));
  exit(BOOL(nativeCall^));
end;

function SC_GET_NEW_ROCKSTAR_MSG: PChar;
begin
  nativeInit(UINT64($DF649C4E9AFDD788));
  exit(PChar(nativeCall^));
end;

function SC_PRESENCE_ATTR_SET_INT(attrHash: Hash; value: cint): BOOL;
begin
  nativeInit(UINT64($1F1E9682483697C7));
  nativePush64(UINT64(attrHash));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function SC_PRESENCE_ATTR_SET_FLOAT(attrHash: Hash; value: cfloat): BOOL;
begin
  nativeInit(UINT64($C4C4575F62534A24));
  nativePush64(UINT64(attrHash));
  nativePush64(PUINT64(@value)^);
  exit(BOOL(nativeCall^));
end;

function SC_PRESENCE_ATTR_SET_STRING(attrHash: Hash; value: PChar): BOOL;
begin
  nativeInit(UINT64($287F1F75D2803595));
  nativePush64(UINT64(attrHash));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function SC_PRESENCE_SET_ACTIVITY_RATING(p0: Any; p1: cfloat): BOOL;
begin
  nativeInit(UINT64($487912FD248EFDDF));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  exit(BOOL(nativeCall^));
end;

function SC_GAMERDATA_GET_INT(name: PChar; value: pcint): BOOL;
begin
  nativeInit(UINT64($C85A7127E7AD02AA));
  nativePush64(UINT64(name));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function SC_GAMERDATA_GET_FLOAT(name: PChar; value: pcfloat): BOOL;
begin
  nativeInit(UINT64($A770C8EEC6FB2AC5));
  nativePush64(UINT64(name));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function SC_GAMERDATA_GET_BOOL(name: PChar): BOOL;
begin
  nativeInit(UINT64($8416FE4E4629D7D7));
  nativePush64(UINT64(name));
  exit(BOOL(nativeCall^));
end;

function SC_GAMERDATA_GET_STRING(name, value: PChar): BOOL;
begin
  nativeInit(UINT64($7FFCBFEE44ECFABF));
  nativePush64(UINT64(name));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function SC_GAMERDATA_GET_ACTIVE_XP_BONUS(value: pcfloat): BOOL;
begin
  nativeInit(UINT64($2D874D4AE612A65F));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function SC_PROFANITY_CHECK_STRING(str: PChar; token: pcint): BOOL;
begin
  nativeInit(UINT64($75632C5ECD7ED843));
  nativePush64(UINT64(str));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_PROFANITY_CHECK_STRING_UGC(str: PChar; token: pcint): BOOL;
begin
  nativeInit(UINT64($EB2BF817463DFA28));
  nativePush64(UINT64(str));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_PROFANITY_GET_CHECK_IS_VALID(token: cint): BOOL;
begin
  nativeInit(UINT64($1753344C770358AE));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_PROFANITY_GET_CHECK_IS_PENDING(token: cint): BOOL;
begin
  nativeInit(UINT64($82E4A58BABC15AE7));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_PROFANITY_GET_STRING_PASSED(token: cint): BOOL;
begin
  nativeInit(UINT64($85535ACF97FC0969));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_PROFANITY_GET_STRING_STATUS(token: cint): cint;
begin
  nativeInit(UINT64($930DE22F07B1CCE3));
  nativePush64(UINT64(token));
  exit(cint(nativeCall^));
end;

function SC_LICENSEPLATE_CHECK_STRING(p0: PChar; p1: pcint): BOOL;
begin
  nativeInit(UINT64($F6BAAAF762E1BF40));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_GET_CHECK_IS_VALID(p0: Any): BOOL;
begin
  nativeInit(UINT64($F22CA0FD74B80E7A));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_GET_CHECK_IS_PENDING(p0: Any): BOOL;
begin
  nativeInit(UINT64($9237E334F6E43156));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_GET_COUNT(token: cint): cint;
begin
  nativeInit(UINT64($700569DBA175A77C));
  nativePush64(UINT64(token));
  exit(cint(nativeCall^));
end;

function SC_LICENSEPLATE_GET_PLATE(token, plateIndex: cint): PChar;
begin
  nativeInit(UINT64($1D4446A62D35B0D0));
  nativePush64(UINT64(token));
  nativePush64(UINT64(plateIndex));
  exit(PChar(nativeCall^));
end;

function SC_LICENSEPLATE_GET_PLATE_DATA(token, plateIndex: cint): PChar;
begin
  nativeInit(UINT64($2E89990DDFF670C3));
  nativePush64(UINT64(token));
  nativePush64(UINT64(plateIndex));
  exit(PChar(nativeCall^));
end;

function SC_LICENSEPLATE_SET_PLATE_DATA(oldPlateText, newPlateText: PChar; plateData: PAny): BOOL;
begin
  nativeInit(UINT64($D0EE05FE193646EA));
  nativePush64(UINT64(oldPlateText));
  nativePush64(UINT64(newPlateText));
  nativePush64(UINT64(plateData));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_ADD(plateText: PChar; plateData: PAny; token: pcint): BOOL;
begin
  nativeInit(UINT64($1989C6E6F67E76A8));
  nativePush64(UINT64(plateText));
  nativePush64(UINT64(plateData));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_GET_ADD_IS_PENDING(token: cint): BOOL;
begin
  nativeInit(UINT64($07C61676E5BB52CD));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_GET_ADD_STATUS(token: cint): cint;
begin
  nativeInit(UINT64($8147FFF6A718E1AD));
  nativePush64(UINT64(token));
  exit(cint(nativeCall^));
end;

function SC_LICENSEPLATE_ISVALID(plateText: PChar; token: pcint): BOOL;
begin
  nativeInit(UINT64($0F73393BAC7E6730));
  nativePush64(UINT64(plateText));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(token: cint): BOOL;
begin
  nativeInit(UINT64($D302E99EDF0449CF));
  nativePush64(UINT64(token));
  exit(BOOL(nativeCall^));
end;

function SC_LICENSEPLATE_GET_ISVALID_STATUS(token: cint): cint;
begin
  nativeInit(UINT64($5C4EBFFA98BDB41C));
  nativePush64(UINT64(token));
  exit(cint(nativeCall^));
end;

function SC_COMMUNITY_EVENT_IS_ACTIVE: BOOL;
begin
  nativeInit(UINT64($FF8F3A92B75ED67A));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EVENT_ID: cint;
begin
  nativeInit(UINT64($4ED9C8D6DA297639));
  exit(cint(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(p0: PChar; p1: pcint): BOOL;
begin
  nativeInit(UINT64($710BCDA8071EDED1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(p0: PChar; p1: pcfloat): BOOL;
begin
  nativeInit(UINT64($50A8A36201DBF83E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(p0, p1: PChar): BOOL;
begin
  nativeInit(UINT64($9DE5D2F723575ED0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(p0: PChar): BOOL;
begin
  nativeInit(UINT64($C2C97EA97711D1AE));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(p0: PChar): BOOL;
begin
  nativeInit(UINT64($450819D8CF90C416));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(p0: PChar): cint;
begin
  nativeInit(UINT64($4A7D6E727F941747));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(p0: PChar; p1: pcint; p2: PChar): BOOL;
begin
  nativeInit(UINT64($E75A4A2E5E316D86));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(p0: PChar; p1: pcfloat; p2: PChar): BOOL;
begin
  nativeInit(UINT64($2570E26BE63964E3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(p0, p1, p2: PChar): BOOL;
begin
  nativeInit(UINT64($1D12A56FC95BE92E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(p0, p1: PChar): BOOL;
begin
  nativeInit(UINT64($33DF47CC0642061B));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(p0: cint): BOOL;
begin
  nativeInit(UINT64($A468E0BE12B12C70));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(p0: cint; p1: PChar; p2: pcint): BOOL;
begin
  nativeInit(UINT64($8CC469AB4D349B7C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(p0: cint; p1: PChar; p2: pcfloat): BOOL;
begin
  nativeInit(UINT64($C5A35C73B68F3C49));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(p0: cint; p1, p2: PChar): BOOL;
begin
  nativeInit(UINT64($699E4A5C8C893A18));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(p0: cint; p1: PChar): BOOL;
begin
  nativeInit(UINT64($19853B5B17D77BCA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_TRANSITION_NEWS_SHOW(p0: Any): BOOL;
begin
  nativeInit(UINT64($6BFB12CE158E3DD4));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_TRANSITION_NEWS_SHOW_TIMED(p0, p1: Any): BOOL;
begin
  nativeInit(UINT64($FE4C1D0D3B9CC17E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function SC_TRANSITION_NEWS_SHOW_NEXT_ITEM: BOOL;
begin
  nativeInit(UINT64($D8122C407663B995));
  exit(BOOL(nativeCall^));
end;

function SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU: BOOL;
begin
  nativeInit(UINT64($3001BEF2FECA3680));
  exit(BOOL(nativeCall^));
end;

function SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(p0: PChar; p1: pcint): BOOL;
begin
  nativeInit(UINT64($92DA6E70EF249BD1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SC_TRANSITION_NEWS_END;
begin
  nativeInit(UINT64($675721C9F644D161));
  nativeCall;
end;

function SC_PAUSE_NEWS_INIT_STARTER_PACK(p0: Any): BOOL;
begin
  nativeInit(UINT64($E4F6E8D07A2F0F51));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_PAUSE_NEWS_GET_PENDING_STORY(p0: Any): BOOL;
begin
  nativeInit(UINT64($8A4416C0DB05FA66));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure SC_PAUSE_NEWS_SHUTDOWN;
begin
  nativeInit(UINT64($EA95C0853A27888E));
  nativeCall;
end;

function SC_ACCOUNT_INFO_GET_NICKNAME: PChar;
begin
  nativeInit(UINT64($198D161F458ECC7F));
  exit(PChar(nativeCall^));
end;

function SC_ACHIEVEMENT_INFO_STATUS(p0: pcint): BOOL;
begin
  nativeInit(UINT64($225798743970412B));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SC_HAS_ACHIEVEMENT_BEEN_PASSED(achievementId: cint): BOOL;
begin
  nativeInit(UINT64($418DC16FAE452C1C));
  nativePush64(UINT64(achievementId));
  exit(BOOL(nativeCall^));
end;

function STAT_CLEAR_SLOT_FOR_RELOAD(statSlot: cint): BOOL;
begin
  nativeInit(UINT64($EB0A72181D4AA4AD));
  nativePush64(UINT64(statSlot));
  exit(BOOL(nativeCall^));
end;

function STAT_LOAD(statSlot: cint): BOOL;
begin
  nativeInit(UINT64($A651443F437B1CE6));
  nativePush64(UINT64(statSlot));
  exit(BOOL(nativeCall^));
end;

function STAT_SAVE(p0: cint; p1: BOOL; p2: cint; p3: BOOL): BOOL;
begin
  nativeInit(UINT64($E07BCA305B82D2FD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure STAT_SET_OPEN_SAVETYPE_IN_JOB(p0: cint);
begin
  nativeInit(UINT64($5688585E6D563CD8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function STAT_LOAD_PENDING(statSlot: cint): BOOL;
begin
  nativeInit(UINT64($A1750FFAFA181661));
  nativePush64(UINT64(statSlot));
  exit(BOOL(nativeCall^));
end;

function STAT_SAVE_PENDING: BOOL;
begin
  nativeInit(UINT64($7D3A583856F2C5AC));
  exit(BOOL(nativeCall^));
end;

function STAT_SAVE_PENDING_OR_REQUESTED: BOOL;
begin
  nativeInit(UINT64($BBB6AD006F1BBEA3));
  exit(BOOL(nativeCall^));
end;

function STAT_DELETE_SLOT(p0: cint): BOOL;
begin
  nativeInit(UINT64($49A49BED12794D70));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function STAT_SLOT_IS_LOADED(statSlot: cint): BOOL;
begin
  nativeInit(UINT64($0D0A9F0E7BD91E3C));
  nativePush64(UINT64(statSlot));
  exit(BOOL(nativeCall^));
end;

function STAT_CLOUD_SLOT_LOAD_FAILED(p0: cint): BOOL;
begin
  nativeInit(UINT64($7F2C4CDF2E82DF4C));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function STAT_CLOUD_SLOT_LOAD_FAILED_CODE(p0: Any): cint;
begin
  nativeInit(UINT64($E496A53BA5F50A56));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure STAT_SET_BLOCK_SAVES(toggle: BOOL);
begin
  nativeInit(UINT64($F434A10BA01C37D0));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function STAT_GET_BLOCK_SAVES: BOOL;
begin
  nativeInit(UINT64($6A7F19756F1A9016));
  exit(BOOL(nativeCall^));
end;

function STAT_CLOUD_SLOT_SAVE_FAILED(p0: Any): BOOL;
begin
  nativeInit(UINT64($7E6946F68A38B74F));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure STAT_CLEAR_PENDING_SAVES(p0: Any);
begin
  nativeInit(UINT64($A8733668D1047B51));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function STAT_LOAD_DIRTY_READ_DETECTED: BOOL;
begin
  nativeInit(UINT64($ECB41AC6AB754401));
  exit(BOOL(nativeCall^));
end;

procedure STAT_CLEAR_DIRTY_READ_DETECTED;
begin
  nativeInit(UINT64($9B4BD21D69B1E609));
  nativeCall;
end;

function STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP: BOOL;
begin
  nativeInit(UINT64($C0E0D686DDFC6EAE));
  exit(BOOL(nativeCall^));
end;

function _GET_STAT_HASH_FOR_CHARACTER_STAT(dataType, statIndex, charSlot: cint): Hash;
begin
  nativeInit(UINT64($D69CE161FE614531));
  nativePush64(UINT64(dataType));
  nativePush64(UINT64(statIndex));
  nativePush64(UINT64(charSlot));
  exit(Hash(nativeCall^));
end;

function STAT_SET_INT(statName: Hash; value: cint; save: BOOL): BOOL;
begin
  nativeInit(UINT64($B3271D7AB655B441));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(value));
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_FLOAT(statName: Hash; value: cfloat; save: BOOL): BOOL;
begin
  nativeInit(UINT64($4851997F37FE9B3C));
  nativePush64(UINT64(statName));
  nativePush64(PUINT64(@value)^);
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_BOOL(statName: Hash; value, save: BOOL): BOOL;
begin
  nativeInit(UINT64($4B33C4243DE0C432));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(value));
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_GXT_LABEL(statName: Hash; value: PChar; save: BOOL): BOOL;
begin
  nativeInit(UINT64($17695002FD8B2AE0));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(value));
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_DATE(statName: Hash; value: PAny; numFields: cint; save: BOOL): BOOL;
begin
  nativeInit(UINT64($2C29BFB64F4FCBE4));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(value));
  nativePush64(UINT64(numFields));
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_STRING(statName: Hash; value: PChar; save: BOOL): BOOL;
begin
  nativeInit(UINT64($A87B2335D12531D7));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(value));
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_POS(statName: Hash; x, y, z: cfloat; save: BOOL): BOOL;
begin
  nativeInit(UINT64($DB283FDE680FE72E));
  nativePush64(UINT64(statName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_MASKED_INT(statName: Hash; p1, p2, p3: cint; save: BOOL): BOOL;
begin
  nativeInit(UINT64($7BBB1B54583ED410));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_USER_ID(statName: Hash; value: PChar; save: BOOL): BOOL;
begin
  nativeInit(UINT64($8CDDF1E452BABE11));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(value));
  nativePush64(UINT64(save));
  exit(BOOL(nativeCall^));
end;

function STAT_SET_CURRENT_POSIX_TIME(statName: Hash; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($C2F84B7F9C4D0C61));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_INT(statHash: Hash; outValue: pcint; p2: cint): BOOL;
begin
  nativeInit(UINT64($767FBC2AC802EF3D));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_FLOAT(statHash: Hash; outValue: pcfloat; p2: Any): BOOL;
begin
  nativeInit(UINT64($D7AE6C9C9C6AC54C));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_BOOL(statHash: Hash; outValue: PBOOL; p2: Any): BOOL;
begin
  nativeInit(UINT64($11B5E6D2AE73F48E));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_DATE(statHash: Hash; outValue: PAny; numFields: cint; p3: Any): BOOL;
begin
  nativeInit(UINT64($8B0FACEFC36C824B));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(numFields));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_STRING(statHash: Hash; p1: cint): PChar;
begin
  nativeInit(UINT64($E50384ACC2C3DB74));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(p1));
  exit(PChar(nativeCall^));
end;

function STAT_GET_POS(statName: Hash; outX, outY, outZ: pcfloat; p4: Any): BOOL;
begin
  nativeInit(UINT64($350F82CCB186AA1B));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(outX));
  nativePush64(UINT64(outY));
  nativePush64(UINT64(outZ));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_MASKED_INT(statHash: Hash; outValue: pcint; p2, p3: cint; p4: Any): BOOL;
begin
  nativeInit(UINT64($655185A06D9EEAAB));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(outValue));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_USER_ID(statHash: Hash): PChar;
begin
  nativeInit(UINT64($2365C388E393BBE2));
  nativePush64(UINT64(statHash));
  exit(PChar(nativeCall^));
end;

function STAT_GET_LICENSE_PLATE(statName: Hash): PChar;
begin
  nativeInit(UINT64($5473D4195058B2E4));
  nativePush64(UINT64(statName));
  exit(PChar(nativeCall^));
end;

function STAT_SET_LICENSE_PLATE(statName: Hash; str: PChar): BOOL;
begin
  nativeInit(UINT64($69FF13266D7296DA));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(str));
  exit(BOOL(nativeCall^));
end;

procedure STAT_INCREMENT(statName: Hash; value: cfloat);
begin
  nativeInit(UINT64($9B5A68C6489E9909));
  nativePush64(UINT64(statName));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function STAT_COMMUNITY_START_SYNCH: BOOL;
begin
  nativeInit(UINT64($5A556B229A169402));
  exit(BOOL(nativeCall^));
end;

function STAT_COMMUNITY_SYNCH_IS_PENDING: BOOL;
begin
  nativeInit(UINT64($B1D2BB1E1631F5B1));
  exit(BOOL(nativeCall^));
end;

function STAT_COMMUNITY_GET_HISTORY(statName: Hash; p1: cint; outValue: pcfloat): BOOL;
begin
  nativeInit(UINT64($BED9F5693F34ED17));
  nativePush64(UINT64(statName));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(outValue));
  exit(BOOL(nativeCall^));
end;

procedure STAT_RESET_ALL_ONLINE_CHARACTER_STATS(p0: cint);
begin
  nativeInit(UINT64($26D7399B9587FE89));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(p0: cint);
begin
  nativeInit(UINT64($A78B8FA58200DA56));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function STAT_GET_NUMBER_OF_DAYS(statName: Hash): cint;
begin
  nativeInit(UINT64($E0E854F5280FB769));
  nativePush64(UINT64(statName));
  exit(cint(nativeCall^));
end;

function STAT_GET_NUMBER_OF_HOURS(statName: Hash): cint;
begin
  nativeInit(UINT64($F2D4B2FE415AAFC3));
  nativePush64(UINT64(statName));
  exit(cint(nativeCall^));
end;

function STAT_GET_NUMBER_OF_MINUTES(statName: Hash): cint;
begin
  nativeInit(UINT64($7583B4BE4C5A41B5));
  nativePush64(UINT64(statName));
  exit(cint(nativeCall^));
end;

function STAT_GET_NUMBER_OF_SECONDS(statName: Hash): cint;
begin
  nativeInit(UINT64($2CE056FF3723F00B));
  nativePush64(UINT64(statName));
  exit(cint(nativeCall^));
end;

procedure STAT_SET_PROFILE_SETTING_VALUE(profileSetting, value: cint);
begin
  nativeInit(UINT64($68F01422BE1D838F));
  nativePush64(UINT64(profileSetting));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure STATS_COMPLETED_CHARACTER_CREATION(p0: Any);
begin
  nativeInit(UINT64($C01D2470F22CDE5A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function PACKED_STAT_GET_INT_STAT_INDEX(p0: cint): cint;
begin
  nativeInit(UINT64($94F12ABF9C79E339));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function GET_PACKED_INT_STAT_KEY(index: cint; spStat, charStat: BOOL; character: cint): Hash;
begin
  nativeInit(UINT64($61E111E323419E07));
  nativePush64(UINT64(index));
  nativePush64(UINT64(spStat));
  nativePush64(UINT64(charStat));
  nativePush64(UINT64(character));
  exit(Hash(nativeCall^));
end;

function GET_PACKED_TU_INT_STAT_KEY(index: cint; spStat, charStat: BOOL; character: cint): Hash;
begin
  nativeInit(UINT64($D16C2AD6B8E32854));
  nativePush64(UINT64(index));
  nativePush64(UINT64(spStat));
  nativePush64(UINT64(charStat));
  nativePush64(UINT64(character));
  exit(Hash(nativeCall^));
end;

function GET_PACKED_NG_INT_STAT_KEY(index: cint; spStat, charStat: BOOL; character: cint; section: PChar): Hash;
begin
  nativeInit(UINT64($2B4CDCA6F07FF3DA));
  nativePush64(UINT64(index));
  nativePush64(UINT64(spStat));
  nativePush64(UINT64(charStat));
  nativePush64(UINT64(character));
  nativePush64(UINT64(section));
  exit(Hash(nativeCall^));
end;

function GET_PACKED_STAT_BOOL_CODE(index, characterSlot: cint): BOOL;
begin
  nativeInit(UINT64($DA7EBFC49AE3F1B0));
  nativePush64(UINT64(index));
  nativePush64(UINT64(characterSlot));
  exit(BOOL(nativeCall^));
end;

function GET_PACKED_STAT_INT_CODE(index, characterSlot: cint): cint;
begin
  nativeInit(UINT64($0BC900A6FE73770C));
  nativePush64(UINT64(index));
  nativePush64(UINT64(characterSlot));
  exit(cint(nativeCall^));
end;

procedure SET_PACKED_STAT_BOOL_CODE(index: cint; value: BOOL; characterSlot: cint);
begin
  nativeInit(UINT64($DB8A58AEAA67CD07));
  nativePush64(UINT64(index));
  nativePush64(UINT64(value));
  nativePush64(UINT64(characterSlot));
  nativeCall;
end;

procedure SET_PACKED_STAT_INT_CODE(index, value, characterSlot: cint);
begin
  nativeInit(UINT64($1581503AE529CD2E));
  nativePush64(UINT64(index));
  nativePush64(UINT64(value));
  nativePush64(UINT64(characterSlot));
  nativeCall;
end;

procedure PLAYSTATS_BACKGROUND_SCRIPT_ACTION(action: PChar; value: cint);
begin
  nativeInit(UINT64($5009DFD741329729));
  nativePush64(UINT64(action));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure _PLAYSTATS_FLOW_LOW(posX, posY, posZ: cfloat; p3: PChar; p4: Any; amount: cint);
begin
  nativeInit(UINT64($E6A27CDA42887F93));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure _PLAYSTATS_FLOW_MEDIUM(x, y, z: cfloat; interiorAction: PChar; p4: cint; p5: Hash);
begin
  nativeInit(UINT64($C4493521BAA12CCE));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(interiorAction));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure PLAYSTATS_NPC_INVITE(p0: PChar);
begin
  nativeInit(UINT64($93054C88E6AA7C44));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_AWARD_XP(amount: cint; _type, category: Hash);
begin
  nativeInit(UINT64($46F917F6B4128FE4));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(_type));
  nativePush64(UINT64(category));
  nativeCall;
end;

procedure PLAYSTATS_RANK_UP(rank: cint);
begin
  nativeInit(UINT64($C7F2DE41D102BFB4));
  nativePush64(UINT64(rank));
  nativeCall;
end;

procedure PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE;
begin
  nativeInit(UINT64($098760C7461724CD));
  nativeCall;
end;

procedure PLAYSTATS_ACTIVITY_DONE(p0, activityId: cint; p2: Any);
begin
  nativeInit(UINT64($A071E0ED98F91286));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(activityId));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PLAYSTATS_LEAVE_JOB_CHAIN(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($C5BE134EC7BA96A0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_MISSION_STARTED(p0: PChar; p1, p2: Any; p3: BOOL);
begin
  nativeInit(UINT64($C19A2925C34D2231));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_MISSION_OVER(p0: PChar; p1, p2: Any; p3, p4, p5: BOOL);
begin
  nativeInit(UINT64($7C4BB33A8CED7324));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure PLAYSTATS_MISSION_CHECKPOINT(p0: PChar; p1, p2, p3: Any);
begin
  nativeInit(UINT64($C900596A63978C1D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_RANDOM_MISSION_DONE(name: PChar; p1, p2, p3: Any);
begin
  nativeInit(UINT64($71862B1D855F32E1));
  nativePush64(UINT64(name));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_ROS_BET(amount, act: cint; plyr: Player; cm: cfloat);
begin
  nativeInit(UINT64($121FB4DDDC2D5291));
  nativePush64(UINT64(amount));
  nativePush64(UINT64(act));
  nativePush64(UINT64(plyr));
  nativePush64(PUINT64(@cm)^);
  nativeCall;
end;

procedure PLAYSTATS_RACE_CHECKPOINT(p0: Vehicle; p1: Any; p2, p3: cint; p4: Any);
begin
  nativeInit(UINT64($9C375C315099DDE4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

function PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(playerAccountId, posixTime: pcint): BOOL;
begin
  nativeInit(UINT64($6DEE77AFF8C21BD1));
  nativePush64(UINT64(playerAccountId));
  nativePush64(UINT64(posixTime));
  exit(BOOL(nativeCall^));
end;

procedure PLAYSTATS_MATCH_STARTED(p0, p1, p2: Any);
begin
  nativeInit(UINT64($BC80E22DED931E3D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PLAYSTATS_SHOP_ITEM(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($176852ACAAC173D1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_CRATE_DROP_MISSION_DONE(p0, p1, p2, p3, p4, p5, p6, p7: Any);
begin
  nativeInit(UINT64($1CAE5D2E3F9A07F0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure PLAYSTATS_CRATE_CREATED(p0, p1, p2: cfloat);
begin
  nativeInit(UINT64($AFC7E5E075A96F46));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure PLAYSTATS_HOLD_UP_MISSION_DONE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($CB00196B31C39EB1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($2B69F5074C894811));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_RACE_TO_POINT_MISSION_DONE(p0: cint; p1, p2, p3: Any);
begin
  nativeInit(UINT64($ADDD1C754E2E2914));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(p0: Any);
begin
  nativeInit(UINT64($79AB33F0FBFAC40C));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_WEBSITE_VISITED(scaleformHash: Hash; p1: cint);
begin
  nativeInit(UINT64($DDF24D535060F811));
  nativePush64(UINT64(scaleformHash));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure PLAYSTATS_FRIEND_ACTIVITY(p0: cint; p1: BOOL);
begin
  nativeInit(UINT64($0F71DE29AB2258F1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure PLAYSTATS_ODDJOB_DONE(totalTimeMs, p1: cint; p2: BOOL);
begin
  nativeInit(UINT64($69DEA3E9DB727B4C));
  nativePush64(UINT64(totalTimeMs));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PLAYSTATS_PROP_CHANGE(p0: Ped; p1, p2, p3: cint);
begin
  nativeInit(UINT64($BA739D6D5A05D6E7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_CLOTH_CHANGE(p0: Ped; p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($34B973047A2268B9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_WEAPON_MODE_CHANGE(weaponHash, componentHashTo, componentHashFrom: Hash);
begin
  nativeInit(UINT64($E95C8A1875A02CA4));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(componentHashTo));
  nativePush64(UINT64(componentHashFrom));
  nativeCall;
end;

procedure PLAYSTATS_CHEAT_APPLIED(cheat: PChar);
begin
  nativeInit(UINT64($6058665D72302D3F));
  nativePush64(UINT64(cheat));
  nativeCall;
end;

procedure PLAYSTATS_JOB_ACTIVITY_END(p0, p1, p2, p3: PAny);
begin
  nativeInit(UINT64($F8C54A461C3E11DC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_JOB_BEND(p0, p1, p2, p3: PAny);
begin
  nativeInit(UINT64($F5BB8DAC426A52C0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_JOB_LTS_END(p0, p1, p2, p3: PAny);
begin
  nativeInit(UINT64($A736CF7FB7C5BFF4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_JOB_LTS_ROUND_END(p0, p1, p2, p3: PAny);
begin
  nativeInit(UINT64($14E0B2D1AD1044E0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_QUICKFIX_TOOL(element: cint; item: PChar);
begin
  nativeInit(UINT64($90D0622866E80445));
  nativePush64(UINT64(element));
  nativePush64(UINT64(item));
  nativeCall;
end;

procedure PLAYSTATS_IDLE_KICK(msStoodIdle: cint);
begin
  nativeInit(UINT64($5DA3A8DE8CB6226F));
  nativePush64(UINT64(msStoodIdle));
  nativeCall;
end;

procedure PLAYSTATS_SET_JOIN_TYPE(joinType: cint);
begin
  nativeInit(UINT64($D1032E482629049E));
  nativePush64(UINT64(joinType));
  nativeCall;
end;

procedure PLAYSTATS_HEIST_SAVE_CHEAT(para_hash: Hash; p1: cint);
begin
  nativeInit(UINT64($F4FF020A08BC8863));
  nativePush64(UINT64(para_hash));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure PLAYSTATS_APPEND_DIRECTOR_METRIC(p0: PAny);
begin
  nativeInit(UINT64($46326E13DA4E0546));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_AWARD_BAD_SPORT(id: cint);
begin
  nativeInit(UINT64($47B32F5611E6E483));
  nativePush64(UINT64(id));
  nativeCall;
end;

procedure PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(modelHash: Hash);
begin
  nativeInit(UINT64($9572BD4DD6B72122));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure _PLAYSTATS_SHOPMENU_NAV(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($F96E9EA876D9DC92));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_CHALLENGES(p0: Any);
begin
  nativeInit(UINT64($6A60E43998228229));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_VEHICLETARGET(p0: Any);
begin
  nativeInit(UINT64($BFAFDB5FAAA5C5AB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_URBANWARFARE(p0: Any);
begin
  nativeInit(UINT64($8C9D11605E59D955));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(p0: Any);
begin
  nativeInit(UINT64($3DE3AA516FB126A4));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_ATOB(p0: Any);
begin
  nativeInit(UINT64($BAA2F0490E146BE8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_PENNEDIN(p0: Any);
begin
  nativeInit(UINT64($1A7CE7CD3E653485));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_PASSTHEPARCEL(p0: Any);
begin
  nativeInit(UINT64($419615486BBF1956));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_HOTPROPERTY(p0: Any);
begin
  nativeInit(UINT64($84DFC579C2FC214C));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_DEADDROP(p0: Any);
begin
  nativeInit(UINT64($0A9C7F36E5D7B683));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(p0: Any);
begin
  nativeInit(UINT64($164C5FF663790845));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(p0: Any);
begin
  nativeInit(UINT64($EDBF6C9B0D2C65C8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(p0: Any);
begin
  nativeInit(UINT64($6551B1F7F6CD46EA));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_FM_EVENT_HUNTBEAST(p0: Any);
begin
  nativeInit(UINT64($2CD90358F67D0AA8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_PIMENU_HIDE_OPTIONS(data: PAny);
begin
  nativeInit(UINT64($203B381133817079));
  nativePush64(UINT64(data));
  nativeCall;
end;

function LEADERBOARDS_GET_NUMBER_OF_COLUMNS(p0: cint; p1: Any): cint;
begin
  nativeInit(UINT64($117B45156D7EFF2E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS_GET_COLUMN_ID(p0, p1, p2: cint): cint;
begin
  nativeInit(UINT64($C4B5467A1886EA7E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS_GET_COLUMN_TYPE(p0: cint; p1, p2: Any): cint;
begin
  nativeInit(UINT64($BF4FEF46DB7894D3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS_READ_CLEAR_ALL: cint;
begin
  nativeInit(UINT64($A34CB6E6F0DF4A0B));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS_READ_CLEAR(p0, p1, p2: Any): cint;
begin
  nativeInit(UINT64($7CCE5C737A665701));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS_READ_PENDING(p0, p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($AC392C8483342AC2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS_READ_ANY_PENDING: BOOL;
begin
  nativeInit(UINT64($A31FD15197B192BD));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS_READ_SUCCESSFUL(p0, p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($2FB19228983E832C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_FRIENDS_BY_ROW(p0, p1: PAny; p2: Any; p3: BOOL; p4, p5: Any): BOOL;
begin
  nativeInit(UINT64($918B101666F9CB83));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_BY_HANDLE(p0, p1: PAny): BOOL;
begin
  nativeInit(UINT64($C30713A383BFBF0E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_BY_RANK(p0: PAny; p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($BA2C7DB0C129449A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_BY_RADIUS(p0: PAny; p1: Any; p2: PAny): BOOL;
begin
  nativeInit(UINT64($5CE587FB5A42C8C4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_BY_SCORE_INT(p0: PAny; p1, p2: Any): BOOL;
begin
  nativeInit(UINT64($7EEC7E4F6984A16A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_BY_SCORE_FLOAT(p0: PAny; p1: cfloat; p2: Any): BOOL;
begin
  nativeInit(UINT64($E662C8B759D08F3C));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_RANK_PREDICTION(p0, p1, p2: PAny): BOOL;
begin
  nativeInit(UINT64($C38DC1E90D22547C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_BY_PLAFORM(p0: PAny; gamerHandleCsv, platformName: PChar): BOOL;
begin
  nativeInit(UINT64($F1AE5DCDBFCA2721));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(gamerHandleCsv));
  nativePush64(UINT64(platformName));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_GET_ROW_DATA_START(p0: PAny): BOOL;
begin
  nativeInit(UINT64($A0F93D5465B3094D));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure LEADERBOARDS2_READ_GET_ROW_DATA_END;
begin
  nativeInit(UINT64($71B008056E5692D6));
  nativeCall;
end;

function LEADERBOARDS2_READ_GET_ROW_DATA_INFO(p0: Any; p1: PAny): BOOL;
begin
  nativeInit(UINT64($34770B9CE0E03B91));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS2_READ_GET_ROW_DATA_INT(p0, p1: Any): cint;
begin
  nativeInit(UINT64($88578F6EC36B4A3A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(p0, p1: Any): cfloat;
begin
  nativeInit(UINT64($38491439B6BA7F7D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function LEADERBOARDS2_WRITE_DATA(p0: PAny): BOOL;
begin
  nativeInit(UINT64($AE2206545888AE49));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure LEADERBOARDS_WRITE_ADD_COLUMN(p0, p1: Any; p2: cfloat);
begin
  nativeInit(UINT64($0BCA1D2C47B0D269));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure LEADERBOARDS_WRITE_ADD_COLUMN_LONG(p0, p1, p2: Any);
begin
  nativeInit(UINT64($2E65248609523599));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function LEADERBOARDS_CACHE_DATA_ROW(p0: PAny): BOOL;
begin
  nativeInit(UINT64($B9BB18E2C40142ED));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure LEADERBOARDS_CLEAR_CACHE_DATA;
begin
  nativeInit(UINT64($D4B02A6B476E1FDC));
  nativeCall;
end;

procedure LEADERBOARDS_CLEAR_CACHE_DATA_ID(p0: Any);
begin
  nativeInit(UINT64($8EC74CEB042E7CFF));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function LEADERBOARDS_GET_CACHE_EXISTS(p0: Any): BOOL;
begin
  nativeInit(UINT64($9C51349BE6CDFE2C));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function LEADERBOARDS_GET_CACHE_TIME(p0: Any): cint;
begin
  nativeInit(UINT64($F04C1C27DA35F6C8));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(p0: Any): cint;
begin
  nativeInit(UINT64($58A651CD201D89AD));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function LEADERBOARDS_GET_CACHE_DATA_ROW(p0, p1: Any; p2: PAny): BOOL;
begin
  nativeInit(UINT64($9120E8DBA3D69273));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

procedure PRESENCE_EVENT_UPDATESTAT_INT(statHash: Hash; value, p2: cint);
begin
  nativeInit(UINT64($11FF1C80276097ED));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(value));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PRESENCE_EVENT_UPDATESTAT_FLOAT(statHash: Hash; value: cfloat; p2: cint);
begin
  nativeInit(UINT64($30A6614C1F7799B8));
  nativePush64(UINT64(statHash));
  nativePush64(PUINT64(@value)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(statHash: Hash; value, p2: cint; str: PChar);
begin
  nativeInit(UINT64($6483C25849031C4F));
  nativePush64(UINT64(statHash));
  nativePush64(UINT64(value));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(str));
  nativeCall;
end;

function GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES: BOOL;
begin
  nativeInit(UINT64($5EAD2BF6484852E4));
  exit(BOOL(nativeCall^));
end;

procedure SET_HAS_POSTED_ALL_VEHICLES_DRIVEN;
begin
  nativeInit(UINT64($C141B8917E0017EC));
  nativeCall;
end;

procedure SET_PROFILE_SETTING_PROLOGUE_COMPLETE;
begin
  nativeInit(UINT64($B475F27C6A994D65));
  nativeCall;
end;

procedure SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE;
begin
  nativeInit(UINT64($C67E2DA1CBE759E2));
  nativeCall;
end;

procedure SET_PROFILE_SETTING_CREATOR_RACES_DONE(value: cint);
begin
  nativeInit(UINT64($F1A1803D3476F215));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_PROFILE_SETTING_CREATOR_DM_DONE(value: cint);
begin
  nativeInit(UINT64($38BAAA5DD4C9D19F));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_PROFILE_SETTING_CREATOR_CTF_DONE(value: cint);
begin
  nativeInit(UINT64($55384438FC55AD8E));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_JOB_ACTIVITY_ID_STARTED(p0: Any; characterSlot: cint);
begin
  nativeInit(UINT64($723C1CE13FBFDB67));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(characterSlot));
  nativeCall;
end;

procedure SET_FREEMODE_PROLOGUE_DONE(p0: Any; characterSlot: cint);
begin
  nativeInit(UINT64($0D01D20616FC73FB));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(characterSlot));
  nativeCall;
end;

procedure SET_FREEMODE_STRAND_PROGRESSION_STATUS(profileSetting, settingValue: cint);
begin
  nativeInit(UINT64($79D310A861697CC9));
  nativePush64(UINT64(profileSetting));
  nativePush64(UINT64(settingValue));
  nativeCall;
end;

procedure STAT_NETWORK_INCREMENT_ON_SUICIDE(p0: Any; p1: cfloat);
begin
  nativeInit(UINT64($428EAF89E24F6C36));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure STAT_SET_CHEAT_IS_ACTIVE;
begin
  nativeInit(UINT64($047CBED6F6F8B63C));
  nativeCall;
end;

function LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(p0, p1: PAny): BOOL;
begin
  nativeInit(UINT64($C980E62E33DF1D5C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE;
begin
  nativeInit(UINT64($6F361B8889A792A3));
  nativeCall;
end;

procedure STAT_MIGRATE_CLEAR_FOR_RESTART;
begin
  nativeInit(UINT64($C847B43F369AC0B5));
  nativeCall;
end;

function STAT_MIGRATE_SAVEGAME_START(platformName: PChar): BOOL;
begin
  nativeInit(UINT64($A5C80D8E768A9E66));
  nativePush64(UINT64(platformName));
  exit(BOOL(nativeCall^));
end;

function STAT_MIGRATE_SAVEGAME_GET_STATUS: cint;
begin
  nativeInit(UINT64($9A62EC95AE10E011));
  exit(cint(nativeCall^));
end;

function STAT_MIGRATE_CHECK_ALREADY_DONE: BOOL;
begin
  nativeInit(UINT64($4C89FE2BDEB3F169));
  exit(BOOL(nativeCall^));
end;

function STAT_MIGRATE_CHECK_START: BOOL;
begin
  nativeInit(UINT64($C6E0E2616A7576BB));
  exit(BOOL(nativeCall^));
end;

function STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(p0: cint): cint;
begin
  nativeInit(UINT64($5BD5F255321C4AAF));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

function STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(p0: cint; p1: PAny): cint;
begin
  nativeInit(UINT64($DEAAF77EB3687E97));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function STAT_GET_SAVE_MIGRATION_STATUS(data: PAny): cint;
begin
  nativeInit(UINT64($886913BBEACA68C1));
  nativePush64(UINT64(data));
  exit(cint(nativeCall^));
end;

function STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION: BOOL;
begin
  nativeInit(UINT64($4FEF53183C3C6414));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_CANCEL_SAVE_MIGRATION_STATUS: cint;
begin
  nativeInit(UINT64($567384DFA67029E6));
  exit(cint(nativeCall^));
end;

function STAT_SAVE_MIGRATION_CONSUME_CONTENT(contentId: Hash; srcPlatform, srcGamerHandle: PChar): BOOL;
begin
  nativeInit(UINT64($3270F67EED31FBC1));
  nativePush64(UINT64(contentId));
  nativePush64(UINT64(srcPlatform));
  nativePush64(UINT64(srcGamerHandle));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(p0: pcint): cint;
begin
  nativeInit(UINT64($CE5AA445ABA8DEE0));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure STAT_ENABLE_STATS_TRACKING;
begin
  nativeInit(UINT64($98E2BC1CA26287C3));
  nativeCall;
end;

procedure STAT_DISABLE_STATS_TRACKING;
begin
  nativeInit(UINT64($629526ABA383BCAA));
  nativeCall;
end;

function STAT_IS_STATS_TRACKING_ENABLED: BOOL;
begin
  nativeInit(UINT64($BE3DB208333D9844));
  exit(BOOL(nativeCall^));
end;

function STAT_START_RECORD_STAT(statType, valueType: cint): BOOL;
begin
  nativeInit(UINT64($33D72899E24C3365));
  nativePush64(UINT64(statType));
  nativePush64(UINT64(valueType));
  exit(BOOL(nativeCall^));
end;

function STAT_STOP_RECORD_STAT: BOOL;
begin
  nativeInit(UINT64($A761D4AC6115623D));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_RECORDED_VALUE(value: pcfloat): BOOL;
begin
  nativeInit(UINT64($F11F01D98113536A));
  nativePush64(UINT64(value));
  exit(BOOL(nativeCall^));
end;

function STAT_IS_RECORDING_STAT: BOOL;
begin
  nativeInit(UINT64($8B9CDBD6C566C38C));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE: cint;
begin
  nativeInit(UINT64($E8853FBCE7D8D0D6));
  exit(cint(nativeCall^));
end;

function STAT_GET_CURRENT_REAR_WHEEL_DISTANCE: cfloat;
begin
  nativeInit(UINT64($A943FD1722E11EFD));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE: cfloat;
begin
  nativeInit(UINT64($84A810B375E69C0E));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_CURRENT_JUMP_DISTANCE: cfloat;
begin
  nativeInit(UINT64($9EC8858184CD253A));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE: cfloat;
begin
  nativeInit(UINT64($BA9749CC94C1FD85));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_CURRENT_SPEED: cfloat;
begin
  nativeInit(UINT64($55A8BECAF28A4EB7));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE: cfloat;
begin
  nativeInit(UINT64($32CAC93C9DE73D32));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_CURRENT_SKYDIVING_DISTANCE: cfloat;
begin
  nativeInit(UINT64($AFF47709F1D5DCCE));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_CHALLENGE_FLYING_DIST: cfloat;
begin
  nativeInit(UINT64($6E0A5253375C4584));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_GET_FLYING_ALTITUDE(outValue: pcfloat): BOOL;
begin
  nativeInit(UINT64($1A8EA222F9C67DBB));
  nativePush64(UINT64(outValue));
  exit(BOOL(nativeCall^));
end;

function STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN: BOOL;
begin
  nativeInit(UINT64($F9F2922717B819EC));
  exit(BOOL(nativeCall^));
end;

function STAT_GET_VEHICLE_BAIL_DISTANCE: cfloat;
begin
  nativeInit(UINT64($0B8B7F74BF061C6D));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function STAT_ROLLBACK_SAVE_MIGRATION: BOOL;
begin
  nativeInit(UINT64($B3DA2606774A8E2D));
  exit(BOOL(nativeCall^));
end;

procedure SET_HAS_SPECIALEDITION_CONTENT(value: cint);
begin
  nativeInit(UINT64($DAC073C7901F9E15));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(transactionId: cint);
begin
  nativeInit(UINT64($F6792800AC95350D));
  nativePush64(UINT64(transactionId));
  nativeCall;
end;

procedure GET_BOSS_GOON_UUID(characterSlot: cint; p1, p2: Any);
begin
  nativeInit(UINT64($6BC0ACD0673ACEBE));
  nativePush64(UINT64(characterSlot));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(p0: Any);
begin
  nativeInit(UINT64($8D8ADB562F09A245));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_YATCHATTACK(p0: Any);
begin
  nativeInit(UINT64($D1A1EE3B4FA8E760));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_HUNT_THE_BOSS(p0: Any);
begin
  nativeInit(UINT64($88087EE1F28024AE));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_SIGHTSEER(p0: Any);
begin
  nativeInit(UINT64($FCC228E07217FCAC));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_ASSAULT(p0: Any);
begin
  nativeInit(UINT64($678F86D8FC040BDB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_BELLY_OF_THE_BEAST(p0: Any);
begin
  nativeInit(UINT64($A6F54BB2FFCA35EA));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_HEAD_HUNTER(p0: Any);
begin
  nativeInit(UINT64($5FF2C33B13A02A11));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_FRAGILE_GOODS(p0: Any);
begin
  nativeInit(UINT64($282B6739644F4347));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BW_AIR_FREIGHT(p0: Any);
begin
  nativeInit(UINT64($F06A6F41CB445443));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_CAR_JACKING(p0: Any);
begin
  nativeInit(UINT64($7B18DA61F6BAE9D5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_SMASH_AND_GRAB(p0: Any);
begin
  nativeInit(UINT64($06EAF70AE066441E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_PROTECTION_RACKET(p0: Any);
begin
  nativeInit(UINT64($14EDA9EE27BD1626));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_MOST_WANTED(p0: Any);
begin
  nativeInit(UINT64($930F504203F561C9));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_FINDERS_KEEPERS(p0: Any);
begin
  nativeInit(UINT64($E3261D791EB44ACB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_POINT_TO_POINT(p0: Any);
begin
  nativeInit(UINT64($73001E34F85137F8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_CASHING(p0: Any);
begin
  nativeInit(UINT64($53CAE13E9B426993));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BC_SALVAGE(p0: Any);
begin
  nativeInit(UINT64($7D36291161859389));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(amount: cint);
begin
  nativeInit(UINT64($BE509B0A3693DE8B));
  nativePush64(UINT64(amount));
  nativeCall;
end;

procedure PLAYSTATS_BUY_CONTRABAND_MISSION(data: PAny);
begin
  nativeInit(UINT64($D6781E42755531F7));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_SELL_CONTRABAND_MISSION(data: PAny);
begin
  nativeInit(UINT64($C729991A9065376E));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_DEFEND_CONTRABAND_MISSION(data: PAny);
begin
  nativeInit(UINT64($2605663BD4F23B5D));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_RECOVER_CONTRABAND_MISSION(data: PAny);
begin
  nativeInit(UINT64($04D90BA8207ADA2D));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(p0: Any);
begin
  nativeInit(UINT64($60EEDC12AF66E846));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure START_BEING_BOSS(p0, p1, p2: Any);
begin
  nativeInit(UINT64($3EBEAC6C3F81F6BD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure START_BEING_GOON(p0, p1, p2: Any);
begin
  nativeInit(UINT64($96E6D5150DBF1C09));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure END_BEING_BOSS(p0, p1, p2: Any);
begin
  nativeInit(UINT64($A3C53804BDB68ED2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure END_BEING_GOON(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($6BCCF9948492FD85));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure HIRED_LIMO(p0, p1: Any);
begin
  nativeInit(UINT64($792271AB35C356A4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ORDER_BOSS_VEHICLE(p0, p1: Any; vehicleHash: Hash);
begin
  nativeInit(UINT64($CEA553E35C2246E1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(vehicleHash));
  nativeCall;
end;

procedure CHANGE_UNIFORM(p0, p1, p2: Any);
begin
  nativeInit(UINT64($D1C9B92BDD3F151D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure CHANGE_GOON_LOOKING_FOR_WORK(p0: Any);
begin
  nativeInit(UINT64($44919CC079BB60BF));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SEND_METRIC_GHOSTING_TO_PLAYER(p0: Any);
begin
  nativeInit(UINT64($7033EEFD9B28088E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SEND_METRIC_VIP_POACH(p0, p1, p2: Any);
begin
  nativeInit(UINT64($AA525DFF66BB82F5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SEND_METRIC_PUNISH_BODYGUARD(p0: Any);
begin
  nativeInit(UINT64($015B03EE1C43E6EC));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_START_TRACKING_STUNTS;
begin
  nativeInit(UINT64($928DBFB892638EF3));
  nativeCall;
end;

procedure PLAYSTATS_STOP_TRACKING_STUNTS;
begin
  nativeInit(UINT64($8A800DACCC0DA55D));
  nativeCall;
end;

procedure PLAYSTATS_MISSION_ENDED(p0: Any);
begin
  nativeInit(UINT64($BF371CD2B64212FD));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_IMPEXP_MISSION_ENDED(p0: Any);
begin
  nativeInit(UINT64($7D8BA05688AD64C7));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CHANGE_MC_ROLE(p0, p1, p2, p3: Any; role, p5: cint; p6: Any);
begin
  nativeInit(UINT64($0B565B0AAE56A0E8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(role));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure PLAYSTATS_CHANGE_MC_OUTFIT(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($28ECB8AC2F607DB2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_SWITCH_MC_EMBLEM(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($0A50D2604E05CB94));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_MC_REQUEST_BIKE(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($CC25A4553DFBF9EA));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($F534D94DFA2EAD26));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_ABANDONED_MC(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($D558BEC0BBA7E8D2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_EARNED_MC_POINTS(p0, p1, p2, p3, p4, p5: Any);
begin
  nativeInit(UINT64($501478855A6074CE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure PLAYSTATS_MC_FORMATION_ENDS(p0, p1, p2, p3, p4, p5, p6: Any);
begin
  nativeInit(UINT64($03C2EEBB04B3FB72));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(p0, p1, p2, p3, p4, p5, p6, p7: Any);
begin
  nativeInit(UINT64($8989CBD7B4E82534));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure PLAYSTATS_RIVAL_BEHAVIOR(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9: Any);
begin
  nativeInit(UINT64($27AA1C973CACFE63));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativeCall;
end;

procedure PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(p0, p1, p2, p3, p4, p5, p6: Any);
begin
  nativeInit(UINT64($B7257BA2550EA10A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure PLAYSTATS_DUPE_DETECTED(data: PAny);
begin
  nativeInit(UINT64($848B66100EE33B05));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_BAN_ALERT(p0: cint);
begin
  nativeInit(UINT64($516FC96EB88EEFE5));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_GUNRUNNING_MISSION_ENDED(data: PAny);
begin
  nativeInit(UINT64($0EACDF8487D5155A));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_GUNRUNNING_RND(p0: Any);
begin
  nativeInit(UINT64($DAF80797FC534BEC));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_BUSINESS_BATTLE_ENDED(p0: Any);
begin
  nativeInit(UINT64($316DB59CD14C1774));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_WAREHOUSE_MISSION_ENDED(p0: Any);
begin
  nativeInit(UINT64($2D7A9B577E72385E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_NIGHTCLUB_MISSION_ENDED(p0: Any);
begin
  nativeInit(UINT64($830C3A44EB3F2CF9));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_DJ_USAGE(p0, p1: Any);
begin
  nativeInit(UINT64($B26F670685631727));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure PLAYSTATS_MINIGAME_USAGE(p0, p1, p2: Any);
begin
  nativeInit(UINT64($C14BD9F5337219B2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PLAYSTATS_STONE_HATCHET_ENDED(data: PAny);
begin
  nativeInit(UINT64($35E39E5570358630));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_SMUGGLER_MISSION_ENDED(data: PAny);
begin
  nativeInit(UINT64($320C35147D5B5DDD));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_FM_HEIST_PREP_ENDED(data: PAny);
begin
  nativeInit(UINT64($D8AFB345A9C5CCBB));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_INSTANCED_HEIST_ENDED(data: PAny; p1, p2, p3: Any);
begin
  nativeInit(UINT64($1E1497D0D2108115));
  nativePush64(UINT64(data));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_DAR_CHECKPOINT(data: PAny);
begin
  nativeInit(UINT64($0BC254FF3A911501));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_ENTER_SESSION_PACK(data: PAny);
begin
  nativeInit(UINT64($878FF156D36E9956));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_DRONE_USAGE(p0, p1, p2: cint);
begin
  nativeInit(UINT64($66C7BB2416ED3FCE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure PLAYSTATS_SPIN_WHEEL(p0, p1, p2, p3: cint);
begin
  nativeInit(UINT64($6731DE84A38BFAD0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_ARENA_WARS_SPECTATOR(p0, p1, p2, p3, p4: cint);
begin
  nativeInit(UINT64($6F4F599753F8200A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_ARENA_WARS_ENDED(data: PAny);
begin
  nativeInit(UINT64($B479D9F0D48A1BC5));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_SWITCH_PASSIVE_MODE(p0: BOOL; p1, p2, p3: cint);
begin
  nativeInit(UINT64($35EEC6C2BC821A71));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_COLLECTIBLE_PICKED_UP(p0: cint; objectHash: Hash; p2, p3: Any; moneyAmount, rpAmount, chipsAmount: cint; p7: Any; p8: cint; p9, p10: Any);
begin
  nativeInit(UINT64($CD0A8A9338681CF2));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(objectHash));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(moneyAmount));
  nativePush64(UINT64(rpAmount));
  nativePush64(UINT64(chipsAmount));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_STORY_MISSION_ENDED(p0, p1: Any);
begin
  nativeInit(UINT64($FCCCAC2BD3C1F180));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_CHIP(p0: Any);
begin
  nativeInit(UINT64($0999F3F090EC5012));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_ROULETTE(p0: Any);
begin
  nativeInit(UINT64($95101C443A84E7F1));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_BLACKJACK(p0: Any);
begin
  nativeInit(UINT64($3EAE97309727E7AD));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_THREE_CARD_POKER(p0: Any);
begin
  nativeInit(UINT64($F740FB339D471C35));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_SLOT_MACHINE(p0: Any);
begin
  nativeInit(UINT64($EF5EC67D392B830A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_INSIDE_TRACK(p0: Any);
begin
  nativeInit(UINT64($049F059625058A86));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_LUCKY_SEVEN(p0: Any);
begin
  nativeInit(UINT64($0C432C1435F5E4FA));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_ROULETTE_LIGHT(p0: Any);
begin
  nativeInit(UINT64($6572ABA3DE1197FC));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_BLACKJACK_LIGHT(p0: Any);
begin
  nativeInit(UINT64($D5451C7BF151EB6F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(p0: Any);
begin
  nativeInit(UINT64($C9001364B4388F22));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(p0: Any);
begin
  nativeInit(UINT64($E60054A0FAE8227F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(p0: Any);
begin
  nativeInit(UINT64($23A3CBCD50D54E47));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_ARCADE_GAME(p0, p1, p2, p3, p4, p5, p6: Any);
begin
  nativeInit(UINT64($533A7D1EA58DF958));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure PLAYSTATS_ARCADE_LOVE_MATCH(p0, p1: Any);
begin
  nativeInit(UINT64($4FCDBD3F0A813C25));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(data: PAny);
begin
  nativeInit(UINT64($1A0D4A6C336B7BC5));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure PLAYSTATS_HEIST3_DRONE(p0: Any);
begin
  nativeInit(UINT64($DFBD93BF2943E29B));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_HEIST3_HACK(p0, p1, p2, p3, p4, p5: Any);
begin
  nativeInit(UINT64($92FC0EEDFAC04A14));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure PLAYSTATS_NPC_PHONE(p0: PAny);
begin
  nativeInit(UINT64($0077F15613D36993));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_ARCADE_CABINET(p0: Any);
begin
  nativeInit(UINT64($F9096193DF1F99D4));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_HEIST3_FINALE(p0: Any);
begin
  nativeInit(UINT64($2E0259BABC27A327));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_HEIST3_PREP(p0: Any);
begin
  nativeInit(UINT64($53C31853EC9531FF));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_MASTER_CONTROL(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($810B5FCC52EC7FF0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_QUIT_MODE(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($5BF29846C6527C54));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_MISSION_VOTE(p0: Any);
begin
  nativeInit(UINT64($C03FAB2C2F92289B));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_NJVS_VOTE(p0: Any);
begin
  nativeInit(UINT64($5CDAED54B34B0ED0));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_KILL_YOURSELF;
begin
  nativeInit(UINT64($4AFF7E02E485E92B));
  nativeCall;
end;

procedure PLAYSTATS_FM_MISSION_END(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($46A70777BE6CEAB9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_HEIST4_PREP(p0: Any);
begin
  nativeInit(UINT64($DFCDB14317A9B361));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_HEIST4_FINALE(p0: Any);
begin
  nativeInit(UINT64($C1E963C58664B556));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_HEIST4_HACK(p0, p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($2FA3173480008493));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure PLAYSTATS_SUB_WEAP(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($D4367D310F079DB0));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_FAST_TRVL(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10: Any);
begin
  nativeInit(UINT64($4DC416F246A41FC8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativeCall;
end;

procedure PLAYSTATS_HUB_ENTRY(p0: Any);
begin
  nativeInit(UINT64($2818FF6638CB09DE));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_DJ_MISSION_ENDED(p0: Any);
begin
  nativeInit(UINT64($D6CA58B3B53A0F22));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_ROBBERY_PREP(p0: Any);
begin
  nativeInit(UINT64($1A67DFBF1F5C3835));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_ROBBERY_FINALE(p0: Any);
begin
  nativeInit(UINT64($BBA55BE9AAAABF44));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_EXTRA_EVENT(p0: Any);
begin
  nativeInit(UINT64($FA5B74BAB8A7EF99));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CARCLUB_POINTS(p0: Any);
begin
  nativeInit(UINT64($FF14D6FEEC507BBE));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_CARCLUB_CHALLENGE(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($1187CB58D7F3BED7));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_CARCLUB_PRIZE(p0: cint; vehicleModel: Hash);
begin
  nativeInit(UINT64($69C922B677621428));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(vehicleModel));
  nativeCall;
end;

procedure PLAYSTATS_AWARD_NAV(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($70F52471E758EBAE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure PLAYSTATS_INST_MISSION_END(p0: Any);
begin
  nativeInit(UINT64($FEA3F7E83C0610FA));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_HUB_EXIT(p0: Any);
begin
  nativeInit(UINT64($5A46ACE5C4661132));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure PLAYSTATS_VEH_DEL(bossId1, bossId2, bossType, vehicleID, reason: cint);
begin
  nativeInit(UINT64($10A691F5756416D0));
  nativePush64(UINT64(bossId1));
  nativePush64(UINT64(bossId2));
  nativePush64(UINT64(bossType));
  nativePush64(UINT64(vehicleID));
  nativePush64(UINT64(reason));
  nativeCall;
end;

procedure PLAYSTATS_INVENTORY(p0: Any);
begin
  nativeInit(UINT64($887DAD63CF5B7908));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _PLAYSTATS_ACID_MISSION_END(p0: Any);
begin
  nativeInit(UINT64($8A23D1324F6B2BAC));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _PLAYSTATS_ACID_RND(p0: Any);
begin
  nativeInit(UINT64($CEACCF0550FDC5BA));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _PLAYSTATS_IDLE(p0, p1, p2: Any);
begin
  nativeInit(UINT64($EC9553A178E8F1D1));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure _PLAYSTATS_PLAYER_STYLE(p0: Any);
begin
  nativeInit(UINT64($48FAC5DC7AC6EA99));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _PLAYSTATS_RANDOM_EVENT(p0: Any);
begin
  nativeInit(UINT64($7EA06F970F999394));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _PLAYSTATS_ALERT(data: PAny);
begin
  nativeInit(UINT64($5649CA22AF74E019));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure _PLAYSTATS_ATTRITION_STAGE_END(p0: Any);
begin
  nativeInit(UINT64($BD642335A732F1A8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure _PLAYSTATS_SHOWROOM_NAV(p0, p1: Any; entity: Hash);
begin
  nativeInit(UINT64($961D4157B9B428DB));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(entity));
  nativeCall;
end;

procedure _PLAYSTATS_SHOWROOM_OVERVIEW(data: PAny);
begin
  nativeInit(UINT64($151D6C04C9E2742F));
  nativePush64(UINT64(data));
  nativeCall;
end;

procedure LOAD_ALL_OBJECTS_NOW;
begin
  nativeInit(UINT64($BD6E84632DD4CB3F));
  nativeCall;
end;

procedure LOAD_SCENE(x, y, z: cfloat);
begin
  nativeInit(UINT64($4448EB75B4904BDB));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

function NETWORK_UPDATE_LOAD_SCENE: BOOL;
begin
  nativeInit(UINT64($C4582015556D1C46));
  exit(BOOL(nativeCall^));
end;

function IS_NETWORK_LOADING_SCENE: BOOL;
begin
  nativeInit(UINT64($41CA5A33160EA4AB));
  exit(BOOL(nativeCall^));
end;

procedure SET_INTERIOR_ACTIVE(interiorID: cint; toggle: BOOL);
begin
  nativeInit(UINT64($E37B76C387BE28ED));
  nativePush64(UINT64(interiorID));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure REQUEST_MODEL(model: Hash);
begin
  nativeInit(UINT64($963D27A58DF860AC));
  nativePush64(UINT64(model));
  nativeCall;
end;

procedure REQUEST_MENU_PED_MODEL(model: Hash);
begin
  nativeInit(UINT64($A0261AEF7ACFC51E));
  nativePush64(UINT64(model));
  nativeCall;
end;

function HAS_MODEL_LOADED(model: Hash): BOOL;
begin
  nativeInit(UINT64($98A4EB5D89A0C952));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_MODELS_IN_ROOM(para_interior: Interior; roomName: PChar);
begin
  nativeInit(UINT64($8A7A40100EDFEC58));
  nativePush64(UINT64(para_interior));
  nativePush64(UINT64(roomName));
  nativeCall;
end;

procedure SET_MODEL_AS_NO_LONGER_NEEDED(model: Hash);
begin
  nativeInit(UINT64($E532F5D78798DAAB));
  nativePush64(UINT64(model));
  nativeCall;
end;

function IS_MODEL_IN_CDIMAGE(model: Hash): BOOL;
begin
  nativeInit(UINT64($35B9E0803292B641));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_MODEL_VALID(model: Hash): BOOL;
begin
  nativeInit(UINT64($C0296A2EDF545E92));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_MODEL_A_PED(model: Hash): BOOL;
begin
  nativeInit(UINT64($75816577FEA6DAD5));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_MODEL_A_VEHICLE(model: Hash): BOOL;
begin
  nativeInit(UINT64($19AAC8F07BFEC53E));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_COLLISION_AT_COORD(x, y, z: cfloat);
begin
  nativeInit(UINT64($07503F7948F491A7));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure REQUEST_COLLISION_FOR_MODEL(model: Hash);
begin
  nativeInit(UINT64($923CB32A3B874FCB));
  nativePush64(UINT64(model));
  nativeCall;
end;

function HAS_COLLISION_FOR_MODEL_LOADED(model: Hash): BOOL;
begin
  nativeInit(UINT64($22CCA434E368F03A));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_ADDITIONAL_COLLISION_AT_COORD(x, y, z: cfloat);
begin
  nativeInit(UINT64($C9156DC11411A9EA));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

function DOES_ANIM_DICT_EXIST(animDict: PChar): BOOL;
begin
  nativeInit(UINT64($2DA49C3B79856961));
  nativePush64(UINT64(animDict));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_ANIM_DICT(animDict: PChar);
begin
  nativeInit(UINT64($D3BD40951412FEF6));
  nativePush64(UINT64(animDict));
  nativeCall;
end;

function HAS_ANIM_DICT_LOADED(animDict: PChar): BOOL;
begin
  nativeInit(UINT64($D031A9162D01088C));
  nativePush64(UINT64(animDict));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_ANIM_DICT(animDict: PChar);
begin
  nativeInit(UINT64($F66A602F829E2A06));
  nativePush64(UINT64(animDict));
  nativeCall;
end;

procedure REQUEST_ANIM_SET(animSet: PChar);
begin
  nativeInit(UINT64($6EA47DAE7FAD0EED));
  nativePush64(UINT64(animSet));
  nativeCall;
end;

function HAS_ANIM_SET_LOADED(animSet: PChar): BOOL;
begin
  nativeInit(UINT64($C4EA073D86FB29B0));
  nativePush64(UINT64(animSet));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_ANIM_SET(animSet: PChar);
begin
  nativeInit(UINT64($16350528F93024B3));
  nativePush64(UINT64(animSet));
  nativeCall;
end;

procedure REQUEST_CLIP_SET(clipSet: PChar);
begin
  nativeInit(UINT64($D2A71E1A77418A49));
  nativePush64(UINT64(clipSet));
  nativeCall;
end;

function HAS_CLIP_SET_LOADED(clipSet: PChar): BOOL;
begin
  nativeInit(UINT64($318234F4F3738AF3));
  nativePush64(UINT64(clipSet));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_CLIP_SET(clipSet: PChar);
begin
  nativeInit(UINT64($01F73A131C18CD94));
  nativePush64(UINT64(clipSet));
  nativeCall;
end;

procedure REQUEST_IPL(iplName: PChar);
begin
  nativeInit(UINT64($41B4893843BBDB74));
  nativePush64(UINT64(iplName));
  nativeCall;
end;

procedure REMOVE_IPL(iplName: PChar);
begin
  nativeInit(UINT64($EE6C5AD3ECE0A82D));
  nativePush64(UINT64(iplName));
  nativeCall;
end;

function IS_IPL_ACTIVE(iplName: PChar): BOOL;
begin
  nativeInit(UINT64($88A741E44A2B3495));
  nativePush64(UINT64(iplName));
  exit(BOOL(nativeCall^));
end;

procedure SET_STREAMING(toggle: BOOL);
begin
  nativeInit(UINT64($6E0C692677008888));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure LOAD_GLOBAL_WATER_FILE(waterType: cint);
begin
  nativeInit(UINT64($7E3F55ED251B76D3));
  nativePush64(UINT64(waterType));
  nativeCall;
end;

function GET_GLOBAL_WATER_FILE: cint;
begin
  nativeInit(UINT64($F741BD853611592D));
  exit(cint(nativeCall^));
end;

procedure SET_GAME_PAUSES_FOR_STREAMING(toggle: BOOL);
begin
  nativeInit(UINT64($717CD6E6FAEBBEDC));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_REDUCE_PED_MODEL_BUDGET(toggle: BOOL);
begin
  nativeInit(UINT64($77B5F9A36BF96710));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_REDUCE_VEHICLE_MODEL_BUDGET(toggle: BOOL);
begin
  nativeInit(UINT64($80C527893080CCF3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DITCH_POLICE_MODELS(toggle: BOOL);
begin
  nativeInit(UINT64($42CBE54462D92634));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_NUMBER_OF_STREAMING_REQUESTS: cint;
begin
  nativeInit(UINT64($4060057271CEBC89));
  exit(cint(nativeCall^));
end;

procedure REQUEST_PTFX_ASSET;
begin
  nativeInit(UINT64($944955FB2A3935C8));
  nativeCall;
end;

function HAS_PTFX_ASSET_LOADED: BOOL;
begin
  nativeInit(UINT64($CA7D9B86ECA7481B));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_PTFX_ASSET;
begin
  nativeInit(UINT64($88C6814073DD4A73));
  nativeCall;
end;

procedure REQUEST_NAMED_PTFX_ASSET(fxName: PChar);
begin
  nativeInit(UINT64($B80D8756B4668AB6));
  nativePush64(UINT64(fxName));
  nativeCall;
end;

function HAS_NAMED_PTFX_ASSET_LOADED(fxName: PChar): BOOL;
begin
  nativeInit(UINT64($8702416E512EC454));
  nativePush64(UINT64(fxName));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_NAMED_PTFX_ASSET(fxName: PChar);
begin
  nativeInit(UINT64($5F61EBBE1A00F96D));
  nativePush64(UINT64(fxName));
  nativeCall;
end;

procedure SET_VEHICLE_POPULATION_BUDGET(p0: cint);
begin
  nativeInit(UINT64($CB9E1EB3BE2AF4E9));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_PED_POPULATION_BUDGET(p0: cint);
begin
  nativeInit(UINT64($8C95333CFC3340F3));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure CLEAR_FOCUS;
begin
  nativeInit(UINT64($31B73D1EA9F01DA2));
  nativeCall;
end;

procedure SET_FOCUS_POS_AND_VEL(x, y, z, offsetX, offsetY, offsetZ: cfloat);
begin
  nativeInit(UINT64($BB7454BAFF08FE25));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativeCall;
end;

procedure SET_FOCUS_ENTITY(para_entity: Entity);
begin
  nativeInit(UINT64($198F77705FA0931D));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

function IS_ENTITY_FOCUS(para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($2DDFF3FB9075D747));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_RESTORE_FOCUS_ENTITY(p0: Entity);
begin
  nativeInit(UINT64($0811381EF5062FEC));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_MAPDATACULLBOX_ENABLED(name: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($AF12610C644A35C9));
  nativePush64(UINT64(name));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ALL_MAPDATA_CULLED(p0: Any);
begin
  nativeInit(UINT64($4E52E752C76E7E7A));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function STREAMVOL_CREATE_SPHERE(x, y, z, rad: cfloat; p4, p5: Any): cint;
begin
  nativeInit(UINT64($219C7B8D53E429FD));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@rad)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  exit(cint(nativeCall^));
end;

function STREAMVOL_CREATE_FRUSTUM(p0, p1, p2, p3, p4, p5, p6: cfloat; p7, p8: Any): cint;
begin
  nativeInit(UINT64($1F3F018BC3AFA77C));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(cint(nativeCall^));
end;

function STREAMVOL_CREATE_LINE(p0, p1, p2, p3, p4, p5: cfloat; p6: Any): cint;
begin
  nativeInit(UINT64($0AD9710CEE2F590F));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(p6));
  exit(cint(nativeCall^));
end;

procedure STREAMVOL_DELETE(unused: Any);
begin
  nativeInit(UINT64($1EE7D8DF4425F053));
  nativePush64(UINT64(unused));
  nativeCall;
end;

function STREAMVOL_HAS_LOADED(unused: Any): BOOL;
begin
  nativeInit(UINT64($7D41E9D2D17C5B2D));
  nativePush64(UINT64(unused));
  exit(BOOL(nativeCall^));
end;

function STREAMVOL_IS_VALID(unused: Any): BOOL;
begin
  nativeInit(UINT64($07C313F94746702C));
  nativePush64(UINT64(unused));
  exit(BOOL(nativeCall^));
end;

function IS_STREAMVOL_ACTIVE: BOOL;
begin
  nativeInit(UINT64($BC9823AB80A3DCAC));
  exit(BOOL(nativeCall^));
end;

function NEW_LOAD_SCENE_START(posX, posY, posZ, offsetX, offsetY, offsetZ, radius: cfloat; p7: cint): BOOL;
begin
  nativeInit(UINT64($212A8D0D2BABFAC2));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p7));
  exit(BOOL(nativeCall^));
end;

function NEW_LOAD_SCENE_START_SPHERE(x, y, z, radius: cfloat; p4: Any): BOOL;
begin
  nativeInit(UINT64($ACCFB4ACF53551B0));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(p4));
  exit(BOOL(nativeCall^));
end;

procedure NEW_LOAD_SCENE_STOP;
begin
  nativeInit(UINT64($C197616D221FF4A4));
  nativeCall;
end;

function IS_NEW_LOAD_SCENE_ACTIVE: BOOL;
begin
  nativeInit(UINT64($A41A05B6CB741B85));
  exit(BOOL(nativeCall^));
end;

function IS_NEW_LOAD_SCENE_LOADED: BOOL;
begin
  nativeInit(UINT64($01B8247A7A8B9AD1));
  exit(BOOL(nativeCall^));
end;

function IS_SAFE_TO_START_PLAYER_SWITCH: BOOL;
begin
  nativeInit(UINT64($71E7B2E657449AAD));
  exit(BOOL(nativeCall^));
end;

procedure START_PLAYER_SWITCH(from, _to: Ped; flags, switchType: cint);
begin
  nativeInit(UINT64($FAA23F2CBA159D67));
  nativePush64(UINT64(from));
  nativePush64(UINT64(_to));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(switchType));
  nativeCall;
end;

procedure STOP_PLAYER_SWITCH;
begin
  nativeInit(UINT64($95C0A5BBDC189AA1));
  nativeCall;
end;

function IS_PLAYER_SWITCH_IN_PROGRESS: BOOL;
begin
  nativeInit(UINT64($D9D2CFFF49FAB35F));
  exit(BOOL(nativeCall^));
end;

function GET_PLAYER_SWITCH_TYPE: cint;
begin
  nativeInit(UINT64($B3C94A90D9FC9E62));
  exit(cint(nativeCall^));
end;

function GET_IDEAL_PLAYER_SWITCH_TYPE(x1, y1, z1, x2, y2, z2: cfloat): cint;
begin
  nativeInit(UINT64($B5D7B26B45720E05));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  exit(cint(nativeCall^));
end;

function GET_PLAYER_SWITCH_STATE: cint;
begin
  nativeInit(UINT64($470555300D10B2A5));
  exit(cint(nativeCall^));
end;

function GET_PLAYER_SHORT_SWITCH_STATE: cint;
begin
  nativeInit(UINT64($20F898A5D9782800));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_SHORT_SWITCH_STYLE(p0: cint);
begin
  nativeInit(UINT64($5F2013F8BC24EE69));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function GET_PLAYER_SWITCH_JUMP_CUT_INDEX: cint;
begin
  nativeInit(UINT64($78C0D93253149435));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYER_SWITCH_OUTRO(cameraCoordX, cameraCoordY, cameraCoordZ, camRotationX, camRotationY, camRotationZ, camFov, camFarClip: cfloat; rotationOrder: cint);
begin
  nativeInit(UINT64($C208B673CE446B61));
  nativePush64(PUINT64(@cameraCoordX)^);
  nativePush64(PUINT64(@cameraCoordY)^);
  nativePush64(PUINT64(@cameraCoordZ)^);
  nativePush64(PUINT64(@camRotationX)^);
  nativePush64(PUINT64(@camRotationY)^);
  nativePush64(PUINT64(@camRotationZ)^);
  nativePush64(PUINT64(@camFov)^);
  nativePush64(PUINT64(@camFarClip)^);
  nativePush64(UINT64(rotationOrder));
  nativeCall;
end;

procedure SET_PLAYER_SWITCH_ESTABLISHING_SHOT(name: PChar);
begin
  nativeInit(UINT64($0FDE9DBFC0A6BC65));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure ALLOW_PLAYER_SWITCH_PAN;
begin
  nativeInit(UINT64($43D1680C6D19A8E9));
  nativeCall;
end;

procedure ALLOW_PLAYER_SWITCH_OUTRO;
begin
  nativeInit(UINT64($74DE2E8739086740));
  nativeCall;
end;

procedure ALLOW_PLAYER_SWITCH_ASCENT;
begin
  nativeInit(UINT64($8E2A065ABDAE6994));
  nativeCall;
end;

procedure ALLOW_PLAYER_SWITCH_DESCENT;
begin
  nativeInit(UINT64($AD5FDF34B81BFE79));
  nativeCall;
end;

function IS_SWITCH_READY_FOR_DESCENT: BOOL;
begin
  nativeInit(UINT64($DFA80CB25D0A19B3));
  exit(BOOL(nativeCall^));
end;

procedure ENABLE_SWITCH_PAUSE_BEFORE_DESCENT;
begin
  nativeInit(UINT64($D4793DFF3AF2ABCD));
  nativeCall;
end;

procedure DISABLE_SWITCH_OUTRO_FX;
begin
  nativeInit(UINT64($BD605B8E0E18B3BB));
  nativeCall;
end;

procedure SWITCH_TO_MULTI_FIRSTPART(_ped: Ped; flags, switchType: cint);
begin
  nativeInit(UINT64($AAB3200ED59016BC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(switchType));
  nativeCall;
end;

procedure SWITCH_TO_MULTI_SECONDPART(_ped: Ped);
begin
  nativeInit(UINT64($D8295AF639FD9CB8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED: BOOL;
begin
  nativeInit(UINT64($933BBEEB8C61B5F4));
  exit(BOOL(nativeCall^));
end;

function GET_PLAYER_SWITCH_INTERP_OUT_DURATION: cint;
begin
  nativeInit(UINT64($08C2D6C52A3104BB));
  exit(cint(nativeCall^));
end;

function GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME: cint;
begin
  nativeInit(UINT64($5B48A06DD0E792A5));
  exit(cint(nativeCall^));
end;

function IS_SWITCH_SKIPPING_DESCENT: BOOL;
begin
  nativeInit(UINT64($5B74EA8CFD5E3E7E));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME;
begin
  nativeInit(UINT64($1E9057A74FD73E23));
  nativeCall;
end;

function GET_LODSCALE: cfloat;
begin
  nativeInit(UINT64($0C15B0E443B2349D));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure OVERRIDE_LODSCALE_THIS_FRAME(scaling: cfloat);
begin
  nativeInit(UINT64($A76359FC80B2438E));
  nativePush64(PUINT64(@scaling)^);
  nativeCall;
end;

procedure REMAP_LODSCALE_RANGE_THIS_FRAME(p0, p1, p2, p3: cfloat);
begin
  nativeInit(UINT64($BED8CA5FF5E04113));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure SUPPRESS_HD_MAP_STREAMING_THIS_FRAME;
begin
  nativeInit(UINT64($472397322E92A856));
  nativeCall;
end;

procedure SET_RENDER_HD_ONLY(toggle: BOOL);
begin
  nativeInit(UINT64($40AEFD1A244741F2));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME;
begin
  nativeInit(UINT64($03F1A106BDA7DD3E));
  nativeCall;
end;

procedure IPL_GROUP_SWAP_START(iplName1, iplName2: PChar);
begin
  nativeInit(UINT64($95A7DABDDBB78AE7));
  nativePush64(UINT64(iplName1));
  nativePush64(UINT64(iplName2));
  nativeCall;
end;

procedure IPL_GROUP_SWAP_CANCEL;
begin
  nativeInit(UINT64($63EB2B972A218CAC));
  nativeCall;
end;

function IPL_GROUP_SWAP_IS_READY: BOOL;
begin
  nativeInit(UINT64($FB199266061F820A));
  exit(BOOL(nativeCall^));
end;

procedure IPL_GROUP_SWAP_FINISH;
begin
  nativeInit(UINT64($F4A0DADB70F57FA6));
  nativeCall;
end;

function IPL_GROUP_SWAP_IS_ACTIVE: BOOL;
begin
  nativeInit(UINT64($5068F488DDB54DD8));
  exit(BOOL(nativeCall^));
end;

procedure PREFETCH_SRL(srl: PChar);
begin
  nativeInit(UINT64($3D245789CE12982C));
  nativePush64(UINT64(srl));
  nativeCall;
end;

function IS_SRL_LOADED: BOOL;
begin
  nativeInit(UINT64($D0263801A4C5B0BB));
  exit(BOOL(nativeCall^));
end;

procedure BEGIN_SRL;
begin
  nativeInit(UINT64($9BADDC94EF83B823));
  nativeCall;
end;

procedure END_SRL;
begin
  nativeInit(UINT64($0A41540E63C9EE17));
  nativeCall;
end;

procedure SET_SRL_TIME(p0: cfloat);
begin
  nativeInit(UINT64($A74A541C6884E7B8));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

procedure SET_SRL_POST_CUTSCENE_CAMERA(p0, p1, p2, p3, p4, p5: Any);
begin
  nativeInit(UINT64($EF39EE20C537E98C));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure SET_SRL_READAHEAD_TIMES(p0, p1, p2, p3: Any);
begin
  nativeInit(UINT64($BEB2D9A1D9A8F55A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_SRL_LONG_JUMP_MODE(p0: BOOL);
begin
  nativeInit(UINT64($20C6C7E4EB082A7F));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_SRL_FORCE_PRESTREAM(p0: Any);
begin
  nativeInit(UINT64($F8155A7F03DDFC8E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_HD_AREA(x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($B85F26619073E775));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure CLEAR_HD_AREA;
begin
  nativeInit(UINT64($CE58B1CFB9290813));
  nativeCall;
end;

procedure INIT_CREATOR_BUDGET;
begin
  nativeInit(UINT64($B5A4DB34FE89B88A));
  nativeCall;
end;

procedure SHUTDOWN_CREATOR_BUDGET;
begin
  nativeInit(UINT64($CCE26000E9A6FAD7));
  nativeCall;
end;

function ADD_MODEL_TO_CREATOR_BUDGET(modelHash: Hash): BOOL;
begin
  nativeInit(UINT64($0BC3144DEB678666));
  nativePush64(UINT64(modelHash));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_MODEL_FROM_CREATOR_BUDGET(modelHash: Hash);
begin
  nativeInit(UINT64($F086AD9354FAC3A3));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

function GET_USED_CREATOR_BUDGET: cfloat;
begin
  nativeInit(UINT64($3D3D8B3BE5A83D35));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_ISLAND_ENABLED(name: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($9A9D1BA639675CF1));
  nativePush64(UINT64(name));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure TASK_PAUSE(_ped: Ped; ms: cint);
begin
  nativeInit(UINT64($E73A266DB0CA9042));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ms));
  nativeCall;
end;

procedure TASK_STAND_STILL(_ped: Ped; time: cint);
begin
  nativeInit(UINT64($919BE13EED931959));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(time));
  nativeCall;
end;

procedure TASK_JUMP(_ped: Ped; usePlayerLaunchForce, doSuperJump, useFullSuperJumpForce: BOOL);
begin
  nativeInit(UINT64($0AE4086104E067B1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(usePlayerLaunchForce));
  nativePush64(UINT64(doSuperJump));
  nativePush64(UINT64(useFullSuperJumpForce));
  nativeCall;
end;

procedure TASK_COWER(_ped: Ped; duration: cint);
begin
  nativeInit(UINT64($3EB1FE9E8E908E15));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure TASK_HANDS_UP(_ped: Ped; duration: cint; facingPed: Ped; timeToFacePed, flags: cint);
begin
  nativeInit(UINT64($F2EAB31979A7F910));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(facingPed));
  nativePush64(UINT64(timeToFacePed));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure UPDATE_TASK_HANDS_UP_DURATION(_ped: Ped; duration: cint);
begin
  nativeInit(UINT64($A98FCAFD7893C834));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure TASK_OPEN_VEHICLE_DOOR(_ped: Ped; veh: Vehicle; timeOut, seat: cint; speed: cfloat);
begin
  nativeInit(UINT64($965791A9A488A062));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(timeOut));
  nativePush64(UINT64(seat));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure TASK_ENTER_VEHICLE(_ped: Ped; veh: Vehicle; timeout, seat: cint; speed: cfloat; flag: cint; overrideEntryClipsetName: PChar; p7: Any);
begin
  nativeInit(UINT64($C20E50AA46D09CA8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(timeout));
  nativePush64(UINT64(seat));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(flag));
  nativePush64(UINT64(overrideEntryClipsetName));
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure TASK_LEAVE_VEHICLE(_ped: Ped; veh: Vehicle; flags: cint);
begin
  nativeInit(UINT64($D3DBCE61A490BE02));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_GET_OFF_BOAT(_ped: Ped; boat: Vehicle);
begin
  nativeInit(UINT64($9C00E77AF14B2DFF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(boat));
  nativeCall;
end;

procedure TASK_SKY_DIVE(_ped: Ped; instant: BOOL);
begin
  nativeInit(UINT64($601736CFE536B0A0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(instant));
  nativeCall;
end;

procedure TASK_PARACHUTE(_ped: Ped; giveParachuteItem, instant: BOOL);
begin
  nativeInit(UINT64($D2F1C53C97EE81AB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(giveParachuteItem));
  nativePush64(UINT64(instant));
  nativeCall;
end;

procedure TASK_PARACHUTE_TO_TARGET(_ped: Ped; x, y, z: cfloat);
begin
  nativeInit(UINT64($B33E291AFA6BD03A));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_PARACHUTE_TASK_TARGET(_ped: Ped; x, y, z: cfloat);
begin
  nativeInit(UINT64($C313379AF0FCEDA7));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_PARACHUTE_TASK_THRUST(_ped: Ped; thrust: cfloat);
begin
  nativeInit(UINT64($0729BAC1B8C64317));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@thrust)^);
  nativeCall;
end;

procedure TASK_RAPPEL_FROM_HELI(_ped: Ped; minHeightAboveGround: cfloat);
begin
  nativeInit(UINT64($09693B0312F91649));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@minHeightAboveGround)^);
  nativeCall;
end;

procedure TASK_VEHICLE_DRIVE_TO_COORD(_ped: Ped; veh: Vehicle; x, y, z, speed: cfloat; p6: Any; vehicleModel: Hash; drivingMode: cint; stopRange, straightLineDistance: cfloat);
begin
  nativeInit(UINT64($E2A2AA2F659D77A7));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(p6));
  nativePush64(UINT64(vehicleModel));
  nativePush64(UINT64(drivingMode));
  nativePush64(PUINT64(@stopRange)^);
  nativePush64(PUINT64(@straightLineDistance)^);
  nativeCall;
end;

procedure TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(_ped: Ped; veh: Vehicle; x, y, z, speed: cfloat; driveMode: cint; stopRange: cfloat);
begin
  nativeInit(UINT64($158BB33F920D360C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(driveMode));
  nativePush64(PUINT64(@stopRange)^);
  nativeCall;
end;

procedure TASK_VEHICLE_DRIVE_WANDER(_ped: Ped; veh: Vehicle; speed: cfloat; drivingStyle: cint);
begin
  nativeInit(UINT64($480142959D337D00));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(drivingStyle));
  nativeCall;
end;

procedure TASK_FOLLOW_TO_OFFSET_OF_ENTITY(_ped: Ped; para_entity: Entity; offsetX, offsetY, offsetZ, movementSpeed: cfloat; timeout: cint; stoppingRange: cfloat; persistFollowing: BOOL);
begin
  nativeInit(UINT64($304AE42E357B8C7E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@movementSpeed)^);
  nativePush64(UINT64(timeout));
  nativePush64(PUINT64(@stoppingRange)^);
  nativePush64(UINT64(persistFollowing));
  nativeCall;
end;

procedure TASK_GO_STRAIGHT_TO_COORD(_ped: Ped; x, y, z, speed: cfloat; timeout: cint; targetHeading, distanceToSlide: cfloat);
begin
  nativeInit(UINT64($D76B57B44F1E6F8B));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(timeout));
  nativePush64(PUINT64(@targetHeading)^);
  nativePush64(PUINT64(@distanceToSlide)^);
  nativeCall;
end;

procedure TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(_ped: Ped; para_entity: Entity; x, y, z, moveBlendRatio: cfloat; time: cint);
begin
  nativeInit(UINT64($61E360B7E040D12E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(time));
  nativeCall;
end;

procedure TASK_ACHIEVE_HEADING(_ped: Ped; heading: cfloat; timeout: cint);
begin
  nativeInit(UINT64($93B93A37987F1F3D));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(timeout));
  nativeCall;
end;

procedure TASK_FLUSH_ROUTE;
begin
  nativeInit(UINT64($841142A1376E9006));
  nativeCall;
end;

procedure TASK_EXTEND_ROUTE(x, y, z: cfloat);
begin
  nativeInit(UINT64($1E7889778264843A));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure TASK_FOLLOW_POINT_ROUTE(_ped: Ped; speed: cfloat; mode: cint);
begin
  nativeInit(UINT64($595583281858626E));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(mode));
  nativeCall;
end;

procedure TASK_GO_TO_ENTITY(para_entity, target: Entity; duration: cint; distance, moveBlendRatio, slowDownDistance: cfloat; flags: cint);
begin
  nativeInit(UINT64($6A071245EB0D1882));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(target));
  nativePush64(UINT64(duration));
  nativePush64(PUINT64(@distance)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(PUINT64(@slowDownDistance)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_SMART_FLEE_COORD(_ped: Ped; x, y, z, distance: cfloat; time: cint; preferPavements, quitIfOutOfRange: BOOL);
begin
  nativeInit(UINT64($94587F17E9C365D5));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@distance)^);
  nativePush64(UINT64(time));
  nativePush64(UINT64(preferPavements));
  nativePush64(UINT64(quitIfOutOfRange));
  nativeCall;
end;

procedure TASK_SMART_FLEE_PED(_ped, fleeTarget: Ped; safeDistance: cfloat; fleeTime: cint; preferPavements, updateToNearestHatedPed: BOOL);
begin
  nativeInit(UINT64($22B0D0E37CCB840D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(fleeTarget));
  nativePush64(PUINT64(@safeDistance)^);
  nativePush64(UINT64(fleeTime));
  nativePush64(UINT64(preferPavements));
  nativePush64(UINT64(updateToNearestHatedPed));
  nativeCall;
end;

procedure TASK_REACT_AND_FLEE_PED(_ped, fleeTarget: Ped);
begin
  nativeInit(UINT64($72C896464915D1B1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(fleeTarget));
  nativeCall;
end;

procedure TASK_SHOCKING_EVENT_REACT(_ped: Ped; eventHandle: cint);
begin
  nativeInit(UINT64($452419CBD838065B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(eventHandle));
  nativeCall;
end;

procedure TASK_WANDER_IN_AREA(_ped: Ped; x, y, z, radius, minimalLength, timeBetweenWalks: cfloat);
begin
  nativeInit(UINT64($E054346CA3A0F315));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@minimalLength)^);
  nativePush64(PUINT64(@timeBetweenWalks)^);
  nativeCall;
end;

procedure TASK_WANDER_STANDARD(_ped: Ped; heading: cfloat; flags: cint);
begin
  nativeInit(UINT64($BB9CE077274F6A1B));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_WANDER_SPECIFIC(_ped: Ped; conditionalAnimGroupStr, conditionalAnimStr: PChar; heading: cfloat);
begin
  nativeInit(UINT64($6919A2F136426098));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(conditionalAnimGroupStr));
  nativePush64(UINT64(conditionalAnimStr));
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

procedure TASK_VEHICLE_PARK(_ped: Ped; veh: Vehicle; x, y, z, heading: cfloat; mode: cint; radius: cfloat; keepEngineOn: BOOL);
begin
  nativeInit(UINT64($0F3E34E968EA374E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(mode));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(keepEngineOn));
  nativeCall;
end;

procedure TASK_STEALTH_KILL(killer, target: Ped; stealthKillActionResultHash: Hash; desiredMoveBlendRatio: cfloat; stealthFlags: cint);
begin
  nativeInit(UINT64($AA5DC05579D60BD9));
  nativePush64(UINT64(killer));
  nativePush64(UINT64(target));
  nativePush64(UINT64(stealthKillActionResultHash));
  nativePush64(PUINT64(@desiredMoveBlendRatio)^);
  nativePush64(UINT64(stealthFlags));
  nativeCall;
end;

procedure TASK_PLANT_BOMB(_ped: Ped; x, y, z, heading: cfloat);
begin
  nativeInit(UINT64($965FEC691D55E9BF));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativeCall;
end;

procedure TASK_FOLLOW_NAV_MESH_TO_COORD(_ped: Ped; x, y, z, moveBlendRatio: cfloat; time: cint; targetRadius: cfloat; flags: cint; targetHeading: cfloat);
begin
  nativeInit(UINT64($15D3A79D4E44B913));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(time));
  nativePush64(PUINT64(@targetRadius)^);
  nativePush64(UINT64(flags));
  nativePush64(PUINT64(@targetHeading)^);
  nativeCall;
end;

procedure TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(_ped: Ped; x, y, z, moveBlendRatio: cfloat; time: cint; targetRadius: cfloat; flags: cint; slideToCoordHeading, maxSlopeNavigable, clampMaxSearchDistance, targetHeading: cfloat);
begin
  nativeInit(UINT64($17F58B88D085DBAC));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(time));
  nativePush64(PUINT64(@targetRadius)^);
  nativePush64(UINT64(flags));
  nativePush64(PUINT64(@slideToCoordHeading)^);
  nativePush64(PUINT64(@maxSlopeNavigable)^);
  nativePush64(PUINT64(@clampMaxSearchDistance)^);
  nativePush64(PUINT64(@targetHeading)^);
  nativeCall;
end;

procedure SET_PED_PATH_CAN_USE_CLIMBOVERS(_ped: Ped; Toggle: BOOL);
begin
  nativeInit(UINT64($8E06A6FE76C9EFF4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(Toggle));
  nativeCall;
end;

procedure SET_PED_PATH_CAN_USE_LADDERS(_ped: Ped; Toggle: BOOL);
begin
  nativeInit(UINT64($77A5B103C87F476E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(Toggle));
  nativeCall;
end;

procedure SET_PED_PATH_CAN_DROP_FROM_HEIGHT(_ped: Ped; Toggle: BOOL);
begin
  nativeInit(UINT64($E361C5C71C431A4F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(Toggle));
  nativeCall;
end;

procedure SET_PED_PATH_CLIMB_COST_MODIFIER(_ped: Ped; modifier: cfloat);
begin
  nativeInit(UINT64($88E32DB8C1A4AA4B));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure SET_PED_PATH_MAY_ENTER_WATER(_ped: Ped; mayEnterWater: BOOL);
begin
  nativeInit(UINT64($F35425A4204367EC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(mayEnterWater));
  nativeCall;
end;

procedure SET_PED_PATH_PREFER_TO_AVOID_WATER(_ped: Ped; avoidWater: BOOL);
begin
  nativeInit(UINT64($38FE1EC73743793C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(avoidWater));
  nativeCall;
end;

procedure SET_PED_PATH_AVOID_FIRE(_ped: Ped; avoidFire: BOOL);
begin
  nativeInit(UINT64($4455517B28441E60));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(avoidFire));
  nativeCall;
end;

procedure SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(height: cfloat);
begin
  nativeInit(UINT64($6C6B148586F934F7));
  nativePush64(PUINT64(@height)^);
  nativeCall;
end;

function GET_NAVMESH_ROUTE_DISTANCE_REMAINING(_ped: Ped; distanceRemaining: pcfloat; isPathReady: PBOOL): cint;
begin
  nativeInit(UINT64($C6F5C0BCDC74D62D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(distanceRemaining));
  nativePush64(UINT64(isPathReady));
  exit(cint(nativeCall^));
end;

function GET_NAVMESH_ROUTE_RESULT(_ped: Ped): cint;
begin
  nativeInit(UINT64($632E831F382A0FA8));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($3E38E28A1D80DDF6));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure TASK_GO_TO_COORD_ANY_MEANS(_ped: Ped; x, y, z, moveBlendRatio: cfloat; veh: Vehicle; useLongRangeVehiclePathing: BOOL; drivingFlags: cint; maxRangeToShootTargets: cfloat);
begin
  nativeInit(UINT64($5BC448CB78FA3E88));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(veh));
  nativePush64(UINT64(useLongRangeVehiclePathing));
  nativePush64(UINT64(drivingFlags));
  nativePush64(PUINT64(@maxRangeToShootTargets)^);
  nativeCall;
end;

procedure TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(_ped: Ped; x, y, z, moveBlendRatio: cfloat; veh: Vehicle; useLongRangeVehiclePathing: BOOL; drivingFlags: cint; maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance: cfloat; extraFlags: cint; warpTimerMS: cfloat);
begin
  nativeInit(UINT64($1DD45F9ECFDB1BC9));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(veh));
  nativePush64(UINT64(useLongRangeVehiclePathing));
  nativePush64(UINT64(drivingFlags));
  nativePush64(PUINT64(@maxRangeToShootTargets)^);
  nativePush64(PUINT64(@extraVehToTargetDistToPreferVehicle)^);
  nativePush64(PUINT64(@driveStraightLineDistance)^);
  nativePush64(UINT64(extraFlags));
  nativePush64(PUINT64(@warpTimerMS)^);
  nativeCall;
end;

procedure TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(_ped: Ped; x, y, z, moveBlendRatio: cfloat; veh: Vehicle; useLongRangeVehiclePathing: BOOL; drivingFlags: cint; maxRangeToShootTargets, extraVehToTargetDistToPreferVehicle, driveStraightLineDistance: cfloat; extraFlags: cint; cruiseSpeed, targetArriveDist: cfloat);
begin
  nativeInit(UINT64($B8ECD61F531A7B02));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(veh));
  nativePush64(UINT64(useLongRangeVehiclePathing));
  nativePush64(UINT64(drivingFlags));
  nativePush64(PUINT64(@maxRangeToShootTargets)^);
  nativePush64(PUINT64(@extraVehToTargetDistToPreferVehicle)^);
  nativePush64(PUINT64(@driveStraightLineDistance)^);
  nativePush64(UINT64(extraFlags));
  nativePush64(PUINT64(@cruiseSpeed)^);
  nativePush64(PUINT64(@targetArriveDist)^);
  nativeCall;
end;

procedure TASK_PLAY_ANIM(_ped: Ped; animDictionary, animationName: PChar; blendInSpeed, blendOutSpeed: cfloat; duration, flag: cint; playbackRate: cfloat; lockX, lockY, lockZ: BOOL);
begin
  nativeInit(UINT64($EA47FE3719165B94));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDictionary));
  nativePush64(UINT64(animationName));
  nativePush64(PUINT64(@blendInSpeed)^);
  nativePush64(PUINT64(@blendOutSpeed)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(flag));
  nativePush64(PUINT64(@playbackRate)^);
  nativePush64(UINT64(lockX));
  nativePush64(UINT64(lockY));
  nativePush64(UINT64(lockZ));
  nativeCall;
end;

procedure TASK_PLAY_ANIM_ADVANCED(_ped: Ped; animDict, animName: PChar; posX, posY, posZ, rotX, rotY, rotZ, animEnterSpeed, animExitSpeed: cfloat; duration: cint; flag: Any; animTime: cfloat; rotOrder, ikFlags: cint);
begin
  nativeInit(UINT64($83CDB10EA29B370B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(PUINT64(@animEnterSpeed)^);
  nativePush64(PUINT64(@animExitSpeed)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(flag));
  nativePush64(PUINT64(@animTime)^);
  nativePush64(UINT64(rotOrder));
  nativePush64(UINT64(ikFlags));
  nativeCall;
end;

procedure STOP_ANIM_TASK(para_entity: Entity; animDictionary, animationName: PChar; blendDelta: cfloat);
begin
  nativeInit(UINT64($97FF36A1D40EA00A));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(animDictionary));
  nativePush64(UINT64(animationName));
  nativePush64(PUINT64(@blendDelta)^);
  nativeCall;
end;

procedure TASK_SCRIPTED_ANIMATION(_ped: Ped; priorityLowData, priorityMidData, priorityHighData: pcint; blendInDelta, blendOutDelta: cfloat);
begin
  nativeInit(UINT64($126EF75F1E17ABE5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(priorityLowData));
  nativePush64(UINT64(priorityMidData));
  nativePush64(UINT64(priorityHighData));
  nativePush64(PUINT64(@blendInDelta)^);
  nativePush64(PUINT64(@blendOutDelta)^);
  nativeCall;
end;

procedure PLAY_ENTITY_SCRIPTED_ANIM(para_entity: Entity; priorityLowData, priorityMidData, priorityHighData: pcint; blendInDelta, blendOutDelta: cfloat);
begin
  nativeInit(UINT64($77A1EEC547E7FCF1));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(priorityLowData));
  nativePush64(UINT64(priorityMidData));
  nativePush64(UINT64(priorityHighData));
  nativePush64(PUINT64(@blendInDelta)^);
  nativePush64(PUINT64(@blendOutDelta)^);
  nativeCall;
end;

procedure STOP_ANIM_PLAYBACK(para_entity: Entity; priority: cint; secondary: BOOL);
begin
  nativeInit(UINT64($EE08C992D238C5D1));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(priority));
  nativePush64(UINT64(secondary));
  nativeCall;
end;

procedure SET_ANIM_WEIGHT(para_entity: Entity; weight: cfloat; priority, index: cint; secondary: BOOL);
begin
  nativeInit(UINT64($207F1A47C0342F48));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@weight)^);
  nativePush64(UINT64(priority));
  nativePush64(UINT64(index));
  nativePush64(UINT64(secondary));
  nativeCall;
end;

procedure SET_ANIM_PHASE(para_entity: Entity; phase: cfloat; priority: cint; secondary: BOOL);
begin
  nativeInit(UINT64($DDF3CB5A0A4C0B49));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@phase)^);
  nativePush64(UINT64(priority));
  nativePush64(UINT64(secondary));
  nativeCall;
end;

procedure SET_ANIM_RATE(para_entity: Entity; rate: cfloat; priority: cint; secondary: BOOL);
begin
  nativeInit(UINT64($032D49C5E359C847));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@rate)^);
  nativePush64(UINT64(priority));
  nativePush64(UINT64(secondary));
  nativeCall;
end;

procedure SET_ANIM_LOOPED(para_entity: Entity; looped: BOOL; priority: cint; secondary: BOOL);
begin
  nativeInit(UINT64($70033C3CC29A1FF4));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(looped));
  nativePush64(UINT64(priority));
  nativePush64(UINT64(secondary));
  nativeCall;
end;

procedure TASK_PLAY_PHONE_GESTURE_ANIMATION(_ped: Ped; animDict, animation, boneMaskType: PChar; blendInDuration, blendOutDuration: cfloat; isLooping, holdLastFrame: BOOL);
begin
  nativeInit(UINT64($8FBB6758B3B3E9EC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animation));
  nativePush64(UINT64(boneMaskType));
  nativePush64(PUINT64(@blendInDuration)^);
  nativePush64(PUINT64(@blendOutDuration)^);
  nativePush64(UINT64(isLooping));
  nativePush64(UINT64(holdLastFrame));
  nativeCall;
end;

procedure TASK_STOP_PHONE_GESTURE_ANIMATION(_ped: Ped; blendOutOverride: cfloat);
begin
  nativeInit(UINT64($3FA00D4F4641BFAE));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@blendOutOverride)^);
  nativeCall;
end;

function IS_PLAYING_PHONE_GESTURE_ANIM(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($B8EBB1E9D3588C10));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_PHONE_GESTURE_ANIM_CURRENT_TIME(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($47619ABE8B268C60));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_PHONE_GESTURE_ANIM_TOTAL_TIME(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($1EE0F68A7C25DEC6));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure TASK_VEHICLE_PLAY_ANIM(veh: Vehicle; animationSet, animationName: PChar);
begin
  nativeInit(UINT64($69F5C3BD0F3EBD89));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(animationSet));
  nativePush64(UINT64(animationName));
  nativeCall;
end;

procedure TASK_LOOK_AT_COORD(para_entity: Entity; x, y, z: cfloat; duration, flags, priority: cint);
begin
  nativeInit(UINT64($6FA46612594F7973));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(priority));
  nativeCall;
end;

procedure TASK_LOOK_AT_ENTITY(_ped: Ped; lookAt: Entity; duration, flags, priority: cint);
begin
  nativeInit(UINT64($69F4BE8C8CC4796C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(lookAt));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(priority));
  nativeCall;
end;

procedure TASK_CLEAR_LOOK_AT(_ped: Ped);
begin
  nativeInit(UINT64($0F804F1DB19B9689));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure OPEN_SEQUENCE_TASK(taskSequenceId: pcint);
begin
  nativeInit(UINT64($E8854A4326B9E12B));
  nativePush64(UINT64(taskSequenceId));
  nativeCall;
end;

procedure CLOSE_SEQUENCE_TASK(taskSequenceId: cint);
begin
  nativeInit(UINT64($39E72BC99E6360CB));
  nativePush64(UINT64(taskSequenceId));
  nativeCall;
end;

procedure TASK_PERFORM_SEQUENCE(_ped: Ped; taskSequenceId: cint);
begin
  nativeInit(UINT64($5ABA3986D90D8A3B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(taskSequenceId));
  nativeCall;
end;

procedure TASK_PERFORM_SEQUENCE_LOCALLY(_ped: Ped; taskSequenceId: cint);
begin
  nativeInit(UINT64($8C33220C8D78CA0D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(taskSequenceId));
  nativeCall;
end;

procedure CLEAR_SEQUENCE_TASK(taskSequenceId: pcint);
begin
  nativeInit(UINT64($3841422E9C488D8C));
  nativePush64(UINT64(taskSequenceId));
  nativeCall;
end;

procedure SET_SEQUENCE_TO_REPEAT(taskSequenceId: cint; _repeat: BOOL);
begin
  nativeInit(UINT64($58C70CF3A41E4AE7));
  nativePush64(UINT64(taskSequenceId));
  nativePush64(UINT64(_repeat));
  nativeCall;
end;

function GET_SEQUENCE_PROGRESS(_ped: Ped): cint;
begin
  nativeInit(UINT64($00A9010CFE1E3533));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function GET_IS_TASK_ACTIVE(_ped: Ped; taskIndex: cint): BOOL;
begin
  nativeInit(UINT64($B0760331C7AA4155));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(taskIndex));
  exit(BOOL(nativeCall^));
end;

function GET_SCRIPT_TASK_STATUS(_ped: Ped; taskHash: Hash): cint;
begin
  nativeInit(UINT64($77F1BEB8863288D5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(taskHash));
  exit(cint(nativeCall^));
end;

function GET_ACTIVE_VEHICLE_MISSION_TYPE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($534AEBA6E5ED4CAB));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure TASK_LEAVE_ANY_VEHICLE(_ped: Ped; delayTime, flags: cint);
begin
  nativeInit(UINT64($504D54DF3F6F2247));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(delayTime));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_AIM_GUN_SCRIPTED(_ped: Ped; scriptTask: Hash; disableBlockingClip, instantBlendToAim: BOOL);
begin
  nativeInit(UINT64($7A192BE16D373D00));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(scriptTask));
  nativePush64(UINT64(disableBlockingClip));
  nativePush64(UINT64(instantBlendToAim));
  nativeCall;
end;

procedure TASK_AIM_GUN_SCRIPTED_WITH_TARGET(_ped, target: Ped; x, y, z: cfloat; gunTaskType: cint; disableBlockingClip, forceAim: BOOL);
begin
  nativeInit(UINT64($8605AF0DE8B3A5AC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(gunTaskType));
  nativePush64(UINT64(disableBlockingClip));
  nativePush64(UINT64(forceAim));
  nativeCall;
end;

procedure UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(_ped, target: Ped; x, y, z: cfloat; disableBlockingClip: BOOL);
begin
  nativeInit(UINT64($9724FB59A3E72AD0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(disableBlockingClip));
  nativeCall;
end;

function GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(gunTaskType: cint): PChar;
begin
  nativeInit(UINT64($3A8CADC7D37AACC5));
  nativePush64(UINT64(gunTaskType));
  exit(PChar(nativeCall^));
end;

procedure TASK_AIM_GUN_AT_ENTITY(_ped: Ped; para_entity: Entity; duration: cint; instantBlendToAim: BOOL);
begin
  nativeInit(UINT64($9B53BB6E8943AF53));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(instantBlendToAim));
  nativeCall;
end;

procedure TASK_TURN_PED_TO_FACE_ENTITY(_ped: Ped; para_entity: Entity; duration: cint);
begin
  nativeInit(UINT64($5AD23D40115353AC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure TASK_AIM_GUN_AT_COORD(_ped: Ped; x, y, z: cfloat; time: cint; instantBlendToAim, playAnimIntro: BOOL);
begin
  nativeInit(UINT64($6671F3EEC681BDA1));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(time));
  nativePush64(UINT64(instantBlendToAim));
  nativePush64(UINT64(playAnimIntro));
  nativeCall;
end;

procedure TASK_SHOOT_AT_COORD(_ped: Ped; x, y, z: cfloat; duration: cint; firingPattern: Hash);
begin
  nativeInit(UINT64($46A6CC01E0826106));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(_ped: Ped; veh: Vehicle; useAlternateShuffle: BOOL);
begin
  nativeInit(UINT64($7AA80209BDA643EB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(useAlternateShuffle));
  nativeCall;
end;

procedure CLEAR_PED_TASKS(_ped: Ped);
begin
  nativeInit(UINT64($E1EF3C1216AFF2CD));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure CLEAR_PED_SECONDARY_TASK(_ped: Ped);
begin
  nativeInit(UINT64($176CECF6F920D707));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure TASK_EVERYONE_LEAVE_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($7F93691AB4B92272));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure TASK_GOTO_ENTITY_OFFSET(_ped: Ped; para_entity: Entity; time: cint; seekRadius, seekAngleDeg, moveBlendRatio: cfloat; gotoEntityOffsetFlags: cint);
begin
  nativeInit(UINT64($E39B4FF4FDEBDE27));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(time));
  nativePush64(PUINT64(@seekRadius)^);
  nativePush64(PUINT64(@seekAngleDeg)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(gotoEntityOffsetFlags));
  nativeCall;
end;

procedure TASK_GOTO_ENTITY_OFFSET_XY(_ped: Ped; para_entity: Entity; duration: cint; targetRadius, offsetX, offsetY, moveBlendRatio: cfloat; gotoEntityOffsetFlags: cint);
begin
  nativeInit(UINT64($338E7EF52B6095A9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(duration));
  nativePush64(PUINT64(@targetRadius)^);
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(gotoEntityOffsetFlags));
  nativeCall;
end;

procedure TASK_TURN_PED_TO_FACE_COORD(_ped: Ped; x, y, z: cfloat; duration: cint);
begin
  nativeInit(UINT64($1DDA930A0AC38571));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure TASK_VEHICLE_TEMP_ACTION(driver: Ped; veh: Vehicle; action, time: cint);
begin
  nativeInit(UINT64($C429DCEEB339E129));
  nativePush64(UINT64(driver));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(action));
  nativePush64(UINT64(time));
  nativeCall;
end;

procedure TASK_VEHICLE_MISSION(driver: Ped; veh, vehicleTarget: Vehicle; missionType: cint; cruiseSpeed: cfloat; drivingStyle: cint; targetReached, straightLineDistance: cfloat; DriveAgainstTraffic: BOOL);
begin
  nativeInit(UINT64($659427E0EF36BCDE));
  nativePush64(UINT64(driver));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(vehicleTarget));
  nativePush64(UINT64(missionType));
  nativePush64(PUINT64(@cruiseSpeed)^);
  nativePush64(UINT64(drivingStyle));
  nativePush64(PUINT64(@targetReached)^);
  nativePush64(PUINT64(@straightLineDistance)^);
  nativePush64(UINT64(DriveAgainstTraffic));
  nativeCall;
end;

procedure TASK_VEHICLE_MISSION_PED_TARGET(_ped: Ped; veh: Vehicle; pedTarget: Ped; missionType: cint; maxSpeed: cfloat; drivingStyle: cint; minDistance, straightLineDistance: cfloat; DriveAgainstTraffic: BOOL);
begin
  nativeInit(UINT64($9454528DF15D657A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(pedTarget));
  nativePush64(UINT64(missionType));
  nativePush64(PUINT64(@maxSpeed)^);
  nativePush64(UINT64(drivingStyle));
  nativePush64(PUINT64(@minDistance)^);
  nativePush64(PUINT64(@straightLineDistance)^);
  nativePush64(UINT64(DriveAgainstTraffic));
  nativeCall;
end;

procedure TASK_VEHICLE_MISSION_COORS_TARGET(_ped: Ped; veh: Vehicle; x, y, z: cfloat; mission: cint; cruiseSpeed: cfloat; drivingStyle: cint; targetReached, straightLineDistance: cfloat; DriveAgainstTraffic: BOOL);
begin
  nativeInit(UINT64($F0AF20AA7731F8C3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(mission));
  nativePush64(PUINT64(@cruiseSpeed)^);
  nativePush64(UINT64(drivingStyle));
  nativePush64(PUINT64(@targetReached)^);
  nativePush64(PUINT64(@straightLineDistance)^);
  nativePush64(UINT64(DriveAgainstTraffic));
  nativeCall;
end;

procedure TASK_VEHICLE_ESCORT(_ped: Ped; veh, targetVehicle: Vehicle; mode: cint; speed: cfloat; drivingStyle: cint; minDistance: cfloat; minHeightAboveTerrain: cint; noRoadsDistance: cfloat);
begin
  nativeInit(UINT64($0FA6E4B75F302400));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(targetVehicle));
  nativePush64(UINT64(mode));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(drivingStyle));
  nativePush64(PUINT64(@minDistance)^);
  nativePush64(UINT64(minHeightAboveTerrain));
  nativePush64(PUINT64(@noRoadsDistance)^);
  nativeCall;
end;

procedure TASK_VEHICLE_FOLLOW(driver: Ped; veh: Vehicle; targetEntity: Entity; speed: cfloat; drivingStyle, minDistance: cint);
begin
  nativeInit(UINT64($FC545A9F0626E3B6));
  nativePush64(UINT64(driver));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(targetEntity));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(drivingStyle));
  nativePush64(UINT64(minDistance));
  nativeCall;
end;

procedure TASK_VEHICLE_CHASE(driver: Ped; targetEnt: Entity);
begin
  nativeInit(UINT64($3C08A8E30363B353));
  nativePush64(UINT64(driver));
  nativePush64(UINT64(targetEnt));
  nativeCall;
end;

procedure TASK_VEHICLE_HELI_PROTECT(pilot: Ped; veh: Vehicle; entityToFollow: Entity; targetSpeed: cfloat; drivingFlags: cint; radius: cfloat; altitude, heliFlags: cint);
begin
  nativeInit(UINT64($1E09C32048FEFD1C));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(entityToFollow));
  nativePush64(PUINT64(@targetSpeed)^);
  nativePush64(UINT64(drivingFlags));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(altitude));
  nativePush64(UINT64(heliFlags));
  nativeCall;
end;

procedure SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(_ped: Ped; flag: cint; _set: BOOL);
begin
  nativeInit(UINT64($CC665AAC360D31E7));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(flag));
  nativePush64(UINT64(_set));
  nativeCall;
end;

procedure SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(_ped: Ped; distance: cfloat);
begin
  nativeInit(UINT64($639B642FACBE4EDD));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@distance)^);
  nativeCall;
end;

procedure TASK_HELI_CHASE(pilot: Ped; entityToFollow: Entity; x, y, z: cfloat);
begin
  nativeInit(UINT64($AC83B1DB38D0ADA0));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(entityToFollow));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure TASK_PLANE_CHASE(pilot: Ped; entityToFollow: Entity; x, y, z: cfloat);
begin
  nativeInit(UINT64($2D2386F273FF7A25));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(entityToFollow));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure TASK_PLANE_LAND(pilot: Ped; plane: Vehicle; runwayStartX, runwayStartY, runwayStartZ, runwayEndX, runwayEndY, runwayEndZ: cfloat);
begin
  nativeInit(UINT64($BF19721FA34D32C0));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(plane));
  nativePush64(PUINT64(@runwayStartX)^);
  nativePush64(PUINT64(@runwayStartY)^);
  nativePush64(PUINT64(@runwayStartZ)^);
  nativePush64(PUINT64(@runwayEndX)^);
  nativePush64(PUINT64(@runwayEndY)^);
  nativePush64(PUINT64(@runwayEndZ)^);
  nativeCall;
end;

procedure CLEAR_DEFAULT_PRIMARY_TASK(_ped: Ped);
begin
  nativeInit(UINT64($6100B3CEFD43452E));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure CLEAR_PRIMARY_VEHICLE_TASK(veh: Vehicle);
begin
  nativeInit(UINT64($DBBC7A2432524127));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure CLEAR_VEHICLE_CRASH_TASK(veh: Vehicle);
begin
  nativeInit(UINT64($53DDC75BC3AC0A90));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure TASK_PLANE_GOTO_PRECISE_VTOL(_ped: Ped; veh: Vehicle; x, y, z: cfloat; flightHeight, minHeightAboveTerrain: cint; useDesiredOrientation: BOOL; desiredOrientation: cfloat; autopilot: BOOL);
begin
  nativeInit(UINT64($F7F9DCCA89E7505B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(flightHeight));
  nativePush64(UINT64(minHeightAboveTerrain));
  nativePush64(UINT64(useDesiredOrientation));
  nativePush64(PUINT64(@desiredOrientation)^);
  nativePush64(UINT64(autopilot));
  nativeCall;
end;

procedure TASK_SUBMARINE_GOTO_AND_STOP(_ped: Ped; submarine: Vehicle; x, y, z: cfloat; autopilot: BOOL);
begin
  nativeInit(UINT64($C22B40579A498CA4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(submarine));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(autopilot));
  nativeCall;
end;

procedure TASK_HELI_MISSION(pilot: Ped; aircraft, targetVehicle: Vehicle; targetPed: Ped; destinationX, destinationY, destinationZ: cfloat; missionFlag: cint; maxSpeed, radius, targetHeading: cfloat; maxHeight, minHeight: cint; slowDownDistance: cfloat; behaviorFlags: cint);
begin
  nativeInit(UINT64($DAD029E187A2BEB4));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(aircraft));
  nativePush64(UINT64(targetVehicle));
  nativePush64(UINT64(targetPed));
  nativePush64(PUINT64(@destinationX)^);
  nativePush64(PUINT64(@destinationY)^);
  nativePush64(PUINT64(@destinationZ)^);
  nativePush64(UINT64(missionFlag));
  nativePush64(PUINT64(@maxSpeed)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@targetHeading)^);
  nativePush64(UINT64(maxHeight));
  nativePush64(UINT64(minHeight));
  nativePush64(PUINT64(@slowDownDistance)^);
  nativePush64(UINT64(behaviorFlags));
  nativeCall;
end;

procedure TASK_HELI_ESCORT_HELI(pilot: Ped; heli1, heli2: Vehicle; offsetX, offsetY, offsetZ: cfloat);
begin
  nativeInit(UINT64($B385523325077210));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(heli1));
  nativePush64(UINT64(heli2));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativeCall;
end;

procedure TASK_PLANE_MISSION(pilot: Ped; aircraft, targetVehicle: Vehicle; targetPed: Ped; destinationX, destinationY, destinationZ: cfloat; missionFlag: cint; angularDrag, targetReached, targetHeading, maxZ, minZ: cfloat; precise: BOOL);
begin
  nativeInit(UINT64($23703CD154E83B88));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(aircraft));
  nativePush64(UINT64(targetVehicle));
  nativePush64(UINT64(targetPed));
  nativePush64(PUINT64(@destinationX)^);
  nativePush64(PUINT64(@destinationY)^);
  nativePush64(PUINT64(@destinationZ)^);
  nativePush64(UINT64(missionFlag));
  nativePush64(PUINT64(@angularDrag)^);
  nativePush64(PUINT64(@targetReached)^);
  nativePush64(PUINT64(@targetHeading)^);
  nativePush64(PUINT64(@maxZ)^);
  nativePush64(PUINT64(@minZ)^);
  nativePush64(UINT64(precise));
  nativeCall;
end;

procedure TASK_PLANE_TAXI(pilot: Ped; aircraft: Vehicle; x, y, z, cruiseSpeed, targetReached: cfloat);
begin
  nativeInit(UINT64($92C360B5F15D2302));
  nativePush64(UINT64(pilot));
  nativePush64(UINT64(aircraft));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@cruiseSpeed)^);
  nativePush64(PUINT64(@targetReached)^);
  nativeCall;
end;

procedure TASK_BOAT_MISSION(pedDriver: Ped; veh, targetVehicle: Vehicle; targetPed: Ped; x, y, z: cfloat; mission: cint; maxSpeed: cfloat; drivingStyle: cint; targetReached: cfloat; boatFlags: Any);
begin
  nativeInit(UINT64($15C86013127CE63F));
  nativePush64(UINT64(pedDriver));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(targetVehicle));
  nativePush64(UINT64(targetPed));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(mission));
  nativePush64(PUINT64(@maxSpeed)^);
  nativePush64(UINT64(drivingStyle));
  nativePush64(PUINT64(@targetReached)^);
  nativePush64(UINT64(boatFlags));
  nativeCall;
end;

procedure TASK_DRIVE_BY(driverPed, targetPed: Ped; targetVehicle: Vehicle; targetX, targetY, targetZ, distanceToShoot: cfloat; pedAccuracy: cint; pushUnderneathDrivingTaskIfDriving: BOOL; firingPattern: Hash);
begin
  nativeInit(UINT64($2F8AF0E82773A171));
  nativePush64(UINT64(driverPed));
  nativePush64(UINT64(targetPed));
  nativePush64(UINT64(targetVehicle));
  nativePush64(PUINT64(@targetX)^);
  nativePush64(PUINT64(@targetY)^);
  nativePush64(PUINT64(@targetZ)^);
  nativePush64(PUINT64(@distanceToShoot)^);
  nativePush64(UINT64(pedAccuracy));
  nativePush64(UINT64(pushUnderneathDrivingTaskIfDriving));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure SET_DRIVEBY_TASK_TARGET(shootingPed, targetPed: Ped; targetVehicle: Vehicle; x, y, z: cfloat);
begin
  nativeInit(UINT64($E5B302114D8162EE));
  nativePush64(UINT64(shootingPed));
  nativePush64(UINT64(targetPed));
  nativePush64(UINT64(targetVehicle));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(_ped: Ped);
begin
  nativeInit(UINT64($C35B5CDB2824CF69));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($8785E6E40C7A8818));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function CONTROL_MOUNTED_WEAPON(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($DCFE42068FE0135A));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_MOUNTED_WEAPON_TARGET(shootingPed, targetPed: Ped; targetVehicle: Vehicle; x, y, z: cfloat; taskMode: cint; ignoreTargetVehDeadCheck: BOOL);
begin
  nativeInit(UINT64($CCD892192C6D2BB9));
  nativePush64(UINT64(shootingPed));
  nativePush64(UINT64(targetPed));
  nativePush64(UINT64(targetVehicle));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(taskMode));
  nativePush64(UINT64(ignoreTargetVehDeadCheck));
  nativeCall;
end;

function IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($A320EF046186FA3B));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure TASK_USE_MOBILE_PHONE(_ped: Ped; usePhone: BOOL; desiredPhoneMode: cint);
begin
  nativeInit(UINT64($BD2A8EC3AF4DE7DB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(usePhone));
  nativePush64(UINT64(desiredPhoneMode));
  nativeCall;
end;

procedure TASK_USE_MOBILE_PHONE_TIMED(_ped: Ped; duration: cint);
begin
  nativeInit(UINT64($5EE02954A14C69DB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure TASK_CHAT_TO_PED(_ped, target: Ped; flags: cint; goToLocationX, goToLocationY, goToLocationZ, headingDegs, idleTime: cfloat);
begin
  nativeInit(UINT64($8C338E0263E4FD19));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(UINT64(flags));
  nativePush64(PUINT64(@goToLocationX)^);
  nativePush64(PUINT64(@goToLocationY)^);
  nativePush64(PUINT64(@goToLocationZ)^);
  nativePush64(PUINT64(@headingDegs)^);
  nativePush64(PUINT64(@idleTime)^);
  nativeCall;
end;

procedure TASK_WARP_PED_INTO_VEHICLE(_ped: Ped; veh: Vehicle; seat: cint);
begin
  nativeInit(UINT64($9A7D091411C5F684));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seat));
  nativeCall;
end;

procedure TASK_SHOOT_AT_ENTITY(para_entity, target: Entity; duration: cint; firingPattern: Hash);
begin
  nativeInit(UINT64($08DA95E8298AE772));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(target));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure TASK_CLIMB(_ped: Ped; usePlayerLaunchForce: BOOL);
begin
  nativeInit(UINT64($89D9FCC2435112F1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(usePlayerLaunchForce));
  nativeCall;
end;

procedure TASK_CLIMB_LADDER(_ped: Ped; fast: BOOL);
begin
  nativeInit(UINT64($B6C987F9285A3814));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(fast));
  nativeCall;
end;

procedure TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(_ped: Ped; x1, y1, z1, x2, y2, z2, minZ: cfloat; ropeHandle: cint; clipSet: PChar; p10, p11: Any);
begin
  nativeInit(UINT64($EAF66ACDDC794793));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(PUINT64(@minZ)^);
  nativePush64(UINT64(ropeHandle));
  nativePush64(UINT64(clipSet));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativeCall;
end;

function GET_TASK_RAPPEL_DOWN_WALL_STATE(_ped: Ped): cint;
begin
  nativeInit(UINT64($9D252648778160DF));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

procedure CLEAR_PED_TASKS_IMMEDIATELY(_ped: Ped);
begin
  nativeInit(UINT64($AAA34F8A7CB32098));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure TASK_PERFORM_SEQUENCE_FROM_PROGRESS(_ped: Ped; taskIndex, progress1, progress2: cint);
begin
  nativeInit(UINT64($89221B16730234F0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(taskIndex));
  nativePush64(UINT64(progress1));
  nativePush64(UINT64(progress2));
  nativeCall;
end;

procedure SET_NEXT_DESIRED_MOVE_STATE(nextMoveState: cfloat);
begin
  nativeInit(UINT64($F1B9F16E89E2C93A));
  nativePush64(PUINT64(@nextMoveState)^);
  nativeCall;
end;

procedure SET_PED_DESIRED_MOVE_BLEND_RATIO(_ped: Ped; newMoveBlendRatio: cfloat);
begin
  nativeInit(UINT64($1E982AC8716912C5));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@newMoveBlendRatio)^);
  nativeCall;
end;

function GET_PED_DESIRED_MOVE_BLEND_RATIO(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($8517D4A6CA8513ED));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure TASK_GOTO_ENTITY_AIMING(_ped: Ped; target: Entity; distanceToStopAt, StartAimingDist: cfloat);
begin
  nativeInit(UINT64($A9DA48FAB8A76C12));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(PUINT64(@distanceToStopAt)^);
  nativePush64(PUINT64(@StartAimingDist)^);
  nativeCall;
end;

procedure TASK_SET_DECISION_MAKER(_ped: Ped; decisionMakerId: Hash);
begin
  nativeInit(UINT64($EB8517DDA73720DA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(decisionMakerId));
  nativeCall;
end;

procedure TASK_SET_SPHERE_DEFENSIVE_AREA(_ped: Ped; x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($933C06518B52A9A4));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure TASK_CLEAR_DEFENSIVE_AREA(_ped: Ped);
begin
  nativeInit(UINT64($95A6C46A31D1917D));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure TASK_PED_SLIDE_TO_COORD(_ped: Ped; x, y, z, heading, speed: cfloat);
begin
  nativeInit(UINT64($D04FE6765D990A06));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure TASK_PED_SLIDE_TO_COORD_HDG_RATE(_ped: Ped; x, y, z, heading, speed, headingChangeRate: cfloat);
begin
  nativeInit(UINT64($5A4A6A6D3DC64F52));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(PUINT64(@speed)^);
  nativePush64(PUINT64(@headingChangeRate)^);
  nativeCall;
end;

function ADD_COVER_POINT(x, y, z, direction: cfloat; usage, height, arc: cint; isPriority: BOOL): ScrHandle;
begin
  nativeInit(UINT64($D5C12A75C7B9497F));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@direction)^);
  nativePush64(UINT64(usage));
  nativePush64(UINT64(height));
  nativePush64(UINT64(arc));
  nativePush64(UINT64(isPriority));
  exit(ScrHandle(nativeCall^));
end;

procedure REMOVE_COVER_POINT(coverpoint: ScrHandle);
begin
  nativeInit(UINT64($AE287C923D891715));
  nativePush64(UINT64(coverpoint));
  nativeCall;
end;

function DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(x, y, z: cfloat): BOOL;
begin
  nativeInit(UINT64($A98B8E3C088E5A31));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(BOOL(nativeCall^));
end;

function GET_SCRIPTED_COVER_POINT_COORDS(coverpoint: ScrHandle): Vector3;
begin
  nativeInit(UINT64($594A1028FC2A3E85));
  nativePush64(UINT64(coverpoint));
  exit(PVector3(nativeCall)^);
end;

procedure ADD_SCRIPTED_COVER_AREA(x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($28B7B9BFDAF274AA));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure TASK_COMBAT_PED(_ped, targetPed: Ped; combatFlags, threatResponseFlags: cint);
begin
  nativeInit(UINT64($F166E48407BAC484));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(targetPed));
  nativePush64(UINT64(combatFlags));
  nativePush64(UINT64(threatResponseFlags));
  nativeCall;
end;

procedure TASK_COMBAT_PED_TIMED(_ped, target: Ped; time, flags: cint);
begin
  nativeInit(UINT64($944F30DCB7096BDE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(UINT64(time));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_SEEK_COVER_FROM_POS(_ped: Ped; x, y, z: cfloat; duration: cint; allowPeekingAndFiring: BOOL);
begin
  nativeInit(UINT64($75AC2B60386D89F2));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(allowPeekingAndFiring));
  nativeCall;
end;

procedure TASK_SEEK_COVER_FROM_PED(_ped, target: Ped; duration: cint; allowPeekingAndFiring: BOOL);
begin
  nativeInit(UINT64($84D32B3BEC531324));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(allowPeekingAndFiring));
  nativeCall;
end;

procedure TASK_SEEK_COVER_TO_COVER_POINT(_ped: Ped; coverpoint: ScrHandle; x, y, z: cfloat; time: cint; allowPeekingAndFiring: BOOL);
begin
  nativeInit(UINT64($D43D95C7A869447F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(coverpoint));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(time));
  nativePush64(UINT64(allowPeekingAndFiring));
  nativeCall;
end;

procedure TASK_SEEK_COVER_TO_COORDS(_ped: Ped; x1, y1, z1, x2, y2, z2: cfloat; timeout: cint; shortRoute: BOOL);
begin
  nativeInit(UINT64($39246A6958EF072C));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(timeout));
  nativePush64(UINT64(shortRoute));
  nativeCall;
end;

procedure TASK_PUT_PED_DIRECTLY_INTO_COVER(_ped: Ped; x, y, z: cfloat; time: cint; allowPeekingAndFiring: BOOL; blendInDuration: cfloat; forceInitialFacingDirection, forceFaceLeft: BOOL; identifier: cint; doEntry: BOOL);
begin
  nativeInit(UINT64($4172393E6BE1FECE));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(time));
  nativePush64(UINT64(allowPeekingAndFiring));
  nativePush64(PUINT64(@blendInDuration)^);
  nativePush64(UINT64(forceInitialFacingDirection));
  nativePush64(UINT64(forceFaceLeft));
  nativePush64(UINT64(identifier));
  nativePush64(UINT64(doEntry));
  nativeCall;
end;

procedure TASK_WARP_PED_DIRECTLY_INTO_COVER(_ped: Ped; time: cint; allowPeekingAndFiring, forceInitialFacingDirection, forceFaceLeft: BOOL; identifier: cint);
begin
  nativeInit(UINT64($6E01E9E8D89F8276));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(time));
  nativePush64(UINT64(allowPeekingAndFiring));
  nativePush64(UINT64(forceInitialFacingDirection));
  nativePush64(UINT64(forceFaceLeft));
  nativePush64(UINT64(identifier));
  nativeCall;
end;

procedure TASK_EXIT_COVER(_ped: Ped; exitType: cint; x, y, z: cfloat);
begin
  nativeInit(UINT64($79B258E397854D29));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(exitType));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure TASK_PUT_PED_DIRECTLY_INTO_MELEE(_ped, meleeTarget: Ped; blendInDuration, timeInMelee, strafePhaseSync: cfloat; aiCombatFlags: cint);
begin
  nativeInit(UINT64($1C6CD14A876FFE39));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(meleeTarget));
  nativePush64(PUINT64(@blendInDuration)^);
  nativePush64(PUINT64(@timeInMelee)^);
  nativePush64(PUINT64(@strafePhaseSync)^);
  nativePush64(UINT64(aiCombatFlags));
  nativeCall;
end;

procedure TASK_TOGGLE_DUCK(_ped: Ped; toggleType: cint);
begin
  nativeInit(UINT64($AC96609B9995EDF8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggleType));
  nativeCall;
end;

procedure TASK_GUARD_CURRENT_POSITION(_ped: Ped; maxPatrolProximity, defensiveAreaRadius: cfloat; setDefensiveArea: BOOL);
begin
  nativeInit(UINT64($4A58A47A72E3FCB4));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@maxPatrolProximity)^);
  nativePush64(PUINT64(@defensiveAreaRadius)^);
  nativePush64(UINT64(setDefensiveArea));
  nativeCall;
end;

procedure TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(_ped: Ped; x, y, z, heading, maxPatrolProximity: cfloat; timer: cint);
begin
  nativeInit(UINT64($D2A207EEBDF9889B));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(PUINT64(@maxPatrolProximity)^);
  nativePush64(UINT64(timer));
  nativeCall;
end;

procedure TASK_GUARD_SPHERE_DEFENSIVE_AREA(_ped: Ped; defendPositionX, defendPositionY, defendPositionZ, heading, maxPatrolProximity: cfloat; time: cint; x, y, z, defensiveAreaRadius: cfloat);
begin
  nativeInit(UINT64($C946FE14BE0EB5E2));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@defendPositionX)^);
  nativePush64(PUINT64(@defendPositionY)^);
  nativePush64(PUINT64(@defendPositionZ)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(PUINT64(@maxPatrolProximity)^);
  nativePush64(UINT64(time));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@defensiveAreaRadius)^);
  nativeCall;
end;

procedure TASK_STAND_GUARD(_ped: Ped; x, y, z, heading: cfloat; scenarioName: PChar);
begin
  nativeInit(UINT64($AE032F8BBA959E90));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(scenarioName));
  nativeCall;
end;

procedure SET_DRIVE_TASK_CRUISE_SPEED(driver: Ped; cruiseSpeed: cfloat);
begin
  nativeInit(UINT64($5C9B84BD7D31D908));
  nativePush64(UINT64(driver));
  nativePush64(PUINT64(@cruiseSpeed)^);
  nativeCall;
end;

procedure SET_DRIVE_TASK_MAX_CRUISE_SPEED(_ped: Ped; speed: cfloat);
begin
  nativeInit(UINT64($404A5AA9B9F0B746));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SET_DRIVE_TASK_DRIVING_STYLE(_ped: Ped; drivingStyle: cint);
begin
  nativeInit(UINT64($DACE1BE37D88AF67));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(drivingStyle));
  nativeCall;
end;

procedure ADD_COVER_BLOCKING_AREA(startX, startY, startZ, endX, endY, endZ: cfloat; blockObjects, blockVehicles, blockMap, blockPlayer: BOOL);
begin
  nativeInit(UINT64($45C597097DD7CB81));
  nativePush64(PUINT64(@startX)^);
  nativePush64(PUINT64(@startY)^);
  nativePush64(PUINT64(@startZ)^);
  nativePush64(PUINT64(@endX)^);
  nativePush64(PUINT64(@endY)^);
  nativePush64(PUINT64(@endZ)^);
  nativePush64(UINT64(blockObjects));
  nativePush64(UINT64(blockVehicles));
  nativePush64(UINT64(blockMap));
  nativePush64(UINT64(blockPlayer));
  nativeCall;
end;

procedure REMOVE_ALL_COVER_BLOCKING_AREAS;
begin
  nativeInit(UINT64($DB6708C0B46F56D8));
  nativeCall;
end;

procedure REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(x, y, z: cfloat);
begin
  nativeInit(UINT64($FA83CA6776038F64));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(startX, startY, startZ, endX, endY, endZ: cfloat; blockObjects, blockVehicles, blockMap, blockPlayer: BOOL);
begin
  nativeInit(UINT64($1F351CF1C6475734));
  nativePush64(PUINT64(@startX)^);
  nativePush64(PUINT64(@startY)^);
  nativePush64(PUINT64(@startZ)^);
  nativePush64(PUINT64(@endX)^);
  nativePush64(PUINT64(@endY)^);
  nativePush64(PUINT64(@endZ)^);
  nativePush64(UINT64(blockObjects));
  nativePush64(UINT64(blockVehicles));
  nativePush64(UINT64(blockMap));
  nativePush64(UINT64(blockPlayer));
  nativeCall;
end;

procedure TASK_START_SCENARIO_IN_PLACE(_ped: Ped; scenarioName: PChar; unkDelay: cint; playEnterAnim: BOOL);
begin
  nativeInit(UINT64($142A02425FF02BD9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(scenarioName));
  nativePush64(UINT64(unkDelay));
  nativePush64(UINT64(playEnterAnim));
  nativeCall;
end;

procedure TASK_START_SCENARIO_AT_POSITION(_ped: Ped; scenarioName: PChar; x, y, z, heading: cfloat; duration: cint; sittingScenario, teleport: BOOL);
begin
  nativeInit(UINT64($FA4EFC79F69D4F07));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(scenarioName));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(sittingScenario));
  nativePush64(UINT64(teleport));
  nativeCall;
end;

procedure TASK_USE_NEAREST_SCENARIO_TO_COORD(_ped: Ped; x, y, z, distance: cfloat; duration: cint);
begin
  nativeInit(UINT64($277F471BA9DB000B));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@distance)^);
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(_ped: Ped; x, y, z, radius: cfloat; timeToLeave: cint);
begin
  nativeInit(UINT64($58E2E0F23F6B76C3));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(timeToLeave));
  nativeCall;
end;

procedure TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(_ped: Ped; x, y, z, maxRange: cfloat; timeToLeave: cint);
begin
  nativeInit(UINT64($9FDA1B3D7E7028B3));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@maxRange)^);
  nativePush64(UINT64(timeToLeave));
  nativeCall;
end;

procedure TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(_ped: Ped; x, y, z, radius: cfloat; timeToLeave: cint);
begin
  nativeInit(UINT64($97A28E63F0BA5631));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(timeToLeave));
  nativeCall;
end;

function DOES_SCENARIO_EXIST_IN_AREA(x, y, z, radius: cfloat; mustBeFree: BOOL): BOOL;
begin
  nativeInit(UINT64($5A59271FFADD33C1));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(mustBeFree));
  exit(BOOL(nativeCall^));
end;

function DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(x, y, z: cfloat; scenarioName: PChar; radius: cfloat; mustBeFree: BOOL): BOOL;
begin
  nativeInit(UINT64($0A9D0C2A3BBC86C1));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(scenarioName));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(mustBeFree));
  exit(BOOL(nativeCall^));
end;

function IS_SCENARIO_OCCUPIED(x, y, z, maxRange: cfloat; onlyUsersActuallyAtScenario: BOOL): BOOL;
begin
  nativeInit(UINT64($788756D73AC2E07C));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@maxRange)^);
  nativePush64(UINT64(onlyUsersActuallyAtScenario));
  exit(BOOL(nativeCall^));
end;

function PED_HAS_USE_SCENARIO_TASK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($295E3CCEC879CCD7));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure PLAY_ANIM_ON_RUNNING_SCENARIO(_ped: Ped; animDict, animName: PChar);
begin
  nativeInit(UINT64($748040460F8DF5DC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(animName));
  nativeCall;
end;

function DOES_SCENARIO_GROUP_EXIST(scenarioGroup: PChar): BOOL;
begin
  nativeInit(UINT64($F9034C136C9E00D3));
  nativePush64(UINT64(scenarioGroup));
  exit(BOOL(nativeCall^));
end;

function IS_SCENARIO_GROUP_ENABLED(scenarioGroup: PChar): BOOL;
begin
  nativeInit(UINT64($367A09DED4E05B99));
  nativePush64(UINT64(scenarioGroup));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCENARIO_GROUP_ENABLED(scenarioGroup: PChar; enabled: BOOL);
begin
  nativeInit(UINT64($02C8E5B49848664E));
  nativePush64(UINT64(scenarioGroup));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure RESET_SCENARIO_GROUPS_ENABLED;
begin
  nativeInit(UINT64($DD902D0349AFAD3A));
  nativeCall;
end;

procedure SET_EXCLUSIVE_SCENARIO_GROUP(scenarioGroup: PChar);
begin
  nativeInit(UINT64($535E97E1F7FC0C6A));
  nativePush64(UINT64(scenarioGroup));
  nativeCall;
end;

procedure RESET_EXCLUSIVE_SCENARIO_GROUP;
begin
  nativeInit(UINT64($4202BBCB8684563D));
  nativeCall;
end;

function IS_SCENARIO_TYPE_ENABLED(scenarioType: PChar): BOOL;
begin
  nativeInit(UINT64($3A815DB3EA088722));
  nativePush64(UINT64(scenarioType));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCENARIO_TYPE_ENABLED(scenarioType: PChar; toggle: BOOL);
begin
  nativeInit(UINT64($EB47EC4E34FB7EE1));
  nativePush64(UINT64(scenarioType));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure RESET_SCENARIO_TYPES_ENABLED;
begin
  nativeInit(UINT64($0D40EE2A7F2B2D6D));
  nativeCall;
end;

function IS_PED_ACTIVE_IN_SCENARIO(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($AA135F9482C82CC3));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($621C6E4729388E41));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_CAN_PLAY_AMBIENT_IDLES(_ped: Ped; blockIdleClips, removeIdleClipIfPlaying: BOOL);
begin
  nativeInit(UINT64($8FD89A6240813FD0));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(blockIdleClips));
  nativePush64(UINT64(removeIdleClipIfPlaying));
  nativeCall;
end;

procedure TASK_COMBAT_HATED_TARGETS_IN_AREA(_ped: Ped; x, y, z, radius: cfloat; combatFlags: cint);
begin
  nativeInit(UINT64($4CF5F55DAC3280A0));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(combatFlags));
  nativeCall;
end;

procedure TASK_COMBAT_HATED_TARGETS_AROUND_PED(_ped: Ped; radius: cfloat; combatFlags: cint);
begin
  nativeInit(UINT64($7BF835BB9E2698C8));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(combatFlags));
  nativeCall;
end;

procedure TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(_ped: Ped; radius: cfloat; time, combatFlags: cint);
begin
  nativeInit(UINT64($2BBA30B854534A0C));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(time));
  nativePush64(UINT64(combatFlags));
  nativeCall;
end;

procedure TASK_THROW_PROJECTILE(_ped: Ped; x, y, z: cfloat; ignoreCollisionEntityIndex: cint; createInvincibleProjectile: BOOL);
begin
  nativeInit(UINT64($7285951DBF6B5A51));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(ignoreCollisionEntityIndex));
  nativePush64(UINT64(createInvincibleProjectile));
  nativeCall;
end;

procedure TASK_SWAP_WEAPON(_ped: Ped; drawWeapon: BOOL);
begin
  nativeInit(UINT64($A21C51255B205245));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(drawWeapon));
  nativeCall;
end;

procedure TASK_RELOAD_WEAPON(_ped: Ped; drawWeapon: BOOL);
begin
  nativeInit(UINT64($62D2916F56B9CD2D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(drawWeapon));
  nativeCall;
end;

function IS_PED_GETTING_UP(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($2A74E1D5F2F00EEC));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure TASK_WRITHE(_ped, target: Ped; minFireLoops, startState: cint; forceShootOnGround: BOOL; shootFromGroundTimer: cint);
begin
  nativeInit(UINT64($CDDC2B77CE54AC6E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(UINT64(minFireLoops));
  nativePush64(UINT64(startState));
  nativePush64(UINT64(forceShootOnGround));
  nativePush64(UINT64(shootFromGroundTimer));
  nativeCall;
end;

function IS_PED_IN_WRITHE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($DEB6D52126E7D640));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure OPEN_PATROL_ROUTE(patrolRoute: PChar);
begin
  nativeInit(UINT64($A36BFB5EE89F3D82));
  nativePush64(UINT64(patrolRoute));
  nativeCall;
end;

procedure CLOSE_PATROL_ROUTE;
begin
  nativeInit(UINT64($B043ECA801B8CBC1));
  nativeCall;
end;

procedure ADD_PATROL_ROUTE_NODE(nodeId: cint; nodeType: PChar; posX, posY, posZ, headingX, headingY, headingZ: cfloat; duration: cint);
begin
  nativeInit(UINT64($8EDF950167586B7C));
  nativePush64(UINT64(nodeId));
  nativePush64(UINT64(nodeType));
  nativePush64(PUINT64(@posX)^);
  nativePush64(PUINT64(@posY)^);
  nativePush64(PUINT64(@posZ)^);
  nativePush64(PUINT64(@headingX)^);
  nativePush64(PUINT64(@headingY)^);
  nativePush64(PUINT64(@headingZ)^);
  nativePush64(UINT64(duration));
  nativeCall;
end;

procedure ADD_PATROL_ROUTE_LINK(nodeId1, nodeId2: cint);
begin
  nativeInit(UINT64($23083260DEC3A551));
  nativePush64(UINT64(nodeId1));
  nativePush64(UINT64(nodeId2));
  nativeCall;
end;

procedure CREATE_PATROL_ROUTE;
begin
  nativeInit(UINT64($AF8A443CCC8018DC));
  nativeCall;
end;

procedure DELETE_PATROL_ROUTE(patrolRoute: PChar);
begin
  nativeInit(UINT64($7767DD9D65E91319));
  nativePush64(UINT64(patrolRoute));
  nativeCall;
end;

function GET_PATROL_TASK_INFO(_ped: Ped; timeLeftAtNode, nodeId: pcint): BOOL;
begin
  nativeInit(UINT64($52F734CEBE20DFBA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(timeLeftAtNode));
  nativePush64(UINT64(nodeId));
  exit(BOOL(nativeCall^));
end;

procedure TASK_PATROL(_ped: Ped; patrolRouteName: PChar; alertState: cint; canChatToPeds, useHeadLookAt: BOOL);
begin
  nativeInit(UINT64($BDA5DF49D080FE4E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(patrolRouteName));
  nativePush64(UINT64(alertState));
  nativePush64(UINT64(canChatToPeds));
  nativePush64(UINT64(useHeadLookAt));
  nativeCall;
end;

procedure TASK_STAY_IN_COVER(_ped: Ped);
begin
  nativeInit(UINT64($E5DA8615A6180789));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure ADD_VEHICLE_SUBTASK_ATTACK_COORD(_ped: Ped; x, y, z: cfloat);
begin
  nativeInit(UINT64($5CF0D8F9BBA0DD75));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure ADD_VEHICLE_SUBTASK_ATTACK_PED(_ped, target: Ped);
begin
  nativeInit(UINT64($85F462BADC7DA47F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativeCall;
end;

procedure TASK_VEHICLE_SHOOT_AT_PED(_ped, target: Ped; fireTolerance: cfloat);
begin
  nativeInit(UINT64($10AB107B887214D8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(PUINT64(@fireTolerance)^);
  nativeCall;
end;

procedure TASK_VEHICLE_AIM_AT_PED(_ped, target: Ped);
begin
  nativeInit(UINT64($E41885592B08B097));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativeCall;
end;

procedure TASK_VEHICLE_SHOOT_AT_COORD(_ped: Ped; x, y, z, fireTolerance: cfloat);
begin
  nativeInit(UINT64($5190796ED39C9B6D));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@fireTolerance)^);
  nativeCall;
end;

procedure TASK_VEHICLE_AIM_AT_COORD(_ped: Ped; x, y, z: cfloat);
begin
  nativeInit(UINT64($447C1E9EF844BC0F));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure TASK_VEHICLE_GOTO_NAVMESH(_ped: Ped; veh: Vehicle; x, y, z, speed: cfloat; behaviorFlag: cint; stoppingRange: cfloat);
begin
  nativeInit(UINT64($195AEEB13CEFE2EE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(behaviorFlag));
  nativePush64(PUINT64(@stoppingRange)^);
  nativeCall;
end;

procedure TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(_ped: Ped; x, y, z, aimAtX, aimAtY, aimAtZ, moveBlendRatio: cfloat; shoot: BOOL; targetRadius, slowDistance: cfloat; useNavMesh: BOOL; navFlags: cint; instantBlendToAim: BOOL; firingPattern: Hash);
begin
  nativeInit(UINT64($11315AB3385B8AC0));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@aimAtX)^);
  nativePush64(PUINT64(@aimAtY)^);
  nativePush64(PUINT64(@aimAtZ)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(shoot));
  nativePush64(PUINT64(@targetRadius)^);
  nativePush64(PUINT64(@slowDistance)^);
  nativePush64(UINT64(useNavMesh));
  nativePush64(UINT64(navFlags));
  nativePush64(UINT64(instantBlendToAim));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(_ped: Ped; x, y, z: cfloat; aimAtID: Entity; moveBlendRatio: cfloat; shoot: BOOL; targetRadius, slowDistance: cfloat; useNavMesh: BOOL; navFlags: cint; instantBlendToAim: BOOL; firingPattern: Hash; time: cint);
begin
  nativeInit(UINT64($B2A16444EAD9AE47));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(aimAtID));
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(shoot));
  nativePush64(PUINT64(@targetRadius)^);
  nativePush64(PUINT64(@slowDistance)^);
  nativePush64(UINT64(useNavMesh));
  nativePush64(UINT64(navFlags));
  nativePush64(UINT64(instantBlendToAim));
  nativePush64(UINT64(firingPattern));
  nativePush64(UINT64(time));
  nativeCall;
end;

procedure TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle: Ped; goToLocationX, goToLocationY, goToLocationZ, focusLocationX, focusLocationY, focusLocationZ, speed: cfloat; shootAtEnemies: BOOL; distanceToStopAt, noRoadsDistance: cfloat; useNavMesh: BOOL; navFlags, taskFlags: cint; firingPattern: Hash);
begin
  nativeInit(UINT64($A55547801EB331FC));
  nativePush64(UINT64(pedHandle));
  nativePush64(PUINT64(@goToLocationX)^);
  nativePush64(PUINT64(@goToLocationY)^);
  nativePush64(PUINT64(@goToLocationZ)^);
  nativePush64(PUINT64(@focusLocationX)^);
  nativePush64(PUINT64(@focusLocationY)^);
  nativePush64(PUINT64(@focusLocationZ)^);
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(shootAtEnemies));
  nativePush64(PUINT64(@distanceToStopAt)^);
  nativePush64(PUINT64(@noRoadsDistance)^);
  nativePush64(UINT64(useNavMesh));
  nativePush64(UINT64(navFlags));
  nativePush64(UINT64(taskFlags));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(_ped: Ped; para_entity: Entity; aimX, aimY, aimZ, moveBlendRatio: cfloat; shoot: BOOL; targetRadius, slowDistance: cfloat; useNavMesh, instantBlendToAim: BOOL; firingPattern: Hash);
begin
  nativeInit(UINT64($04701832B739DCE5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@aimX)^);
  nativePush64(PUINT64(@aimY)^);
  nativePush64(PUINT64(@aimZ)^);
  nativePush64(PUINT64(@moveBlendRatio)^);
  nativePush64(UINT64(shoot));
  nativePush64(PUINT64(@targetRadius)^);
  nativePush64(PUINT64(@slowDistance)^);
  nativePush64(UINT64(useNavMesh));
  nativePush64(UINT64(instantBlendToAim));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(_ped: Ped; entityToWalkTo, entityToAimAt: Entity; speed: cfloat; shootatEntity: BOOL; targetRadius, slowDistance: cfloat; useNavMesh, instantBlendToAim: BOOL; firingPattern: Hash);
begin
  nativeInit(UINT64($97465886D35210E9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(entityToWalkTo));
  nativePush64(UINT64(entityToAimAt));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(shootatEntity));
  nativePush64(PUINT64(@targetRadius)^);
  nativePush64(PUINT64(@slowDistance)^);
  nativePush64(UINT64(useNavMesh));
  nativePush64(UINT64(instantBlendToAim));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure SET_HIGH_FALL_TASK(_ped: Ped; minTime, maxTime, entryType: cint);
begin
  nativeInit(UINT64($8C825BDC7741D37C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(minTime));
  nativePush64(UINT64(maxTime));
  nativePush64(UINT64(entryType));
  nativeCall;
end;

procedure REQUEST_WAYPOINT_RECORDING(name: PChar);
begin
  nativeInit(UINT64($9EEFB62EB27B5792));
  nativePush64(UINT64(name));
  nativeCall;
end;

function GET_IS_WAYPOINT_RECORDING_LOADED(name: PChar): BOOL;
begin
  nativeInit(UINT64($CB4E8BE8A0063C5D));
  nativePush64(UINT64(name));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_WAYPOINT_RECORDING(name: PChar);
begin
  nativeInit(UINT64($FF1B8B4AA1C25DC8));
  nativePush64(UINT64(name));
  nativeCall;
end;

function WAYPOINT_RECORDING_GET_NUM_POINTS(name: PChar; points: pcint): BOOL;
begin
  nativeInit(UINT64($5343532C01A07234));
  nativePush64(UINT64(name));
  nativePush64(UINT64(points));
  exit(BOOL(nativeCall^));
end;

function WAYPOINT_RECORDING_GET_COORD(name: PChar; point: cint; coord: PVector3): BOOL;
begin
  nativeInit(UINT64($2FB897405C90B361));
  nativePush64(UINT64(name));
  nativePush64(UINT64(point));
  nativePush64(UINT64(coord));
  exit(BOOL(nativeCall^));
end;

function WAYPOINT_RECORDING_GET_SPEED_AT_POINT(name: PChar; point: cint): cfloat;
begin
  nativeInit(UINT64($005622AEBC33ACA9));
  nativePush64(UINT64(name));
  nativePush64(UINT64(point));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(name: PChar; x, y, z: cfloat; point: pcint): BOOL;
begin
  nativeInit(UINT64($B629A298081F876F));
  nativePush64(UINT64(name));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(point));
  exit(BOOL(nativeCall^));
end;

procedure TASK_FOLLOW_WAYPOINT_RECORDING(_ped: Ped; name: PChar; p2, p3, p4: cint);
begin
  nativeInit(UINT64($0759591819534F7B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(name));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

function IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($E03B3F2D3DC59B64));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_PED_WAYPOINT_PROGRESS(_ped: Ped): cint;
begin
  nativeInit(UINT64($2720AAA75001E094));
  nativePush64(UINT64(_ped));
  exit(cint(nativeCall^));
end;

function GET_PED_WAYPOINT_DISTANCE(p0: Any): cfloat;
begin
  nativeInit(UINT64($E6A877C64CAF1BC5));
  nativePush64(UINT64(p0));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function SET_PED_WAYPOINT_ROUTE_OFFSET(_ped: Ped; x, y, z: cfloat): BOOL;
begin
  nativeInit(UINT64($ED98E10B0AFCE4B4));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(BOOL(nativeCall^));
end;

function GET_WAYPOINT_DISTANCE_ALONG_ROUTE(name: PChar; point: cint): cfloat;
begin
  nativeInit(UINT64($A5B769058763E497));
  nativePush64(UINT64(name));
  nativePush64(UINT64(point));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function WAYPOINT_PLAYBACK_GET_IS_PAUSED(p0: Any): BOOL;
begin
  nativeInit(UINT64($701375A7D43F01CB));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

procedure WAYPOINT_PLAYBACK_PAUSE(p0: Any; p1, p2: BOOL);
begin
  nativeInit(UINT64($0F342546AA06FED5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_RESUME(p0: Any; p1: BOOL; p2, p3: Any);
begin
  nativeInit(UINT64($244F70C84C547D2D));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_OVERRIDE_SPEED(p0: Any; p1: cfloat; p2: BOOL);
begin
  nativeInit(UINT64($7D7D2B47FA788E85));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(p0: Any);
begin
  nativeInit(UINT64($6599D834B12D0800));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(name: PChar; p1: BOOL; p2, p3: cfloat);
begin
  nativeInit(UINT64($5A353B8E6B1095B5));
  nativePush64(UINT64(name));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_START_AIMING_AT_PED(_ped, target: Ped; p2: BOOL);
begin
  nativeInit(UINT64($20E330937C399D29));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(_ped: Ped; x, y, z: cfloat; p4: BOOL);
begin
  nativeInit(UINT64($8968400D900ED8B3));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(_ped, ped2: Ped; p2, p3: BOOL);
begin
  nativeInit(UINT64($E70BA7B90F8390DC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ped2));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(_ped: Ped; x, y, z: cfloat; p4: BOOL; firingPattern: Hash);
begin
  nativeInit(UINT64($057A25CFCC9DB671));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(firingPattern));
  nativeCall;
end;

procedure WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(_ped: Ped);
begin
  nativeInit(UINT64($47EFA040EBB8E2EA));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure ASSISTED_MOVEMENT_REQUEST_ROUTE(route: PChar);
begin
  nativeInit(UINT64($817268968605947A));
  nativePush64(UINT64(route));
  nativeCall;
end;

procedure ASSISTED_MOVEMENT_REMOVE_ROUTE(route: PChar);
begin
  nativeInit(UINT64($3548536485DD792B));
  nativePush64(UINT64(route));
  nativeCall;
end;

function ASSISTED_MOVEMENT_IS_ROUTE_LOADED(route: PChar): BOOL;
begin
  nativeInit(UINT64($60F9A4393A21F741));
  nativePush64(UINT64(route));
  exit(BOOL(nativeCall^));
end;

procedure ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(route: PChar; props: cint);
begin
  nativeInit(UINT64($D5002D78B7162E1B));
  nativePush64(UINT64(route));
  nativePush64(UINT64(props));
  nativeCall;
end;

procedure ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(dist: cfloat);
begin
  nativeInit(UINT64($13945951E16EF912));
  nativePush64(PUINT64(@dist)^);
  nativeCall;
end;

procedure TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(_ped: Ped; veh: Vehicle; WPRecording: PChar; p3, p4, p5, p6: cint; p7: cfloat; p8: BOOL; p9: cfloat);
begin
  nativeInit(UINT64($3123FAA6DB1CF7ED));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(WPRecording));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(PUINT64(@p7)^);
  nativePush64(UINT64(p8));
  nativePush64(PUINT64(@p9)^);
  nativeCall;
end;

function IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($F5134943EA29868C));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_WAYPOINT_PROGRESS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($9824CFF8FC66E159));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_WAYPOINT_TARGET_POINT(veh: Vehicle): cint;
begin
  nativeInit(UINT64($416B62AC8B9E5BBD));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure VEHICLE_WAYPOINT_PLAYBACK_PAUSE(veh: Vehicle);
begin
  nativeInit(UINT64($8A4E6AC373666BC5));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure VEHICLE_WAYPOINT_PLAYBACK_RESUME(veh: Vehicle);
begin
  nativeInit(UINT64($DC04FCAA7839D492));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(veh: Vehicle);
begin
  nativeInit(UINT64($5CEB25A7D2848963));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(veh: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($121F0593E0A431D7));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($90D2156198831D69));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure TASK_FORCE_MOTION_STATE(_ped: Ped; state: Hash; forceRestart: BOOL);
begin
  nativeInit(UINT64($4F056E1AFFEF17AB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(state));
  nativePush64(UINT64(forceRestart));
  nativeCall;
end;

procedure TASK_MOVE_NETWORK_BY_NAME(_ped: Ped; task: PChar; multiplier: cfloat; allowOverrideCloneUpdate: BOOL; animDict: PChar; flags: cint);
begin
  nativeInit(UINT64($2D537BA194896636));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(task));
  nativePush64(PUINT64(@multiplier)^);
  nativePush64(UINT64(allowOverrideCloneUpdate));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_MOVE_NETWORK_ADVANCED_BY_NAME(_ped: Ped; network: PChar; x, y, z, rotX, rotY, rotZ: cfloat; rotOrder: cint; blendDuration: cfloat; allowOverrideCloneUpdate: BOOL; animDict: PChar; flags: cint);
begin
  nativeInit(UINT64($D5B35BEA41919ACB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(network));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(rotOrder));
  nativePush64(PUINT64(@blendDuration)^);
  nativePush64(UINT64(allowOverrideCloneUpdate));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(_ped: Ped; network: PChar; initialParameters: pcint; blendDuration: cfloat; allowOverrideCloneUpdate: BOOL; animDict: PChar; flags: cint);
begin
  nativeInit(UINT64($3D45B0B355C5E0C9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(network));
  nativePush64(UINT64(initialParameters));
  nativePush64(PUINT64(@blendDuration)^);
  nativePush64(UINT64(allowOverrideCloneUpdate));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(flags));
  nativeCall;
end;

procedure TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(_ped: Ped; network: PChar; initialParameters: pcint; x, y, z, rotX, rotY, rotZ: cfloat; rotOrder: cint; blendDuration: cfloat; allowOverrideCloneUpdate: BOOL; dictionary: PChar; flags: cint);
begin
  nativeInit(UINT64($29682E2CCF21E9B5));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(network));
  nativePush64(UINT64(initialParameters));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(rotOrder));
  nativePush64(PUINT64(@blendDuration)^);
  nativePush64(UINT64(allowOverrideCloneUpdate));
  nativePush64(UINT64(dictionary));
  nativePush64(UINT64(flags));
  nativeCall;
end;

function IS_TASK_MOVE_NETWORK_ACTIVE(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($921CE12C489C4C41));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($30ED88D5E0C56A37));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(_ped: Ped; name: PChar): BOOL;
begin
  nativeInit(UINT64($D01015C7316AE176));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(name));
  exit(BOOL(nativeCall^));
end;

function SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(_ped: Ped; state: PChar): BOOL;
begin
  nativeInit(UINT64($AB13A5565480B6D9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(state));
  exit(BOOL(nativeCall^));
end;

function GET_TASK_MOVE_NETWORK_STATE(_ped: Ped): PChar;
begin
  nativeInit(UINT64($717E4D1F2048376D));
  nativePush64(UINT64(_ped));
  exit(PChar(nativeCall^));
end;

procedure SET_TASK_MOVE_NETWORK_ANIM_SET(_ped: Ped; clipSet, variableClipSet: Hash);
begin
  nativeInit(UINT64($8423541E8B3A1589));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(clipSet));
  nativePush64(UINT64(variableClipSet));
  nativeCall;
end;

procedure SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(_ped: Ped; signalName: PChar; value: cfloat);
begin
  nativeInit(UINT64($D5BB4025AE449A4E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(signalName));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(_ped: Ped; signalName: PChar; value: cfloat);
begin
  nativeInit(UINT64($373EF409B82697A3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(signalName));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(_ped: Ped; signalName: PChar; value: cfloat);
begin
  nativeInit(UINT64($8634CEF2522D987B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(signalName));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(_ped: Ped; signalName: PChar; value: BOOL);
begin
  nativeInit(UINT64($B0A6CFD2C69C1088));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(signalName));
  nativePush64(UINT64(value));
  nativeCall;
end;

function GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(_ped: Ped; signalName: PChar): cfloat;
begin
  nativeInit(UINT64($44AB0B3AFECCE242));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(signalName));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(_ped: Ped; signalName: PChar): BOOL;
begin
  nativeInit(UINT64($A7FFBA498E4AAF67));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(signalName));
  exit(BOOL(nativeCall^));
end;

function GET_TASK_MOVE_NETWORK_EVENT(_ped: Ped; eventName: PChar): BOOL;
begin
  nativeInit(UINT64($B4F47213DF45A64C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(eventName));
  exit(BOOL(nativeCall^));
end;

function SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(_ped: Ped; enable: BOOL): BOOL;
begin
  nativeInit(UINT64($0FFB3C758E8C07B9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(enable));
  exit(BOOL(nativeCall^));
end;

procedure _SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(_ped: Ped; enable: BOOL);
begin
  nativeInit(UINT64($32F6EEF031F943DC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(enable));
  nativeCall;
end;

function IS_MOVE_BLEND_RATIO_STILL(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($349CE7B56DAFD95C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_MOVE_BLEND_RATIO_WALKING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($F133BBBE91E1691F));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_MOVE_BLEND_RATIO_RUNNING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($D4D8636C0199A939));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_MOVE_BLEND_RATIO_SPRINTING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($24A2AD74FA9814E2));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_STILL(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($AC29253EEF8F0180));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_WALKING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($DE4C184B2B9B071A));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_RUNNING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($C5286FFC176F28A2));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_SPRINTING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($57E457CD2C0FC168));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_STRAFING(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($E45B7F222DE47E09));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure TASK_SYNCHRONIZED_SCENE(_ped: Ped; scene: cint; animDictionary, animationName: PChar; blendIn, blendOut: cfloat; flags, ragdollBlockingFlags: cint; moverBlendDelta: cfloat; ikFlags: cint);
begin
  nativeInit(UINT64($EEA929141F699854));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(scene));
  nativePush64(UINT64(animDictionary));
  nativePush64(UINT64(animationName));
  nativePush64(PUINT64(@blendIn)^);
  nativePush64(PUINT64(@blendOut)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(ragdollBlockingFlags));
  nativePush64(PUINT64(@moverBlendDelta)^);
  nativePush64(UINT64(ikFlags));
  nativeCall;
end;

procedure TASK_AGITATED_ACTION_CONFRONT_RESPONSE(_ped, ped2: Ped);
begin
  nativeInit(UINT64($19D1B791CB3670FE));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ped2));
  nativeCall;
end;

procedure TASK_SWEEP_AIM_ENTITY(_ped: Ped; animDict, lowAnimName, medAnimName, hiAnimName: PChar; runtime: cint; targetEntity: Entity; turnRate, blendInDuration: cfloat);
begin
  nativeInit(UINT64($2047C02158D6405A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(lowAnimName));
  nativePush64(UINT64(medAnimName));
  nativePush64(UINT64(hiAnimName));
  nativePush64(UINT64(runtime));
  nativePush64(UINT64(targetEntity));
  nativePush64(PUINT64(@turnRate)^);
  nativePush64(PUINT64(@blendInDuration)^);
  nativeCall;
end;

procedure UPDATE_TASK_SWEEP_AIM_ENTITY(_ped: Ped; para_entity: Entity);
begin
  nativeInit(UINT64($E4973DBDBE6E44B3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure TASK_SWEEP_AIM_POSITION(_ped: Ped; animDict, lowAnimName, medAnimName, hiAnimName: PChar; runtime: cint; x, y, z, turnRate, blendInDuration: cfloat);
begin
  nativeInit(UINT64($7AFE8FDC10BC07D2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animDict));
  nativePush64(UINT64(lowAnimName));
  nativePush64(UINT64(medAnimName));
  nativePush64(UINT64(hiAnimName));
  nativePush64(UINT64(runtime));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@turnRate)^);
  nativePush64(PUINT64(@blendInDuration)^);
  nativeCall;
end;

procedure UPDATE_TASK_SWEEP_AIM_POSITION(_ped: Ped; x, y, z: cfloat);
begin
  nativeInit(UINT64($BB106883F5201FC4));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure TASK_ARREST_PED(_ped, target: Ped);
begin
  nativeInit(UINT64($F3B9A78A178572B1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(target));
  nativeCall;
end;

function IS_PED_RUNNING_ARREST_TASK(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($3DC52677769B4AE0));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_PED_BEING_ARRESTED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($90A09F3A45FED688));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure UNCUFF_PED(_ped: Ped);
begin
  nativeInit(UINT64($67406F2C8F87FC4F));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_PED_CUFFED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($74E559B3BC910685));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function CREATE_VEHICLE(modelHash: Hash; x, y, z, heading: cfloat; isNetwork, bScriptHostVeh, p7: BOOL): Vehicle;
begin
  nativeInit(UINT64($AF35D0D2583051B0));
  nativePush64(UINT64(modelHash));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(UINT64(isNetwork));
  nativePush64(UINT64(bScriptHostVeh));
  nativePush64(UINT64(p7));
  exit(Vehicle(nativeCall^));
end;

procedure DELETE_VEHICLE(veh: PVehicle);
begin
  nativeInit(UINT64($EA386986E786A54F));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(veh: Vehicle; toggle, p2: BOOL);
begin
  nativeInit(UINT64($7D6F9A3EF26136A0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(veh: Vehicle; canBeLockedOn, p2: BOOL);
begin
  nativeInit(UINT64($1DDA078D12879EEE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(canBeLockedOn));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($5D14D4154BFE7B2C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_HOMING_LOCKON_STATE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($E6B0E8CFC3633BF0));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0: Any): cint;
begin
  nativeInit(UINT64($6EAAEFC76ACC311F));
  nativePush64(UINT64(p0));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_HOMING_LOCKEDONTO_STATE(p0, p1: Any);
begin
  nativeInit(UINT64($407DC5E97DB1A4D3));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_VEHICLE_MODEL(veh: Vehicle; model: Hash): BOOL;
begin
  nativeInit(UINT64($423E8DE37D934D89));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(vehicleGenerator: cint): BOOL;
begin
  nativeInit(UINT64($F6086BC836400876));
  nativePush64(UINT64(vehicleGenerator));
  exit(BOOL(nativeCall^));
end;

function CREATE_SCRIPT_VEHICLE_GENERATOR(x, y, z, heading, p4, p5: cfloat; modelHash: Hash; p7, p8, p9, p10: cint; p11, p12, p13, p14, p15: BOOL; p16: cint): cint;
begin
  nativeInit(UINT64($9DEF883114668116));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@heading)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  nativePush64(UINT64(p10));
  nativePush64(UINT64(p11));
  nativePush64(UINT64(p12));
  nativePush64(UINT64(p13));
  nativePush64(UINT64(p14));
  nativePush64(UINT64(p15));
  nativePush64(UINT64(p16));
  exit(cint(nativeCall^));
end;

procedure DELETE_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator: cint);
begin
  nativeInit(UINT64($22102C9ABFCF125D));
  nativePush64(UINT64(vehicleGenerator));
  nativeCall;
end;

procedure SET_SCRIPT_VEHICLE_GENERATOR(vehicleGenerator: cint; enabled: BOOL);
begin
  nativeInit(UINT64($D9D620E0AC6DC4B0));
  nativePush64(UINT64(vehicleGenerator));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; toggle, p7: BOOL);
begin
  nativeInit(UINT64($C12321827687FE4D));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(p7));
  nativeCall;
end;

procedure SET_ALL_VEHICLE_GENERATORS_ACTIVE;
begin
  nativeInit(UINT64($34AD89078831A4BC));
  nativeCall;
end;

procedure SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(active: BOOL);
begin
  nativeInit(UINT64($608207E7A8FB787C));
  nativePush64(UINT64(active));
  nativeCall;
end;

procedure SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(x, y, z, radius: cfloat);
begin
  nativeInit(UINT64($9A75585FB2E54FAD));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST;
begin
  nativeInit(UINT64($0A436B8643716D14));
  nativeCall;
end;

function SET_VEHICLE_ON_GROUND_PROPERLY(veh: Vehicle; p1: cfloat): BOOL;
begin
  nativeInit(UINT64($49733E92263139D1));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  exit(BOOL(nativeCall^));
end;

function SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(p0: Vehicle; p1, p2, p3: BOOL): BOOL;
begin
  nativeInit(UINT64($E023E8AC4EF7C117));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_STUCK_ON_ROOF(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($B497F06B288DCFDF));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure ADD_VEHICLE_UPSIDEDOWN_CHECK(veh: Vehicle);
begin
  nativeInit(UINT64($B72E26D81006005B));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure REMOVE_VEHICLE_UPSIDEDOWN_CHECK(veh: Vehicle);
begin
  nativeInit(UINT64($C53EB42A499A7E90));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_VEHICLE_STOPPED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($5721B434AD84D57A));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_NUMBER_OF_PASSENGERS(veh: Vehicle; includeDriver, includeDeadOccupants: BOOL): cint;
begin
  nativeInit(UINT64($24CB2137731FFE89));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(includeDriver));
  nativePush64(UINT64(includeDeadOccupants));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($A7C4F2C6E744A550));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_MODEL_NUMBER_OF_SEATS(modelHash: Hash): cint;
begin
  nativeInit(UINT64($2AD93716F184EDA4));
  nativePush64(UINT64(modelHash));
  exit(cint(nativeCall^));
end;

function IS_SEAT_WARP_ONLY(veh: Vehicle; seatIndex: cint): BOOL;
begin
  nativeInit(UINT64($F7F203E31F96F6A1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  exit(BOOL(nativeCall^));
end;

function IS_TURRET_SEAT(veh: Vehicle; seatIndex: cint): BOOL;
begin
  nativeInit(UINT64($E33FFA906CE74880));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  exit(BOOL(nativeCall^));
end;

function DOES_VEHICLE_ALLOW_RAPPEL(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($4E417C547182C84D));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
begin
  nativeInit(UINT64($245A6883D966D537));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
begin
  nativeInit(UINT64($B3B3359379FE77D3));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(multiplier: cfloat);
begin
  nativeInit(UINT64($EAE6DCC7EEE3DB1D));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(toggle: BOOL);
begin
  nativeInit(UINT64($D4B8E3D1917BC86B));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(value: cfloat);
begin
  nativeInit(UINT64($90B6DA738A9A25DA));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_FAR_DRAW_VEHICLES(toggle: BOOL);
begin
  nativeInit(UINT64($26324F33423F3CC3));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_NUMBER_OF_PARKED_VEHICLES(value: cint);
begin
  nativeInit(UINT64($CAA15F13EBD417FF));
  nativePush64(UINT64(value));
  nativeCall;
end;

procedure SET_VEHICLE_DOORS_LOCKED(veh: Vehicle; doorLockStatus: cint);
begin
  nativeInit(UINT64($B664292EAECF7FA6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorLockStatus));
  nativeCall;
end;

procedure SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(veh: Vehicle; doorId, doorLockStatus: cint);
begin
  nativeInit(UINT64($BE70724027F85BCD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(doorLockStatus));
  nativeCall;
end;

procedure SET_VEHICLE_HAS_MUTED_SIRENS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($D8050E0EB60CF274));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(veh: Vehicle; plyr: Player; toggle: BOOL);
begin
  nativeInit(UINT64($517AAF684BB50CD1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(veh: Vehicle; plyr: Player): BOOL;
begin
  nativeInit(UINT64($F6AF6CB341349015));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(plyr));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($A2F80B8D040727CC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($9737A37136F07E75));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(veh: Vehicle; team: cint; toggle: BOOL);
begin
  nativeInit(UINT64($B81F6D4A8F5EEBA8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(team));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($203B527D1B77904C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(veh: Vehicle);
begin
  nativeInit(UINT64($76D26A22750E849E));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure _SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS(veh: Vehicle; modifier: cfloat);
begin
  nativeInit(UINT64($5AE614ECA5FDD423));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

function _GET_VEHICLE_THROTTLE(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($92D96892FC06AF22));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure EXPLODE_VEHICLE(veh: Vehicle; isAudible, isInvisible: BOOL);
begin
  nativeInit(UINT64($BA71116ADF5B514C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(isAudible));
  nativePush64(UINT64(isInvisible));
  nativeCall;
end;

procedure SET_VEHICLE_OUT_OF_CONTROL(veh: Vehicle; killDriver, explodeOnImpact: BOOL);
begin
  nativeInit(UINT64($F19D095E42D430CC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(killDriver));
  nativePush64(UINT64(explodeOnImpact));
  nativeCall;
end;

procedure SET_VEHICLE_TIMED_EXPLOSION(veh: Vehicle; _ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($2E0A74E1002380B1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(veh: Vehicle);
begin
  nativeInit(UINT64($99AD4CCCB128CBC9));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE;
begin
  nativeInit(UINT64($AA3F739ABDDCF21F));
  nativeCall;
end;

function HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE: BOOL;
begin
  nativeInit(UINT64($6ADAABD3068C5235));
  exit(BOOL(nativeCall^));
end;

procedure DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE;
begin
  nativeInit(UINT64($EF49CF0270307CBE));
  nativeCall;
end;

function HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($6B407F2525E93644));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_TAXI_LIGHTS(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($598803E85E8448D9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

function IS_TAXI_LIGHT_ON(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($7504C0F113AB50FC));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_IN_GARAGE_AREA(garageName: PChar; veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($CEE4490CD57BB3C2));
  nativePush64(UINT64(garageName));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_COLOURS(veh: Vehicle; colorPrimary, colorSecondary: cint);
begin
  nativeInit(UINT64($4F1D4BE3A7F24601));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(colorPrimary));
  nativePush64(UINT64(colorSecondary));
  nativeCall;
end;

procedure SET_VEHICLE_FULLBEAM(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($8B7FD87F0DDB421E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_IS_RACING(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($07116E24E9D1929D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh: Vehicle; r, g, b: cint);
begin
  nativeInit(UINT64($7141766F91D15BEA));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh: Vehicle; r, g, b: pcint);
begin
  nativeInit(UINT64($B64CF2CCA9D95F52));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh: Vehicle);
begin
  nativeInit(UINT64($55E1D2758F34E437));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($F095C0405307B21B));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh: Vehicle; r, g, b: cint);
begin
  nativeInit(UINT64($36CED73BFED89754));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh: Vehicle; r, g, b: pcint);
begin
  nativeInit(UINT64($8389CD56CA8072DC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh: Vehicle);
begin
  nativeInit(UINT64($5FFBDEEC3E8E2009));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($910A32E7AAD2656C));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_ENVEFF_SCALE(veh: Vehicle; fade: cfloat);
begin
  nativeInit(UINT64($3AFDC536C3D01674));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@fade)^);
  nativeCall;
end;

function GET_VEHICLE_ENVEFF_SCALE(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($A82819CAC9C4C403));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_CAN_RESPRAY_VEHICLE(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($52BBA29D5EC69356));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_GOON_BOSS_VEHICLE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($AB31EF4DE6800CE9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_OPEN_REAR_DOORS_ON_EXPLOSION(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1B212B26DD3C04DF));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FORCE_SUBMARINE_SURFACE_MODE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($33506883545AC0DF));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure FORCE_SUBMARINE_NEURTAL_BUOYANCY(p0, p1: Any);
begin
  nativeInit(UINT64($C67DB108A9ADE3BE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_SUBMARINE_CRUSH_DEPTHS(veh: Vehicle; p1: BOOL; depth1, depth2, depth3: cfloat);
begin
  nativeInit(UINT64($C59872A5134879C7));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@depth1)^);
  nativePush64(PUINT64(@depth2)^);
  nativePush64(PUINT64(@depth3)^);
  nativeCall;
end;

function GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(submarine: Vehicle): BOOL;
begin
  nativeInit(UINT64($3E71D0B300B7AA79));
  nativePush64(UINT64(submarine));
  exit(BOOL(nativeCall^));
end;

function GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(submarine: Vehicle): cint;
begin
  nativeInit(UINT64($093D6DDCA5B8FBAE));
  nativePush64(UINT64(submarine));
  exit(cint(nativeCall^));
end;

procedure SET_BOAT_IGNORE_LAND_PROBES(p0, p1: Any);
begin
  nativeInit(UINT64($ED5EDE9E676643C9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _SET_BOUNDS_AFFECT_WATER_PROBES(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($85FC953F6C6CBDE1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BOAT_ANCHOR(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($75DBEC174AEEAD10));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function CAN_ANCHOR_BOAT_HERE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($26C10ECBDA5D043B));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($24F4121D07579880));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($E3EBAAE484798530));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FORCE_LOW_LOD_ANCHOR_MODE(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($B28B1FE5BFADD7F5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(veh: Vehicle; value: cfloat);
begin
  nativeInit(UINT64($E842A9398079BD82));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function IS_BOAT_ANCHORED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($B0AD1238A709B1A2));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_BOAT_SINKS_WHEN_WRECKED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($8F719973E1445BA2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BOAT_WRECKED(veh: Vehicle);
begin
  nativeInit(UINT64($BD32E46AA95C1DD2));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_SIREN(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($F4924635A19EB37D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_VEHICLE_SIREN_ON(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($4C9BF537BE2634B2));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_SIREN_AUDIO_ON(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($B5CC40FBCB586380));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_STRONG(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($3E8C8727991A8A0B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure REMOVE_VEHICLE_STUCK_CHECK(veh: Vehicle);
begin
  nativeInit(UINT64($8386BFB614D06749));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure GET_VEHICLE_COLOURS(veh: Vehicle; colorPrimary, colorSecondary: pcint);
begin
  nativeInit(UINT64($A19435F193E081AC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(colorPrimary));
  nativePush64(UINT64(colorSecondary));
  nativeCall;
end;

function IS_VEHICLE_SEAT_FREE(veh: Vehicle; seatIndex: cint; isTaskRunning: BOOL): BOOL;
begin
  nativeInit(UINT64($22AC59A870E6A669));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  nativePush64(UINT64(isTaskRunning));
  exit(BOOL(nativeCall^));
end;

function GET_PED_IN_VEHICLE_SEAT(veh: Vehicle; seatIndex: cint; p2: BOOL): Ped;
begin
  nativeInit(UINT64($BB40DD2270B65366));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  nativePush64(UINT64(p2));
  exit(Ped(nativeCall^));
end;

function GET_LAST_PED_IN_VEHICLE_SEAT(veh: Vehicle; seatIndex: cint): Ped;
begin
  nativeInit(UINT64($83F969AA1EE2A664));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  exit(Ped(nativeCall^));
end;

function GET_VEHICLE_LIGHTS_STATE(veh: Vehicle; lightsOn, highbeamsOn: PBOOL): BOOL;
begin
  nativeInit(UINT64($B91B4C20085BD12F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(lightsOn));
  nativePush64(UINT64(highbeamsOn));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_TYRE_BURST(veh: Vehicle; wheelID: cint; completely: BOOL): BOOL;
begin
  nativeInit(UINT64($BA291848A0815CA9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelID));
  nativePush64(UINT64(completely));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_FORWARD_SPEED(veh: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($AB54A438726D25D5));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SET_VEHICLE_FORWARD_SPEED_XY(veh: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($6501129C9E0FFA05));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure BRING_VEHICLE_TO_HALT(veh: Vehicle; distance: cfloat; duration: cint; p3: BOOL);
begin
  nativeInit(UINT64($260BE8F09E326A20));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@distance)^);
  nativePush64(UINT64(duration));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_VEHICLE_STEER_FOR_BUILDINGS(veh: Vehicle; p1: Any);
begin
  nativeInit(UINT64($DCE97BDF8A0EABC8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_CAUSES_SWERVING(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($9849DE24FCF23CCC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(p0, p1: Any);
begin
  nativeInit(UINT64($8664170EF165C4A6));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure STOP_BRINGING_VEHICLE_TO_HALT(veh: Vehicle);
begin
  nativeInit(UINT64($7C06330BFDDA182E));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_VEHICLE_BEING_BROUGHT_TO_HALT(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($C69BB1D832A710EF));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure LOWER_FORKLIFT_FORKS(forklift: Vehicle);
begin
  nativeInit(UINT64($923A293361DF44E5));
  nativePush64(UINT64(forklift));
  nativeCall;
end;

procedure SET_FORKLIFT_FORK_HEIGHT(veh: Vehicle; height: cfloat);
begin
  nativeInit(UINT64($37EBBF3117BD6A25));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@height)^);
  nativeCall;
end;

function IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(veh: Vehicle; para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($57715966069157AD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($62CA17B74C435651));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(para_entity: Entity): Vehicle;
begin
  nativeInit(UINT64($375E7FC44F21C8AB));
  nativePush64(UINT64(para_entity));
  exit(Vehicle(nativeCall^));
end;

function IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(veh: Vehicle; para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($89D630CF5EA96D23));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

procedure ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(veh: Vehicle; para_entity: Entity);
begin
  nativeInit(UINT64($6A98C2ECF57FA5D4));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure DETACH_CONTAINER_FROM_HANDLER_FRAME(veh: Vehicle);
begin
  nativeInit(UINT64($7C0043FDFF6436BC));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($8AA9180DE2FEDD45));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_BOAT_DISABLE_AVOIDANCE(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($0A6A279F3AA4FD70));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_HELI_LANDING_AREA_BLOCKED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($634148744F385576));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_SHORT_SLOWDOWN_FOR_LANDING(veh: Vehicle);
begin
  nativeInit(UINT64($107A473D7A6647A9));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_HELI_TURBULENCE_SCALAR(veh: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($E6F13851780394DA));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CAR_BOOT_OPEN(veh: Vehicle);
begin
  nativeInit(UINT64($FC40CBF7B90CA77C));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_TYRE_BURST(veh: Vehicle; index: cint; onRim: BOOL; p3: cfloat);
begin
  nativeInit(UINT64($EC6A202EE4960385));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(index));
  nativePush64(UINT64(onRim));
  nativePush64(PUINT64(@p3)^);
  nativeCall;
end;

procedure SET_VEHICLE_DOORS_SHUT(veh: Vehicle; closeInstantly: BOOL);
begin
  nativeInit(UINT64($781B3D62BB013EF5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(closeInstantly));
  nativeCall;
end;

procedure SET_VEHICLE_TYRES_CAN_BURST(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($EB9DC3C7D8596C46));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_TYRES_CAN_BURST(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($678B9BB8C3F58FEB));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_WHEELS_CAN_BREAK(veh: Vehicle; enabled: BOOL);
begin
  nativeInit(UINT64($29B18B4FD460CA8F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure SET_VEHICLE_DOOR_OPEN(veh: Vehicle; doorId: cint; loose, openInstantly: BOOL);
begin
  nativeInit(UINT64($7C65DAC73C35C862));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(loose));
  nativePush64(UINT64(openInstantly));
  nativeCall;
end;

procedure SET_VEHICLE_DOOR_AUTO_LOCK(veh: Vehicle; doorId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($3B458DDB57038F08));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(p0: Any);
begin
  nativeInit(UINT64($A247F9EF01D8082E));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure REMOVE_VEHICLE_WINDOW(veh: Vehicle; windowIndex: cint);
begin
  nativeInit(UINT64($A711568EEDB43069));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(windowIndex));
  nativeCall;
end;

procedure ROLL_DOWN_WINDOWS(veh: Vehicle);
begin
  nativeInit(UINT64($85796B0549DDE156));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure ROLL_DOWN_WINDOW(veh: Vehicle; windowIndex: cint);
begin
  nativeInit(UINT64($7AD9E6CE657D69E3));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(windowIndex));
  nativeCall;
end;

procedure ROLL_UP_WINDOW(veh: Vehicle; windowIndex: cint);
begin
  nativeInit(UINT64($602E548F46E24D59));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(windowIndex));
  nativeCall;
end;

procedure SMASH_VEHICLE_WINDOW(veh: Vehicle; windowIndex: cint);
begin
  nativeInit(UINT64($9E5B5E4D2CCD2259));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(windowIndex));
  nativeCall;
end;

procedure FIX_VEHICLE_WINDOW(veh: Vehicle; windowIndex: cint);
begin
  nativeInit(UINT64($772282EBEB95E682));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(windowIndex));
  nativeCall;
end;

procedure POP_OUT_VEHICLE_WINDSCREEN(veh: Vehicle);
begin
  nativeInit(UINT64($6D645D59FB5F5AD3));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(veh: Vehicle; x, y, z: cfloat);
begin
  nativeInit(UINT64($E38CB9D7D39FDBCC));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_VEHICLE_LIGHTS(veh: Vehicle; state: cint);
begin
  nativeInit(UINT64($34E710FF01247C5A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($C45C27EF50F36ADC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_HEADLIGHT_SHADOWS(veh: Vehicle; p1: cint);
begin
  nativeInit(UINT64($1FD09E7390A74D54));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_ALARM(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($CDE5E70C1DDB954C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure START_VEHICLE_ALARM(veh: Vehicle);
begin
  nativeInit(UINT64($B8FF7AB45305C345));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_VEHICLE_ALARM_ACTIVATED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($4319E335B71FFF34));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_INTERIORLIGHT(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($BC2042F090AF6AD3));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_FORCE_INTERIORLIGHT(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($8821196D91FA2DE5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_LIGHT_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
begin
  nativeInit(UINT64($B385454F8791F57C));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure ATTACH_VEHICLE_TO_TRAILER(veh, trailer: Vehicle; radius: cfloat);
begin
  nativeInit(UINT64($3C7D42D58F770B54));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(trailer));
  nativePush64(PUINT64(@radius)^);
  nativeCall;
end;

procedure ATTACH_VEHICLE_ON_TO_TRAILER(veh, trailer: Vehicle; offsetX, offsetY, offsetZ, coordsX, coordsY, coordsZ, rotationX, rotationY, rotationZ, disableCollisions: cfloat);
begin
  nativeInit(UINT64($16B5E274BDE402F8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(trailer));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  nativePush64(PUINT64(@coordsX)^);
  nativePush64(PUINT64(@coordsY)^);
  nativePush64(PUINT64(@coordsZ)^);
  nativePush64(PUINT64(@rotationX)^);
  nativePush64(PUINT64(@rotationY)^);
  nativePush64(PUINT64(@rotationZ)^);
  nativePush64(PUINT64(@disableCollisions)^);
  nativeCall;
end;

procedure STABILISE_ENTITY_ATTACHED_TO_HELI(veh: Vehicle; para_entity: Entity; p2: cfloat);
begin
  nativeInit(UINT64($374706271354CB18));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure DETACH_VEHICLE_FROM_TRAILER(veh: Vehicle);
begin
  nativeInit(UINT64($90532EDF0D2BDD86));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_VEHICLE_ATTACHED_TO_TRAILER(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($E7CF3C4F9F489F0C));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_TRAILER_INVERSE_MASS_SCALE(veh: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($2A8F319B392E7B3F));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_TRAILER_LEGS_RAISED(veh: Vehicle);
begin
  nativeInit(UINT64($95CF53B3D687F9FA));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_TRAILER_LEGS_LOWERED(veh: Vehicle);
begin
  nativeInit(UINT64($878C75C09FBDB942));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_TYRE_FIXED(veh: Vehicle; tyreIndex: cint);
begin
  nativeInit(UINT64($6E13FC662B882D1D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(tyreIndex));
  nativeCall;
end;

procedure SET_VEHICLE_NUMBER_PLATE_TEXT(veh: Vehicle; plateText: PChar);
begin
  nativeInit(UINT64($95A88F0B409CDA47));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(plateText));
  nativeCall;
end;

function GET_VEHICLE_NUMBER_PLATE_TEXT(veh: Vehicle): PChar;
begin
  nativeInit(UINT64($7CE1CCB9B293020E));
  nativePush64(UINT64(veh));
  exit(PChar(nativeCall^));
end;

function GET_NUMBER_OF_VEHICLE_NUMBER_PLATES: cint;
begin
  nativeInit(UINT64($4C4D6B2644F458CB));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh: Vehicle; plateIndex: cint);
begin
  nativeInit(UINT64($9088EB5A43FFB0A1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(plateIndex));
  nativeCall;
end;

function GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh: Vehicle): cint;
begin
  nativeInit(UINT64($F11BC2DD9A3E7195));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_RANDOM_TRAINS(toggle: BOOL);
begin
  nativeInit(UINT64($80D9F74197EA47D9));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function CREATE_MISSION_TRAIN(variation: cint; x, y, z: cfloat; direction: BOOL; p5, p6: Any): Vehicle;
begin
  nativeInit(UINT64($63C6CCA8E68AE8C8));
  nativePush64(UINT64(variation));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(direction));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(Vehicle(nativeCall^));
end;

procedure SWITCH_TRAIN_TRACK(trackId: cint; state: BOOL);
begin
  nativeInit(UINT64($FD813BB7DB977F20));
  nativePush64(UINT64(trackId));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_TRAIN_TRACK_SPAWN_FREQUENCY(trackIndex, frequency: cint);
begin
  nativeInit(UINT64($21973BBF8D17EDFA));
  nativePush64(UINT64(trackIndex));
  nativePush64(UINT64(frequency));
  nativeCall;
end;

procedure ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(p0: Any);
begin
  nativeInit(UINT64($2310A8F9421EBF43));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure DELETE_ALL_TRAINS;
begin
  nativeInit(UINT64($736A718577F39C7D));
  nativeCall;
end;

procedure SET_TRAIN_SPEED(tr: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($AA0BC91BE0B796E3));
  nativePush64(UINT64(tr));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SET_TRAIN_CRUISE_SPEED(tr: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($16469284DB8C62B5));
  nativePush64(UINT64(tr));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SET_RANDOM_BOATS(toggle: BOOL);
begin
  nativeInit(UINT64($84436EC293B1415F));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_RANDOM_BOATS_MP(toggle: BOOL);
begin
  nativeInit(UINT64($DA5E12F728DB30CA));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_GARBAGE_TRUCKS(toggle: BOOL);
begin
  nativeInit(UINT64($2AFD795EEAC8D30D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($57E4C39DE5EE8470));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_RECORDING_ID(recording: cint; script: PChar): cint;
begin
  nativeInit(UINT64($21543C612379DB3C));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  exit(cint(nativeCall^));
end;

procedure REQUEST_VEHICLE_RECORDING(recording: cint; script: PChar);
begin
  nativeInit(UINT64($AF514CABE74CBF15));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  nativeCall;
end;

function HAS_VEHICLE_RECORDING_BEEN_LOADED(recording: cint; script: PChar): BOOL;
begin
  nativeInit(UINT64($300D614A4C785FC4));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_VEHICLE_RECORDING(recording: cint; script: PChar);
begin
  nativeInit(UINT64($F1160ACCF98A3FC8));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  nativeCall;
end;

function GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(id: cint; time: cfloat): Vector3;
begin
  nativeInit(UINT64($92523B76657A517D));
  nativePush64(UINT64(id));
  nativePush64(PUINT64(@time)^);
  exit(PVector3(nativeCall)^);
end;

function GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(recording: cint; time: cfloat; script: PChar): Vector3;
begin
  nativeInit(UINT64($D242728AA6F0FBA2));
  nativePush64(UINT64(recording));
  nativePush64(PUINT64(@time)^);
  nativePush64(UINT64(script));
  exit(PVector3(nativeCall)^);
end;

function GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(id: cint; time: cfloat): Vector3;
begin
  nativeInit(UINT64($F0F2103EFAF8CBA7));
  nativePush64(UINT64(id));
  nativePush64(PUINT64(@time)^);
  exit(PVector3(nativeCall)^);
end;

function GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(recording: cint; time: cfloat; script: PChar): Vector3;
begin
  nativeInit(UINT64($2058206FBE79A8AD));
  nativePush64(UINT64(recording));
  nativePush64(PUINT64(@time)^);
  nativePush64(UINT64(script));
  exit(PVector3(nativeCall)^);
end;

function GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(id: cint): cfloat;
begin
  nativeInit(UINT64($102D125411A7B6E6));
  nativePush64(UINT64(id));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(recording: cint; script: PChar): cfloat;
begin
  nativeInit(UINT64($0E48D1C262390950));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_POSITION_IN_RECORDING(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($2DACD605FC681475));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_TIME_POSITION_IN_RECORDING(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($5746F3A7AB7FE544));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure START_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle; recording: cint; script: PChar; p3: BOOL);
begin
  nativeInit(UINT64($3F878F92B3A7A071));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(veh: Vehicle; recording: cint; script: PChar; flags, time, drivingStyle: cint);
begin
  nativeInit(UINT64($7D80FD645D4DA346));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  nativePush64(UINT64(flags));
  nativePush64(UINT64(time));
  nativePush64(UINT64(drivingStyle));
  nativeCall;
end;

procedure FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($1F2E4E06DEA8992B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure STOP_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($54833611C17ABDEA));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure PAUSE_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($632A689BF42301B1));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure UNPAUSE_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($8879EE09268305D5));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_PLAYBACK_GOING_ON_FOR_VEHICLE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($1C8A4C2C19E68EEC));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($AEA8FD591FAD4106));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_CURRENT_PLAYBACK_FOR_VEHICLE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($42BC05C27A946054));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($AB8E2EDA0C0A5883));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_PLAYBACK_SPEED(veh: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($6683AB880E427778));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure START_PLAYBACK_RECORDED_VEHICLE_USING_AI(veh: Vehicle; recording: cint; script: PChar; speed: cfloat; drivingStyle: cint);
begin
  nativeInit(UINT64($29DE5FA52D00428C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(recording));
  nativePush64(UINT64(script));
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(drivingStyle));
  nativeCall;
end;

procedure SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(veh: Vehicle; time: cfloat);
begin
  nativeInit(UINT64($9438F7AD68771A20));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@time)^);
  nativeCall;
end;

procedure SET_PLAYBACK_TO_USE_AI(veh: Vehicle; drivingStyle: cint);
begin
  nativeInit(UINT64($A549C3B37EA28131));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(drivingStyle));
  nativeCall;
end;

procedure SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(veh: Vehicle; time, drivingStyle: cint; p3: BOOL);
begin
  nativeInit(UINT64($6E63860BBB190730));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(time));
  nativePush64(UINT64(drivingStyle));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(veh: Vehicle; x, y, z: cfloat; p4: Any);
begin
  nativeInit(UINT64($5845066D8A1EA7F7));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(veh: Vehicle; x, y, z: cfloat);
begin
  nativeInit(UINT64($796A877E459B99EA));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(veh: Vehicle; x, y, z: cfloat);
begin
  nativeInit(UINT64($FAF2A78061FD9EF4));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($063AE2B2CC273588));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure EXPLODE_VEHICLE_IN_CUTSCENE(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($786A4EB67B01BF0B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure ADD_VEHICLE_STUCK_CHECK_WITH_WARP(p0: Any; p1: cfloat; p2: Any; p3, p4, p5: BOOL; p6: Any);
begin
  nativeInit(UINT64($2FA9923062DD396C));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_VEHICLE_MODEL_IS_SUPPRESSED(model: Hash; suppressed: BOOL);
begin
  nativeInit(UINT64($0FC2D89AC25A5814));
  nativePush64(UINT64(model));
  nativePush64(UINT64(suppressed));
  nativeCall;
end;

function GET_RANDOM_VEHICLE_IN_SPHERE(x, y, z, radius: cfloat; modelHash: Hash; flags: cint): Vehicle;
begin
  nativeInit(UINT64($386F6CE5BAF6091C));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(flags));
  exit(Vehicle(nativeCall^));
end;

function GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(p0, p1, p2, p3: cfloat; p4, p5, p6: cint): Vehicle;
begin
  nativeInit(UINT64($C5574E0AEB86BA68));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(Vehicle(nativeCall^));
end;

function GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(p0, p1, p2, p3: cfloat; p4, p5, p6: cint): Vehicle;
begin
  nativeInit(UINT64($B50807EABE20A8DC));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  exit(Vehicle(nativeCall^));
end;

function GET_CLOSEST_VEHICLE(x, y, z, radius: cfloat; modelHash: Hash; flags: cint): Vehicle;
begin
  nativeInit(UINT64($F73EB622C4F1689B));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(flags));
  exit(Vehicle(nativeCall^));
end;

function GET_TRAIN_CARRIAGE(tr: Vehicle; trailerNumber: cint): Vehicle;
begin
  nativeInit(UINT64($08AAFD0814722BC3));
  nativePush64(UINT64(tr));
  nativePush64(UINT64(trailerNumber));
  exit(Vehicle(nativeCall^));
end;

function IS_MISSION_TRAIN(tr: Vehicle): BOOL;
begin
  nativeInit(UINT64($AD464F2E18836BFC));
  nativePush64(UINT64(tr));
  exit(BOOL(nativeCall^));
end;

procedure DELETE_MISSION_TRAIN(tr: PVehicle);
begin
  nativeInit(UINT64($5B76B14AE875C795));
  nativePush64(UINT64(tr));
  nativeCall;
end;

procedure SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(tr: PVehicle; p1: BOOL);
begin
  nativeInit(UINT64($BBE7648349B49BE8));
  nativePush64(UINT64(tr));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_MISSION_TRAIN_COORDS(tr: Vehicle; x, y, z: cfloat);
begin
  nativeInit(UINT64($591CA673AA6AB736));
  nativePush64(UINT64(tr));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

function IS_THIS_MODEL_A_BOAT(model: Hash): BOOL;
begin
  nativeInit(UINT64($45A9187928F4B9E3));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_JETSKI(model: Hash): BOOL;
begin
  nativeInit(UINT64($9537097412CF75FE));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_PLANE(model: Hash): BOOL;
begin
  nativeInit(UINT64($A0948AB42D7BA0DE));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_HELI(model: Hash): BOOL;
begin
  nativeInit(UINT64($DCE4334788AF94EA));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_CAR(model: Hash): BOOL;
begin
  nativeInit(UINT64($7F6DB52EEFC96DF8));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_TRAIN(model: Hash): BOOL;
begin
  nativeInit(UINT64($AB935175B22E822B));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_BIKE(model: Hash): BOOL;
begin
  nativeInit(UINT64($B50C0B0CEDC6CE84));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_BICYCLE(model: Hash): BOOL;
begin
  nativeInit(UINT64($BF94DD42F63BDED2));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_A_QUADBIKE(model: Hash): BOOL;
begin
  nativeInit(UINT64($39DAC362EE65FA28));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(model: Hash): BOOL;
begin
  nativeInit(UINT64($633F6F44A537EBB6));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

function IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(model: Hash): BOOL;
begin
  nativeInit(UINT64($A1A9FC1C76A6730D));
  nativePush64(UINT64(model));
  exit(BOOL(nativeCall^));
end;

procedure SET_HELI_BLADES_FULL_SPEED(veh: Vehicle);
begin
  nativeInit(UINT64($A178472EBB8AE60D));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_HELI_BLADES_SPEED(veh: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($FD280B4D7F3ABC4D));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure FORCE_SUB_THROTTLE_FOR_TIME(veh: Vehicle; p1, p2: cfloat);
begin
  nativeInit(UINT64($99CAD8E7AFDB60FA));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

procedure SET_VEHICLE_CAN_BE_TARGETTED(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($3750146A28097A82));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($DBC631F109350B8C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($4C7028F78FFD3681));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1AA8A837D2169D94));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($2311DD7159F00582));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(p0, p1: Any);
begin
  nativeInit(UINT64($065D03A9D6B2C6B5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_VEHICLE_DIRT_LEVEL(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($8F17BC8BA08DA62B));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_VEHICLE_DIRT_LEVEL(veh: Vehicle; dirtLevel: cfloat);
begin
  nativeInit(UINT64($79D3B596FE44EE8B));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@dirtLevel)^);
  nativeCall;
end;

function GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($BCDC5017D3CE1E9E));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_DOOR_FULLY_OPEN(veh: Vehicle; doorId: cint): BOOL;
begin
  nativeInit(UINT64($3E933CFF7B111C22));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_ENGINE_ON(veh: Vehicle; value, instantly, disableAutoStart: BOOL);
begin
  nativeInit(UINT64($2497C4717C8B881E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(value));
  nativePush64(UINT64(instantly));
  nativePush64(UINT64(disableAutoStart));
  nativeCall;
end;

procedure SET_VEHICLE_UNDRIVEABLE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($8ABA6AF54B942B95));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_PROVIDES_COVER(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($5AFEEDD9BB2899D7));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DOOR_CONTROL(veh: Vehicle; doorId, speed: cint; angle: cfloat);
begin
  nativeInit(UINT64($F2BFA0430F0A0FCB));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(speed));
  nativePush64(PUINT64(@angle)^);
  nativeCall;
end;

procedure SET_VEHICLE_DOOR_LATCHED(veh: Vehicle; doorId: cint; p2, p3, p4: BOOL);
begin
  nativeInit(UINT64($A5A9653A8D2CAF48));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

function GET_VEHICLE_DOOR_ANGLE_RATIO(veh: Vehicle; doorId: cint): cfloat;
begin
  nativeInit(UINT64($FE3F9C29F7B32BD5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_PED_USING_VEHICLE_DOOR(veh: Vehicle; doord: cint): Ped;
begin
  nativeInit(UINT64($218297BF0CFD853B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doord));
  exit(Ped(nativeCall^));
end;

procedure SET_VEHICLE_DOOR_SHUT(veh: Vehicle; doorId: cint; closeInstantly: BOOL);
begin
  nativeInit(UINT64($93D9BD300D7789E5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(closeInstantly));
  nativeCall;
end;

procedure SET_VEHICLE_DOOR_BROKEN(veh: Vehicle; doorId: cint; deleteDoor: BOOL);
begin
  nativeInit(UINT64($D4D4F6A4AB575A33));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(deleteDoor));
  nativeCall;
end;

procedure SET_VEHICLE_CAN_BREAK(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($59BF8C3D52C92F66));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function DOES_VEHICLE_HAVE_ROOF(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($8AC862B0B32C5B80));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(p0: Any);
begin
  nativeInit(UINT64($C4B3347BD68BD609));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(p0: Any);
begin
  nativeInit(UINT64($D3301660A57C9272));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_CARJACK_MISSION_REMOVAL_PARAMETERS(p0, p1: Any);
begin
  nativeInit(UINT64($B9562064627FF9DB));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function IS_BIG_VEHICLE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($9F243D3919F442FE));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_NUMBER_OF_VEHICLE_COLOURS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($3B963160CD65D41E));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_COLOUR_COMBINATION(veh: Vehicle; colorCombination: cint);
begin
  nativeInit(UINT64($33E8CD3322E2FE31));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(colorCombination));
  nativeCall;
end;

function GET_VEHICLE_COLOUR_COMBINATION(veh: Vehicle): cint;
begin
  nativeInit(UINT64($6A842D197F845D56));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(veh: Vehicle; colorIndex: cint);
begin
  nativeInit(UINT64($E41033B25D003A07));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(colorIndex));
  nativeCall;
end;

function GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(veh: Vehicle): cint;
begin
  nativeInit(UINT64($3DFF319A831E0CDB));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($31B927BBC44156CD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($BE5C1255A1830FF5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($9BECD4B9FEF3F8A6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($88BC673CA9E0AE99));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($E851E480B814D4BA));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(p0: BOOL; modelHash: PHash; successIndicator: pcint);
begin
  nativeInit(UINT64($055BF0AC0C34F4FD));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(modelHash));
  nativePush64(UINT64(successIndicator));
  nativeCall;
end;

function GET_VEHICLE_DOOR_LOCK_STATUS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($25BC98A59C2EA962));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(veh: Vehicle; doorId: cint): cint;
begin
  nativeInit(UINT64($CA4AC3EAAE46EC7B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  exit(cint(nativeCall^));
end;

function IS_VEHICLE_DOOR_DAMAGED(veh: Vehicle; doorID: cint): BOOL;
begin
  nativeInit(UINT64($B8E181E559464527));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorID));
  exit(BOOL(nativeCall^));
end;

procedure SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(veh: Vehicle; doorId: cint; isBreakable: BOOL);
begin
  nativeInit(UINT64($2FA133A4A9D37ED8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  nativePush64(UINT64(isBreakable));
  nativeCall;
end;

function IS_VEHICLE_BUMPER_BOUNCING(veh: Vehicle; frontBumper: BOOL): BOOL;
begin
  nativeInit(UINT64($27B926779DEB502D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(frontBumper));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_BUMPER_BROKEN_OFF(veh: Vehicle; frontBumper: BOOL): BOOL;
begin
  nativeInit(UINT64($468056A6BB6F3846));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(frontBumper));
  exit(BOOL(nativeCall^));
end;

function IS_COP_VEHICLE_IN_AREA_3D(x1, x2, y1, y2, z1, z2: cfloat): BOOL;
begin
  nativeInit(UINT64($7EEF65D5F153E26A));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@z2)^);
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_ON_ALL_WHEELS(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($B104CD1BABF302E2));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_MODEL_VALUE(vehicleModel: Hash): cint;
begin
  nativeInit(UINT64($5873C14A52D74236));
  nativePush64(UINT64(vehicleModel));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_LAYOUT_HASH(veh: Vehicle): Hash;
begin
  nativeInit(UINT64($28D37D4F71AC5C58));
  nativePush64(UINT64(veh));
  exit(Hash(nativeCall^));
end;

function GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(veh: Vehicle; p1: cint): Hash;
begin
  nativeInit(UINT64($A01BC64DD4BFBBAC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  exit(Hash(nativeCall^));
end;

procedure SET_RENDER_TRAIN_AS_DERAILED(tr: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($317B11A312DF5534));
  nativePush64(UINT64(tr));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_EXTRA_COLOURS(veh: Vehicle; pearlescentColor, wheelColor: cint);
begin
  nativeInit(UINT64($2036F561ADD12E33));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(pearlescentColor));
  nativePush64(UINT64(wheelColor));
  nativeCall;
end;

procedure GET_VEHICLE_EXTRA_COLOURS(veh: Vehicle; pearlescentColor, wheelColor: pcint);
begin
  nativeInit(UINT64($3BC4245933A166F7));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(pearlescentColor));
  nativePush64(UINT64(wheelColor));
  nativeCall;
end;

procedure SET_VEHICLE_EXTRA_COLOUR_5(veh: Vehicle; color: cint);
begin
  nativeInit(UINT64($F40DD601A65F7F19));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure GET_VEHICLE_EXTRA_COLOUR_5(veh: Vehicle; color: pcint);
begin
  nativeInit(UINT64($7D1464D472D32136));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure SET_VEHICLE_EXTRA_COLOUR_6(veh: Vehicle; color: cint);
begin
  nativeInit(UINT64($6089CDF6A57F326C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure GET_VEHICLE_EXTRA_COLOUR_6(veh: Vehicle; color: pcint);
begin
  nativeInit(UINT64($B7635E80A5C31BFF));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure STOP_ALL_GARAGE_ACTIVITY;
begin
  nativeInit(UINT64($0F87E938BDF29D66));
  nativeCall;
end;

procedure SET_VEHICLE_FIXED(veh: Vehicle);
begin
  nativeInit(UINT64($115722B1B9C14C1C));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_DEFORMATION_FIXED(veh: Vehicle);
begin
  nativeInit(UINT64($953DA1E1B12C0491));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_CAN_ENGINE_MISSFIRE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($206BC5DC9D1AC70A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_CAN_LEAK_OIL(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($51BB2D88D31A914B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_CAN_LEAK_PETROL(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($192547247864DFDD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($465BF26AB9684352));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($37C8252A7C92D017));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_VEHICLE_ENGINE_FIRES(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($91A0BD635321F145));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($C50CE861B55EAB8B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($6EBFB22D646FFC18));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_PRETEND_OCCUPANTS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($25367DE49D64CF16));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(x1, y1, z1, x2, y2, z2: cfloat; p6: Any);
begin
  nativeInit(UINT64($46A1E1A299EC4BBA));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(p6));
  nativeCall;
end;

procedure SET_VEHICLE_STEER_BIAS(veh: Vehicle; value: cfloat);
begin
  nativeInit(UINT64($42A8EC77D5150CBE));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function IS_VEHICLE_EXTRA_TURNED_ON(veh: Vehicle; extraId: cint): BOOL;
begin
  nativeInit(UINT64($D2E6822DBFD6C8BD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(extraId));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_EXTRA(veh: Vehicle; extraId: cint; disable: BOOL);
begin
  nativeInit(UINT64($7EE3A3C5E4A40CC9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(extraId));
  nativePush64(UINT64(disable));
  nativeCall;
end;

function DOES_EXTRA_EXIST(veh: Vehicle; extraId: cint): BOOL;
begin
  nativeInit(UINT64($1262D55792428154));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(extraId));
  exit(BOOL(nativeCall^));
end;

function IS_EXTRA_BROKEN_OFF(veh: Vehicle; extraId: cint): BOOL;
begin
  nativeInit(UINT64($534E36D4DB9ECC5D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(extraId));
  exit(BOOL(nativeCall^));
end;

procedure SET_CONVERTIBLE_ROOF(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($F39C4F538B5124C2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure LOWER_CONVERTIBLE_ROOF(veh: Vehicle; instantlyLower: BOOL);
begin
  nativeInit(UINT64($DED51F703D0FA83D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(instantlyLower));
  nativeCall;
end;

procedure RAISE_CONVERTIBLE_ROOF(veh: Vehicle; instantlyRaise: BOOL);
begin
  nativeInit(UINT64($8F5FB35D7E88FC70));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(instantlyRaise));
  nativeCall;
end;

function GET_CONVERTIBLE_ROOF_STATE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($F8C397922FC03F41));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function IS_VEHICLE_A_CONVERTIBLE(veh: Vehicle; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($52F357A30698BCCE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function TRANSFORM_TO_SUBMARINE(veh: Vehicle; noAnimation: BOOL): BOOL;
begin
  nativeInit(UINT64($BE4C854FFDB6EEBE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(noAnimation));
  exit(BOOL(nativeCall^));
end;

procedure TRANSFORM_TO_CAR(veh: Vehicle; noAnimation: BOOL);
begin
  nativeInit(UINT64($2A69FFD1B42BFF9E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(noAnimation));
  nativeCall;
end;

function IS_VEHICLE_IN_SUBMARINE_MODE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($A77DC70BD689A1E5));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($2959F696AE390A99));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_DAMAGE(veh: Vehicle; xOffset, yOffset, zOffset, damage, radius: cfloat; focusOnModel: BOOL);
begin
  nativeInit(UINT64($A1DD317EA8FD4F29));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(PUINT64(@damage)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(focusOnModel));
  nativeCall;
end;

procedure SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($35BB21DE06784373));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_ENGINE_HEALTH(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($C45D23BAF168AAB8));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_VEHICLE_ENGINE_HEALTH(veh: Vehicle; health: cfloat);
begin
  nativeInit(UINT64($45F6D8EEF34ABEF1));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@health)^);
  nativeCall;
end;

procedure SET_PLANE_ENGINE_HEALTH(veh: Vehicle; health: cfloat);
begin
  nativeInit(UINT64($2A86A0475B6A1434));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@health)^);
  nativeCall;
end;

function GET_VEHICLE_PETROL_TANK_HEALTH(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($7D5DABE888D2D074));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_VEHICLE_PETROL_TANK_HEALTH(veh: Vehicle; health: cfloat);
begin
  nativeInit(UINT64($70DB57649FA8D0D8));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@health)^);
  nativeCall;
end;

function IS_VEHICLE_STUCK_TIMER_UP(veh: Vehicle; p1, ms: cint): BOOL;
begin
  nativeInit(UINT64($679BE1DAF71DA874));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(ms));
  exit(BOOL(nativeCall^));
end;

procedure RESET_VEHICLE_STUCK_TIMER(veh: Vehicle; nullAttributes: cint);
begin
  nativeInit(UINT64($D7591B0065AFAA7A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(nullAttributes));
  nativeCall;
end;

function IS_VEHICLE_DRIVEABLE(veh: Vehicle; isOnFireCheck: BOOL): BOOL;
begin
  nativeInit(UINT64($4C241E39B23DF959));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(isOnFireCheck));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(veh: Vehicle; owned: BOOL);
begin
  nativeInit(UINT64($2B5F9D2AF1F1722D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(owned));
  nativeCall;
end;

procedure SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($FBA550EA44404EE6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($9F3F689B814F2599));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($4E74E62E0A97E901));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure START_VEHICLE_HORN(veh: Vehicle; duration: cint; mode: Hash; forever: BOOL);
begin
  nativeInit(UINT64($9C8C6504B5B63D2C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(duration));
  nativePush64(UINT64(mode));
  nativePush64(UINT64(forever));
  nativeCall;
end;

procedure SET_VEHICLE_IN_CAR_MOD_SHOP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($9D44FCCE98450843));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_HAS_STRONG_AXLES(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($92F0CF722BC4202F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(modelHash: Hash): PChar;
begin
  nativeInit(UINT64($B215AAC32D25D019));
  nativePush64(UINT64(modelHash));
  exit(PChar(nativeCall^));
end;

function GET_MAKE_NAME_FROM_VEHICLE_MODEL(modelHash: Hash): PChar;
begin
  nativeInit(UINT64($F7AF4F159FF99F97));
  nativePush64(UINT64(modelHash));
  exit(PChar(nativeCall^));
end;

function GET_VEHICLE_DEFORMATION_AT_POS(veh: Vehicle; offsetX, offsetY, offsetZ: cfloat): Vector3;
begin
  nativeInit(UINT64($4EC6CFBC7B2E9536));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@offsetX)^);
  nativePush64(PUINT64(@offsetY)^);
  nativePush64(PUINT64(@offsetZ)^);
  exit(PVector3(nativeCall)^);
end;

procedure SET_VEHICLE_LIVERY(veh: Vehicle; livery: cint);
begin
  nativeInit(UINT64($60BF608F1B8CD1B6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(livery));
  nativeCall;
end;

function GET_VEHICLE_LIVERY(veh: Vehicle): cint;
begin
  nativeInit(UINT64($2BB9230590DA5E8A));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_LIVERY_COUNT(veh: Vehicle): cint;
begin
  nativeInit(UINT64($87B63E25A529D526));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_LIVERY2(veh: Vehicle; livery: cint);
begin
  nativeInit(UINT64($A6D3A8750DC73270));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(livery));
  nativeCall;
end;

function GET_VEHICLE_LIVERY2(veh: Vehicle): cint;
begin
  nativeInit(UINT64($60190048C0764A26));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_LIVERY2_COUNT(veh: Vehicle): cint;
begin
  nativeInit(UINT64($5ECB40269053C0D4));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function IS_VEHICLE_WINDOW_INTACT(veh: Vehicle; windowIndex: cint): BOOL;
begin
  nativeInit(UINT64($46E571A0E20D01F1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(windowIndex));
  exit(BOOL(nativeCall^));
end;

function ARE_ALL_VEHICLE_WINDOWS_INTACT(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($11D862A3E977A9EF));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function ARE_ANY_VEHICLE_SEATS_FREE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($2D34FC3BC4ADB780));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure RESET_VEHICLE_WHEELS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($21D2E5662C1F6FED));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_HELI_PART_BROKEN(veh: Vehicle; p1, p2, p3: BOOL): BOOL;
begin
  nativeInit(UINT64($BC74B4BE25EB6C8A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

function GET_HELI_MAIN_ROTOR_HEALTH(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($E4CB7541F413D2C5));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_HELI_TAIL_ROTOR_HEALTH(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($AE8CE82A4219AC8C));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_HELI_TAIL_BOOM_HEALTH(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($AC51915D27E4A5F7));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_HELI_MAIN_ROTOR_HEALTH(veh: Vehicle; health: cfloat);
begin
  nativeInit(UINT64($4056EA1105F5ABD7));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@health)^);
  nativeCall;
end;

procedure SET_HELI_TAIL_ROTOR_HEALTH(veh: Vehicle; health: cfloat);
begin
  nativeInit(UINT64($FE205F38AAA58E5B));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@health)^);
  nativeCall;
end;

function SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(veh: Vehicle; toggle: BOOL): BOOL;
begin
  nativeInit(UINT64($3EC8BF18AA453FE9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_NAME_DEBUG(veh: Vehicle; name: PChar);
begin
  nativeInit(UINT64($BFDF984E2C22B94F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(name));
  nativeCall;
end;

procedure SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($71B0892EC081D60A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($D565F438137F0E10));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($3441CAD2F2231923));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DISABLE_TOWING(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($2B6747FAA9DB9D6B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_HAS_LANDING_GEAR(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($E43701C36CAFF1A4));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure CONTROL_LANDING_GEAR(veh: Vehicle; state: cint);
begin
  nativeInit(UINT64($CFC8BE9A5E1FE575));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

function GET_LANDING_GEAR_STATE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($9B0F3DCA3DB0F4CD));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function IS_ANY_VEHICLE_NEAR_POINT(x, y, z, radius: cfloat): BOOL;
begin
  nativeInit(UINT64($61E1DD6125A3EEE6));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_VEHICLE_HIGH_DETAIL_MODEL(veh: Vehicle);
begin
  nativeInit(UINT64($A6E9FDCB2C76785E));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function _GET_VEHICLE_MODEL_NUM_DRIVE_GEARS(vehicleModel: Hash): cint;
begin
  nativeInit(UINT64($61F02E4E9A7A61EA));
  nativePush64(UINT64(vehicleModel));
  exit(cint(nativeCall^));
end;

function _GET_VEHICLE_MAX_DRIVE_GEAR_COUNT(veh: Vehicle): cint;
begin
  nativeInit(UINT64($24910C3D66BA770D));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function _GET_VEHICLE_CURRENT_DRIVE_GEAR(veh: Vehicle): cint;
begin
  nativeInit(UINT64($56185A25D45A0DCD));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function _GET_VEHICLE_CURRENT_REV_RATIO(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($F9DDA40BC293A61E));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure REMOVE_VEHICLE_HIGH_DETAIL_MODEL(veh: Vehicle);
begin
  nativeInit(UINT64($00689CDE5F7C6787));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_VEHICLE_HIGH_DETAIL(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($1F25887F3C104278));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_VEHICLE_ASSET(vehicleHash: Hash; vehicleAsset: cint);
begin
  nativeInit(UINT64($81A15811460FAB3A));
  nativePush64(UINT64(vehicleHash));
  nativePush64(UINT64(vehicleAsset));
  nativeCall;
end;

function HAS_VEHICLE_ASSET_LOADED(vehicleAsset: cint): BOOL;
begin
  nativeInit(UINT64($1BBE0523B8DB9A21));
  nativePush64(UINT64(vehicleAsset));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_VEHICLE_ASSET(vehicleAsset: cint);
begin
  nativeInit(UINT64($ACE699C71AB9DEB5));
  nativePush64(UINT64(vehicleAsset));
  nativeCall;
end;

procedure SET_VEHICLE_TOW_TRUCK_ARM_POSITION(veh: Vehicle; position: cfloat);
begin
  nativeInit(UINT64($FE54B92A344583CA));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@position)^);
  nativeCall;
end;

procedure _SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM(towTruck, veh: Vehicle);
begin
  nativeInit(UINT64($48BD57D0DD17786A));
  nativePush64(UINT64(towTruck));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure ATTACH_VEHICLE_TO_TOW_TRUCK(towTruck, veh: Vehicle; rear: BOOL; hookOffsetX, hookOffsetY, hookOffsetZ: cfloat);
begin
  nativeInit(UINT64($29A16F8D621C4508));
  nativePush64(UINT64(towTruck));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(rear));
  nativePush64(PUINT64(@hookOffsetX)^);
  nativePush64(PUINT64(@hookOffsetY)^);
  nativePush64(PUINT64(@hookOffsetZ)^);
  nativeCall;
end;

procedure DETACH_VEHICLE_FROM_TOW_TRUCK(towTruck, veh: Vehicle);
begin
  nativeInit(UINT64($C2DB6B6708350ED8));
  nativePush64(UINT64(towTruck));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($D0E9CE05A1E68CD8));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(towTruck, veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($146DF9EC4C4B9FD4));
  nativePush64(UINT64(towTruck));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_ENTITY_ATTACHED_TO_TOW_TRUCK(towTruck: Vehicle): Entity;
begin
  nativeInit(UINT64($EFEA18DCF10F8F75));
  nativePush64(UINT64(towTruck));
  exit(Entity(nativeCall^));
end;

function SET_VEHICLE_AUTOMATICALLY_ATTACHES(veh: Vehicle; p1: BOOL; p2: Any): Entity;
begin
  nativeInit(UINT64($8BA6F76BC53A1493));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  exit(Entity(nativeCall^));
end;

procedure SET_VEHICLE_BULLDOZER_ARM_POSITION(veh: Vehicle; position: cfloat; p2: BOOL);
begin
  nativeInit(UINT64($F8EBCCC96ADB9FB7));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@position)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_VEHICLE_TANK_TURRET_POSITION(veh: Vehicle; position: cfloat; p2: BOOL);
begin
  nativeInit(UINT64($56B94C6D7127DFBA));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@position)^);
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_VEHICLE_TURRET_TARGET(veh: Vehicle; p1: BOOL; x, y, z: cfloat; p5: BOOL);
begin
  nativeInit(UINT64($0581730AB9380412));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure SET_VEHICLE_TANK_STATIONARY(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($737E398138550FFF));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_TURRET_SPEED_THIS_FRAME(veh: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($1093408B4B9D1146));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(veh: Vehicle);
begin
  nativeInit(UINT64($32CAEDF24A583345));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_FLIGHT_NOZZLE_POSITION(veh: Vehicle; angleRatio: cfloat);
begin
  nativeInit(UINT64($30D779DE7C4F6DD3));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@angleRatio)^);
  nativeCall;
end;

procedure SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(veh: Vehicle; angle: cfloat);
begin
  nativeInit(UINT64($9AA47FFF660CB932));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@angle)^);
  nativeCall;
end;

function GET_VEHICLE_FLIGHT_NOZZLE_POSITION(plane: Vehicle): cfloat;
begin
  nativeInit(UINT64($DA62027C8BDB326E));
  nativePush64(UINT64(plane));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($CE2B43770B655F8F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(outVec: PVector3; p1: Any; outVec1: PVector3; p3, p4, p5, p6, p7, p8: Any): BOOL;
begin
  nativeInit(UINT64($A4822F1CF23F4810));
  nativePush64(UINT64(outVec));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(outVec1));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativePush64(UINT64(p6));
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_BURNOUT(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($FB8794444A7D60FB));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_VEHICLE_IN_BURNOUT(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($1297A88E081430EB));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_REDUCE_GRIP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($222FF6A823D122E2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_REDUCE_GRIP_LEVEL(veh: Vehicle; val: cint);
begin
  nativeInit(UINT64($6DEE944E1EE90CFB));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(val));
  nativeCall;
end;

procedure SET_VEHICLE_INDICATOR_LIGHTS(veh: Vehicle; turnSignal: cint; toggle: BOOL);
begin
  nativeInit(UINT64($B5D45264751B7DF0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(turnSignal));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_BRAKE_LIGHTS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($92B35082E0B42F66));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_TAIL_LIGHTS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($5815BD2763178DF4));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_HANDBRAKE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($684785568EF26A22));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_BRAKE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($E4E2FD323574965C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure INSTANTLY_FILL_VEHICLE_POPULATION;
begin
  nativeInit(UINT64($48ADC8A773564670));
  nativeCall;
end;

function HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED: BOOL;
begin
  nativeInit(UINT64($91D6DD290888CBAB));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(toggle: BOOL);
begin
  nativeInit(UINT64($51DB102F4A3BA5E0));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(p0: cint);
begin
  nativeInit(UINT64($A4A9A4C40E615885));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function GET_VEHICLE_TRAILER_VEHICLE(veh: Vehicle; trailer: PVehicle): BOOL;
begin
  nativeInit(UINT64($1CDD6BADC297830D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(trailer));
  exit(BOOL(nativeCall^));
end;

function _GET_VEHICLE_TRAILER_PARENT_VEHICLE(trailer: Vehicle): Vehicle;
begin
  nativeInit(UINT64($80D9D32636369C92));
  nativePush64(UINT64(trailer));
  exit(Vehicle(nativeCall^));
end;

procedure SET_VEHICLE_USES_LARGE_REAR_RAMP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($CAC66558B944DA67));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_RUDDER_BROKEN(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($09606148B6C71DEF));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CONVERTIBLE_ROOF_LATCH_STATE(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($1A78AD3D8240536F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

function GET_VEHICLE_ESTIMATED_MAX_SPEED(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($53AF99BAA671CA47));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MAX_BRAKING(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($AD7E85FC227197C4));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MAX_TRACTION(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($A132FB5370554DB0));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_ACCELERATION(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($5DD35C8D074E57AE));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($F417C2502FFFED43));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MODEL_MAX_BRAKING(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($DC53FD41B4ED944C));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($BFBA3BA79CFF7EBF));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MODEL_MAX_TRACTION(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($539DE94D44FDFD0D));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MODEL_ACCELERATION(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($8C044C5C84505B6A));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($53409B5163D5B846));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_FLYING_VEHICLE_MODEL_AGILITY(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($C6AD107DDC9054CC));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_BOAT_VEHICLE_MODEL_AGILITY(modelHash: Hash): cfloat;
begin
  nativeInit(UINT64($5AA3F878A178C4FC));
  nativePush64(UINT64(modelHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(vehicleClass: cint): cfloat;
begin
  nativeInit(UINT64($00C09F246ABEDD82));
  nativePush64(UINT64(vehicleClass));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_CLASS_MAX_TRACTION(vehicleClass: cint): cfloat;
begin
  nativeInit(UINT64($DBC86D85C5059461));
  nativePush64(UINT64(vehicleClass));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_CLASS_MAX_AGILITY(vehicleClass: cint): cfloat;
begin
  nativeInit(UINT64($4F930AD022D6DE3B));
  nativePush64(UINT64(vehicleClass));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_CLASS_MAX_ACCELERATION(vehicleClass: cint): cfloat;
begin
  nativeInit(UINT64($2F83E7E45D9EA7AE));
  nativePush64(UINT64(vehicleClass));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_CLASS_MAX_BRAKING(vehicleClass: cint): cfloat;
begin
  nativeInit(UINT64($4BF54C16EC8FEC03));
  nativePush64(UINT64(vehicleClass));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function ADD_ROAD_NODE_SPEED_ZONE(x, y, z, radius, speed: cfloat; p5: BOOL): cint;
begin
  nativeInit(UINT64($2CE544C68FB812A0));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@speed)^);
  nativePush64(UINT64(p5));
  exit(cint(nativeCall^));
end;

function REMOVE_ROAD_NODE_SPEED_ZONE(speedzone: cint): BOOL;
begin
  nativeInit(UINT64($1033371FC8E842A7));
  nativePush64(UINT64(speedzone));
  exit(BOOL(nativeCall^));
end;

procedure OPEN_BOMB_BAY_DOORS(veh: Vehicle);
begin
  nativeInit(UINT64($87E7F24270732CB1));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure CLOSE_BOMB_BAY_DOORS(veh: Vehicle);
begin
  nativeInit(UINT64($3556041742A0DC74));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function GET_ARE_BOMB_BAY_DOORS_OPEN(aircraft: Vehicle): BOOL;
begin
  nativeInit(UINT64($D0917A423314BBA8));
  nativePush64(UINT64(aircraft));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_SEARCHLIGHT_ON(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($C0F97FCE55094987));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_SEARCHLIGHT(heli: Vehicle; toggle, canBeUsedByAI: BOOL);
begin
  nativeInit(UINT64($14E85C5EE7A4D542));
  nativePush64(UINT64(heli));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(canBeUsedByAI));
  nativeCall;
end;

function DOES_VEHICLE_HAVE_SEARCHLIGHT(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($99015ED7DBEA5113));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_ENTRY_POINT_FOR_SEAT_CLEAR(_ped: Ped; veh: Vehicle; seatIndex: cint; side, onEnter: BOOL): BOOL;
begin
  nativeInit(UINT64($639431E895B9AA57));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  nativePush64(UINT64(side));
  nativePush64(UINT64(onEnter));
  exit(BOOL(nativeCall^));
end;

function GET_ENTRY_POINT_POSITION(veh: Vehicle; doorId: cint): Vector3;
begin
  nativeInit(UINT64($C0572928C0ABFDA3));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  exit(PVector3(nativeCall)^);
end;

function CAN_SHUFFLE_SEAT(veh: Vehicle; seatIndex: cint): BOOL;
begin
  nativeInit(UINT64($30785D90C956BF35));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(seatIndex));
  exit(BOOL(nativeCall^));
end;

function GET_NUM_MOD_KITS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($33F2E3FE70EAAE1D));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_MOD_KIT(veh: Vehicle; modKit: cint);
begin
  nativeInit(UINT64($1F2AA07F00B3217A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modKit));
  nativeCall;
end;

function GET_VEHICLE_MOD_KIT(veh: Vehicle): cint;
begin
  nativeInit(UINT64($6325D1A044AE510D));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_MOD_KIT_TYPE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($FC058F5121E54C32));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_WHEEL_TYPE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($B3ED1BFB4BE636DC));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_WHEEL_TYPE(veh: Vehicle; WheelType: cint);
begin
  nativeInit(UINT64($487EB21CC7295BA1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(WheelType));
  nativeCall;
end;

function GET_NUM_MOD_COLORS(paintType: cint; p1: BOOL): cint;
begin
  nativeInit(UINT64($A551BE18C11A476D));
  nativePush64(UINT64(paintType));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_MOD_COLOR_1(veh: Vehicle; paintType, color, pearlescentColor: cint);
begin
  nativeInit(UINT64($43FEB945EE7F85B8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(paintType));
  nativePush64(UINT64(color));
  nativePush64(UINT64(pearlescentColor));
  nativeCall;
end;

procedure SET_VEHICLE_MOD_COLOR_2(veh: Vehicle; paintType, color: cint);
begin
  nativeInit(UINT64($816562BADFDEC83E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(paintType));
  nativePush64(UINT64(color));
  nativeCall;
end;

procedure GET_VEHICLE_MOD_COLOR_1(veh: Vehicle; paintType, color, pearlescentColor: pcint);
begin
  nativeInit(UINT64($E8D65CA700C9A693));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(paintType));
  nativePush64(UINT64(color));
  nativePush64(UINT64(pearlescentColor));
  nativeCall;
end;

procedure GET_VEHICLE_MOD_COLOR_2(veh: Vehicle; paintType, color: pcint);
begin
  nativeInit(UINT64($81592BE4E3878728));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(paintType));
  nativePush64(UINT64(color));
  nativeCall;
end;

function GET_VEHICLE_MOD_COLOR_1_NAME(veh: Vehicle; p1: BOOL): PChar;
begin
  nativeInit(UINT64($B45085B721EFD38C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  exit(PChar(nativeCall^));
end;

function GET_VEHICLE_MOD_COLOR_2_NAME(veh: Vehicle): PChar;
begin
  nativeInit(UINT64($4967A516ED23A5A1));
  nativePush64(UINT64(veh));
  exit(PChar(nativeCall^));
end;

function HAVE_VEHICLE_MODS_STREAMED_IN(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($9A83F5F9963775EF));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_MOD_GEN9_EXCLUSIVE(veh: Vehicle; modType, modIndex: cint): BOOL;
begin
  nativeInit(UINT64($00834EAC4A96E010));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativePush64(UINT64(modIndex));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_MOD(veh: Vehicle; modType, modIndex: cint; customTires: BOOL);
begin
  nativeInit(UINT64($6AF0636DDEDCB6DD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativePush64(UINT64(modIndex));
  nativePush64(UINT64(customTires));
  nativeCall;
end;

function GET_VEHICLE_MOD(veh: Vehicle; modType: cint): cint;
begin
  nativeInit(UINT64($772960298DA26FDB));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_MOD_VARIATION(veh: Vehicle; modType: cint): cint;
begin
  nativeInit(UINT64($B3924ECD70E095DC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  exit(cint(nativeCall^));
end;

function GET_NUM_VEHICLE_MODS(veh: Vehicle; modType: cint): cint;
begin
  nativeInit(UINT64($E38E9162A2500646));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  exit(cint(nativeCall^));
end;

procedure REMOVE_VEHICLE_MOD(veh: Vehicle; modType: cint);
begin
  nativeInit(UINT64($92D619E420858204));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativeCall;
end;

procedure TOGGLE_VEHICLE_MOD(veh: Vehicle; modType: cint; toggle: BOOL);
begin
  nativeInit(UINT64($2A1F4F37F95BAD08));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_TOGGLE_MOD_ON(veh: Vehicle; modType: cint): BOOL;
begin
  nativeInit(UINT64($84B233A8C8FC8AE7));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  exit(BOOL(nativeCall^));
end;

function GET_MOD_TEXT_LABEL(veh: Vehicle; modType, modValue: cint): PChar;
begin
  nativeInit(UINT64($8935624F8C5592CC));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativePush64(UINT64(modValue));
  exit(PChar(nativeCall^));
end;

function GET_MOD_SLOT_NAME(veh: Vehicle; modType: cint): PChar;
begin
  nativeInit(UINT64($51F0FEB9F6AE98C0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  exit(PChar(nativeCall^));
end;

function GET_LIVERY_NAME(veh: Vehicle; liveryIndex: cint): PChar;
begin
  nativeInit(UINT64($B4C7A93837C91A1F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(liveryIndex));
  exit(PChar(nativeCall^));
end;

function GET_VEHICLE_MOD_MODIFIER_VALUE(veh: Vehicle; modType, modIndex: cint): cint;
begin
  nativeInit(UINT64($90A38E9838E0A8C1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativePush64(UINT64(modIndex));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_MOD_IDENTIFIER_HASH(veh: Vehicle; modType, modIndex: cint): Hash;
begin
  nativeInit(UINT64($4593CF82AA179706));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativePush64(UINT64(modIndex));
  exit(Hash(nativeCall^));
end;

procedure PRELOAD_VEHICLE_MOD(veh: Vehicle; modType, modIndex: cint);
begin
  nativeInit(UINT64($758F49C24925568A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modType));
  nativePush64(UINT64(modIndex));
  nativeCall;
end;

function HAS_PRELOAD_MODS_FINISHED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($06F43E5175EB6D96));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure RELEASE_PRELOAD_MODS(veh: Vehicle);
begin
  nativeInit(UINT64($445D79F995508307));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_TYRE_SMOKE_COLOR(veh: Vehicle; r, g, b: cint);
begin
  nativeInit(UINT64($B5BA80F839791C0F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure GET_VEHICLE_TYRE_SMOKE_COLOR(veh: Vehicle; r, g, b: pcint);
begin
  nativeInit(UINT64($B635392A4938B3C3));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure SET_VEHICLE_WINDOW_TINT(veh: Vehicle; tint: cint);
begin
  nativeInit(UINT64($57C51E6BAD752696));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(tint));
  nativeCall;
end;

function GET_VEHICLE_WINDOW_TINT(veh: Vehicle): cint;
begin
  nativeInit(UINT64($0EE21293DAD47C95));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_NUM_VEHICLE_WINDOW_TINTS: cint;
begin
  nativeInit(UINT64($9D1224004B3A6707));
  exit(cint(nativeCall^));
end;

procedure GET_VEHICLE_COLOR(veh: Vehicle; r, g, b: pcint);
begin
  nativeInit(UINT64($F3CC740D36221548));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

function GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(veh: Vehicle): cint;
begin
  nativeInit(UINT64($EEBFC7A7EFDC35B4));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_CAUSE_OF_DESTRUCTION(veh: Vehicle): Hash;
begin
  nativeInit(UINT64($E495D1EF4C91FD20));
  nativePush64(UINT64(veh));
  exit(Hash(nativeCall^));
end;

procedure OVERRIDE_PLANE_DAMAGE_THREHSOLD(veh: Vehicle; health: cfloat);
begin
  nativeInit(UINT64($5EE5632F47AE9695));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@health)^);
  nativeCall;
end;

procedure _SET_TRANSMISSION_REDUCED_GEAR_RATIO(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($337EF33DA3DDB990));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function _GET_VEHICLE_DESIRED_DRIVE_GEAR(veh: Vehicle): cint;
begin
  nativeInit(UINT64($FD8CE53356B5D745));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($5EF77C9ADD3B11A3));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($A7ECB73355EB2F20));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($EC69ADF931AAE0C3));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure MODIFY_VEHICLE_TOP_SPEED(veh: Vehicle; value: cfloat);
begin
  nativeInit(UINT64($93A3996368C94158));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_VEHICLE_MAX_SPEED(veh: Vehicle; speed: cfloat);
begin
  nativeInit(UINT64($BAA045B4E42F3C06));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@speed)^);
  nativeCall;
end;

procedure SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1CF38D529D7441D9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($1F9FB66F3A3842D2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(veh: Vehicle; toggle: BOOL; p2: cfloat);
begin
  nativeInit(UINT64($59C3757B3B7408E8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

function ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(p0, p1, p2, p3, p4, p5, p6: cfloat): cint;
begin
  nativeInit(UINT64($54B0F614960F4A5F));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  exit(cint(nativeCall^));
end;

procedure REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(p0: cint);
begin
  nativeInit(UINT64($E30524E1871F481D));
  nativePush64(UINT64(p0));
  nativeCall;
end;

function IS_ANY_PED_RAPPELLING_FROM_HELI(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($291E373D483E7EE7));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_CHEAT_POWER_INCREASE(veh: Vehicle; value: cfloat);
begin
  nativeInit(UINT64($B59E4BD37AE292DB));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_VEHICLE_INFLUENCES_WANTED_LEVEL(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($0AD9E8F87FF7C16F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_IS_WANTED(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($F7EC25A3EBEEC726));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SWING_BOAT_BOOM_TO_RATIO(veh: Vehicle; ratio: cfloat);
begin
  nativeInit(UINT64($F488C566413B4232));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@ratio)^);
  nativeCall;
end;

procedure SWING_BOAT_BOOM_FREELY(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($C1F981A6F74F0C23));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure ALLOW_BOAT_BOOM_TO_ANIMATE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($0F3B4D4E43177236));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_BOAT_BOOM_POSITION_RATIO(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($6636C535F6CC2725));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure DISABLE_PLANE_AILERON(veh: Vehicle; p1, p2: BOOL);
begin
  nativeInit(UINT64($23428FC53C60919C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function GET_IS_VEHICLE_ENGINE_RUNNING(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($AE31E7DF9B5B132E));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_USE_ALTERNATE_HANDLING(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1D97D1E3A70A649F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_BIKE_ON_STAND(veh: Vehicle; x, y: cfloat);
begin
  nativeInit(UINT64($9CFA4896C3A53CBB));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativeCall;
end;

procedure SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($AB04325045427AAE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure LOCK_DOORS_WHEN_NO_LONGER_NEEDED(veh: Vehicle);
begin
  nativeInit(UINT64($CFD778E7904C255E));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_LAST_DRIVEN_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($ACFB2463CC22BED2));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function GET_LAST_DRIVEN_VEHICLE: Vehicle;
begin
  nativeInit(UINT64($B2D06FAEDE65B577));
  exit(Vehicle(nativeCall^));
end;

procedure CLEAR_LAST_DRIVEN_VEHICLE;
begin
  nativeInit(UINT64($E01903C47C7AC89E));
  nativeCall;
end;

procedure SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($02398B627547189C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(plane: Vehicle; height: cint);
begin
  nativeInit(UINT64($B893215D8D4C015B));
  nativePush64(UINT64(plane));
  nativePush64(UINT64(height));
  nativeCall;
end;

procedure SET_VEHICLE_LOD_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
begin
  nativeInit(UINT64($93AE6A61BE015BF1));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_VEHICLE_CAN_SAVE_IN_GARAGE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($428BACCDF5E26EAD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($42A4BEB35D372407));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($2C8CBFE1EA5FC631));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(p0: Any; p1: BOOL);
begin
  nativeInit(UINT64($4D9D109F63FEE1D4));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($279D50DE5652D935));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure COPY_VEHICLE_DAMAGES(sourceVehicle, targetVehicle: Vehicle);
begin
  nativeInit(UINT64($E44A982368A4AF23));
  nativePush64(UINT64(sourceVehicle));
  nativePush64(UINT64(targetVehicle));
  nativeCall;
end;

procedure DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS;
begin
  nativeInit(UINT64($F25E02CB9C5818F8));
  nativeCall;
end;

procedure SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(distance: cfloat);
begin
  nativeInit(UINT64($BC3CCA5844452B06));
  nativePush64(PUINT64(@distance)^);
  nativeCall;
end;

procedure SET_VEHICLE_SHOOT_AT_TARGET(driver: Ped; para_entity: Entity; xTarget, yTarget, zTarget: cfloat);
begin
  nativeInit(UINT64($74CD9A9327A282EA));
  nativePush64(UINT64(driver));
  nativePush64(UINT64(para_entity));
  nativePush64(PUINT64(@xTarget)^);
  nativePush64(PUINT64(@yTarget)^);
  nativePush64(PUINT64(@zTarget)^);
  nativeCall;
end;

function GET_VEHICLE_LOCK_ON_TARGET(veh: Vehicle; entity: PEntity): BOOL;
begin
  nativeInit(UINT64($8F5EBAB1F260CFCE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(entity));
  exit(BOOL(nativeCall^));
end;

procedure SET_FORCE_HD_VEHICLE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($97CE68CB032583F0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(veh: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($182F266C2D9E2BEB));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function GET_VEHICLE_PLATE_TYPE(veh: Vehicle): cint;
begin
  nativeInit(UINT64($9CCC9525BF2408E0));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure TRACK_VEHICLE_VISIBILITY(veh: Vehicle);
begin
  nativeInit(UINT64($64473AEFDCF47DCA));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_VEHICLE_VISIBLE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($AA0A52D24FB98293));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_GRAVITY(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($89F149B6131E57DA));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ENABLE_VEHICLE_SLIPSTREAMING(toggle: BOOL);
begin
  nativeInit(UINT64($E6C0C80B8C867537));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(toggle: BOOL);
begin
  nativeInit(UINT64($F051D9BFB6BA39C0));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($36492C2F0D134C56));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function IS_VEHICLE_PRODUCING_SLIP_STREAM(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($48C633E94A8142A7));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_INACTIVE_DURING_PLAYBACK(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($06582AFF74894C75));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_ACTIVE_DURING_PLAYBACK(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($DFFCEF48E511DB48));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_VEHICLE_SPRAYABLE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($8D474C8FAEFF6CDE));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_ENGINE_CAN_DEGRADE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($983765856F2564F9));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(veh: Vehicle; p1, p2: cint);
begin
  nativeInit(UINT64($F0E4BA16D1DB546C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(veh: Vehicle);
begin
  nativeInit(UINT64($F87D9F2301F7D206));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function IS_PLANE_LANDING_GEAR_INTACT(plane: Vehicle): BOOL;
begin
  nativeInit(UINT64($4198AB0022B15F87));
  nativePush64(UINT64(plane));
  exit(BOOL(nativeCall^));
end;

function ARE_PLANE_PROPELLERS_INTACT(plane: Vehicle): BOOL;
begin
  nativeInit(UINT64($755D6D5267CBBD7E));
  nativePush64(UINT64(plane));
  exit(BOOL(nativeCall^));
end;

function SET_PLANE_PROPELLER_HEALTH(plane: Vehicle; health: cfloat): BOOL;
begin
  nativeInit(UINT64($4C815EB175086F84));
  nativePush64(UINT64(plane));
  nativePush64(PUINT64(@health)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_CAN_DEFORM_WHEELS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($0CDDA42F9E360CA6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function IS_VEHICLE_STOLEN(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($4AF9BD80EEBEB453));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_IS_STOLEN(veh: Vehicle; isStolen: BOOL);
begin
  nativeInit(UINT64($67B2C79AA7FF5738));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(isStolen));
  nativeCall;
end;

procedure SET_PLANE_TURBULENCE_MULTIPLIER(veh: Vehicle; multiplier: cfloat);
begin
  nativeInit(UINT64($AD2D28A1AFDFF131));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

function ARE_WINGS_OF_PLANE_INTACT(plane: Vehicle): BOOL;
begin
  nativeInit(UINT64($5991A01434CE9677));
  nativePush64(UINT64(plane));
  exit(BOOL(nativeCall^));
end;

procedure ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(veh: Vehicle);
begin
  nativeInit(UINT64($B264C4D2F2B0A78B));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure DETACH_VEHICLE_FROM_CARGOBOB(veh, cargobob: Vehicle);
begin
  nativeInit(UINT64($0E21D3DF1051399D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(cargobob));
  nativeCall;
end;

function DETACH_VEHICLE_FROM_ANY_CARGOBOB(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($ADF7BE450512C12F));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function DETACH_ENTITY_FROM_CARGOBOB(cargobob: Vehicle; para_entity: Entity): BOOL;
begin
  nativeInit(UINT64($AF03011701811146));
  nativePush64(UINT64(cargobob));
  nativePush64(UINT64(para_entity));
  exit(BOOL(nativeCall^));
end;

function IS_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob, vehicleAttached: Vehicle): BOOL;
begin
  nativeInit(UINT64($D40148F22E81A1D9));
  nativePush64(UINT64(cargobob));
  nativePush64(UINT64(vehicleAttached));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_ATTACHED_TO_CARGOBOB(cargobob: Vehicle): Vehicle;
begin
  nativeInit(UINT64($873B82D42AC2B9E5));
  nativePush64(UINT64(cargobob));
  exit(Vehicle(nativeCall^));
end;

function GET_ENTITY_ATTACHED_TO_CARGOBOB(p0: Any): Entity;
begin
  nativeInit(UINT64($99093F60746708CA));
  nativePush64(UINT64(p0));
  exit(Entity(nativeCall^));
end;

procedure ATTACH_VEHICLE_TO_CARGOBOB(cargobob, veh: Vehicle; p2: cint; x, y, z: cfloat);
begin
  nativeInit(UINT64($4127F1D84E347769));
  nativePush64(UINT64(cargobob));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p2));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

procedure ATTACH_ENTITY_TO_CARGOBOB(p0, p1, p2, p3, p4, p5: Any);
begin
  nativeInit(UINT64($A1DD82F3CCF9A01E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativePush64(UINT64(p5));
  nativeCall;
end;

procedure SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(cargobob: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($571FEB383F629926));
  nativePush64(UINT64(cargobob));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(p0, p1: Any);
begin
  nativeInit(UINT64($1F34B0626C594380));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function CAN_CARGOBOB_PICK_UP_ENTITY(p0, p1: Any): BOOL;
begin
  nativeInit(UINT64($2C1D8B3B19E517CC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

function GET_ATTACHED_PICK_UP_HOOK_POSITION(cargobob: Vehicle): Vector3;
begin
  nativeInit(UINT64($CBDB9B923CACC92D));
  nativePush64(UINT64(cargobob));
  exit(PVector3(nativeCall)^);
end;

function DOES_CARGOBOB_HAVE_PICK_UP_ROPE(cargobob: Vehicle): BOOL;
begin
  nativeInit(UINT64($1821D91AD4B56108));
  nativePush64(UINT64(cargobob));
  exit(BOOL(nativeCall^));
end;

procedure CREATE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob: Vehicle; state: cint);
begin
  nativeInit(UINT64($7BEB0C7A235F6F3B));
  nativePush64(UINT64(cargobob));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(cargobob: Vehicle);
begin
  nativeInit(UINT64($9768CF648F54C804));
  nativePush64(UINT64(cargobob));
  nativeCall;
end;

procedure SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(cargobob: Vehicle; length1, length2: cfloat; p3: BOOL);
begin
  nativeInit(UINT64($877C1EAEAC531023));
  nativePush64(UINT64(cargobob));
  nativePush64(PUINT64(@length1)^);
  nativePush64(PUINT64(@length2)^);
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(p0, p1, p2: Any);
begin
  nativeInit(UINT64($C0ED6438E6D39BA8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(p0, p1: Any);
begin
  nativeInit(UINT64($CF1182F682F65307));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_ROPE_TYPE(p0, p1: Any);
begin
  nativeInit(UINT64($0D5F65A8F4EBDAB5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function DOES_CARGOBOB_HAVE_PICKUP_MAGNET(cargobob: Vehicle): BOOL;
begin
  nativeInit(UINT64($6E08BF5B3722BAC9));
  nativePush64(UINT64(cargobob));
  exit(BOOL(nativeCall^));
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(cargobob: Vehicle; isActive: BOOL);
begin
  nativeInit(UINT64($9A665550F8DA349B));
  nativePush64(UINT64(cargobob));
  nativePush64(UINT64(isActive));
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(cargobob: Vehicle; strength: cfloat);
begin
  nativeInit(UINT64($BCBFCD9D1DAC19E2));
  nativePush64(UINT64(cargobob));
  nativePush64(PUINT64(@strength)^);
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(cargobob: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($A17BAD153B51547E));
  nativePush64(UINT64(cargobob));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(cargobob: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($66979ACF5102FD2F));
  nativePush64(UINT64(cargobob));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(cargobob: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($6D8EAC07506291FB));
  nativePush64(UINT64(cargobob));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(cargobob: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($ED8286F71A819BAA));
  nativePush64(UINT64(cargobob));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(veh: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($685D5561680D088B));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(veh, cargobob: Vehicle);
begin
  nativeInit(UINT64($E301BD63E9E13CF0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(cargobob));
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(veh: Vehicle; p1, p2: BOOL);
begin
  nativeInit(UINT64($9BDDC73CC6A115D4));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($56EB5E94318D3FB6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function DOES_VEHICLE_HAVE_WEAPONS(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($25ECB9F8017D98E0));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($2C4A1590ABF43E8B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure DISABLE_VEHICLE_WEAPON(disabled: BOOL; weaponHash: Hash; veh: Vehicle; owner: Ped);
begin
  nativeInit(UINT64($F4FC6A6F67D8D856));
  nativePush64(UINT64(disabled));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(owner));
  nativeCall;
end;

function IS_VEHICLE_WEAPON_DISABLED(weaponHash: Hash; veh: Vehicle; owner: Ped): BOOL;
begin
  nativeInit(UINT64($563B65A643ED072E));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(owner));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_USED_FOR_PILOT_SCHOOL(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($E05DD0E9707003A3));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($21115BCD6E44656A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_CLASS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($29439776AAA00A62));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_CLASS_FROM_NAME(modelHash: Hash): cint;
begin
  nativeInit(UINT64($DEDF1C8BD47C2200));
  nativePush64(UINT64(modelHash));
  exit(cint(nativeCall^));
end;

procedure SET_PLAYERS_LAST_VEHICLE(veh: Vehicle);
begin
  nativeInit(UINT64($BCDF8BAF56C87B6A));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($300504B23BD3B711));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(veh: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($E5810AC70602F2F5));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($068F64F2470F9656));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($B8FBC8B1330CA9B4));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_IMPATIENCE_TIMER(veh: Vehicle; p1: Any);
begin
  nativeInit(UINT64($6A973569BA094650));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_HANDLING_OVERRIDE(veh: Vehicle; para_hash: Hash);
begin
  nativeInit(UINT64($10655FAB9915623D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(para_hash));
  nativeCall;
end;

procedure SET_VEHICLE_EXTENDED_REMOVAL_RANGE(veh: Vehicle; range: cint);
begin
  nativeInit(UINT64($79DF7E806202CE01));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(range));
  nativeCall;
end;

procedure SET_VEHICLE_STEERING_BIAS_SCALAR(p0: Any; p1: cfloat);
begin
  nativeInit(UINT64($9007A2F21DC108D4));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_HELI_CONTROL_LAGGING_RATE_SCALAR(helicopter: Vehicle; multiplier: cfloat);
begin
  nativeInit(UINT64($6E0859B530A365CC));
  nativePush64(UINT64(helicopter));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_VEHICLE_FRICTION_OVERRIDE(veh: Vehicle; friction: cfloat);
begin
  nativeInit(UINT64($1837AF7C627009BA));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@friction)^);
  nativeCall;
end;

procedure SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($A37B9A517B133349));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function ARE_PLANE_CONTROL_PANELS_INTACT(veh: Vehicle; p1: BOOL): BOOL;
begin
  nativeInit(UINT64($F78F94D60248C737));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_CEILING_HEIGHT(veh: Vehicle; height: cfloat);
begin
  nativeInit(UINT64($A46413066687A328));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@height)^);
  nativeCall;
end;

procedure SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($5E569EC46EC21CAE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure CLEAR_VEHICLE_ROUTE_HISTORY(veh: Vehicle);
begin
  nativeInit(UINT64($6D6AF961B72728AE));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function DOES_VEHICLE_EXIST_WITH_DECORATOR(decorator: PChar): Vehicle;
begin
  nativeInit(UINT64($956B409B984D9BF7));
  nativePush64(UINT64(decorator));
  exit(Vehicle(nativeCall^));
end;

procedure SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($41062318F23ED854));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_EXCLUSIVE_DRIVER(veh: Vehicle; _ped: Ped; index: cint);
begin
  nativeInit(UINT64($B5C51B5502E85E83));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(index));
  nativeCall;
end;

function IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(_ped: Ped; veh: Vehicle; outIndex: pcint): BOOL;
begin
  nativeInit(UINT64($B09D25E77C33EB3F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(outIndex));
  exit(BOOL(nativeCall^));
end;

procedure DISABLE_INDIVIDUAL_PLANE_PROPELLER(veh: Vehicle; propeller: cint);
begin
  nativeInit(UINT64($500873A45724C863));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(propeller));
  nativeCall;
end;

procedure SET_VEHICLE_FORCE_AFTERBURNER(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($B055A34527CB8FD7));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DONT_PROCESS_VEHICLE_GLASS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1087BC8EC540DAEB));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_WANTED_CONES_RESPONSE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($4AD280EB48B2D8E6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($B68CFAF83A02768D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(veh: Vehicle; p1: cfloat);
begin
  nativeInit(UINT64($0205F5365292D2EB));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

procedure SET_VEHICLE_READY_FOR_CLEANUP(p0: Any);
begin
  nativeInit(UINT64($CF9159024555488C));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_DISTANT_CARS_ENABLED(toggle: BOOL);
begin
  nativeInit(UINT64($F796359A959DF65D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_NEON_COLOUR(veh: Vehicle; r, g, b: cint);
begin
  nativeInit(UINT64($8E0A582209A62695));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure SET_VEHICLE_NEON_INDEX_COLOUR(veh: Vehicle; index: cint);
begin
  nativeInit(UINT64($B93B2867F7B479D1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(index));
  nativeCall;
end;

procedure GET_VEHICLE_NEON_COLOUR(veh: Vehicle; r, g, b: pcint);
begin
  nativeInit(UINT64($7619EEE8C886757F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(r));
  nativePush64(UINT64(g));
  nativePush64(UINT64(b));
  nativeCall;
end;

procedure SET_VEHICLE_NEON_ENABLED(veh: Vehicle; index: cint; toggle: BOOL);
begin
  nativeInit(UINT64($2AA720E4287BF269));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(index));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_NEON_ENABLED(veh: Vehicle; index: cint): BOOL;
begin
  nativeInit(UINT64($8C4B92553E4766A5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(index));
  exit(BOOL(nativeCall^));
end;

procedure SET_AMBIENT_VEHICLE_NEON_ENABLED(p0: BOOL);
begin
  nativeInit(UINT64($35E0654F4BAD7971));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SUPPRESS_NEONS_ON_VEHICLE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($83F813570FF519DE));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_SUPERDUMMY(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($B088E9A47AE6EDD5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REQUEST_VEHICLE_DIAL(veh: Vehicle);
begin
  nativeInit(UINT64($DBA3C090E3D74690));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function GET_VEHICLE_BODY_HEALTH(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($F271147EB7B40F12));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_VEHICLE_BODY_HEALTH(veh: Vehicle; value: cfloat);
begin
  nativeInit(UINT64($B77D05AC8C78AADB));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure GET_VEHICLE_SIZE(veh: Vehicle; out1, out2: PVector3);
begin
  nativeInit(UINT64($DF7E3EEB29642C38));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(out1));
  nativePush64(UINT64(out2));
  nativeCall;
end;

function GET_FAKE_SUSPENSION_LOWERING_AMOUNT(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($53952FD2BAA19F17));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(multiplier: cfloat);
begin
  nativeInit(UINT64($84FD40F56075E816));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

function GET_NUMBER_OF_VEHICLE_DOORS(veh: Vehicle): cint;
begin
  nativeInit(UINT64($92922A607497B14D));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_HYDRAULICS_CONTROL(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($28B18377EB6E25F6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CAN_ADJUST_GROUND_CLEARANCE(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($A7DCDF4DED40A8F4));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_VEHICLE_HEALTH_PERCENTAGE(veh: Vehicle; maxEngineHealth, maxPetrolTankHealth, maxBodyHealth, maxMainRotorHealth, maxTailRotorHealth, maxUnkHealth: cfloat): cfloat;
begin
  nativeInit(UINT64($B8EF61207C2393A9));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@maxEngineHealth)^);
  nativePush64(PUINT64(@maxPetrolTankHealth)^);
  nativePush64(PUINT64(@maxBodyHealth)^);
  nativePush64(PUINT64(@maxMainRotorHealth)^);
  nativePush64(PUINT64(@maxTailRotorHealth)^);
  nativePush64(PUINT64(@maxUnkHealth)^);
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_VEHICLE_IS_MERCENARY(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($D4C4642CB7F50B5D));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($C361AA040D6637A8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_VEHICLE_KERS_ALLOWED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($99C82F8A139F3E4E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_VEHICLE_HAS_KERS(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($50634E348C8D44EF));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_PLANE_RESIST_TO_EXPLOSION(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($E16142B94664DEFD));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_HELI_RESIST_TO_EXPLOSION(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($8074CC1886802912));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_BMX_EXTRA_TRICK_FORCES(p0: Any);
begin
  nativeInit(UINT64($26D99D5A82FD18E8));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(veh: Vehicle; wheelId: cint; value: cfloat);
begin
  nativeInit(UINT64($84EA99C62CB3EF0C));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelId));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

function GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(veh: Vehicle; wheelId: cint): cfloat;
begin
  nativeInit(UINT64($0BB5CBDDD0F25AE3));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelId));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_CAN_USE_HYDRAULICS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($1201E8A3290A3B98));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_HYDRAULIC_VEHICLE_STATE(veh: Vehicle; state: cint);
begin
  nativeInit(UINT64($8EA86DF356801C7D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_HYDRAULIC_WHEEL_STATE(veh: Vehicle; wheelId, state: cint; value: cfloat; p4: Any);
begin
  nativeInit(UINT64($C24075310A8B9CD1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelId));
  nativePush64(UINT64(state));
  nativePush64(PUINT64(@value)^);
  nativePush64(UINT64(p4));
  nativeCall;
end;

function HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(p0, p1: Any): BOOL;
begin
  nativeInit(UINT64($5BA68A0840D546AC));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(veh: Vehicle);
begin
  nativeInit(UINT64($4419966C9936071A));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_VEHICLE_BOBBLEHEAD_VELOCITY(x, y, p2: cfloat);
begin
  nativeInit(UINT64($870B8B7A766615C8));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@p2)^);
  nativeCall;
end;

function GET_VEHICLE_IS_DUMMY(p0: Any): BOOL;
begin
  nativeInit(UINT64($8533CAFDE1F0F336));
  nativePush64(UINT64(p0));
  exit(BOOL(nativeCall^));
end;

function SET_VEHICLE_DAMAGE_SCALE(veh: Vehicle; p1: cfloat): BOOL;
begin
  nativeInit(UINT64($4E20D2A627011E8E));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@p1)^);
  exit(BOOL(nativeCall^));
end;

function SET_VEHICLE_WEAPON_DAMAGE_SCALE(veh: Vehicle; multiplier: cfloat): BOOL;
begin
  nativeInit(UINT64($45A561A9421AB6AD));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@multiplier)^);
  exit(BOOL(nativeCall^));
end;

function SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(p0, p1: Any): BOOL;
begin
  nativeInit(UINT64($D4196117AF7BB974));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(BOOL(nativeCall^));
end;

procedure SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(p0, p1: Any);
begin
  nativeInit(UINT64($BB2333BB87DDD87F));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_BIKE_EASY_TO_LAND(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($73561D4425A021A2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_INVERT_VEHICLE_CONTROLS(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($5B91B229243351A8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_SPEED_BOOST_EFFECT_DISABLED(disabled: BOOL);
begin
  nativeInit(UINT64($7BBE7FF626A591FE));
  nativePush64(UINT64(disabled));
  nativeCall;
end;

procedure SET_SLOW_DOWN_EFFECT_DISABLED(disabled: BOOL);
begin
  nativeInit(UINT64($65B080555EA48149));
  nativePush64(UINT64(disabled));
  nativeCall;
end;

procedure SET_FORMATION_LEADER(veh: Vehicle; x, y, z, p4: cfloat);
begin
  nativeInit(UINT64($428AD3E26C8D9EB0));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@p4)^);
  nativeCall;
end;

procedure RESET_FORMATION_LEADER;
begin
  nativeInit(UINT64($E2F53F172B45EDE1));
  nativeCall;
end;

function GET_IS_BOAT_CAPSIZED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($BA91D045575699AD));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_ALLOW_RAMMING_SOOP_OR_RAMP(p0, p1: Any);
begin
  nativeInit(UINT64($80E3357FDEF45C21));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_SCRIPT_RAMP_IMPULSE_SCALE(veh: Vehicle; impulseScale: cfloat);
begin
  nativeInit(UINT64($EFC13B1CE30D755D));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@impulseScale)^);
  nativeCall;
end;

function GET_IS_DOOR_VALID(veh: Vehicle; doorId: cint): BOOL;
begin
  nativeInit(UINT64($645F4B6E8499F632));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(doorId));
  exit(BOOL(nativeCall^));
end;

procedure SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(veh: Vehicle; seconds: cfloat);
begin
  nativeInit(UINT64($E00F2AB100B76E89));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@seconds)^);
  nativeCall;
end;

function GET_HAS_ROCKET_BOOST(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($36D782F68B309BDA));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function IS_ROCKET_BOOST_ACTIVE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($3D34E80EED4AE3BE));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_ROCKET_BOOST_ACTIVE(veh: Vehicle; active: BOOL);
begin
  nativeInit(UINT64($81E1552E35DC3839));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(active));
  nativeCall;
end;

function GET_HAS_RETRACTABLE_WHEELS(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($DCA174A42133F08C));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_IS_WHEELS_RETRACTED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($1DA0DA9CB3F0C8BF));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_WHEELS_EXTENDED_INSTANTLY(veh: Vehicle);
begin
  nativeInit(UINT64($F660602546D27BA8));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_WHEELS_RETRACTED_INSTANTLY(veh: Vehicle);
begin
  nativeInit(UINT64($5335BE58C083E74E));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function GET_CAR_HAS_JUMP(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($9078C0C5EF8C19E9));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_USE_HIGHER_CAR_JUMP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($F06A16CA55D138D8));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($B2E0C0D6922D31F2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_WEAPON_RESTRICTED_AMMO(veh: Vehicle; weaponIndex, capacity: cint);
begin
  nativeInit(UINT64($44CD1F493DB2A0A6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(weaponIndex));
  nativePush64(UINT64(capacity));
  nativeCall;
end;

function GET_VEHICLE_WEAPON_RESTRICTED_AMMO(veh: Vehicle; weaponIndex: cint): cint;
begin
  nativeInit(UINT64($8181CE2F25CB9BB7));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(weaponIndex));
  exit(cint(nativeCall^));
end;

function GET_VEHICLE_HAS_PARACHUTE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($BC9CFF381338CB4F));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_VEHICLE_CAN_DEPLOY_PARACHUTE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($A916396DF4154EE3));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure VEHICLE_START_PARACHUTING(veh: Vehicle; active: BOOL);
begin
  nativeInit(UINT64($0BFFB028B3DD0A97));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(active));
  nativeCall;
end;

function IS_VEHICLE_PARACHUTE_DEPLOYED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($3DE51E9C80B116CF));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($28D034A93FE31BF5));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(p0, p1: Any);
begin
  nativeInit(UINT64($1BBAC99C0BC53656));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(p0, p1: Any);
begin
  nativeInit(UINT64($756AE6E962168A04));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure VEHICLE_SET_JET_WASH_FORCE_ENABLED(p0: Any);
begin
  nativeInit(UINT64($9D30687C57BAA0BB));
  nativePush64(UINT64(p0));
  nativeCall;
end;

procedure SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($86B4B6212CB8B627));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(toggle: BOOL);
begin
  nativeInit(UINT64($41290B40FA63E6DA));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure _SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS(toggle: BOOL);
begin
  nativeInit(UINT64($1980F68872CC2C3D));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(veh: Vehicle; modelHash: Hash);
begin
  nativeInit(UINT64($4D610C6B56031351));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(modelHash));
  nativeCall;
end;

procedure VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(veh: Vehicle; textureVariation: cint);
begin
  nativeInit(UINT64($A74AD2439468C883));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(textureVariation));
  nativeCall;
end;

function VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(p0, p1: Any): cint;
begin
  nativeInit(UINT64($0419B167EE128F33));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(p0, p1: Any): cint;
begin
  nativeInit(UINT64($F3B0E0AED097A3F5));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function VEHICLE_SET_OVERRIDE_SIDE_RATIO(p0, p1: Any): cint;
begin
  nativeInit(UINT64($D3E51C0AB8C26EEE));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  exit(cint(nativeCall^));
end;

function GET_ALL_VEHICLES(vehsStruct: PAny): cint;
begin
  nativeInit(UINT64($9B8E1BF04B51F2E8));
  nativePush64(UINT64(vehsStruct));
  exit(cint(nativeCall^));
end;

procedure SET_CARGOBOB_EXTA_PICKUP_RANGE(p0, p1: Any);
begin
  nativeInit(UINT64($72BECCF4B829522E));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_OVERRIDE_VEHICLE_DOOR_TORQUE(p0, p1, p2: Any);
begin
  nativeInit(UINT64($66E3AAFACE2D1EB8));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_WHEELIE_ENABLED(veh: Vehicle; enabled: BOOL);
begin
  nativeInit(UINT64($1312DDD8385AEE4E));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(p0, p1: Any);
begin
  nativeInit(UINT64($EDBC8405B3895CC9));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(veh: Vehicle; value: cfloat);
begin
  nativeInit(UINT64($26E13D440E7F6064));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@value)^);
  nativeCall;
end;

procedure SET_TRAILER_ATTACHMENT_ENABLED(p0, p1: Any);
begin
  nativeInit(UINT64($2FA2494B47FDD009));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_ROCKET_BOOST_FILL(veh: Vehicle; percentage: cfloat);
begin
  nativeInit(UINT64($FEB2DDED3509562E));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@percentage)^);
  nativeCall;
end;

procedure SET_GLIDER_ACTIVE(veh: Vehicle; state: BOOL);
begin
  nativeInit(UINT64($544996C0081ABDEB));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(state));
  nativeCall;
end;

procedure SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(veh: Vehicle; shouldReset: BOOL);
begin
  nativeInit(UINT64($78CEEE41F49F421F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(shouldReset));
  nativeCall;
end;

procedure SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(veh: Vehicle; disable: BOOL);
begin
  nativeInit(UINT64($AF60E6A2936F982A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(disable));
  nativeCall;
end;

procedure SET_GROUND_EFFECT_REDUCES_DRAG(toggle: BOOL);
begin
  nativeInit(UINT64($430A7631A84C9BE7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_MAP_COLLISION(veh: Vehicle);
begin
  nativeInit(UINT64($75627043C6AA90AD));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_DISABLE_PED_STAND_ON_TOP(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($8235F1BEAD557629));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DAMAGE_SCALES(veh: Vehicle; p1, p2, p3, p4: Any);
begin
  nativeInit(UINT64($9640E30A7F395E4B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure SET_PLANE_SECTION_DAMAGE_SCALE(veh: Vehicle; p1, p2: Any);
begin
  nativeInit(UINT64($0BBB9A7A8FFE931B));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($94A68DA412C4007D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_BOMB_AMMO(veh: Vehicle; bombCount: cint);
begin
  nativeInit(UINT64($F4B2ED59DEB5D774));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(bombCount));
  nativeCall;
end;

function GET_VEHICLE_BOMB_AMMO(veh: Vehicle): cint;
begin
  nativeInit(UINT64($EA12BD130D7569A1));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_VEHICLE_COUNTERMEASURE_AMMO(veh: Vehicle; counterMeasureCount: cint);
begin
  nativeInit(UINT64($9BDA23BF666F0855));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(counterMeasureCount));
  nativeCall;
end;

function GET_VEHICLE_COUNTERMEASURE_AMMO(veh: Vehicle): cint;
begin
  nativeInit(UINT64($F846AA63DF56B804));
  nativePush64(UINT64(veh));
  exit(cint(nativeCall^));
end;

procedure SET_HELI_COMBAT_OFFSET(veh: Vehicle; x, y, z: cfloat);
begin
  nativeInit(UINT64($0A3F820A9A9A9AC5));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

function GET_CAN_VEHICLE_BE_PLACED_HERE(veh: Vehicle; x, y, z, rotX, rotY, rotZ: cfloat; p7: cint; p8: Any): BOOL;
begin
  nativeInit(UINT64($51F30DB60626A20E));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@rotX)^);
  nativePush64(PUINT64(@rotY)^);
  nativePush64(PUINT64(@rotZ)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  exit(BOOL(nativeCall^));
end;

procedure SET_DISABLE_AUTOMATIC_CRASH_TASK(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($97841634EF7DF1D6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_SPECIAL_FLIGHT_MODE_RATIO(veh: Vehicle; ratio: cfloat);
begin
  nativeInit(UINT64($D138FA15C9776837));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@ratio)^);
  nativeCall;
end;

procedure SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh: Vehicle; targetRatio: cfloat);
begin
  nativeInit(UINT64($438B3D7CA026FE91));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@targetRatio)^);
  nativeCall;
end;

procedure SET_SPECIAL_FLIGHT_MODE_ALLOWED(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($F1211889DF15A763));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_HOVER_MODE_FLIGHT(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($2D55FE374D5FDB91));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_OUTRIGGERS_DEPLOYED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($3A9128352EAC9E85));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function FIND_SPAWN_COORDINATES_FOR_HELI(_ped: Ped): Vector3;
begin
  nativeInit(UINT64($8DC9675797123522));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^);
end;

procedure SET_DEPLOY_FOLDING_WINGS(veh: Vehicle; deploy, p2: BOOL);
begin
  nativeInit(UINT64($B251E0B33E58B424));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(deploy));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function ARE_FOLDING_WINGS_DEPLOYED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($AEF12960FA943792));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure _SET_DEPLOY_MISSILE_BAYS(veh: Vehicle; deploy: BOOL);
begin
  nativeInit(UINT64($0C02468829E4AA65));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(deploy));
  nativeCall;
end;

function _ARE_MISSILE_BAYS_DEPLOYED(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($EA4743874D515F13));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($AA653AE61924B0A0));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_TURRET_HIDDEN(veh: Vehicle; index: cint; toggle: BOOL);
begin
  nativeInit(UINT64($C60060EB0D8AC7B1));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(index));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_HOVER_MODE_WING_RATIO(veh: Vehicle; ratio: cfloat);
begin
  nativeInit(UINT64($70A252F60A3E036B));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@ratio)^);
  nativeCall;
end;

procedure SET_DISABLE_TURRET_MOVEMENT(veh: Vehicle; turretId: cint);
begin
  nativeInit(UINT64($E615BB7A7752C76A));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(turretId));
  nativeCall;
end;

procedure SET_FORCE_FIX_LINK_MATRICES(veh: Vehicle);
begin
  nativeInit(UINT64($887FA38787DE8C72));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_TRANSFORM_RATE_FOR_ANIMATION(veh: Vehicle; transformRate: cfloat);
begin
  nativeInit(UINT64($498218259FB7C72D));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@transformRate)^);
  nativeCall;
end;

procedure SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($41B9FB92EDED32A6));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_COMBAT_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($36DE109527A2C0C4));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_DETONATION_MODE(toggle: BOOL);
begin
  nativeInit(UINT64($82E0AC411E41A5B4));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_VEHICLE_SHUNT_ON_STICK(toggle: BOOL);
begin
  nativeInit(UINT64($99A05839C46CE316));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_IS_VEHICLE_SHUNTING(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($A2459F72C14E2E8D));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($E8718FAF591FD224));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

function GET_LAST_SHUNT_VEHICLE(veh: Vehicle): Vehicle;
begin
  nativeInit(UINT64($04F2FA6E234162F7));
  nativePush64(UINT64(veh));
  exit(Vehicle(nativeCall^));
end;

procedure SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(toggle: BOOL);
begin
  nativeInit(UINT64($143921E45EC44D62));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_OVERRIDE_NITROUS_LEVEL(veh: Vehicle; toggle: BOOL; level, power, rechargeTime: cfloat; disableSound: BOOL);
begin
  nativeInit(UINT64($C8E9B6B71B8E660D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativePush64(PUINT64(@level)^);
  nativePush64(PUINT64(@power)^);
  nativePush64(PUINT64(@rechargeTime)^);
  nativePush64(UINT64(disableSound));
  nativeCall;
end;

procedure SET_NITROUS_IS_ACTIVE(veh: Vehicle; enabled: BOOL);
begin
  nativeInit(UINT64($465EEA70AF251045));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(enabled));
  nativeCall;
end;

procedure _SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER(veh: Vehicle; modifier: cfloat);
begin
  nativeInit(UINT64($AFD262ACCA64479A));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@modifier)^);
  nativeCall;
end;

procedure _SET_DRIFT_SLIP_ANGLE_LIMITS(veh: Vehicle; durationScalar, amplitudeScalar, slipAngleLimit: cfloat);
begin
  nativeInit(UINT64($DAF4C98C18AC6F06));
  nativePush64(UINT64(veh));
  nativePush64(PUINT64(@durationScalar)^);
  nativePush64(PUINT64(@amplitudeScalar)^);
  nativePush64(PUINT64(@slipAngleLimit)^);
  nativeCall;
end;

procedure _SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS(veh: Vehicle; time: cint);
begin
  nativeInit(UINT64($16CFBC5E7EB32861));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(time));
  nativeCall;
end;

procedure FULLY_CHARGE_NITROUS(veh: Vehicle);
begin
  nativeInit(UINT64($1A2BCC8C636F9226));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function _GET_REMAINING_NITROUS_DURATION(veh: Vehicle): cfloat;
begin
  nativeInit(UINT64($BEC4B8653462450E));
  nativePush64(UINT64(veh));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function IS_NITROUS_ACTIVE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($491E822B2C464FE4));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_NITROUS(veh: Vehicle);
begin
  nativeInit(UINT64($C889AE921400E1ED));
  nativePush64(UINT64(veh));
  nativeCall;
end;

procedure SET_INCREASE_WHEEL_CRUSH_DAMAGE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($2970EAA18FD5E42F));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_DISABLE_WEAPON_BLADE_FORCES(toggle: BOOL);
begin
  nativeInit(UINT64($211E95CE9903940C));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(toggle: BOOL);
begin
  nativeInit(UINT64($5BBCF35BF6E456F7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_DOES_VEHICLE_HAVE_TOMBSTONE(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($71AFB258CCED3A27));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure HIDE_TOMBSTONE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($AE71FB656C600587));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure APPLY_EMP_EFFECT(veh: Vehicle);
begin
  nativeInit(UINT64($249249D74F813EB2));
  nativePush64(UINT64(veh));
  nativeCall;
end;

function GET_IS_VEHICLE_DISABLED_BY_EMP(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($0506ED94363AD905));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure SET_DISABLE_RETRACTING_WEAPON_BLADES(toggle: BOOL);
begin
  nativeInit(UINT64($8F0D5BA1C2CC91D7));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_TYRE_HEALTH(veh: Vehicle; wheelIndex: cint): cfloat;
begin
  nativeInit(UINT64($55EAB010FAEE9380));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelIndex));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_TYRE_HEALTH(veh: Vehicle; wheelIndex: cint; health: cfloat);
begin
  nativeInit(UINT64($74C68EF97645E79D));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelIndex));
  nativePush64(PUINT64(@health)^);
  nativeCall;
end;

function GET_TYRE_WEAR_RATE(veh: Vehicle; wheelIndex: cint): cfloat;
begin
  nativeInit(UINT64($6E387895952F4F71));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelIndex));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_TYRE_WEAR_RATE(veh: Vehicle; wheelIndex: cint; multiplier: cfloat);
begin
  nativeInit(UINT64($01894E2EDE923CA2));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelIndex));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_TYRE_WEAR_RATE_SCALE(veh: Vehicle; wheelIndex: cint; multiplier: cfloat);
begin
  nativeInit(UINT64($392183BB9EA57697));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelIndex));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(veh: Vehicle; wheelIndex: cint; multiplier: cfloat);
begin
  nativeInit(UINT64($C970D0E0FC31D768));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(wheelIndex));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(veh: Vehicle; p1: cint);
begin
  nativeInit(UINT64($F8B49F5BA7F850E7));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_REDUCED_SUSPENSION_FORCE(veh: Vehicle; enable: BOOL);
begin
  nativeInit(UINT64($3A375167F5782A65));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(enable));
  nativeCall;
end;

procedure SET_DRIFT_TYRES(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($5AC79C98C5C17F05));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_DRIFT_TYRES_SET(veh: Vehicle): BOOL;
begin
  nativeInit(UINT64($2F5A72430E78C8D3));
  nativePush64(UINT64(veh));
  exit(BOOL(nativeCall^));
end;

procedure NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($EC0C1D4922AF9754));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(veh: Vehicle; p1: BOOL);
begin
  nativeInit(UINT64($EF9D388F8D377F44));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure _SET_ALLOW_COLLISION_WHEN_IN_VEHICLE(veh: Vehicle; toggle: BOOL);
begin
  nativeInit(UINT64($27D27223E8EF22ED));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function _IS_VEHICLE_GEN9_EXCLUSIVE_MODEL(vehicleModel: Hash): BOOL;
begin
  nativeInit(UINT64($6638C0F19DE692FE));
  nativePush64(UINT64(vehicleModel));
  exit(BOOL(nativeCall^));
end;

function _GET_VEHICLE_MAX_EXHAUST_BONE_COUNT: cint;
begin
  nativeInit(UINT64($3EE18B00CD86C54F));
  exit(cint(nativeCall^));
end;

function _GET_VEHICLE_EXHAUST_BONE(veh: Vehicle; index: cint; boneIndex: pcint; axisX: PBOOL): BOOL;
begin
  nativeInit(UINT64($E728F090D538CB18));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(index));
  nativePush64(UINT64(boneIndex));
  nativePush64(UINT64(axisX));
  exit(BOOL(nativeCall^));
end;

function GET_WATER_HEIGHT(x, y, z: cfloat; height: pcfloat): BOOL;
begin
  nativeInit(UINT64($F6829842C06AE524));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(height));
  exit(BOOL(nativeCall^));
end;

function GET_WATER_HEIGHT_NO_WAVES(x, y, z: cfloat; height: pcfloat): BOOL;
begin
  nativeInit(UINT64($8EE6B53CE13A9794));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(height));
  exit(BOOL(nativeCall^));
end;

function TEST_PROBE_AGAINST_WATER(x1, y1, z1, x2, y2, z2: cfloat; _result: PVector3): BOOL;
begin
  nativeInit(UINT64($FFA5D878809819DB));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(_result));
  exit(BOOL(nativeCall^));
end;

function TEST_PROBE_AGAINST_ALL_WATER(x1, y1, z1, x2, y2, z2: cfloat; flags: cint; waterHeight: pcfloat): cint;
begin
  nativeInit(UINT64($8974647ED222EA5F));
  nativePush64(PUINT64(@x1)^);
  nativePush64(PUINT64(@y1)^);
  nativePush64(PUINT64(@z1)^);
  nativePush64(PUINT64(@x2)^);
  nativePush64(PUINT64(@y2)^);
  nativePush64(PUINT64(@z2)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(waterHeight));
  exit(cint(nativeCall^));
end;

function TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(x, y, z: cfloat; flags: cint; waterHeight: pcfloat): cint;
begin
  nativeInit(UINT64($2B3451FA1E3142E2));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(flags));
  nativePush64(UINT64(waterHeight));
  exit(cint(nativeCall^));
end;

procedure MODIFY_WATER(x, y, radius, height: cfloat);
begin
  nativeInit(UINT64($C443FD757C3BA637));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@height)^);
  nativeCall;
end;

function ADD_EXTRA_CALMING_QUAD(xLow, yLow, xHigh, yHigh, height: cfloat): cint;
begin
  nativeInit(UINT64($FDBF4CDBC07E1706));
  nativePush64(PUINT64(@xLow)^);
  nativePush64(PUINT64(@yLow)^);
  nativePush64(PUINT64(@xHigh)^);
  nativePush64(PUINT64(@yHigh)^);
  nativePush64(PUINT64(@height)^);
  exit(cint(nativeCall^));
end;

procedure REMOVE_EXTRA_CALMING_QUAD(calmingQuad: cint);
begin
  nativeInit(UINT64($B1252E3E59A82AAF));
  nativePush64(UINT64(calmingQuad));
  nativeCall;
end;

procedure SET_DEEP_OCEAN_SCALER(intensity: cfloat);
begin
  nativeInit(UINT64($B96B00E976BE977F));
  nativePush64(PUINT64(@intensity)^);
  nativeCall;
end;

function GET_DEEP_OCEAN_SCALER: cfloat;
begin
  nativeInit(UINT64($2B2A2CC86778B619));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_CALMED_WAVE_HEIGHT_SCALER(height: cfloat);
begin
  nativeInit(UINT64($547237AA71AB44DE));
  nativePush64(PUINT64(@height)^);
  nativeCall;
end;

procedure RESET_DEEP_OCEAN_SCALER;
begin
  nativeInit(UINT64($5E5E99285AE812DB));
  nativeCall;
end;

procedure ENABLE_LASER_SIGHT_RENDERING(toggle: BOOL);
begin
  nativeInit(UINT64($C8B46D7727D864AA));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_WEAPON_COMPONENT_TYPE_MODEL(componentHash: Hash): Hash;
begin
  nativeInit(UINT64($0DB57B41EC1DB083));
  nativePush64(UINT64(componentHash));
  exit(Hash(nativeCall^));
end;

function GET_WEAPONTYPE_MODEL(weaponHash: Hash): Hash;
begin
  nativeInit(UINT64($F46CDC33180FDA94));
  nativePush64(UINT64(weaponHash));
  exit(Hash(nativeCall^));
end;

function GET_WEAPONTYPE_SLOT(weaponHash: Hash): Hash;
begin
  nativeInit(UINT64($4215460B9B8B7FA0));
  nativePush64(UINT64(weaponHash));
  exit(Hash(nativeCall^));
end;

function GET_WEAPONTYPE_GROUP(weaponHash: Hash): Hash;
begin
  nativeInit(UINT64($C3287EE3050FB74C));
  nativePush64(UINT64(weaponHash));
  exit(Hash(nativeCall^));
end;

function GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(componentHash: Hash): cint;
begin
  nativeInit(UINT64($6558AC7C17BFEF58));
  nativePush64(UINT64(componentHash));
  exit(cint(nativeCall^));
end;

function GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(componentHash: Hash; extraComponentIndex: cint): Hash;
begin
  nativeInit(UINT64($4D1CB8DC40208A17));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(extraComponentIndex));
  exit(Hash(nativeCall^));
end;

procedure SET_CURRENT_PED_WEAPON(_ped: Ped; weaponHash: Hash; bForceInHand: BOOL);
begin
  nativeInit(UINT64($ADF692B254977C0C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(bForceInHand));
  nativeCall;
end;

function GET_CURRENT_PED_WEAPON(_ped: Ped; weaponHash: PHash; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($3A87E44BB9A01D54));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function GET_CURRENT_PED_WEAPON_ENTITY_INDEX(_ped: Ped; p1: Any): Entity;
begin
  nativeInit(UINT64($3B390A939AF0B5FC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(Entity(nativeCall^));
end;

function GET_BEST_PED_WEAPON(_ped: Ped; p1: BOOL): Hash;
begin
  nativeInit(UINT64($8483E98E8B888AE2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(Hash(nativeCall^));
end;

function SET_CURRENT_PED_VEHICLE_WEAPON(_ped: Ped; weaponHash: Hash): BOOL;
begin
  nativeInit(UINT64($75C55983C2C39DAA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  exit(BOOL(nativeCall^));
end;

function GET_CURRENT_PED_VEHICLE_WEAPON(_ped: Ped; weaponHash: PHash): BOOL;
begin
  nativeInit(UINT64($1017582BCD3832DC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(_ped: Ped);
begin
  nativeInit(UINT64($50276EF8172F5F12));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function IS_PED_ARMED(_ped: Ped; typeFlags: cint): BOOL;
begin
  nativeInit(UINT64($475768A975D5AD17));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(typeFlags));
  exit(BOOL(nativeCall^));
end;

function IS_WEAPON_VALID(weaponHash: Hash): BOOL;
begin
  nativeInit(UINT64($937C71165CF334B3));
  nativePush64(UINT64(weaponHash));
  exit(BOOL(nativeCall^));
end;

function HAS_PED_GOT_WEAPON(_ped: Ped; weaponHash: Hash; p2: BOOL): BOOL;
begin
  nativeInit(UINT64($8DECB02F88F428BC));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(p2));
  exit(BOOL(nativeCall^));
end;

function IS_PED_WEAPON_READY_TO_SHOOT(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($B80CA294F2F26749));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function GET_PED_WEAPONTYPE_IN_SLOT(_ped: Ped; weaponSlot: Hash): Hash;
begin
  nativeInit(UINT64($EFFED78E9011134D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponSlot));
  exit(Hash(nativeCall^));
end;

function GET_AMMO_IN_PED_WEAPON(_ped: Ped; weaponhash: Hash): cint;
begin
  nativeInit(UINT64($015A522136D7F951));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponhash));
  exit(cint(nativeCall^));
end;

procedure ADD_AMMO_TO_PED(_ped: Ped; weaponHash: Hash; ammo: cint);
begin
  nativeInit(UINT64($78F0424C34306220));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammo));
  nativeCall;
end;

procedure SET_PED_AMMO(_ped: Ped; weaponHash: Hash; ammo: cint; p3: BOOL);
begin
  nativeInit(UINT64($14E56BC5B5DB6A19));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammo));
  nativePush64(UINT64(p3));
  nativeCall;
end;

procedure SET_PED_INFINITE_AMMO(_ped: Ped; toggle: BOOL; weaponHash: Hash);
begin
  nativeInit(UINT64($3EDCB0505123623B));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativePush64(UINT64(weaponHash));
  nativeCall;
end;

procedure SET_PED_INFINITE_AMMO_CLIP(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($183DADC6AA953186));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_STUN_GUN_FINITE_AMMO(p0, p1: Any);
begin
  nativeInit(UINT64($24C024BA8379A70A));
  nativePush64(UINT64(p0));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure GIVE_WEAPON_TO_PED(_ped: Ped; weaponHash: Hash; ammoCount: cint; isHidden, bForceInHand: BOOL);
begin
  nativeInit(UINT64($BF0FD6E56C964FCB));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammoCount));
  nativePush64(UINT64(isHidden));
  nativePush64(UINT64(bForceInHand));
  nativeCall;
end;

procedure GIVE_DELAYED_WEAPON_TO_PED(_ped: Ped; weaponHash: Hash; ammoCount: cint; bForceInHand: BOOL);
begin
  nativeInit(UINT64($B282DC6EBD803C75));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammoCount));
  nativePush64(UINT64(bForceInHand));
  nativeCall;
end;

procedure REMOVE_ALL_PED_WEAPONS(_ped: Ped; p1: BOOL);
begin
  nativeInit(UINT64($F25DF915FA38C5F3));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure REMOVE_WEAPON_FROM_PED(_ped: Ped; weaponHash: Hash);
begin
  nativeInit(UINT64($4899CB088EDF59B8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativeCall;
end;

procedure HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($6F6981D2253C208F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_PED_CURRENT_WEAPON_VISIBLE(_ped: Ped; visible, deselectWeapon, p3, p4: BOOL);
begin
  nativeInit(UINT64($0725A4CCFDED9A70));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(visible));
  nativePush64(UINT64(deselectWeapon));
  nativePush64(UINT64(p3));
  nativePush64(UINT64(p4));
  nativeCall;
end;

procedure SET_PED_DROPS_WEAPONS_WHEN_DEAD(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($476AE72C1D19D1A8));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function HAS_PED_BEEN_DAMAGED_BY_WEAPON(_ped: Ped; weaponHash: Hash; weaponType: cint): BOOL;
begin
  nativeInit(UINT64($2D343D2219CD027A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(weaponType));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_PED_LAST_WEAPON_DAMAGE(_ped: Ped);
begin
  nativeInit(UINT64($0E98F88A24C5F4B8));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(para_entity: Entity; weaponHash: Hash; weaponType: cint): BOOL;
begin
  nativeInit(UINT64($131D401334815E94));
  nativePush64(UINT64(para_entity));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(weaponType));
  exit(BOOL(nativeCall^));
end;

procedure CLEAR_ENTITY_LAST_WEAPON_DAMAGE(para_entity: Entity);
begin
  nativeInit(UINT64($AC678E40BE7C74D2));
  nativePush64(UINT64(para_entity));
  nativeCall;
end;

procedure SET_PED_DROPS_WEAPON(_ped: Ped);
begin
  nativeInit(UINT64($6B7513D9966FBEC0));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

procedure SET_PED_DROPS_INVENTORY_WEAPON(_ped: Ped; weaponHash: Hash; xOffset, yOffset, zOffset: cfloat; ammoCount: cint);
begin
  nativeInit(UINT64($208A1888007FC0E6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(PUINT64(@xOffset)^);
  nativePush64(PUINT64(@yOffset)^);
  nativePush64(PUINT64(@zOffset)^);
  nativePush64(UINT64(ammoCount));
  nativeCall;
end;

function GET_MAX_AMMO_IN_CLIP(_ped: Ped; weaponHash: Hash; p2: BOOL): cint;
begin
  nativeInit(UINT64($A38DCFFCEA8962FA));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(p2));
  exit(cint(nativeCall^));
end;

function GET_AMMO_IN_CLIP(_ped: Ped; weaponHash: Hash; ammo: pcint): BOOL;
begin
  nativeInit(UINT64($2E1202248937775C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammo));
  exit(BOOL(nativeCall^));
end;

function SET_AMMO_IN_CLIP(_ped: Ped; weaponHash: Hash; ammo: cint): BOOL;
begin
  nativeInit(UINT64($DCD2A934D65CB497));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammo));
  exit(BOOL(nativeCall^));
end;

function GET_MAX_AMMO(_ped: Ped; weaponHash: Hash; ammo: pcint): BOOL;
begin
  nativeInit(UINT64($DC16122C7A20C933));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammo));
  exit(BOOL(nativeCall^));
end;

function GET_MAX_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash; ammo: pcint): BOOL;
begin
  nativeInit(UINT64($585847C5E4E11709));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ammoTypeHash));
  nativePush64(UINT64(ammo));
  exit(BOOL(nativeCall^));
end;

procedure ADD_PED_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash; ammo: cint);
begin
  nativeInit(UINT64($2472622CE1F2D45F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ammoTypeHash));
  nativePush64(UINT64(ammo));
  nativeCall;
end;

procedure SET_PED_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash; ammo: cint);
begin
  nativeInit(UINT64($5FD1E1F011E76D7E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ammoTypeHash));
  nativePush64(UINT64(ammo));
  nativeCall;
end;

function GET_PED_AMMO_BY_TYPE(_ped: Ped; ammoTypeHash: Hash): cint;
begin
  nativeInit(UINT64($39D22031557946C1));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(ammoTypeHash));
  exit(cint(nativeCall^));
end;

procedure SET_PED_AMMO_TO_DROP(_ped: Ped; p1: cint);
begin
  nativeInit(UINT64($A4EFEF9440A5B0EF));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  nativeCall;
end;

procedure SET_PICKUP_AMMO_AMOUNT_SCALER(p0: cfloat);
begin
  nativeInit(UINT64($E620FD3512A04F18));
  nativePush64(PUINT64(@p0)^);
  nativeCall;
end;

function GET_PED_AMMO_TYPE_FROM_WEAPON(_ped: Ped; weaponHash: Hash): Hash;
begin
  nativeInit(UINT64($7FEAD38B326B9F74));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  exit(Hash(nativeCall^));
end;

function GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(_ped: Ped; weaponHash: Hash): Hash;
begin
  nativeInit(UINT64($F489B44DD5AF4BD9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  exit(Hash(nativeCall^));
end;

function GET_PED_LAST_WEAPON_IMPACT_COORD(_ped: Ped; coords: PVector3): BOOL;
begin
  nativeInit(UINT64($6C4D0409BA1A2BC2));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(coords));
  exit(BOOL(nativeCall^));
end;

procedure SET_PED_GADGET(_ped: Ped; gadgetHash: Hash; p2: BOOL);
begin
  nativeInit(UINT64($D0D7B1E680ED4A1A));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(gadgetHash));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function GET_IS_PED_GADGET_EQUIPPED(_ped: Ped; gadgetHash: Hash): BOOL;
begin
  nativeInit(UINT64($F731332072F5156C));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(gadgetHash));
  exit(BOOL(nativeCall^));
end;

function GET_SELECTED_PED_WEAPON(_ped: Ped): Hash;
begin
  nativeInit(UINT64($0A6DB4965674D243));
  nativePush64(UINT64(_ped));
  exit(Hash(nativeCall^));
end;

procedure EXPLODE_PROJECTILES(_ped: Ped; weaponHash: Hash; p2: BOOL);
begin
  nativeInit(UINT64($FC4BD125DE7611E4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(p2));
  nativeCall;
end;

procedure REMOVE_ALL_PROJECTILES_OF_TYPE(weaponHash: Hash; explode: BOOL);
begin
  nativeInit(UINT64($FC52E0F37E446528));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(explode));
  nativeCall;
end;

function GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($840F03E9041E2C9C));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(_ped: Ped): cfloat;
begin
  nativeInit(UINT64($814C9D19DFD69679));
  nativePush64(UINT64(_ped));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(driver: Ped; veh: Vehicle; weaponHash: Hash; p3: Any): BOOL;
begin
  nativeInit(UINT64($717C8481234E3B88));
  nativePush64(UINT64(driver));
  nativePush64(UINT64(veh));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(p3));
  exit(BOOL(nativeCall^));
end;

procedure GIVE_WEAPON_COMPONENT_TO_PED(_ped: Ped; weaponHash, componentHash: Hash);
begin
  nativeInit(UINT64($D966D51AA5B28BB9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(componentHash));
  nativeCall;
end;

procedure REMOVE_WEAPON_COMPONENT_FROM_PED(_ped: Ped; weaponHash, componentHash: Hash);
begin
  nativeInit(UINT64($1E8BE90C74FB4C09));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(componentHash));
  nativeCall;
end;

function HAS_PED_GOT_WEAPON_COMPONENT(_ped: Ped; weaponHash, componentHash: Hash): BOOL;
begin
  nativeInit(UINT64($C593212475FAE340));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(componentHash));
  exit(BOOL(nativeCall^));
end;

function IS_PED_WEAPON_COMPONENT_ACTIVE(_ped: Ped; weaponHash, componentHash: Hash): BOOL;
begin
  nativeInit(UINT64($0D78DE0572D3969E));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(componentHash));
  exit(BOOL(nativeCall^));
end;

function REFILL_AMMO_INSTANTLY(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($8C0D57EA686FAD87));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function MAKE_PED_RELOAD(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($20AE33F3AC9C0033));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

procedure REQUEST_WEAPON_ASSET(weaponHash: Hash; p1, p2: cint);
begin
  nativeInit(UINT64($5443438F033E29C3));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(p1));
  nativePush64(UINT64(p2));
  nativeCall;
end;

function HAS_WEAPON_ASSET_LOADED(weaponHash: Hash): BOOL;
begin
  nativeInit(UINT64($36E353271F0E90EE));
  nativePush64(UINT64(weaponHash));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_WEAPON_ASSET(weaponHash: Hash);
begin
  nativeInit(UINT64($AA08EF13F341C8FC));
  nativePush64(UINT64(weaponHash));
  nativeCall;
end;

function CREATE_WEAPON_OBJECT(weaponHash: Hash; ammoCount: cint; x, y, z: cfloat; showWorldModel: BOOL; scale: cfloat; p7, p8, p9: Any): GTAObject;
begin
  nativeInit(UINT64($9541D3CF0D398F36));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(ammoCount));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(UINT64(showWorldModel));
  nativePush64(PUINT64(@scale)^);
  nativePush64(UINT64(p7));
  nativePush64(UINT64(p8));
  nativePush64(UINT64(p9));
  exit(GTAObject(nativeCall^));
end;

procedure GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(weaponObject: GTAObject; componentHash: Hash);
begin
  nativeInit(UINT64($33E179436C0B31DB));
  nativePush64(UINT64(weaponObject));
  nativePush64(UINT64(componentHash));
  nativeCall;
end;

procedure REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(obj: GTAObject; componentHash: Hash);
begin
  nativeInit(UINT64($F7D82B0D66777611));
  nativePush64(UINT64(obj));
  nativePush64(UINT64(componentHash));
  nativeCall;
end;

function HAS_WEAPON_GOT_WEAPON_COMPONENT(weapon: GTAObject; componentHash: Hash): BOOL;
begin
  nativeInit(UINT64($76A18844E743BF91));
  nativePush64(UINT64(weapon));
  nativePush64(UINT64(componentHash));
  exit(BOOL(nativeCall^));
end;

procedure GIVE_WEAPON_OBJECT_TO_PED(weaponObject: GTAObject; _ped: Ped);
begin
  nativeInit(UINT64($B1FA61371AF7C4B7));
  nativePush64(UINT64(weaponObject));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function DOES_WEAPON_TAKE_WEAPON_COMPONENT(weaponHash, componentHash: Hash): BOOL;
begin
  nativeInit(UINT64($5CEE3DF569CECAB0));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(componentHash));
  exit(BOOL(nativeCall^));
end;

function GET_WEAPON_OBJECT_FROM_PED(_ped: Ped; p1: BOOL): GTAObject;
begin
  nativeInit(UINT64($CAE1DC9A0E22A16D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(p1));
  exit(GTAObject(nativeCall^));
end;

procedure GIVE_LOADOUT_TO_PED(_ped: Ped; loadoutHash: Hash);
begin
  nativeInit(UINT64($68F8BE6AF5CDF8A6));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(loadoutHash));
  nativeCall;
end;

procedure SET_PED_WEAPON_TINT_INDEX(_ped: Ped; weaponHash: Hash; tintIndex: cint);
begin
  nativeInit(UINT64($50969B9B89ED5738));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(tintIndex));
  nativeCall;
end;

function GET_PED_WEAPON_TINT_INDEX(_ped: Ped; weaponHash: Hash): cint;
begin
  nativeInit(UINT64($2B9EEDC07BD06B9F));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

procedure SET_WEAPON_OBJECT_TINT_INDEX(weapon: GTAObject; tintIndex: cint);
begin
  nativeInit(UINT64($F827589017D4E4A9));
  nativePush64(UINT64(weapon));
  nativePush64(UINT64(tintIndex));
  nativeCall;
end;

function GET_WEAPON_OBJECT_TINT_INDEX(weapon: GTAObject): cint;
begin
  nativeInit(UINT64($CD183314F7CD2E57));
  nativePush64(UINT64(weapon));
  exit(cint(nativeCall^));
end;

function GET_WEAPON_TINT_COUNT(weaponHash: Hash): cint;
begin
  nativeInit(UINT64($5DCF6C5CAB2E9BF7));
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

procedure SET_PED_WEAPON_COMPONENT_TINT_INDEX(_ped: Ped; weaponHash, camoComponentHash: Hash; colorIndex: cint);
begin
  nativeInit(UINT64($9FE5633880ECD8ED));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(camoComponentHash));
  nativePush64(UINT64(colorIndex));
  nativeCall;
end;

function GET_PED_WEAPON_COMPONENT_TINT_INDEX(_ped: Ped; weaponHash, camoComponentHash: Hash): cint;
begin
  nativeInit(UINT64($F0A60040BE558F2D));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(camoComponentHash));
  exit(cint(nativeCall^));
end;

procedure SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject: GTAObject; camoComponentHash: Hash; colorIndex: cint);
begin
  nativeInit(UINT64($5DA825A85D0EA6E6));
  nativePush64(UINT64(weaponObject));
  nativePush64(UINT64(camoComponentHash));
  nativePush64(UINT64(colorIndex));
  nativeCall;
end;

function GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(weaponObject: GTAObject; camoComponentHash: Hash): cint;
begin
  nativeInit(UINT64($B3EA4FEABF41464B));
  nativePush64(UINT64(weaponObject));
  nativePush64(UINT64(camoComponentHash));
  exit(cint(nativeCall^));
end;

function GET_PED_WEAPON_CAMO_INDEX(_ped: Ped; weaponHash: Hash): cint;
begin
  nativeInit(UINT64($A2C9AC24B4061285));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

procedure SET_WEAPON_OBJECT_CAMO_INDEX(weaponObject: GTAObject; p1: cint);
begin
  nativeInit(UINT64($977CA98939E82E4B));
  nativePush64(UINT64(weaponObject));
  nativePush64(UINT64(p1));
  nativeCall;
end;

function GET_WEAPON_HUD_STATS(weaponHash: Hash; outData: PAny): BOOL;
begin
  nativeInit(UINT64($D92C739EE34C9EBA));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(outData));
  exit(BOOL(nativeCall^));
end;

function GET_WEAPON_COMPONENT_HUD_STATS(componentHash: Hash; outData: PAny): BOOL;
begin
  nativeInit(UINT64($B3CAF387AE12E9F8));
  nativePush64(UINT64(componentHash));
  nativePush64(UINT64(outData));
  exit(BOOL(nativeCall^));
end;

function GET_WEAPON_DAMAGE(weaponHash, componentHash: Hash): cfloat;
begin
  nativeInit(UINT64($3133B907D8B32053));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(componentHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

function GET_WEAPON_CLIP_SIZE(weaponHash: Hash): cint;
begin
  nativeInit(UINT64($583BE370B1EC6EB4));
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

function GET_WEAPON_TIME_BETWEEN_SHOTS(weaponHash: Hash): cfloat;
begin
  nativeInit(UINT64($065D2AACAD8CF7A4));
  nativePush64(UINT64(weaponHash));
  exit(PVector3(nativeCall)^.x); // We need to do it this way, otherwise errors will occur
end;

procedure SET_PED_CHANCE_OF_FIRING_BLANKS(_ped: Ped; xBias, yBias: cfloat);
begin
  nativeInit(UINT64($8378627201D5497D));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@xBias)^);
  nativePush64(PUINT64(@yBias)^);
  nativeCall;
end;

function SET_PED_SHOOT_ORDNANCE_WEAPON(_ped: Ped; p1: cfloat): GTAObject;
begin
  nativeInit(UINT64($B4C8D77C80C0421E));
  nativePush64(UINT64(_ped));
  nativePush64(PUINT64(@p1)^);
  exit(GTAObject(nativeCall^));
end;

procedure REQUEST_WEAPON_HIGH_DETAIL_MODEL(weaponObject: Entity);
begin
  nativeInit(UINT64($48164DBB970AC3F0));
  nativePush64(UINT64(weaponObject));
  nativeCall;
end;

procedure _SET_WEAPON_PED_DAMAGE_MODIFIER(weapon: Hash; damageModifier: cfloat);
begin
  nativeInit(UINT64($1091922715B68DF0));
  nativePush64(UINT64(weapon));
  nativePush64(PUINT64(@damageModifier)^);
  nativeCall;
end;

procedure SET_WEAPON_DAMAGE_MODIFIER(weaponHash: Hash; damageMultiplier: cfloat);
begin
  nativeInit(UINT64($4757F00BC6323CFE));
  nativePush64(UINT64(weaponHash));
  nativePush64(PUINT64(@damageMultiplier)^);
  nativeCall;
end;

procedure SET_WEAPON_AOE_MODIFIER(weaponHash: Hash; multiplier: cfloat);
begin
  nativeInit(UINT64($4AE5AC8B852D642C));
  nativePush64(UINT64(weaponHash));
  nativePush64(PUINT64(@multiplier)^);
  nativeCall;
end;

procedure SET_WEAPON_EFFECT_DURATION_MODIFIER(p0: Hash; p1: cfloat);
begin
  nativeInit(UINT64($E6D2CEDD370FF98E));
  nativePush64(UINT64(p0));
  nativePush64(PUINT64(@p1)^);
  nativeCall;
end;

function IS_PED_CURRENT_WEAPON_SILENCED(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($65F0C5AE05943EC7));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function IS_FLASH_LIGHT_ON(_ped: Ped): BOOL;
begin
  nativeInit(UINT64($4B7620C47217126C));
  nativePush64(UINT64(_ped));
  exit(BOOL(nativeCall^));
end;

function SET_FLASH_LIGHT_FADE_DISTANCE(distance: cfloat): BOOL;
begin
  nativeInit(UINT64($CEA66DAD478CD39B));
  nativePush64(PUINT64(@distance)^);
  exit(BOOL(nativeCall^));
end;

procedure SET_FLASH_LIGHT_ACTIVE_HISTORY(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($988DB6FE9B3AC000));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_WEAPON_ANIMATION_OVERRIDE(_ped: Ped; animStyle: Hash);
begin
  nativeInit(UINT64($1055AC3A667F09D9));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(animStyle));
  nativeCall;
end;

function GET_WEAPON_DAMAGE_TYPE(weaponHash: Hash): cint;
begin
  nativeInit(UINT64($3BE0BB12D25FB305));
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

procedure SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(_ped: Ped);
begin
  nativeInit(UINT64($E4DCEC7FD5B739A5));
  nativePush64(UINT64(_ped));
  nativeCall;
end;

function CAN_USE_WEAPON_ON_PARACHUTE(weaponHash: Hash): BOOL;
begin
  nativeInit(UINT64($BC7BE5ABC0879F74));
  nativePush64(UINT64(weaponHash));
  exit(BOOL(nativeCall^));
end;

function CREATE_AIR_DEFENCE_SPHERE(x, y, z, radius, p4, p5, p6: cfloat; weaponHash: Hash): cint;
begin
  nativeInit(UINT64($91EF34584710BE99));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

function CREATE_AIR_DEFENCE_ANGLED_AREA(p0, p1, p2, p3, p4, p5, p6, p7, p8, radius: cfloat; weaponHash: Hash): cint;
begin
  nativeInit(UINT64($9DA58CDBF6BDBC08));
  nativePush64(PUINT64(@p0)^);
  nativePush64(PUINT64(@p1)^);
  nativePush64(PUINT64(@p2)^);
  nativePush64(PUINT64(@p3)^);
  nativePush64(PUINT64(@p4)^);
  nativePush64(PUINT64(@p5)^);
  nativePush64(PUINT64(@p6)^);
  nativePush64(PUINT64(@p7)^);
  nativePush64(PUINT64(@p8)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(weaponHash));
  exit(cint(nativeCall^));
end;

function REMOVE_AIR_DEFENCE_SPHERE(zoneId: cint): BOOL;
begin
  nativeInit(UINT64($0ABF535877897560));
  nativePush64(UINT64(zoneId));
  exit(BOOL(nativeCall^));
end;

procedure REMOVE_ALL_AIR_DEFENCE_SPHERES;
begin
  nativeInit(UINT64($1E45B34ADEBEE48E));
  nativeCall;
end;

procedure SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(plyr: Player; zoneId: cint; enable: BOOL);
begin
  nativeInit(UINT64($ECDC202B25E5CF48));
  nativePush64(UINT64(plyr));
  nativePush64(UINT64(zoneId));
  nativePush64(UINT64(enable));
  nativeCall;
end;

function IS_AIR_DEFENCE_SPHERE_IN_AREA(x, y, z, radius: cfloat; outZoneId: pcint): BOOL;
begin
  nativeInit(UINT64($DAB963831DBFD3F4));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativePush64(PUINT64(@radius)^);
  nativePush64(UINT64(outZoneId));
  exit(BOOL(nativeCall^));
end;

procedure FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(zoneId: cint; x, y, z: cfloat);
begin
  nativeInit(UINT64($44F1012B69313374));
  nativePush64(UINT64(zoneId));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  nativeCall;
end;

function DOES_AIR_DEFENCE_SPHERE_EXIST(zoneId: cint): BOOL;
begin
  nativeInit(UINT64($CD79A550999D7D4F));
  nativePush64(UINT64(zoneId));
  exit(BOOL(nativeCall^));
end;

procedure SET_CAN_PED_SELECT_INVENTORY_WEAPON(_ped: Ped; weaponHash: Hash; toggle: BOOL);
begin
  nativeInit(UINT64($B4771B9AAF4E68E4));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(weaponHash));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

procedure SET_CAN_PED_SELECT_ALL_WEAPONS(_ped: Ped; toggle: BOOL);
begin
  nativeInit(UINT64($EFF296097FF1E509));
  nativePush64(UINT64(_ped));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_ZONE_AT_COORDS(x, y, z: cfloat): cint;
begin
  nativeInit(UINT64($27040C25DE6CB2F4));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(cint(nativeCall^));
end;

function GET_ZONE_FROM_NAME_ID(zoneName: PChar): cint;
begin
  nativeInit(UINT64($98CD1D2934B76CC1));
  nativePush64(UINT64(zoneName));
  exit(cint(nativeCall^));
end;

function GET_ZONE_POPSCHEDULE(zoneId: cint): cint;
begin
  nativeInit(UINT64($4334BC40AA0CB4BB));
  nativePush64(UINT64(zoneId));
  exit(cint(nativeCall^));
end;

function GET_NAME_OF_ZONE(x, y, z: cfloat): PChar;
begin
  nativeInit(UINT64($CD90657D4C30E1CA));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(PChar(nativeCall^));
end;

procedure SET_ZONE_ENABLED(zoneId: cint; toggle: BOOL);
begin
  nativeInit(UINT64($BA5ECEEA120E5611));
  nativePush64(UINT64(zoneId));
  nativePush64(UINT64(toggle));
  nativeCall;
end;

function GET_ZONE_SCUMMINESS(zoneId: cint): cint;
begin
  nativeInit(UINT64($5F7B268D15BA0739));
  nativePush64(UINT64(zoneId));
  exit(cint(nativeCall^));
end;

procedure OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(scheduleId: cint; vehicleHash: Hash);
begin
  nativeInit(UINT64($5F7D596BAC2E7777));
  nativePush64(UINT64(scheduleId));
  nativePush64(UINT64(vehicleHash));
  nativeCall;
end;

procedure CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(scheduleId: cint);
begin
  nativeInit(UINT64($5C0DE367AA0D911C));
  nativePush64(UINT64(scheduleId));
  nativeCall;
end;

function GET_HASH_OF_MAP_AREA_AT_COORDS(x, y, z: cfloat): Hash;
begin
  nativeInit(UINT64($7EE64D51E8498728));
  nativePush64(PUINT64(@x)^);
  nativePush64(PUINT64(@y)^);
  nativePush64(PUINT64(@z)^);
  exit(Hash(nativeCall^));
end;

end.
